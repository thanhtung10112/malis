{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport * as constant from '@/utils/constant';\nimport _ from 'lodash';\nimport createExtraActions from '@/utils/createExtraActions';\nconst name = 'parameter';\nexport const resetState = createAction(`${name}/${constant.actionTypes.RESET_STATE}`);\nconst initialState = {\n  dataList: [],\n  detail: {\n    description: '',\n    is_default: false,\n    order: null,\n    parameter_id: '',\n    parameter_type_id: null,\n    // get from params in the url\n    properties: {},\n    descriptions: []\n  },\n  initDataForList: {\n    permissions: {\n      application_parameter: null,\n      developer_parameter: null,\n      simple_parameter: null\n    },\n    column_tooltips: {}\n  },\n  initDataForCE: {\n    attributes: '',\n    categories: [],\n    is_multilingual: false,\n    param_type_id: null,\n    param_type_raw_id: '',\n    param_type_specific_config: null,\n    parameters: {\n      PLLA: []\n    }\n  },\n  dialogState: {\n    open: false,\n    editMode: false,\n    loading: false,\n    historyLogs: []\n  },\n  parameterType: {\n    category: null,\n    id: null,\n    type_id: ''\n  }\n};\nconst parameterSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setData(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateEditMode(state, {\n      payload\n    }) {\n      state.dialogState.editMode = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      state.dialogState.historyLogs = payload;\n    },\n\n    setParameterType(state, {\n      payload\n    }) {\n      state.parameterType = payload;\n    },\n\n    setPermissions(state, {\n      payload\n    }) {\n      state.initDataForList.permissions = payload;\n    },\n\n    resetLocationDetail(state) {\n      state.detail = _objectSpread(_objectSpread({}, initialState.detail), {}, {\n        parameter_type_id: state.detail.parameter_type_id\n      });\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n}); // Actions\n\nexport const {\n  actions\n} = parameterSlice; // Extra actions\n\nexport const extraActions = createExtraActions(name, {\n  getList: constant.actionTypes.GET_LIST,\n  create: constant.actionTypes.CREATE,\n  update: constant.actionTypes.UPDATE,\n  executeOperation: constant.actionTypes.EXECUTE_OPERATION,\n  openCreateDialog: constant.actionTypes.OPEN_CREATE_DIALOG,\n  openUpdateDialog: constant.actionTypes.OPEN_UPDATE_DIALOG,\n  closeDialog: constant.actionTypes.CLOSE_DIALOG\n}); // Selectors\n\nexport const selectState = state => state[name];\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport const selectInitDataForCE = createSelector(selectState, state => state.initDataForCE);\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport const selectDetail = createSelector(selectState, state => state.detail);\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectInitParameter = createSelector(selectState, state => state.initDataForCE.parameters);\nexport const selectPermissions = createSelector(selectState, state => {\n  const {\n    category\n  } = state.parameterType;\n  const {\n    permissions\n  } = state.initDataForList;\n\n  if (_.isNull(permissions.application_parameter)) {\n    return null;\n  }\n\n  const getPermissionBaseOnName = name => permissions.application_parameter[name] && category === 2 || permissions.developer_parameter[name] && category === 3 || permissions.simple_parameter[name] && category === 1;\n\n  return {\n    view: getPermissionBaseOnName('view'),\n    create: getPermissionBaseOnName('create'),\n    edit: getPermissionBaseOnName('edit'),\n    delete: getPermissionBaseOnName('delete'),\n    disable_enable: getPermissionBaseOnName('disable_enable')\n  };\n});\nexport const selectViewPermission = createSelector(selectState, ({\n  initDataForList\n}) => {\n  var _permissions$applicat, _permissions$develope, _permissions$simple_p;\n\n  const {\n    permissions\n  } = initDataForList;\n  return ((_permissions$applicat = permissions.application_parameter) === null || _permissions$applicat === void 0 ? void 0 : _permissions$applicat.view) || ((_permissions$develope = permissions.developer_parameter) === null || _permissions$develope === void 0 ? void 0 : _permissions$develope.view) || ((_permissions$simple_p = permissions.simple_parameter) === null || _permissions$simple_p === void 0 ? void 0 : _permissions$simple_p.view);\n});\nexport default parameterSlice;","map":null,"metadata":{},"sourceType":"module"}