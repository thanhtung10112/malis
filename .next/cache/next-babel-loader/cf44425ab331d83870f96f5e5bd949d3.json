{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Job\\\\TransferList\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Card, CardHeader, Checkbox, List, ListItem, ListItemText, Grid, Button, ListItemIcon } from '@material-ui/core';\nimport { DragIndicator as DragIndicatorIcon } from '@material-ui/icons';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { DialogMain } from '@/components';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport useDraggableInPortal from '@/hooks/useDraggableInPortal';\nimport useStyles from './styles';\n\nfunction not(a, b) {\n  return a.filter(value => b.findIndex(item => value.id === item.id) === -1);\n}\n\nfunction reorder(list, startIndex, endIndex) {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n}\n\nfunction DialogTransferList(props) {\n  const {\n    titleLeft,\n    titleRight,\n    leftSideList,\n    rightSideList,\n    onSave,\n    onClose,\n    onChangeRightSideList,\n    onChangeLeftSideList\n  } = props,\n        rest = _objectWithoutProperties(props, [\"titleLeft\", \"titleRight\", \"leftSideList\", \"rightSideList\", \"onSave\", \"onClose\", \"onChangeRightSideList\", \"onChangeLeftSideList\"]);\n\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([]);\n  const renderDraggable = useDraggableInPortal();\n\n  const leftChecked = _.intersectionWith(leftSideList, checked, _.isEqual);\n\n  const rightChecked = _.intersectionWith(rightSideList, checked, _.isEqual);\n\n  const handleToggle = value => () => {\n    setChecked(prevState => immer(prevState, draftState => {\n      if (draftState.length <= 0) {\n        draftState.push(value);\n        return;\n      }\n\n      const currentIndex = checked.findIndex(item => item.id === value.id);\n\n      if (currentIndex === -1) {\n        draftState.push(value);\n      } else {\n        draftState.splice(currentIndex, 1);\n      }\n    }));\n  };\n\n  const isChecked = value => checked.findIndex(item => item.id === value.id) !== -1;\n\n  const numberOfChecked = items => {\n    if (checked.length === 0) {\n      return 0;\n    }\n\n    const intersectArray = _.intersectionWith(items, checked, _.isEqual);\n\n    return intersectArray.length;\n  };\n\n  const handleToggleAll = items => () => {\n    if (numberOfChecked(items) === items.length) {\n      setChecked([]);\n    } else {\n      setChecked(items);\n    }\n  };\n\n  const handleCheckedRight = () => {\n    const newRightList = rightSideList.concat(leftChecked);\n    const newLeftList = not(leftSideList, leftChecked);\n    onChangeRightSideList(newRightList);\n    onChangeLeftSideList(newLeftList);\n    setChecked(not(checked, leftChecked));\n  };\n\n  const handleCheckedLeft = () => {\n    const newLeftList = leftSideList.concat(rightChecked);\n    const newRightList = not(rightSideList, rightChecked);\n    onChangeRightSideList(newRightList);\n    onChangeLeftSideList(newLeftList);\n    setChecked(not(checked, rightChecked));\n  };\n\n  const onSaveList = () => {\n    onSave();\n  };\n\n  const onDragEndItem = result => {\n    if (result.source && result.destination) {\n      const items = reorder(rightSideList, result.source.index, result.destination.index);\n      onChangeRightSideList(items);\n    }\n  };\n\n  const handleClose = () => {\n    setChecked([]);\n    onClose();\n  };\n\n  const customList = (title, items) => /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      className: classes.cardHeader,\n      classes: {\n        title: classes.cardHeaderTitle,\n        subheader: classes.cardHeaderSubtitle\n      },\n      avatar: /*#__PURE__*/_jsxDEV(Checkbox, {\n        color: \"primary\",\n        onClick: handleToggleAll(items),\n        checked: numberOfChecked(items) === items.length && items.length !== 0,\n        indeterminate: numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0,\n        disabled: items.length === 0,\n        inputProps: {\n          'aria-label': 'all items selected'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this),\n      title: title,\n      subheader: `${numberOfChecked(items)}/${items.length} selected`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      className: classes.list,\n      dense: true,\n      component: \"div\",\n      role: \"list\",\n      children: [items.map(value => {\n        const labelId = `transfer-list-all-item-${value.id}-label`;\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          role: \"listitem\",\n          button: true,\n          onClick: handleToggle(value),\n          className: classes.itemList,\n          children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {\n              color: \"primary\",\n              checked: isChecked(value),\n              tabIndex: -1,\n              disableRipple: true,\n              inputProps: {\n                'aria-labelledby': labelId\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            id: labelId,\n            primary: `${value.user_id} (${value.first_name} ${value.last_name})`,\n            classes: {\n              primary: classes.itemText\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this)]\n        }, value.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(ListItem, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(DialogMain, _objectSpread(_objectSpread({}, rest), {}, {\n    onClose: handleClose,\n    onOk: onSaveList,\n    okText: \"Save\",\n    enterToOk: false,\n    classes: {\n      paper: classes.root\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      justify: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 5,\n        children: customList(titleLeft, leftSideList)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            size: \"small\",\n            className: classes.button,\n            onClick: handleCheckedRight,\n            disabled: leftChecked.length === 0,\n            \"aria-label\": \"move selected right\",\n            children: \">\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            size: \"small\",\n            className: classes.button,\n            onClick: handleCheckedLeft,\n            disabled: rightChecked.length === 0,\n            \"aria-label\": \"move selected left\",\n            children: \"<\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 5,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            className: classes.cardHeader,\n            classes: {\n              title: classes.cardHeaderTitle,\n              subheader: classes.cardHeaderSubtitle\n            },\n            avatar: /*#__PURE__*/_jsxDEV(Checkbox, {\n              color: \"primary\",\n              onClick: handleToggleAll(rightSideList),\n              checked: numberOfChecked(rightSideList) === rightSideList.length && rightSideList.length !== 0,\n              indeterminate: numberOfChecked(rightSideList) !== rightSideList.length && numberOfChecked(rightSideList) !== 0,\n              disabled: rightSideList.length === 0,\n              inputProps: {\n                'aria-label': 'all items selected'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 17\n            }, this),\n            title: titleRight,\n            subheader: `${numberOfChecked(rightSideList)}/${rightSideList.length} selected`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n            onDragEnd: onDragEndItem,\n            children: /*#__PURE__*/_jsxDEV(Droppable, {\n              droppableId: \"droppable\",\n              children: provided => /*#__PURE__*/_jsxDEV(List, _objectSpread(_objectSpread({\n                className: classes.list\n              }, provided.droppableProps), {}, {\n                ref: provided.innerRef,\n                dense: true,\n                component: \"div\",\n                role: \"list\",\n                children: [rightSideList.map((value, index) => {\n                  const labelId = `transfer-list-all-item-${value.id}-label`;\n                  return /*#__PURE__*/_jsxDEV(Draggable, {\n                    draggableId: value.id + '',\n                    index: index,\n                    children: renderDraggable(provided => /*#__PURE__*/_jsxDEV(ListItem, _objectSpread(_objectSpread({\n                      role: \"listitem\",\n                      button: true,\n                      onClick: handleToggle(value),\n                      className: classes.itemList,\n                      ref: provided.innerRef\n                    }, provided.draggableProps), {}, {\n                      children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                          color: \"primary\",\n                          checked: isChecked(value),\n                          tabIndex: -1,\n                          disableRipple: true,\n                          inputProps: {\n                            'aria-labelledby': labelId\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 268,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 267,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                        id: labelId,\n                        primary: `${value.user_id} (${value.first_name} ${value.last_name})`,\n                        classes: {\n                          primary: classes.itemText\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 276,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", _objectSpread(_objectSpread({}, provided.dragHandleProps), {}, {\n                        children: /*#__PURE__*/_jsxDEV(DragIndicatorIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 282,\n                          columnNumber: 33\n                        }, this)\n                      }), void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 281,\n                        columnNumber: 31\n                      }, this)]\n                    }), value.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 258,\n                      columnNumber: 29\n                    }, this))\n                  }, value.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 256,\n                    columnNumber: 25\n                  }, this);\n                }), provided.placeholder]\n              }), void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n\nexport default DialogTransferList;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Job/TransferList/index.tsx"],"names":["React","Card","CardHeader","Checkbox","List","ListItem","ListItemText","Grid","Button","ListItemIcon","DragIndicator","DragIndicatorIcon","DragDropContext","Droppable","Draggable","DialogMain","_","immer","useDraggableInPortal","useStyles","not","a","b","filter","value","findIndex","item","id","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","DialogTransferList","props","titleLeft","titleRight","leftSideList","rightSideList","onSave","onClose","onChangeRightSideList","onChangeLeftSideList","rest","classes","checked","setChecked","useState","renderDraggable","leftChecked","intersectionWith","isEqual","rightChecked","handleToggle","prevState","draftState","length","push","currentIndex","isChecked","numberOfChecked","items","intersectArray","handleToggleAll","handleCheckedRight","newRightList","concat","newLeftList","handleCheckedLeft","onSaveList","onDragEndItem","source","destination","index","handleClose","customList","title","cardHeader","cardHeaderTitle","subheader","cardHeaderSubtitle","map","labelId","itemList","user_id","first_name","last_name","primary","itemText","paper","root","button","provided","droppableProps","innerRef","draggableProps","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Card, CardHeader, Checkbox, List, ListItem, ListItemText, Grid, Button, ListItemIcon } from '@material-ui/core'\n\nimport { DragIndicator as DragIndicatorIcon } from '@material-ui/icons'\n\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\nimport { DialogMain } from '@/components'\n\nimport _ from 'lodash'\nimport immer from 'immer'\n\nimport useDraggableInPortal from '@/hooks/useDraggableInPortal'\nimport useStyles from './styles'\n\nfunction not(a: any[], b: any[]) {\n  return a.filter((value) => b.findIndex((item) => value.id === item.id) === -1)\n}\n\nfunction reorder<T>(list: T[], startIndex: number, endIndex: number) {\n  const result = Array.from(list)\n  const [removed] = result.splice(startIndex, 1)\n  result.splice(endIndex, 0, removed)\n\n  return result\n}\n\nexport interface Props {\n  leftSideList: any\n  rightSideList: any\n  titleLeft: string\n  titleRight: string\n  title: string\n  open: boolean\n  onSave(): void\n  onClose(): void\n  onChangeRightSideList(list): void\n  onChangeLeftSideList(list): void\n}\n\nfunction DialogTransferList(props: Props) {\n  const {\n    titleLeft,\n    titleRight,\n    leftSideList,\n    rightSideList,\n    onSave,\n    onClose,\n    onChangeRightSideList,\n    onChangeLeftSideList,\n    ...rest\n  } = props\n\n  const classes = useStyles()\n  const [checked, setChecked] = React.useState([])\n\n  const renderDraggable = useDraggableInPortal()\n\n  const leftChecked = _.intersectionWith(leftSideList, checked, _.isEqual)\n  const rightChecked = _.intersectionWith(rightSideList, checked, _.isEqual)\n\n  const handleToggle = (value) => () => {\n    setChecked((prevState) =>\n      immer(prevState, (draftState) => {\n        if (draftState.length <= 0) {\n          draftState.push(value)\n          return\n        }\n        const currentIndex = checked.findIndex((item) => item.id === value.id)\n        if (currentIndex === -1) {\n          draftState.push(value)\n        } else {\n          draftState.splice(currentIndex, 1)\n        }\n      })\n    )\n  }\n\n  const isChecked = (value) => checked.findIndex((item) => item.id === value.id) !== -1\n\n  const numberOfChecked = (items) => {\n    if (checked.length === 0) {\n      return 0\n    }\n    const intersectArray = _.intersectionWith(items, checked, _.isEqual)\n    return intersectArray.length\n  }\n\n  const handleToggleAll = (items) => () => {\n    if (numberOfChecked(items) === items.length) {\n      setChecked([])\n    } else {\n      setChecked(items)\n    }\n  }\n\n  const handleCheckedRight = () => {\n    const newRightList = rightSideList.concat(leftChecked)\n    const newLeftList = not(leftSideList, leftChecked)\n    onChangeRightSideList(newRightList)\n    onChangeLeftSideList(newLeftList)\n    setChecked(not(checked, leftChecked))\n  }\n\n  const handleCheckedLeft = () => {\n    const newLeftList = leftSideList.concat(rightChecked)\n    const newRightList = not(rightSideList, rightChecked)\n    onChangeRightSideList(newRightList)\n    onChangeLeftSideList(newLeftList)\n    setChecked(not(checked, rightChecked))\n  }\n\n  const onSaveList = () => {\n    onSave()\n  }\n\n  const onDragEndItem = (result) => {\n    if (result.source && result.destination) {\n      const items = reorder(rightSideList, result.source.index, result.destination.index)\n      onChangeRightSideList(items)\n    }\n  }\n\n  const handleClose = () => {\n    setChecked([])\n    onClose()\n  }\n\n  const customList = (title: string, items) => (\n    <Card>\n      <CardHeader\n        className={classes.cardHeader}\n        classes={{\n          title: classes.cardHeaderTitle,\n          subheader: classes.cardHeaderSubtitle\n        }}\n        avatar={\n          <Checkbox\n            color=\"primary\"\n            onClick={handleToggleAll(items)}\n            checked={numberOfChecked(items) === items.length && items.length !== 0}\n            indeterminate={numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0}\n            disabled={items.length === 0}\n            inputProps={{ 'aria-label': 'all items selected' }}\n          />\n        }\n        title={title}\n        subheader={`${numberOfChecked(items)}/${items.length} selected`}\n      />\n      <List className={classes.list} dense component=\"div\" role=\"list\">\n        {items.map((value) => {\n          const labelId = `transfer-list-all-item-${value.id}-label`\n\n          return (\n            <ListItem key={value.id} role=\"listitem\" button onClick={handleToggle(value)} className={classes.itemList}>\n              <ListItemIcon>\n                <Checkbox\n                  color=\"primary\"\n                  checked={isChecked(value)}\n                  tabIndex={-1}\n                  disableRipple\n                  inputProps={{ 'aria-labelledby': labelId }}\n                />\n              </ListItemIcon>\n              <ListItemText\n                id={labelId}\n                primary={`${value.user_id} (${value.first_name} ${value.last_name})`}\n                classes={{ primary: classes.itemText }}\n              />\n            </ListItem>\n          )\n        })}\n        <ListItem />\n      </List>\n    </Card>\n  )\n\n  return (\n    <DialogMain\n      {...rest}\n      onClose={handleClose}\n      onOk={onSaveList}\n      okText=\"Save\"\n      enterToOk={false}\n      classes={{ paper: classes.root }}\n    >\n      <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={5}>\n          {customList(titleLeft, leftSideList)}\n        </Grid>\n        <Grid item xs={2}>\n          <Grid container direction=\"column\" alignItems=\"center\">\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              className={classes.button}\n              onClick={handleCheckedRight}\n              disabled={leftChecked.length === 0}\n              aria-label=\"move selected right\"\n            >\n              &gt;\n            </Button>\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              className={classes.button}\n              onClick={handleCheckedLeft}\n              disabled={rightChecked.length === 0}\n              aria-label=\"move selected left\"\n            >\n              &lt;\n            </Button>\n          </Grid>\n        </Grid>\n        <Grid item xs={5}>\n          {/* {customList(titleRight, rightSideList)} */}\n          <Card>\n            <CardHeader\n              className={classes.cardHeader}\n              classes={{\n                title: classes.cardHeaderTitle,\n                subheader: classes.cardHeaderSubtitle\n              }}\n              avatar={\n                <Checkbox\n                  color=\"primary\"\n                  onClick={handleToggleAll(rightSideList)}\n                  checked={numberOfChecked(rightSideList) === rightSideList.length && rightSideList.length !== 0}\n                  indeterminate={\n                    numberOfChecked(rightSideList) !== rightSideList.length && numberOfChecked(rightSideList) !== 0\n                  }\n                  disabled={rightSideList.length === 0}\n                  inputProps={{ 'aria-label': 'all items selected' }}\n                />\n              }\n              title={titleRight}\n              subheader={`${numberOfChecked(rightSideList)}/${rightSideList.length} selected`}\n            />\n\n            <DragDropContext onDragEnd={onDragEndItem}>\n              <Droppable droppableId=\"droppable\">\n                {(provided) => (\n                  <List\n                    className={classes.list}\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                    dense\n                    component=\"div\"\n                    role=\"list\"\n                  >\n                    {rightSideList.map((value, index) => {\n                      const labelId = `transfer-list-all-item-${value.id}-label`\n\n                      return (\n                        <Draggable key={value.id} draggableId={value.id + ''} index={index}>\n                          {renderDraggable((provided) => (\n                            <ListItem\n                              key={value.id}\n                              role=\"listitem\"\n                              button\n                              onClick={handleToggle(value)}\n                              className={classes.itemList}\n                              ref={provided.innerRef}\n                              {...provided.draggableProps}\n                            >\n                              <ListItemIcon>\n                                <Checkbox\n                                  color=\"primary\"\n                                  checked={isChecked(value)}\n                                  tabIndex={-1}\n                                  disableRipple\n                                  inputProps={{ 'aria-labelledby': labelId }}\n                                />\n                              </ListItemIcon>\n                              <ListItemText\n                                id={labelId}\n                                primary={`${value.user_id} (${value.first_name} ${value.last_name})`}\n                                classes={{ primary: classes.itemText }}\n                              />\n                              <span {...provided.dragHandleProps}>\n                                <DragIndicatorIcon />\n                              </span>\n                            </ListItem>\n                          ))}\n                        </Draggable>\n                      )\n                    })}\n                    {provided.placeholder}\n                  </List>\n                )}\n              </Droppable>\n            </DragDropContext>\n          </Card>\n        </Grid>\n      </Grid>\n    </DialogMain>\n  )\n}\n\nexport default DialogTransferList\n"]},"metadata":{},"sourceType":"module"}