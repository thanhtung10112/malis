{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { useState } from 'react';\nimport { v1 as uuidv1 } from 'uuid';\nimport { AddCircle, Cancel } from '@material-ui/icons';\nimport { useTranslation } from 'next-i18next';\nimport { IconButton, ButtonGroup, Tooltip, Typography } from '@material-ui/core';\nimport * as _ from 'lodash';\nimport ColumnOptions from './ColumnOptions'; // import SortOptions from './SortOptions'\n// The main component (which is exported)\n\nfunction ColumnList(_ref) {\n  var columnOptions = _ref.columnOptions,\n      selectedColumns = _ref.selectedColumns,\n      disabled = _ref.disabled,\n      onRemove = _ref.onRemove,\n      onAdd = _ref.onAdd;\n\n  // trick for forcing rerender\n  var _useState = useState(0),\n      setValue = _useState[1];\n\n  var forceRerender = function forceRerender() {\n    setValue(function (value) {\n      return value + 1;\n    });\n  };\n\n  var _useTranslation = useTranslation(['advanced_filter', 'make_a_list']),\n      t = _useTranslation.t;\n\n  var selectedColumnsComponent = [];\n\n  var addNewColumn = function addNewColumn(condition_id) {\n    return function () {\n      var columnIndex = _.findIndex(selectedColumns, {\n        condition_id: condition_id\n      });\n\n      var selectedColumnsArr = selectedColumns.map(function (cond) {\n        return cond.id;\n      });\n      selectedColumns.splice(columnIndex + 1, 0, {\n        id: columnOptions.filter(function (colOpts) {\n          return !selectedColumnsArr.includes(colOpts.id);\n        })[0].id,\n        condition_id: uuidv1()\n      });\n      forceRerender();\n      onAdd();\n    };\n  };\n\n  var removeColumn = function removeColumn(condition_id) {\n    return function () {\n      var columnIndex = _.findIndex(selectedColumns, {\n        condition_id: condition_id\n      });\n\n      selectedColumns.splice(columnIndex, 1);\n      forceRerender();\n      onRemove();\n    };\n  };\n\n  var _iterator = _createForOfIteratorHelper(selectedColumns),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var columnData = _step.value;\n      selectedColumnsComponent.push( /*#__PURE__*/_jsxs(\"div\", {\n        style: {\n          marginBottom: '0.5rem'\n        },\n        children: [/*#__PURE__*/_jsx(ColumnOptions, {\n          columnOptions: columnOptions,\n          condition: columnData,\n          conditionData: selectedColumns,\n          disabled: disabled\n        }), disabled ? '' : /*#__PURE__*/_jsxs(ButtonGroup, {\n          style: {\n            marginLeft: '0.5rem'\n          },\n          size: \"small\",\n          children: [selectedColumns.length >= columnOptions.length ? '' : /*#__PURE__*/_jsx(Tooltip, {\n            title: t('make_a_list:tooltip.add_column'),\n            children: /*#__PURE__*/_jsx(IconButton, {\n              onClick: addNewColumn(columnData.condition_id),\n              children: /*#__PURE__*/_jsx(AddCircle, {\n                style: {\n                  color: '#7D90B2'\n                }\n              })\n            })\n          }), /*#__PURE__*/_jsx(Tooltip, {\n            title: t('make_a_list:tooltip.remove_column'),\n            children: /*#__PURE__*/_jsx(IconButton, {\n              onClick: removeColumn(columnData.condition_id),\n              children: /*#__PURE__*/_jsx(Cancel, {\n                style: {\n                  color: '#7D90B2'\n                }\n              })\n            })\n          })]\n        })]\n      }));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [selectedColumns.length === 0 ? /*#__PURE__*/_jsx(_Fragment, {\n      children: disabled ? /*#__PURE__*/_jsx(\"div\", {\n        style: {\n          marginLeft: '1.6rem'\n        },\n        children: /*#__PURE__*/_jsx(Typography, {\n          variant: \"subtitle1\",\n          gutterBottom: true,\n          color: \"textSecondary\",\n          children: t('advanced_filter:column_list.no_column_selected')\n        })\n      }) : /*#__PURE__*/_jsx(Tooltip, {\n        title: t('advanced_filter:column_list.add_sort_condition'),\n        children: /*#__PURE__*/_jsx(IconButton, {\n          onClick: addNewColumn(),\n          children: /*#__PURE__*/_jsx(AddCircle, {\n            style: {\n              color: '#7D90B2'\n            }\n          })\n        })\n      })\n    }) : '', selectedColumnsComponent]\n  });\n}\n\nexport default ColumnList; // // The main component (which is exported)\n// function SortConditionList ({ columnOptions, sortOptions, sortData: sortConditionData, disabled, hideSortOption = false }) {\n//   // trick for forcing rerender\n//   const [, setValue] = useState(0)\n//   const forceRerender = () => {\n//     setValue((value) => value + 1)\n//   }\n//   const sortConditionComponents = []\n//   const addNewSortCondition = (sortConditionId?) => () => {\n//     const sortConditionIndex = _.findIndex(sortConditionData, {\n//       id: sortConditionId\n//     })\n//     const selectedColumns = sortConditionData.map((cond) => cond.id)\n//     sortConditionData.splice(sortConditionIndex + 1, 0, {\n//       id: columnOptions.filter(\n//         (col) => !selectedColumns.includes(col.id)\n//       )[0].id,\n//       direction: sortOptions[0].value\n//     })\n//     forceRerender()\n//   }\n//   const removeSortCondition = (sortConditionId) => () => {\n//     const sortConditionIndex = _.findIndex(sortConditionData, {\n//       id: sortConditionId\n//     })\n//     sortConditionData.splice(sortConditionIndex, 1)\n//     forceRerender()\n//   }\n//   for (const sortCond of sortConditionData) {\n//     sortConditionComponents.push(\n//       <div style={{ marginBottom: '0.5rem' }}>\n//         <ColumnOptions\n//           columnOptions={columnOptions}\n//           condition={sortCond}\n//           conditionData={sortConditionData}\n//           disabled={disabled}\n//         />\n//         {!hideSortOption && <SortOptions sortOptions={sortOptions} condition={sortCond} disabled={disabled} />}\n//         {disabled ? '' : (\n//           <ButtonGroup\n//             style={{ marginLeft: '0.5rem' }}\n//             size=\"small\"\n//           >\n//             {sortConditionData.length >= columnOptions.length ? (\n//               ''\n//             ) : (\n//               <IconButton onClick={addNewSortCondition(sortCond.id)}>\n//                 <AddCircle />\n//               </IconButton>\n//             )}\n//             <IconButton onClick={removeSortCondition(sortCond.id)}>\n//               <Cancel />\n//             </IconButton>\n//           </ButtonGroup>\n//         )}\n//       </div>\n//     )\n//   }\n//   return (\n//     <>\n//       {sortConditionData.length === 0 ? (\n//         <>\n//           {\n//             disabled ? (\n//               <div style={{ marginLeft: '1.6rem' }}>\n//                 <Typography variant=\"subtitle1\" gutterBottom color=\"textSecondary\">\n//                   No sort conditions\n//                 </Typography>\n//               </div>\n//             ) : (\n//               <Tooltip title=\"Add sort condition\">\n//                 <IconButton onClick={addNewSortCondition()}>\n//                   <AddCircle />\n//                 </IconButton>\n//               </Tooltip>\n//             )\n//           }\n//         </>\n//       ) : (\n//         ''\n//       )}\n//       {sortConditionComponents}\n//     </>\n//   )\n// }\n// export default SortConditionList","map":null,"metadata":{},"sourceType":"module"}