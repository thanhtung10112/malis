{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction } from '@reduxjs/toolkit';\nimport { v1 as uuidv1 } from 'uuid';\nimport { actionTypes } from '@/utils/constant';\nexport const name = 'budget';\nexport const resetState = createAction(name + '/RESET_STATE');\nexport const dialogState = {\n  isOpen: false,\n  isEdit: false,\n  isLoading: false\n};\nexport const importDialogState = {\n  isOpen: false,\n  isLoading: false,\n  mode: 0 // 0 -> test, 1 -> write\n\n};\nexport const resultImportDialog = {\n  isOpen: false,\n  success: true,\n  result: '',\n  isLoading: false\n};\nexport const budgetDetail = {\n  job_id: null,\n  budget_id: '',\n  puco: null,\n  description: '',\n  amount: null,\n  currency: ''\n};\nexport const initDataForList = {\n  jobs: [],\n  puco_list: [],\n  selected_job: {\n    description: '',\n    value: null\n  },\n  user_puco: {\n    description: '',\n    value: null\n  },\n  permissions: {\n    budget: null\n  },\n  wiki_page: '',\n  column_tooltips: {}\n};\nexport const initDataForCreateEdit = {\n  puco_list: [],\n  user_currency: {\n    description: '',\n    value: null\n  },\n  user_job: {\n    description: '',\n    value: null\n  },\n  user_puco: {\n    description: '',\n    value: null\n  },\n  wiki_page: ''\n};\nconst remindData = {\n  open: false,\n  helpText: ''\n};\nexport const initialState = {\n  dataList: [],\n  dialogState,\n  importDialogState,\n  resultImportDialog,\n  budgetDetail,\n  initDataForList,\n  remindData,\n  initDataForCreateEdit,\n  budgetImportProcess: {\n    celery_id: '',\n    operation_id: '',\n    openDialogProcess: false\n  },\n  budgetSum: {\n    amount: 0,\n    budget_id: '',\n    currency_id: '',\n    description: 'Total of selected cost codes',\n    left_in_order: 0,\n    left_in_rfq: 0,\n    parameter_id: '',\n    used_in_order: 0,\n    used_in_rfq: 0,\n    id: uuidv1()\n  }\n};\nconst budget = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setOpenDialog(state, {\n      payload\n    }) {\n      state.dialogState.isOpen = payload;\n    },\n\n    setLoadingDialog(state, {\n      payload\n    }) {\n      state.dialogState.isLoading = payload;\n    },\n\n    setEditMode(state, action) {\n      state.dialogState.isEdit = action.payload;\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setInitDataForCreateEdit(state, {\n      payload\n    }) {\n      state.initDataForCreateEdit = payload;\n    },\n\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setUserValues(state, {\n      payload\n    }) {\n      if (payload.value === 'puco') {\n        state.initDataForList.user_puco = payload.option;\n      } else {\n        state.initDataForList.selected_job = payload.option;\n      }\n    },\n\n    setBudgetDetail(state, {\n      payload\n    }) {\n      state.budgetDetail = _objectSpread(_objectSpread({}, state.budgetDetail), payload);\n    },\n\n    setBudgetSum(state, {\n      payload\n    }) {\n      state.budgetSum.amount = payload.sum_amount;\n      state.budgetSum.used_in_rfq = payload.sum_used_in_rfq;\n      state.budgetSum.left_in_rfq = payload.sum_left_in_rfq;\n      state.budgetSum.used_in_order = payload.sum_used_in_order;\n      state.budgetSum.left_in_order = payload.sum_left_in_order;\n    },\n\n    setPermissions(state, {\n      payload\n    }) {\n      state.initDataForList.permissions.budget = payload;\n    },\n\n    setImportOpen(state, {\n      payload\n    }) {\n      state.importDialogState.isOpen = payload;\n    },\n\n    setImportLoading(state, {\n      payload\n    }) {\n      state.importDialogState.isLoading = payload;\n    },\n\n    setImportMode(state, {\n      payload\n    }) {\n      state.importDialogState.mode = payload;\n    },\n\n    setImportResult(state, {\n      payload\n    }) {\n      state.resultImportDialog = _objectSpread(_objectSpread({}, state.resultImportDialog), payload);\n    },\n\n    setOpenImportProcess(state, {\n      payload\n    }) {\n      state.budgetImportProcess.openDialogProcess = payload;\n    },\n\n    setCeleryId(state, {\n      payload\n    }) {\n      state.budgetImportProcess.celery_id = payload;\n    },\n\n    setOperationId(state, {\n      payload\n    }) {\n      state.budgetImportProcess.operation_id = payload;\n    },\n\n    setRemindData(state, {\n      payload\n    }) {\n      state.remindData = _objectSpread(_objectSpread({}, state.remindData), payload);\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n});\nexport const {\n  setOpenDialog,\n  setLoadingDialog,\n  setEditMode,\n  setInitDataForList,\n  setDataList,\n  setUserValues,\n  setBudgetDetail,\n  setInitDataForCreateEdit,\n  setBudgetSum,\n  setPermissions,\n  setImportOpen,\n  setImportLoading,\n  setImportResult,\n  setImportMode,\n  setOpenImportProcess,\n  setCeleryId,\n  setOperationId,\n  setRemindData\n} = budget.actions;\nexport const openUpdateDialog = createAction(name + '/OPEN_UPDATE_DIALOG');\nexport const closeDialog = createAction(name + '/CLOSE_DIALOG');\nexport const openCreateDialog = createAction(name + '/OPEN_CREATE_DIALOG');\nexport const getList = createAction(name + '/GET_LIST');\nexport const changeUserValue = createAction(name + '/CHANGE_USER_VALUE');\nexport const updateMultiple = createAction(name + '/' + actionTypes.UPDATE_MULTIPLE);\nexport const create = createAction(name + '/CREATE');\nexport const update = createAction(name + '/UPDATE');\nexport const remove = createAction(name + '/REMOVE');\nexport const importCostCode = createAction(name + '/IMPORT');\nexport const sendReportMail = createAction(name + '/SEND_REPORT_MAIL');\nexport const getRemindData = createAction(name + '/GET_REMIND_DATA'); // selector\n\nexport const selectDialogState = state => state.budget.dialogState;\nexport const selectUserJob = state => state.budget.initDataForList.selected_job;\nexport const selectUserPuco = state => state.budget.initDataForList.user_puco;\nexport const selectDataList = state => state.budget.dataList;\nexport const selectJobList = state => state.budget.initDataForList.jobs;\nexport const selectPucoList = state => state.budget.initDataForList.puco_list;\nexport const selectBudgetDetail = state => state.budget.budgetDetail;\nexport const selectInitDataCreateEdit = state => state.budget.initDataForCreateEdit;\nexport const selectBudgetSum = state => state.budget.budgetSum;\nexport const selectPermissions = state => state.budget.initDataForList.permissions.budget;\nexport const selectImportDialogState = state => state.budget.importDialogState;\nexport const selectImportResultDialog = state => state.budget.resultImportDialog;\nexport const selectImportDialogProcess = state => state.budget.budgetImportProcess;\nexport const selectRemindData = state => state.budget.remindData;\nexport const selectInitDataForCE = state => state.budget.initDataForCreateEdit;\nexport const selectInitDataForList = state => state.budget.initDataForList;\nexport default budget.reducer;","map":null,"metadata":{},"sourceType":"module"}