{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useMemo, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport useStyles from './styles';\nimport useDialogContext from '../Context/useDialogContext';\nimport { Grid, Tooltip } from '@material-ui/core';\nimport { MoreHoriz as MoreHorizIcon } from '@material-ui/icons';\nimport { AppTitle, DialogTransferList, TableMultilingualDescription, FormControllerAutocomplete, AppTextField, SectionTimezone, FormControllerTextField } from '@/components';\nimport { Unless } from 'react-if';\nimport parseHTML from 'html-react-parser';\nimport _ from 'lodash';\nimport AppNumber from '@/helper/AppNumber';\nimport { jobStore } from '@/store/reducers';\n\nfunction TabGeneral() {\n  var _jobForm$errors$peopl, _jobForm$errors$squad, _jobForm$errors$job_u;\n\n  var classes = useStyles();\n\n  var _useDialogContext = useDialogContext(),\n      isCreating = _useDialogContext.isCreating;\n\n  var jobForm = useFormContext();\n  var watchPeopleResponsible = jobForm.watch('people_responsible', []);\n  var watchSquadLeader = jobForm.watch('squad_leader', []);\n  var watchDrawingsResponsible = jobForm.watch('drawings_responsible', []);\n  var watchJobUsers = jobForm.watch('job_users', []);\n  var transformPeopleResponsible = watchPeopleResponsible.map(function (user) {\n    return user.user_id;\n  }).join(';');\n  var transformSquadLeader = watchSquadLeader.map(function (user) {\n    return user.user_id;\n  }).join(';');\n  var transformDrawingsResponsible = watchDrawingsResponsible.map(function (user) {\n    return user.user_id;\n  }).join(';');\n  var transformJobUsers = watchJobUsers.map(function (user) {\n    return user.user_id;\n  }).join(';');\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(jobStore.selectInitDataForCE),\n      tooltip = _useSelector.tooltip,\n      parameters = _useSelector.parameters,\n      erection_sites = _useSelector.erection_sites,\n      group_map = _useSelector.group_map;\n\n  var tooltipForJobId = parseHTML(tooltip);\n  var transferListState = useSelector(jobStore.selectTransferListState);\n  var keyMapping = useSelector(jobStore.selectKeyMapping);\n  var jobDetail = useSelector(jobStore.selectDetail);\n  var usersAvailableGroup = transferListState.userAvailableList;\n\n  var usersAvailable = _.differenceWith(usersAvailableGroup, transferListState.userGroup, _.isEqual);\n\n  var getTitleForTransferList = function getTitleForTransferList() {\n    switch (keyMapping) {\n      case 'people_responsible':\n        return 'Job Responsible (*)';\n\n      case 'squad_leader':\n        return 'Squad Leader (*)';\n\n      case 'drawings_responsible':\n        return 'Drawing Responsible';\n\n      case 'job_users':\n        return 'Access Group (*)';\n\n      default:\n        return 'Job Responsible (*)';\n    }\n  };\n\n  var titleForTransferList = useMemo(getTitleForTransferList, [keyMapping]);\n  useEffect(function () {\n    if (keyMapping) {\n      var usersGroupInJobDetail = jobForm.watch(keyMapping, []);\n      dispatch(jobStore.actions.setTransferListUserGroup(usersGroupInJobDetail));\n    }\n  }, [jobDetail, keyMapping]);\n\n  var onSaveTransferList = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var userGroup, jobUsersGroup;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              userGroup = transferListState.userGroup;\n\n              if (keyMapping !== 'job_users') {\n                jobUsersGroup = _.unionWith(watchJobUsers, userGroup, _.isEqual);\n                jobForm.setValue('job_users', jobUsersGroup);\n                jobForm.setValue(keyMapping, userGroup);\n              } else {\n                jobForm.setValue('job_users', userGroup);\n              } // clear error before submitting\n\n\n              _context.next = 4;\n              return jobForm.trigger([keyMapping, 'job_users']);\n\n            case 4:\n              dispatch(jobStore.actions.setOpenTransferList(false));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSaveTransferList() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var onChangeLeftSideList = function onChangeLeftSideList(list) {\n    dispatch(jobStore.actions.setTransferUserAvailableList(list));\n  };\n\n  var onChangeRightSideList = function onChangeRightSideList(list) {\n    dispatch(jobStore.actions.setTransferListUserGroup(list));\n  };\n\n  var onOpenTransferList = function onOpenTransferList(userKeyGroup, keyMapping) {\n    return function () {\n      dispatch(jobStore.sagaGetUserGroupMapping(userKeyGroup));\n      dispatch(jobStore.actions.setKeyMapping(keyMapping));\n    };\n  };\n\n  var onCloseTransferList = function onCloseTransferList() {\n    dispatch(jobStore.actions.closeTransferList());\n  };\n\n  var handleTransformJobId = function handleTransformJobId(event) {\n    var value = event.target.value;\n\n    if (AppNumber.isNumber(value)) {\n      var formatValue = _.padStart(value, 4, '0');\n\n      jobForm.setValue('job_id', formatValue);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 6,\n        children: [/*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsx(Tooltip, {\n              title: tooltipForJobId,\n              children: /*#__PURE__*/_jsx(FormControllerTextField, {\n                name: \"job_id\",\n                control: jobForm.control,\n                label: \"Job #\",\n                required: true,\n                disabled: !isCreating,\n                onBlur: handleTransformJobId\n              })\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n              name: \"language\",\n              control: jobForm.control,\n              options: parameters.PLLA,\n              renderOption: function renderOption(option) {\n                return \"\".concat(option.parameter_id, \" - \").concat(option.description);\n              },\n              label: \"Language\",\n              required: true\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n              name: \"equipment_type\",\n              control: jobForm.control,\n              options: parameters.EQTY,\n              label: \"Equipment Type\",\n              required: true,\n              renderOption: function renderOption(option) {\n                return \"\".concat(option.parameter_id, \" - \").concat(option.description);\n              }\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n              name: \"erection_site\",\n              control: jobForm.control,\n              options: erection_sites,\n              renderOption: function renderOption(option) {\n                return \"\".concat(option.location_id, \" - \").concat(option.name);\n              },\n              label: \"Erection Site\",\n              required: true\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          spacing: 2,\n          className: classes.section,\n          children: [/*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(AppTitle, {\n              label: \"Communication\"\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 11,\n            children: /*#__PURE__*/_jsx(AppTextField, {\n              label: \"Job Responsible\",\n              disabled: true,\n              required: true,\n              value: transformPeopleResponsible,\n              error: Boolean(jobForm.errors.people_responsible),\n              helperText: (_jobForm$errors$peopl = jobForm.errors.people_responsible) === null || _jobForm$errors$peopl === void 0 ? void 0 : _jobForm$errors$peopl.message,\n              InputLabelProps: {\n                shrink: Boolean(transformPeopleResponsible)\n              }\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 1,\n            children: /*#__PURE__*/_jsx(MoreHorizIcon, {\n              onClick: onOpenTransferList(group_map.job_responsible, 'people_responsible')\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 11,\n            children: /*#__PURE__*/_jsx(AppTextField, {\n              label: \"Coordinators\",\n              disabled: true,\n              required: true,\n              value: transformSquadLeader,\n              error: Boolean(jobForm.errors.squad_leader),\n              helperText: (_jobForm$errors$squad = jobForm.errors.squad_leader) === null || _jobForm$errors$squad === void 0 ? void 0 : _jobForm$errors$squad.message,\n              InputLabelProps: {\n                shrink: Boolean(transformSquadLeader)\n              }\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 1,\n            children: /*#__PURE__*/_jsx(MoreHorizIcon, {\n              onClick: onOpenTransferList(group_map.job_squad_leader, 'squad_leader')\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 11,\n            children: /*#__PURE__*/_jsx(AppTextField, {\n              label: \"Drawings Responsible\",\n              disabled: true,\n              value: transformDrawingsResponsible,\n              InputLabelProps: {\n                shrink: Boolean(transformDrawingsResponsible)\n              }\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 1,\n            children: /*#__PURE__*/_jsx(MoreHorizIcon, {\n              onClick: onOpenTransferList(group_map.job_drawing, 'drawings_responsible')\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          spacing: 2,\n          className: classes.section,\n          children: [/*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(AppTitle, {\n              label: \"Rights\"\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 11,\n            children: /*#__PURE__*/_jsx(AppTextField, {\n              label: \"Access Group\",\n              required: true,\n              disabled: true,\n              value: transformJobUsers,\n              error: Boolean(jobForm.errors.job_users),\n              helperText: (_jobForm$errors$job_u = jobForm.errors.job_users) === null || _jobForm$errors$job_u === void 0 ? void 0 : _jobForm$errors$job_u.message,\n              InputLabelProps: {\n                shrink: Boolean(transformJobUsers)\n              }\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 1,\n            children: /*#__PURE__*/_jsx(MoreHorizIcon, {\n              onClick: onOpenTransferList(group_map.job_all, 'job_users')\n            })\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 6,\n        children: [/*#__PURE__*/_jsx(AppTitle, {\n          label: \"Description\"\n        }), /*#__PURE__*/_jsx(TableMultilingualDescription, {\n          tableHeight: 315,\n          name: \"job_descriptions\",\n          editMode: !isCreating,\n          control: jobForm.control,\n          className: classes.section,\n          languageList: parameters.PLLA\n        })]\n      }), /*#__PURE__*/_jsx(Unless, {\n        condition: isCreating,\n        children: /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          style: {\n            padding: '0 12px'\n          },\n          children: /*#__PURE__*/_jsx(SectionTimezone, {\n            value: jobDetail,\n            style: {\n              padding: 0,\n              marginTop: 0\n            }\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsx(DialogTransferList, {\n      title: titleForTransferList,\n      open: transferListState.open,\n      leftSideList: usersAvailable,\n      rightSideList: transferListState.userGroup,\n      titleLeft: \"Available Users\",\n      titleRight: titleForTransferList,\n      onSave: onSaveTransferList,\n      onClose: onCloseTransferList,\n      onChangeLeftSideList: onChangeLeftSideList,\n      onChangeRightSideList: onChangeRightSideList\n    })]\n  });\n}\n\nexport default TabGeneral;","map":null,"metadata":{},"sourceType":"module"}