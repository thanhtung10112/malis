{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\pages\\\\items.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport useStyles from '@/styles/page/layout';\nimport { Link } from '@material-ui/core';\nimport { AppLayout, MakeAListIcon, EditIcon, DeleteIcon, CreateIcon, SaveIcon, AppAutocompleteStyled, useConfirm, AppAutocompleteStyledAsync, DataTableCellExpand, DataTableNumberField, DialogPart } from '@/components';\nimport { itemStore, commonStore, partStore } from '@/store/reducers';\nimport * as columnProperties from '@/utils/columnProperties';\nimport AppNumber from '@/helper/AppNumber';\nimport { itemMassFormat } from '@/utils/constant';\nimport * as yup from 'yup';\nimport clsx from 'clsx';\nimport immer from 'immer';\nimport _ from 'lodash';\nimport { unsaveDialogOptions } from '@/utils/constant';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nimport { isAssemblyByDpn } from '@/utils/isAssembly';\n\nfunction ItemsPage() {\n  const classes = useStyles();\n  const {\n    confirm\n  } = useConfirm();\n  const {\n    t\n  } = useTranslation('item');\n  const breadcrumbData = [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Drawings',\n    href: '/drawings'\n  }, {\n    label: 'Items Management',\n    href: '/items'\n  }];\n  const dispatch = useDispatch();\n  const permissions = useSelector(itemStore.selectPermissions);\n  const userDrawing = useSelector(commonStore.selectUserValueDrawing);\n  const userJob = useSelector(commonStore.selectUserValueJob);\n  const editRows = useSelector(commonStore.selectEditRows);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const currentLang = useSelector(commonStore.selectCurrentLanguage);\n  const dataList = useSelector(itemStore.selectDataList);\n  const {\n    jobs: jobOptions,\n    column_tooltips,\n    wiki_page\n  } = useSelector(itemStore.selectInitDataForList);\n  useEffect(() => {\n    return () => dispatch(commonStore.actions.resetUserValue());\n  }, []);\n  /**\n   * @param {DataForDropdown} option\n   */\n\n  const handleChangeUserDrawing = async (event, optionValue) => {\n    let result = '';\n\n    if (editRows.length > 0) {\n      result = await confirm(unsaveDialogOptions);\n    }\n\n    if (result !== 'cancel') {\n      dispatch(itemStore.sagaChangeUserDrawing({\n        optionValue,\n        confirm: result\n      }));\n    }\n  };\n\n  const handleOpenCreateDialog = () => {\n    dispatch(partStore.sagaOpenCreateDialog('item'));\n  };\n\n  const handleChangeUserJob = async (event, optionValue) => {\n    let result = '';\n\n    if (editRows.length > 0) {\n      result = await confirm(unsaveDialogOptions);\n    }\n\n    if (result !== 'cancel') {\n      dispatch(itemStore.sagaChangeUserJob({\n        optionValue,\n        confirm: result\n      }));\n    }\n  };\n\n  const handleDeleteItems = async () => {\n    const description = getMessageConfirm(t, 'item', selectedRows, 'delete');\n    const result = await confirm({\n      description\n    });\n\n    if (result === 'OK') {\n      const parts = _.map(selectedRows, partId => {\n        const {\n          dpn,\n          id\n        } = _.find(dataList, {\n          id: partId\n        });\n\n        return {\n          entity_id: dpn,\n          id\n        };\n      });\n\n      dispatch(itemStore.sagaRemove(parts));\n    }\n  };\n\n  const handleOpenUpdateDialog = id => () => {\n    dispatch(partStore.sagaOpenUpdateDialog({\n      id,\n      entity: 'item'\n    }));\n  };\n\n  const onChangeMass = (item_id_pk, value, field) => {\n    const newEditRows = immer(editRows, draft => {\n      const findIndex = _.findIndex(draft, {\n        item_id_pk\n      });\n\n      const valueFormat = AppNumber.convertToNumber(value, itemMassFormat);\n\n      if (findIndex > -1) {\n        draft[findIndex][field] = valueFormat;\n      } else {\n        draft.push({\n          item_id_pk,\n          [field]: valueFormat\n        });\n      }\n    });\n    dispatch(commonStore.actions.setEditRows(newEditRows));\n  };\n\n  const onSaveUpdateData = () => {\n    dispatch(commonStore.sagaUpdateMultiple({\n      entity: 'item'\n    }));\n  };\n\n  const handleOpenPartDialog = (id, dpn) => event => {\n    event.preventDefault();\n    const entity = isAssemblyByDpn(dpn) ? 'assembly' : 'item';\n    dispatch(partStore.sagaOpenUpdateDialog({\n      id,\n      entity\n    }));\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    description: column_tooltips.edit,\n    field: 'id',\n    headerName: 'Edit',\n\n    renderCell(params) {\n      return /*#__PURE__*/_jsxDEV(EditIcon, {\n        onClick: handleOpenUpdateDialog(params.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 16\n      }, this);\n    }\n\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.dpn,\n    field: 'dpn',\n    headerName: 'Item #',\n    flex: 0.25\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.descriptionsColumn(currentLang)), {}, {\n    description: column_tooltips.descriptions,\n    flex: 0.3\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.material_equiv,\n    field: 'material_equiv',\n    headerName: 'Material std',\n    flex: 0.2\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.manufacturer_equiv,\n    field: 'manufacturer_equiv',\n    headerName: 'Manufacturing std',\n    flex: 0.2\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.reference_dpn,\n    field: 'reference_dpn',\n    headerName: 'Part number',\n    flex: 0.25,\n\n    renderCell(params) {\n      const {\n        value,\n        row\n      } = params;\n      return /*#__PURE__*/_jsxDEV(Link, {\n        href: \"#\",\n        onClick: handleOpenPartDialog(row.id_ref, value),\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this);\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.rightColumn), columnProperties.editCell('Mass (kg)', permissions === null || permissions === void 0 ? void 0 : permissions.edit, column_tooltips.mass)), {}, {\n    field: 'mass',\n\n    renderCell(params) {\n      const value = AppNumber.format(params.value, itemMassFormat);\n      return /*#__PURE__*/_jsxDEV(DataTableCellExpand, {\n        value: value,\n        width: params.colDef.width\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 16\n      }, this);\n    },\n\n    cellClassName(params) {\n      return clsx({\n        [classes.mark]: editRows.some(row => row.item_id_pk === params.id && typeof row.mass !== 'undefined')\n      });\n    },\n\n    renderEditCell(params) {\n      return /*#__PURE__*/_jsxDEV(DataTableNumberField, {\n        params: params,\n        onChangeValue: onChangeMass,\n        decimalScale: itemMassFormat.precision,\n        fixedDecimalScale: itemMassFormat.precision,\n        rules: yup.number().nullable().required(t('validation_message.mass_required')).min(itemMassFormat.min, t('validation_message.mass_range')).max(itemMassFormat.max, t('validation_message.mass_range'))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this);\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.raw_unit,\n    field: 'raw_unit',\n    headerName: 'Unit'\n  })];\n  const buttons = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 18\n    }, this),\n    onClick: handleOpenCreateDialog,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create) || userJob.value < 0 || !(userJob === null || userJob === void 0 ? void 0 : userJob.value)\n  }, {\n    label: t('common:button.save'),\n    startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 18\n    }, this),\n    onClick: onSaveUpdateData,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.edit) || editRows.length === 0\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 18\n    }, this),\n    onClick: handleDeleteItems,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.delete) || selectedRows.length === 0 || userJob.value < 0\n  }, {\n    label: t('common:button.make_a_list'),\n    startIcon: /*#__PURE__*/_jsxDEV(MakeAListIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 18\n    }, this),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.make_a_list)\n  }];\n\n  const Dialogs = /*#__PURE__*/_jsxDEV(DialogPart, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 19\n  }, this);\n\n  const Options = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppAutocompleteStyled, {\n      className: classes.controlAutocomplete,\n      width: 200,\n      label: \"Jobs\",\n      options: jobOptions,\n      value: userJob,\n      renderOption: option => option.description,\n      primaryKeyOption: \"value\",\n      onChange: handleChangeUserJob\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppAutocompleteStyledAsync, {\n      disabled: !(userJob === null || userJob === void 0 ? void 0 : userJob.value),\n      width: 250,\n      label: \"Drawings\",\n      className: classes.controlAutocomplete,\n      compName: \"drawing_list\",\n      additionalData: {\n        limit_to_job: userJob.value,\n        include_all_drawings_option: true\n      },\n      onChange: handleChangeUserDrawing,\n      value: userDrawing,\n      defaultOptions: [commonStore.initialState.userValue.drawing]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    entity: \"item\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: wiki_page,\n    searchProps: {\n      width: 300\n    },\n    buttons: buttons,\n    Options: Options,\n    permissions: permissions,\n    Dialogs: Dialogs,\n    tableProps: {\n      columns: columns,\n      isCellEditable: params => !params.row.reference_dpn\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n}\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'item', 'make_a_list', 'advanced_filter', 'assembly', 'manufacturer']);\nexport default ItemsPage;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/pages/items.tsx"],"names":["useEffect","useDispatch","useSelector","useTranslation","useAuthMiddleware","useStyles","Link","AppLayout","MakeAListIcon","EditIcon","DeleteIcon","CreateIcon","SaveIcon","AppAutocompleteStyled","useConfirm","AppAutocompleteStyledAsync","DataTableCellExpand","DataTableNumberField","DialogPart","itemStore","commonStore","partStore","columnProperties","AppNumber","itemMassFormat","yup","clsx","immer","_","unsaveDialogOptions","getMessageConfirm","isAssemblyByDpn","ItemsPage","classes","confirm","t","breadcrumbData","label","href","dispatch","permissions","selectPermissions","userDrawing","selectUserValueDrawing","userJob","selectUserValueJob","editRows","selectEditRows","selectedRows","selectSelectedRows","currentLang","selectCurrentLanguage","dataList","selectDataList","jobs","jobOptions","column_tooltips","wiki_page","selectInitDataForList","actions","resetUserValue","handleChangeUserDrawing","event","optionValue","result","length","sagaChangeUserDrawing","handleOpenCreateDialog","sagaOpenCreateDialog","handleChangeUserJob","sagaChangeUserJob","handleDeleteItems","description","parts","map","partId","dpn","id","find","entity_id","sagaRemove","handleOpenUpdateDialog","sagaOpenUpdateDialog","entity","onChangeMass","item_id_pk","value","field","newEditRows","draft","findIndex","valueFormat","convertToNumber","push","setEditRows","onSaveUpdateData","sagaUpdateMultiple","handleOpenPartDialog","preventDefault","columns","defaultProperties","iconColumn","edit","headerName","renderCell","params","flex","descriptionsColumn","descriptions","material_equiv","manufacturer_equiv","reference_dpn","row","id_ref","rightColumn","editCell","mass","format","colDef","width","cellClassName","mark","some","renderEditCell","precision","number","nullable","required","min","max","centerColumn","raw_unit","buttons","startIcon","onClick","disabled","create","delete","make_a_list","Dialogs","Options","controlAutocomplete","option","limit_to_job","include_all_drawings_option","initialState","userValue","drawing","isCellEditable","getServerSideProps"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useTranslation } from 'next-i18next'\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware'\nimport useStyles from '@/styles/page/layout'\n\nimport { Link } from '@material-ui/core'\nimport {\n  AppLayout,\n  MakeAListIcon,\n  EditIcon,\n  DeleteIcon,\n  CreateIcon,\n  SaveIcon,\n  AppAutocompleteStyled,\n  useConfirm,\n  AppAutocompleteStyledAsync,\n  DataTableCellExpand,\n  DataTableNumberField,\n  DialogPart\n} from '@/components'\n\nimport { itemStore, commonStore, partStore } from '@/store/reducers'\n\nimport * as columnProperties from '@/utils/columnProperties'\nimport AppNumber from '@/helper/AppNumber'\nimport { itemMassFormat } from '@/utils/constant'\nimport * as yup from 'yup'\nimport clsx from 'clsx'\nimport immer from 'immer'\nimport _ from 'lodash'\nimport { unsaveDialogOptions } from '@/utils/constant'\nimport getMessageConfirm from '@/utils/getMessageConfirm'\nimport { isAssemblyByDpn } from '@/utils/isAssembly'\n\nimport type { GridColumns } from '@material-ui/data-grid'\nimport type { DataForDropdown, ParameterOption, PayloadOperation } from '@/types/Common'\n\nfunction ItemsPage() {\n  const classes = useStyles()\n  const { confirm } = useConfirm()\n  const { t } = useTranslation('item')\n\n  const breadcrumbData = [\n    { label: 'Home', href: '/' },\n    { label: 'Drawings', href: '/drawings' },\n    { label: 'Items Management', href: '/items' }\n  ]\n\n  const dispatch = useDispatch()\n  const permissions = useSelector(itemStore.selectPermissions)\n  const userDrawing = useSelector(commonStore.selectUserValueDrawing)\n  const userJob = useSelector(commonStore.selectUserValueJob)\n  const editRows = useSelector(commonStore.selectEditRows)\n  const selectedRows = useSelector(commonStore.selectSelectedRows)\n  const currentLang = useSelector(commonStore.selectCurrentLanguage)\n  const dataList = useSelector(itemStore.selectDataList)\n  const { jobs: jobOptions, column_tooltips, wiki_page } = useSelector(itemStore.selectInitDataForList)\n\n  useEffect(() => {\n    return () => dispatch(commonStore.actions.resetUserValue())\n  }, [])\n\n  /**\n   * @param {DataForDropdown} option\n   */\n  const handleChangeUserDrawing = async (event, optionValue: DataForDropdown) => {\n    let result = ''\n    if (editRows.length > 0) {\n      result = await confirm(unsaveDialogOptions)\n    }\n    if (result !== 'cancel') {\n      dispatch(\n        itemStore.sagaChangeUserDrawing({\n          optionValue,\n          confirm: result\n        })\n      )\n    }\n  }\n\n  const handleOpenCreateDialog = () => {\n    dispatch(partStore.sagaOpenCreateDialog('item'))\n  }\n\n  const handleChangeUserJob = async (event, optionValue: ParameterOption) => {\n    let result = ''\n    if (editRows.length > 0) {\n      result = await confirm(unsaveDialogOptions)\n    }\n    if (result !== 'cancel') {\n      dispatch(itemStore.sagaChangeUserJob({ optionValue, confirm: result }))\n    }\n  }\n\n  const handleDeleteItems = async () => {\n    const description = getMessageConfirm(t, 'item', selectedRows, 'delete')\n    const result = await confirm({\n      description\n    })\n    if (result === 'OK') {\n      const parts: PayloadOperation[] = _.map(selectedRows, (partId) => {\n        const { dpn, id } = _.find(dataList, { id: partId })\n        return { entity_id: dpn, id }\n      })\n      dispatch(itemStore.sagaRemove(parts))\n    }\n  }\n\n  const handleOpenUpdateDialog = (id: number) => () => {\n    dispatch(partStore.sagaOpenUpdateDialog({ id, entity: 'item' }))\n  }\n\n  const onChangeMass = (item_id_pk, value, field) => {\n    const newEditRows = immer(editRows, (draft) => {\n      const findIndex = _.findIndex(draft, { item_id_pk })\n      const valueFormat = AppNumber.convertToNumber(value, itemMassFormat)\n      if (findIndex > -1) {\n        draft[findIndex][field] = valueFormat\n      } else {\n        draft.push({ item_id_pk, [field]: valueFormat })\n      }\n    })\n    dispatch(commonStore.actions.setEditRows(newEditRows))\n  }\n\n  const onSaveUpdateData = () => {\n    dispatch(commonStore.sagaUpdateMultiple({ entity: 'item' }))\n  }\n\n  const handleOpenPartDialog = (id: number, dpn: string) => (event) => {\n    event.preventDefault()\n    const entity = isAssemblyByDpn(dpn) ? 'assembly' : 'item'\n    dispatch(partStore.sagaOpenUpdateDialog({ id, entity }))\n  }\n\n  const columns: GridColumns = [\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.iconColumn,\n      description: column_tooltips.edit,\n      field: 'id',\n      headerName: 'Edit',\n      renderCell(params) {\n        return <EditIcon onClick={handleOpenUpdateDialog(params.value as number)} />\n      }\n    },\n    {\n      ...columnProperties.defaultProperties,\n      description: column_tooltips.dpn,\n      field: 'dpn',\n      headerName: 'Item #',\n      flex: 0.25\n    },\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.descriptionsColumn(currentLang),\n      description: column_tooltips.descriptions,\n      flex: 0.3\n    },\n    {\n      ...columnProperties.defaultProperties,\n      description: column_tooltips.material_equiv,\n      field: 'material_equiv',\n      headerName: 'Material std',\n      flex: 0.2\n    },\n    {\n      ...columnProperties.defaultProperties,\n      description: column_tooltips.manufacturer_equiv,\n      field: 'manufacturer_equiv',\n      headerName: 'Manufacturing std',\n      flex: 0.2\n    },\n    {\n      ...columnProperties.defaultProperties,\n      description: column_tooltips.reference_dpn,\n      field: 'reference_dpn',\n      headerName: 'Part number',\n      flex: 0.25,\n      renderCell(params) {\n        const { value, row } = params\n        return (\n          <Link href=\"#\" onClick={handleOpenPartDialog(row.id_ref, value as string)}>\n            {value}\n          </Link>\n        )\n      }\n    },\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.rightColumn,\n      ...columnProperties.editCell('Mass (kg)', permissions?.edit, column_tooltips.mass),\n      field: 'mass',\n      renderCell(params) {\n        const value = AppNumber.format(params.value, itemMassFormat)\n        return <DataTableCellExpand value={value} width={params.colDef.width} />\n      },\n      cellClassName(params) {\n        return clsx({\n          [classes.mark]: editRows.some((row) => row.item_id_pk === params.id && typeof row.mass !== 'undefined')\n        })\n      },\n      renderEditCell(params) {\n        return (\n          <DataTableNumberField\n            params={params}\n            onChangeValue={onChangeMass}\n            decimalScale={itemMassFormat.precision}\n            fixedDecimalScale={itemMassFormat.precision}\n            rules={yup\n              .number()\n              .nullable()\n              .required(t('validation_message.mass_required'))\n              .min(itemMassFormat.min, t('validation_message.mass_range'))\n              .max(itemMassFormat.max, t('validation_message.mass_range'))}\n          />\n        )\n      }\n    },\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.centerColumn,\n      description: column_tooltips.raw_unit,\n      field: 'raw_unit',\n      headerName: 'Unit'\n    }\n  ]\n\n  const buttons = [\n    {\n      label: t('common:button.new'),\n      startIcon: <CreateIcon />,\n      onClick: handleOpenCreateDialog,\n      disabled: !permissions?.create || userJob.value < 0 || !userJob?.value\n    },\n    {\n      label: t('common:button.save'),\n      startIcon: <SaveIcon />,\n      onClick: onSaveUpdateData,\n      disabled: !permissions?.edit || editRows.length === 0\n    },\n    {\n      label: t('common:button.delete'),\n      startIcon: <DeleteIcon />,\n      onClick: handleDeleteItems,\n      disabled: !permissions?.delete || selectedRows.length === 0 || userJob.value < 0\n    },\n    {\n      label: t('common:button.make_a_list'),\n      startIcon: <MakeAListIcon />,\n      disabled: !permissions?.make_a_list\n    }\n  ]\n\n  const Dialogs = <DialogPart />\n\n  const Options = (\n    <>\n      <AppAutocompleteStyled\n        className={classes.controlAutocomplete}\n        width={200}\n        label=\"Jobs\"\n        options={jobOptions}\n        value={userJob}\n        renderOption={(option) => option.description}\n        primaryKeyOption=\"value\"\n        onChange={handleChangeUserJob}\n      />\n\n      <AppAutocompleteStyledAsync\n        disabled={!userJob?.value}\n        width={250}\n        label=\"Drawings\"\n        className={classes.controlAutocomplete}\n        compName=\"drawing_list\"\n        additionalData={{\n          limit_to_job: userJob.value,\n          include_all_drawings_option: true\n        }}\n        onChange={handleChangeUserDrawing}\n        value={userDrawing}\n        defaultOptions={[commonStore.initialState.userValue.drawing]}\n      />\n    </>\n  )\n\n  return (\n    <AppLayout\n      entity=\"item\"\n      breadcrumbs={breadcrumbData}\n      wikiPage={wiki_page}\n      searchProps={{ width: 300 }}\n      buttons={buttons}\n      Options={Options}\n      permissions={permissions}\n      Dialogs={Dialogs}\n      tableProps={{\n        columns: columns,\n        isCellEditable: (params) => !params.row.reference_dpn\n      }}\n    />\n  )\n}\n\nexport const getServerSideProps = useAuthMiddleware([\n  'common',\n  'item',\n  'make_a_list',\n  'advanced_filter',\n  'assembly',\n  'manufacturer'\n])\n\nexport default ItemsPage\n"]},"metadata":{},"sourceType":"module"}