{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\AdvancedFilter\\\\ColumnList\\\\ColumnOptions.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { FormControl, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport * as _ from 'lodash'; // column name and sort condition DD and value fields\n\nfunction ColumnOptions({\n  columnOptions,\n  condition: currentCondition,\n  conditionData,\n  disabled\n}) {\n  // trick for forcing rerender\n  const {\n    1: setValue\n  } = useState(0);\n\n  const forceRerender = () => {\n    setValue(value => value + 1);\n  };\n\n  const filterColumnOptions = (options, state) => {\n    const selectedColumns = conditionData.map(cond => cond.id);\n\n    const new_options = _.filter(options, op => {\n      var _op$id, _op$description;\n\n      return !selectedColumns.includes(op.id) && (((_op$id = op.id) === null || _op$id === void 0 ? void 0 : _op$id.toLowerCase().includes(state.inputValue.toLowerCase())) || ((_op$description = op.description) === null || _op$description === void 0 ? void 0 : _op$description.toLowerCase().includes(state.inputValue.toLowerCase())));\n    });\n\n    return new_options;\n  };\n\n  const onSelectedColumnChange = selectedColumn => {\n    currentCondition.id = selectedColumn.id;\n    forceRerender();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      style: {\n        marginRight: '0.5rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        options: columnOptions,\n        value: _.find(columnOptions, {\n          id: currentCondition.id\n        }),\n        getOptionLabel: option => option.description // getOptionSelected={(option) => option.}\n        ,\n        style: {\n          width: 250\n        },\n        disableClearable: true,\n        filterOptions: (options, state) => filterColumnOptions(options, state),\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n          variant: \"outlined\",\n          size: \"small\"\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 36\n        }, this),\n        onChange: (e, selectedColumn) => onSelectedColumnChange(selectedColumn),\n        disabled: disabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\nexport default ColumnOptions;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/AdvancedFilter/ColumnList/ColumnOptions.tsx"],"names":["useState","FormControl","TextField","Autocomplete","_","ColumnOptions","columnOptions","condition","currentCondition","conditionData","disabled","setValue","forceRerender","value","filterColumnOptions","options","state","selectedColumns","map","cond","id","new_options","filter","op","includes","toLowerCase","inputValue","description","onSelectedColumnChange","selectedColumn","marginRight","find","option","width","params","e"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,mBAAvC;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB,C,CAEA;;AACA,SAASC,aAAT,CAAuB;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,SAAS,EAAEC,gBAA5B;AAA8CC,EAAAA,aAA9C;AAA6DC,EAAAA;AAA7D,CAAvB,EAAgG;AAC9F;AACA,QAAM;AAAA,OAAGC;AAAH,MAAeX,QAAQ,CAAC,CAAD,CAA7B;;AACA,QAAMY,aAAa,GAAG,MAAM;AAC1BD,IAAAA,QAAQ,CAAEE,KAAD,IAAWA,KAAK,GAAG,CAApB,CAAR;AACD,GAFD;;AAIA,QAAMC,mBAAmB,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC9C,UAAMC,eAAe,GAAGR,aAAa,CAACS,GAAd,CAAmBC,IAAD,IAAUA,IAAI,CAACC,EAAjC,CAAxB;;AACA,UAAMC,WAAW,GAAGjB,CAAC,CAACkB,MAAF,CAASP,OAAT,EAAmBQ,EAAD,IAAQ;AAAA;;AAC5C,aACE,CAACN,eAAe,CAACO,QAAhB,CAAyBD,EAAE,CAACH,EAA5B,CAAD,KACC,WAAAG,EAAE,CAACH,EAAH,kDAAOK,WAAP,GAAqBD,QAArB,CAA8BR,KAAK,CAACU,UAAN,CAAiBD,WAAjB,EAA9B,0BACCF,EAAE,CAACI,WADJ,oDACC,gBAAgBF,WAAhB,GAA8BD,QAA9B,CAAuCR,KAAK,CAACU,UAAN,CAAiBD,WAAjB,EAAvC,CADD,CADD,CADF;AAKD,KANmB,CAApB;;AAOA,WAAOJ,WAAP;AACD,GAVD;;AAYA,QAAMO,sBAAsB,GAAIC,cAAD,IAAoB;AACjDrB,IAAAA,gBAAgB,CAACY,EAAjB,GAAsBS,cAAc,CAACT,EAArC;AACAR,IAAAA,aAAa;AACd,GAHD;;AAKA,sBACE;AAAA,2BACE,QAAC,WAAD;AAAa,MAAA,KAAK,EAAE;AAAEkB,QAAAA,WAAW,EAAE;AAAf,OAApB;AAAA,6BACE,QAAC,YAAD;AACE,QAAA,OAAO,EAAExB,aADX;AAEE,QAAA,KAAK,EAAEF,CAAC,CAAC2B,IAAF,CAAOzB,aAAP,EAAsB;AAC3Bc,UAAAA,EAAE,EAAEZ,gBAAgB,CAACY;AADM,SAAtB,CAFT;AAKE,QAAA,cAAc,EAAGY,MAAD,IAAYA,MAAM,CAACL,WALrC,CAME;AANF;AAOE,QAAA,KAAK,EAAE;AAAEM,UAAAA,KAAK,EAAE;AAAT,SAPT;AAQE,QAAA,gBAAgB,MARlB;AASE,QAAA,aAAa,EAAE,CAAClB,OAAD,EAAUC,KAAV,KAAoBF,mBAAmB,CAACC,OAAD,EAAUC,KAAV,CATxD;AAUE,QAAA,WAAW,EAAGkB,MAAD,iBAAY,QAAC,SAAD,kCAAeA,MAAf;AAAuB,UAAA,OAAO,EAAC,UAA/B;AAA0C,UAAA,IAAI,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAV3B;AAWE,QAAA,QAAQ,EAAE,CAACC,CAAD,EAAIN,cAAJ,KAAuBD,sBAAsB,CAACC,cAAD,CAXzD;AAYE,QAAA,QAAQ,EAAEnB;AAZZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAoBD;;AAED,eAAeL,aAAf","sourcesContent":["import { useState } from 'react'\n\nimport { FormControl, TextField } from '@material-ui/core'\n\nimport { Autocomplete } from '@material-ui/lab'\n\nimport * as _ from 'lodash'\n\n// column name and sort condition DD and value fields\nfunction ColumnOptions({ columnOptions, condition: currentCondition, conditionData, disabled }) {\n  // trick for forcing rerender\n  const [, setValue] = useState(0)\n  const forceRerender = () => {\n    setValue((value) => value + 1)\n  }\n\n  const filterColumnOptions = (options, state) => {\n    const selectedColumns = conditionData.map((cond) => cond.id)\n    const new_options = _.filter(options, (op) => {\n      return (\n        !selectedColumns.includes(op.id) &&\n        (op.id?.toLowerCase().includes(state.inputValue.toLowerCase()) ||\n          op.description?.toLowerCase().includes(state.inputValue.toLowerCase()))\n      )\n    })\n    return new_options\n  }\n\n  const onSelectedColumnChange = (selectedColumn) => {\n    currentCondition.id = selectedColumn.id\n    forceRerender()\n  }\n\n  return (\n    <>\n      <FormControl style={{ marginRight: '0.5rem' }}>\n        <Autocomplete\n          options={columnOptions}\n          value={_.find(columnOptions, {\n            id: currentCondition.id\n          })}\n          getOptionLabel={(option) => option.description}\n          // getOptionSelected={(option) => option.}\n          style={{ width: 250 }}\n          disableClearable\n          filterOptions={(options, state) => filterColumnOptions(options, state)}\n          renderInput={(params) => <TextField {...params} variant=\"outlined\" size=\"small\" />}\n          onChange={(e, selectedColumn) => onSelectedColumnChange(selectedColumn)}\n          disabled={disabled}\n        />\n      </FormControl>\n    </>\n  )\n}\n\nexport default ColumnOptions\n"]},"metadata":{},"sourceType":"module"}