{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, put, putResolve } from 'redux-saga/effects';\nimport { select, call, all } from 'typed-redux-saga';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport groupApi from '@/apis/group.api';\nimport { advancedFilterActions, commonStore, groupStore } from '@/store/reducers';\n\nfunction* fetchInitDataForList() {\n  const data = yield call(groupApi.getInitDataForList);\n  yield put(groupStore.actions.setInitDataForList(data));\n}\n\nfunction* fetchList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData)\n  });\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(groupApi.getList, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(groupStore.actions.setDataList(data.group_list));\n}\n\nfunction* getGroupList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForList);\n    const permissions = yield* select(groupStore.selectPermissions);\n\n    if (permissions.view) {\n      yield call(fetchList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* createGroup({\n  payload\n}) {\n  yield put(groupStore.actions.setDialogStateLoading(true));\n\n  try {\n    yield call(fetchGroupInitDataForCE);\n    const {\n      message\n    } = yield call(groupApi.create, payload);\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(groupStore.actions.resetDetail())]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(groupStore.actions.setDialogStateLoading(false));\n}\n\nfunction* fetchGroupInitDataForCE() {\n  const data = yield call(groupApi.getInitDataForCE);\n  yield put(groupStore.actions.setInitDataForCE(data));\n}\n\nfunction* openGroupCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchGroupInitDataForCE);\n    yield put(groupStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* openUpdateDialog({\n  payload: id\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchGroupInitDataForCE);\n    const {\n      group\n    } = yield call(groupApi.getDetail, id);\n    yield put(groupStore.actions.setDetail(group));\n    yield put(groupStore.actions.setDialogState({\n      open: true,\n      editMode: true\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* updateGroup({\n  payload\n}) {\n  yield put(groupStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      id,\n      formData\n    } = payload;\n    const {\n      message\n    } = yield call(groupApi.update, id, formData);\n    yield call(closeGroupDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(groupStore.actions.setDialogStateLoading(false));\n}\n\nfunction* getGroupPermissions() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForList);\n    const data = yield call(groupApi.getPermissionsList);\n    yield put(groupStore.actions.setGroupPermissions(data));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* updateGroupPermissions({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      message\n    } = yield call(groupApi.updatePermissionsList, payload);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* closeGroupDialog() {\n  try {\n    yield putResolve(groupStore.actions.setDialogStateOpen(false));\n    yield call(getGroupList);\n    yield put(groupStore.actions.resetDetail());\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\n\nfunction* groupSaga() {\n  yield takeEvery(groupStore.sagaGetList, getGroupList);\n  yield takeEvery(groupStore.sagaCreate, createGroup);\n  yield takeEvery(groupStore.sagaOpenUpdateDialog, openUpdateDialog);\n  yield takeEvery(groupStore.sagaUpdate, updateGroup);\n  yield takeEvery(groupStore.sagaCloseDialog, closeGroupDialog);\n  yield takeEvery(groupStore.sagaOpenCreateDialog, openGroupCreateDialog);\n  yield takeEvery(groupStore.sagaGetGroupPermissions, getGroupPermissions);\n  yield takeEvery(groupStore.sagaUpdateGroupPermissions, updateGroupPermissions);\n}\n\nexport default groupSaga;","map":null,"metadata":{},"sourceType":"module"}