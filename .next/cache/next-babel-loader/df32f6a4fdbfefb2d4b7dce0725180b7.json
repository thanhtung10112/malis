{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Part\\\\Assembly\\\\TabGeneral.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useFormContext } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Grid } from '@material-ui/core';\nimport { TableMultilingualDescription, AppAutocompleteAsync, FormControllerAutocomplete, FormControllerTextField, SectionTimezone, AppAutocomplete, DropdownIcon } from '@/components';\nimport { Unless } from 'react-if';\nimport _ from 'lodash';\nimport assemblyApi from '@/apis/assembly.api';\nimport AppNumber from '@/helper/AppNumber';\nimport { partStore, commonStore } from '@/store/reducers';\n\nvar TabGeneral = function TabGeneral() {\n  _s();\n\n  var _assemblyForm$errors$, _assemblyForm$errors$2;\n\n  var assemblyForm = useFormContext();\n  var formAssemblyData = assemblyForm.getValues();\n  var watchId = assemblyForm.watch('id', null);\n  var watchDrawingId = assemblyForm.watch('drawing_id', null);\n\n  var isCreating = _.isNil(watchId);\n\n  var dispatch = useDispatch();\n  var parameters = useSelector(partStore.selectParameters);\n  var entity = useSelector(commonStore.selectEntity);\n  var userJob = useSelector(commonStore.selectUserValueJob);\n\n  var handleChangeDrawingId = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event, optionValue) {\n      var _yield$assemblyApi$ge, generated_code;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(partStore.actions.setPartLoading(true));\n              assemblyForm.setValue('drawing_id', optionValue);\n              _context.prev = 2;\n              _context.next = 5;\n              return assemblyApi.getGenerateCode(optionValue.value);\n\n            case 5:\n              _yield$assemblyApi$ge = _context.sent;\n              generated_code = _yield$assemblyApi$ge.generated_code;\n              assemblyForm.setValue('dpn', generated_code);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](2);\n              console.error('error', '>>>', _context.t0);\n\n            case 13:\n              dispatch(partStore.actions.setPartLoading(false));\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 10]]);\n    }));\n\n    return function handleChangeDrawingId(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleBlur = function handleBlur(event) {\n    var value = event.target.value;\n\n    if (AppNumber.isNumber(value) && AppNumber.isPositiveNumber(value)) {\n      var formatValue = 'G' + value.padStart(3, '0');\n      assemblyForm.setValue('dpn', formatValue);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(AppAutocomplete, {\n            helperText: (_assemblyForm$errors$ = assemblyForm.errors.job_id) === null || _assemblyForm$errors$ === void 0 ? void 0 : _assemblyForm$errors$.message,\n            error: Boolean(assemblyForm.errors.job_id),\n            value: userJob,\n            popupIcon: null,\n            disabled: true,\n            label: \"Job\",\n            required: true,\n            primaryKeyOption: \"value\",\n            options: [],\n            renderOption: function renderOption(option) {\n              return option.description;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(AppAutocompleteAsync, {\n            popupIcon: entity === 'drawing' ? null : /*#__PURE__*/_jsxDEV(DropdownIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 56\n            }, _this),\n            helperText: (_assemblyForm$errors$2 = assemblyForm.errors.drawing_id) === null || _assemblyForm$errors$2 === void 0 ? void 0 : _assemblyForm$errors$2.message,\n            error: Boolean(assemblyForm.errors.drawing_id),\n            disabled: !isCreating || entity === 'drawing',\n            value: watchDrawingId,\n            compName: \"drawing_list\",\n            additionalData: {\n              limit_to_job: userJob.value\n            },\n            required: true,\n            label: \"Drawing #\",\n            onChange: handleChangeDrawingId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControllerTextField, {\n            disabled: !isCreating,\n            control: assemblyForm.control,\n            label: \"Assembly #\",\n            required: true,\n            name: \"dpn\",\n            onBlur: handleBlur\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControllerAutocomplete, {\n            control: assemblyForm.control,\n            label: \"Unit\",\n            name: \"unit\",\n            options: parameters.UNIT,\n            primaryKeyOption: \"value\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Unless, {\n          condition: isCreating,\n          children: /*#__PURE__*/_jsxDEV(SectionTimezone, {\n            value: formAssemblyData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(TableMultilingualDescription, {\n        languageList: parameters.PLLA,\n        editMode: !isCreating,\n        name: \"descriptions\",\n        tableHeight: 280,\n        control: assemblyForm.control,\n        copyable: true,\n        copyDialogProps: {\n          checkboxesToSelect: [{\n            label: 'Drawing',\n            value: 'drawing_list',\n            entity: 'drawings'\n          }, {\n            label: 'Item/Assembly',\n            value: 'part_list',\n            entity: 'parts',\n            \"default\": true\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(TabGeneral, \"fJjceCEe3jp3kQSDnJSz9RKnVHU=\", false, function () {\n  return [useFormContext, useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = TabGeneral;\nexport default TabGeneral;\n\nvar _c;\n\n$RefreshReg$(_c, \"TabGeneral\");","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Part/Assembly/TabGeneral.tsx"],"names":["useFormContext","useSelector","useDispatch","Grid","TableMultilingualDescription","AppAutocompleteAsync","FormControllerAutocomplete","FormControllerTextField","SectionTimezone","AppAutocomplete","DropdownIcon","Unless","_","assemblyApi","AppNumber","partStore","commonStore","TabGeneral","assemblyForm","formAssemblyData","getValues","watchId","watch","watchDrawingId","isCreating","isNil","dispatch","parameters","selectParameters","entity","selectEntity","userJob","selectUserValueJob","handleChangeDrawingId","event","optionValue","actions","setPartLoading","setValue","getGenerateCode","value","generated_code","console","error","handleBlur","target","isNumber","isPositiveNumber","formatValue","padStart","errors","job_id","message","Boolean","option","description","drawing_id","limit_to_job","control","UNIT","PLLA","checkboxesToSelect","label"],"mappings":"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","sourcesContent":["import { useFormContext } from 'react-hook-form'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Grid } from '@material-ui/core'\nimport {\n  TableMultilingualDescription,\n  AppAutocompleteAsync,\n  FormControllerAutocomplete,\n  FormControllerTextField,\n  SectionTimezone,\n  AppAutocomplete,\n  DropdownIcon\n} from '@/components'\nimport { Unless } from 'react-if'\n\nimport _ from 'lodash'\nimport assemblyApi from '@/apis/assembly.api'\nimport AppNumber from '@/helper/AppNumber'\nimport { partStore, commonStore } from '@/store/reducers'\n\nimport type { AssemblyDetail } from '@/types/Assembly'\nimport type { DataForDropdown } from '@/types/Common'\n\nconst TabGeneral = () => {\n  const assemblyForm = useFormContext<AssemblyDetail>()\n  const formAssemblyData = assemblyForm.getValues()\n  const watchId = assemblyForm.watch('id', null)\n  const watchDrawingId = assemblyForm.watch('drawing_id', null)\n\n  const isCreating = _.isNil(watchId)\n\n  const dispatch = useDispatch()\n  const parameters = useSelector(partStore.selectParameters)\n  const entity = useSelector(commonStore.selectEntity)\n  const userJob = useSelector(commonStore.selectUserValueJob)\n\n  const handleChangeDrawingId = async (event, optionValue: DataForDropdown) => {\n    dispatch(partStore.actions.setPartLoading(true))\n    assemblyForm.setValue('drawing_id', optionValue)\n    try {\n      const { generated_code } = await assemblyApi.getGenerateCode(optionValue.value)\n      assemblyForm.setValue('dpn', generated_code)\n    } catch (error) {\n      console.error('error', '>>>', error)\n    }\n    dispatch(partStore.actions.setPartLoading(false))\n  }\n\n  const handleBlur = (event) => {\n    const { value } = event.target\n    if (AppNumber.isNumber(value) && AppNumber.isPositiveNumber(value)) {\n      const formatValue = 'G' + value.padStart(3, '0')\n      assemblyForm.setValue('dpn', formatValue)\n    }\n  }\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={6}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <AppAutocomplete\n              helperText={assemblyForm.errors.job_id?.message}\n              error={Boolean(assemblyForm.errors.job_id)}\n              value={userJob}\n              popupIcon={null}\n              disabled\n              label=\"Job\"\n              required\n              primaryKeyOption=\"value\"\n              options={[]}\n              renderOption={(option) => option.description}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <AppAutocompleteAsync\n              popupIcon={entity === 'drawing' ? null : <DropdownIcon />}\n              helperText={assemblyForm.errors.drawing_id?.message}\n              error={Boolean(assemblyForm.errors.drawing_id)}\n              disabled={!isCreating || entity === 'drawing'}\n              value={watchDrawingId}\n              compName=\"drawing_list\"\n              additionalData={{ limit_to_job: userJob.value }}\n              required\n              label=\"Drawing #\"\n              onChange={handleChangeDrawingId}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormControllerTextField\n              disabled={!isCreating}\n              control={assemblyForm.control}\n              label=\"Assembly #\"\n              required\n              name=\"dpn\"\n              onBlur={handleBlur}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormControllerAutocomplete\n              control={assemblyForm.control}\n              label=\"Unit\"\n              name=\"unit\"\n              options={parameters.UNIT}\n              primaryKeyOption=\"value\"\n              required\n            />\n          </Grid>\n          <Unless condition={isCreating}>\n            <SectionTimezone value={formAssemblyData} />\n          </Unless>\n        </Grid>\n      </Grid>\n      <Grid item xs={6}>\n        <TableMultilingualDescription\n          languageList={parameters.PLLA}\n          editMode={!isCreating}\n          name=\"descriptions\"\n          tableHeight={280}\n          control={assemblyForm.control}\n          copyable\n          copyDialogProps={{\n            checkboxesToSelect: [\n              {\n                label: 'Drawing',\n                value: 'drawing_list',\n                entity: 'drawings'\n              },\n              {\n                label: 'Item/Assembly',\n                value: 'part_list',\n                entity: 'parts',\n                default: true\n              }\n            ]\n          }}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default TabGeneral\n"]},"metadata":{},"sourceType":"module"}