{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\DataTable\\\\Common\\\\ExtendedProperties\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Paper, Checkbox, Tooltip } from '@material-ui/core';\nimport { DataTable, DataTableTextField, DataTableAutocomplete } from '@/components';\nimport { Switch, Case, If, Then, Else } from 'react-if';\nimport { useController } from 'react-hook-form';\nimport useStyles from './styles';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport * as yup from 'yup';\nimport clsx from 'clsx';\nimport * as columnProperties from '@/utils/columnProperties';\n\nvar TableExtendedProperties = function TableExtendedProperties(props) {\n  _s();\n\n  var classes = useStyles();\n  var propertiesList = props.propertiesList,\n      name = props.name,\n      control = props.control,\n      tableHeight = props.tableHeight,\n      editMode = props.editMode,\n      parameterName = props.parameterName;\n\n  var _useController = useController({\n    name: name,\n    control: control\n  }),\n      _useController$field = _useController.field,\n      propertiesValue = _useController$field.value,\n      onChange = _useController$field.onChange;\n\n  var getStylesRowDisabled = function getStylesRowDisabled(params) {\n    var language = _.find(propertiesList, {\n      id: params.id\n    });\n\n    return clsx(_defineProperty({}, classes.disable, (language === null || language === void 0 ? void 0 : language.status) === false));\n  };\n\n  var onChangeValue = function onChangeValue(id, value) {\n    var newPropertiesValue = immer(propertiesValue, function (draft) {\n      var _$find = _.find(propertiesList, {\n        id: id\n      }),\n          parameter_id = _$find.parameter_id;\n\n      if (value === '' || value === false) {\n        delete draft[parameter_id];\n      } else {\n        draft[parameter_id] = value;\n      }\n    });\n    onChange(newPropertiesValue);\n  };\n\n  var handleChangeValueDropdown = function handleChangeValueDropdown(id) {\n    return function (event, optionValue, reason) {\n      var newPropertiesValue = immer(propertiesValue, function (draft) {\n        var _$find2 = _.find(propertiesList, {\n          id: id\n        }),\n            parameter_id = _$find2.parameter_id;\n\n        if (reason === 'clear') {\n          delete draft[parameter_id];\n        } else {\n          draft[parameter_id] = optionValue.properties.value;\n        }\n      });\n      onChange(newPropertiesValue);\n    };\n  };\n\n  var filteredProperties = React.useMemo(function () {\n    var types = ['boolean', 'string', 'dropdown'];\n    var propertiesWithTypes = propertiesList.filter(function (property) {\n      return types.includes(property.properties.type);\n    });\n\n    if (editMode) {\n      var filterList = propertiesWithTypes.filter(function (property) {\n        return property.status === true || _.has(propertiesValue, property.parameter_id);\n      });\n      return filterList;\n    } else {\n      return propertiesWithTypes.filter(function (property) {\n        return property.status === true;\n      });\n    }\n  }, [propertiesList, propertiesValue]);\n\n  var getValueDropdown = function getValueDropdown(value, list) {\n    if (list.length === 0) {\n      return value;\n    }\n\n    var optionValue = _.find(list, function (item) {\n      var _item$properties;\n\n      return ((_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.value) === value;\n    });\n\n    return (optionValue === null || optionValue === void 0 ? void 0 : optionValue.description) || value;\n  };\n\n  var renderDropdownField = function renderDropdownField(params) {\n    var properties = params.row.properties;\n    var value = '';\n\n    if (params.value) {\n      value = _.find(properties.valid_value_list, function (option) {\n        var _option$properties;\n\n        return ((_option$properties = option.properties) === null || _option$properties === void 0 ? void 0 : _option$properties.value) === params.value;\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(DataTableAutocomplete, {\n      value: value,\n      params: params,\n      options: (properties === null || properties === void 0 ? void 0 : properties.valid_value_list) || [],\n      onChange: handleChangeValueDropdown(params.id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 1,\n    children: /*#__PURE__*/_jsxDEV(DataTable, {\n      tableHeight: tableHeight,\n      disableColumnMenu: true,\n      disableSelectionOnClick: true,\n      rows: filteredProperties,\n      hideFooter: true,\n      getRowClassName: getStylesRowDisabled,\n      onCellDoubleClick: function onCellDoubleClick(params, event) {\n        var _params$row = params.row,\n            properties = _params$row.properties,\n            status = _params$row.status;\n\n        if (properties.type === 'boolean' || !status) {\n          event.stopPropagation();\n        }\n      },\n      columns: [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n        field: 'description',\n        headerName: 'Properties',\n        width: 180\n      }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Value')), {}, {\n        field: 'value',\n        flex: 0.6,\n        valueGetter: function valueGetter(params) {\n          var parameter_id = params.row.parameter_id;\n          return propertiesValue[parameter_id] || '';\n        },\n        renderEditCell: function renderEditCell(params) {\n          var properties = params.row.properties;\n          return /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Case, {\n              condition: properties.type === 'string',\n              children: /*#__PURE__*/_jsxDEV(DataTableTextField, {\n                rules: yup.string().matches(properties.regex, {\n                  message: \"Key's value is invalid! please refer to the \\\"code of \".concat(parameterName, \" parameter\\\" regex.\"),\n                  excludeEmptyString: true\n                }),\n                params: params,\n                onChangeValue: onChangeValue,\n                placeholder: properties.placeholder\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Case, {\n              condition: properties.type === 'dropdown',\n              children: renderDropdownField(params)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this);\n        },\n        renderCell: function renderCell(params) {\n          var _params$row2 = params.row,\n              properties = _params$row2.properties,\n              parameter_id = _params$row2.parameter_id,\n              status = _params$row2.status,\n              id = _params$row2.id;\n          var value = propertiesValue[parameter_id];\n          return /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Case, {\n              condition: properties.type === 'boolean',\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: properties.placeholder,\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  color: \"primary\",\n                  className: classes.checkbox,\n                  disabled: !status,\n                  checked: Boolean(value),\n                  onChange: function onChange(event, checked) {\n                    return onChangeValue(id, checked);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Case, {\n              condition: properties.type === 'string',\n              children: /*#__PURE__*/_jsxDEV(If, {\n                condition: Boolean(value),\n                children: [/*#__PURE__*/_jsxDEV(Then, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.textValue,\n                    children: value\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Else, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.placeholder,\n                    children: properties.placeholder\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 172,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Case, {\n              condition: properties.type === 'dropdown',\n              children: /*#__PURE__*/_jsxDEV(If, {\n                condition: Boolean(value),\n                children: [/*#__PURE__*/_jsxDEV(Then, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.textValue,\n                    children: getValueDropdown(value, properties.valid_value_list || [])\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Else, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.placeholder,\n                    children: properties.placeholder\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 184,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this);\n        }\n      })]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(TableExtendedProperties, \"nPU5PgVAJTS+GgXByX9FgpVIRiU=\", false, function () {\n  return [useStyles, useController];\n});\n\n_c = TableExtendedProperties;\nTableExtendedProperties.defaultProps = {\n  tableHeight: 360,\n  editMode: false\n};\nexport default TableExtendedProperties;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableExtendedProperties\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/DataTable/Common/ExtendedProperties/index.tsx"],"names":["React","Paper","Checkbox","Tooltip","DataTable","DataTableTextField","DataTableAutocomplete","Switch","Case","If","Then","Else","useController","useStyles","_","immer","yup","clsx","columnProperties","TableExtendedProperties","props","classes","propertiesList","name","control","tableHeight","editMode","parameterName","field","propertiesValue","value","onChange","getStylesRowDisabled","params","language","find","id","disable","status","onChangeValue","newPropertiesValue","draft","parameter_id","handleChangeValueDropdown","event","optionValue","reason","properties","filteredProperties","useMemo","types","propertiesWithTypes","filter","property","includes","type","filterList","has","getValueDropdown","list","length","item","description","renderDropdownField","row","valid_value_list","option","stopPropagation","defaultProperties","headerName","width","editCell","flex","valueGetter","renderEditCell","string","matches","regex","message","excludeEmptyString","placeholder","renderCell","checkbox","Boolean","checked","textValue","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Paper, Checkbox, Tooltip } from '@material-ui/core'\n\nimport { DataTable, DataTableTextField, DataTableAutocomplete } from '@/components'\n\nimport { Switch, Case, If, Then, Else } from 'react-if'\n\nimport { useController } from 'react-hook-form'\nimport useStyles from './styles'\n\nimport _ from 'lodash'\nimport immer from 'immer'\nimport * as yup from 'yup'\nimport clsx from 'clsx'\n\nimport * as columnProperties from '@/utils/columnProperties'\n\nimport type { TableExtendedPropertiesProps } from './type'\n\nconst TableExtendedProperties: React.FC<TableExtendedPropertiesProps> = (props) => {\n  const classes = useStyles()\n  const { propertiesList, name, control, tableHeight, editMode, parameterName } = props\n\n  const {\n    field: { value: propertiesValue, onChange }\n  } = useController({\n    name,\n    control\n  })\n\n  const getStylesRowDisabled = (params) => {\n    const language = _.find(propertiesList, { id: params.id })\n    return clsx({\n      [classes.disable]: language?.status === false\n    })\n  }\n\n  const onChangeValue = (id, value: string | boolean) => {\n    const newPropertiesValue = immer(propertiesValue, (draft) => {\n      const { parameter_id } = _.find(propertiesList, { id })\n      if (value === '' || value === false) {\n        delete draft[parameter_id]\n      } else {\n        draft[parameter_id] = value\n      }\n    })\n    onChange(newPropertiesValue)\n  }\n\n  const handleChangeValueDropdown = (id) => (event, optionValue, reason) => {\n    const newPropertiesValue = immer(propertiesValue, (draft) => {\n      const { parameter_id } = _.find(propertiesList, { id })\n      if (reason === 'clear') {\n        delete draft[parameter_id]\n      } else {\n        draft[parameter_id] = optionValue.properties.value\n      }\n    })\n    onChange(newPropertiesValue)\n  }\n\n  const filteredProperties = React.useMemo(() => {\n    const types = ['boolean', 'string', 'dropdown']\n    const propertiesWithTypes = propertiesList.filter((property) => types.includes(property.properties.type))\n    if (editMode) {\n      const filterList = propertiesWithTypes.filter((property) => {\n        return property.status === true || _.has(propertiesValue, property.parameter_id)\n      })\n      return filterList\n    } else {\n      return propertiesWithTypes.filter((property) => property.status === true)\n    }\n  }, [propertiesList, propertiesValue])\n\n  const getValueDropdown = (value, list) => {\n    if (list.length === 0) {\n      return value\n    }\n    const optionValue = _.find(list, (item) => item.properties?.value === value)\n    return optionValue?.description || value\n  }\n\n  const renderDropdownField = (params) => {\n    const { properties } = params.row\n    let value: any = ''\n    if (params.value) {\n      value = _.find(properties.valid_value_list, (option) => option.properties?.value === params.value)\n    }\n    return (\n      <DataTableAutocomplete\n        value={value}\n        params={params}\n        options={properties?.valid_value_list || []}\n        onChange={handleChangeValueDropdown(params.id)}\n      />\n    )\n  }\n\n  return (\n    <Paper elevation={1}>\n      <DataTable\n        tableHeight={tableHeight}\n        disableColumnMenu\n        disableSelectionOnClick\n        rows={filteredProperties}\n        hideFooter\n        getRowClassName={getStylesRowDisabled}\n        onCellDoubleClick={(params, event) => {\n          const { properties, status } = params.row\n          if (properties.type === 'boolean' || !status) {\n            event.stopPropagation()\n          }\n        }}\n        columns={[\n          {\n            ...columnProperties.defaultProperties,\n            field: 'description',\n            headerName: 'Properties',\n            width: 180\n          },\n          {\n            ...columnProperties.defaultProperties,\n            ...columnProperties.editCell('Value'),\n            field: 'value',\n            flex: 0.6,\n            valueGetter(params) {\n              const { parameter_id } = params.row\n              return propertiesValue[parameter_id] || ''\n            },\n            renderEditCell(params) {\n              const { properties } = params.row\n              return (\n                <Switch>\n                  <Case condition={properties.type === 'string'}>\n                    <DataTableTextField\n                      rules={yup.string().matches(properties.regex, {\n                        message: `Key's value is invalid! please refer to the \"code of ${parameterName} parameter\" regex.`,\n                        excludeEmptyString: true\n                      })}\n                      params={params}\n                      onChangeValue={onChangeValue}\n                      placeholder={properties.placeholder}\n                    />\n                  </Case>\n                  <Case condition={properties.type === 'dropdown'}>{renderDropdownField(params)}</Case>\n                </Switch>\n              )\n            },\n            renderCell(params) {\n              const { properties, parameter_id, status, id } = params.row\n              const value = propertiesValue[parameter_id]\n              return (\n                <Switch>\n                  <Case condition={properties.type === 'boolean'}>\n                    <Tooltip title={properties.placeholder}>\n                      <Checkbox\n                        color=\"primary\"\n                        className={classes.checkbox}\n                        disabled={!status}\n                        checked={Boolean(value)}\n                        onChange={(event, checked) => onChangeValue(id, checked)}\n                      />\n                    </Tooltip>\n                  </Case>\n                  <Case condition={properties.type === 'string'}>\n                    <If condition={Boolean(value)}>\n                      <Then>\n                        <div className={classes.textValue}>{value}</div>\n                      </Then>\n                      <Else>\n                        <div className={classes.placeholder}>{properties.placeholder}</div>\n                      </Else>\n                    </If>\n                  </Case>\n                  <Case condition={properties.type === 'dropdown'}>\n                    <If condition={Boolean(value)}>\n                      <Then>\n                        <div className={classes.textValue}>\n                          {getValueDropdown(value, properties.valid_value_list || [])}\n                        </div>\n                      </Then>\n                      <Else>\n                        <div className={classes.placeholder}>{properties.placeholder}</div>\n                      </Else>\n                    </If>\n                  </Case>\n                </Switch>\n              )\n            }\n          }\n        ]}\n      />\n    </Paper>\n  )\n}\n\nTableExtendedProperties.defaultProps = {\n  tableHeight: 360,\n  editMode: false\n}\n\nexport default TableExtendedProperties\n"]},"metadata":{},"sourceType":"module"}