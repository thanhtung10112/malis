{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { v1 as uuidv1 } from 'uuid';\nimport { AddCircle, Cancel } from '@material-ui/icons';\nimport { useTranslation } from 'next-i18next';\nimport { IconButton, ButtonGroup, Tooltip, Typography } from '@material-ui/core';\nimport * as _ from 'lodash';\nimport ColumnOptions from './ColumnOptions'; // import SortOptions from './SortOptions'\n// The main component (which is exported)\n\nfunction ColumnList({\n  columnOptions,\n  selectedColumns,\n  disabled,\n  onRemove,\n  onAdd\n}) {\n  // trick for forcing rerender\n  const {\n    1: setValue\n  } = useState(0);\n\n  const forceRerender = () => {\n    setValue(value => value + 1);\n  };\n\n  const {\n    t\n  } = useTranslation(['advanced_filter', 'make_a_list']);\n  const selectedColumnsComponent = [];\n\n  const addNewColumn = condition_id => () => {\n    const columnIndex = _.findIndex(selectedColumns, {\n      condition_id: condition_id\n    });\n\n    const selectedColumnsArr = selectedColumns.map(cond => cond.id);\n    selectedColumns.splice(columnIndex + 1, 0, {\n      id: columnOptions.filter(colOpts => !selectedColumnsArr.includes(colOpts.id))[0].id,\n      condition_id: uuidv1()\n    });\n    forceRerender();\n    onAdd();\n  };\n\n  const removeColumn = condition_id => () => {\n    const columnIndex = _.findIndex(selectedColumns, {\n      condition_id: condition_id\n    });\n\n    selectedColumns.splice(columnIndex, 1);\n    forceRerender();\n    onRemove();\n  };\n\n  for (const columnData of selectedColumns) {\n    selectedColumnsComponent.push( /*#__PURE__*/_jsxs(\"div\", {\n      style: {\n        marginBottom: '0.5rem'\n      },\n      children: [/*#__PURE__*/_jsx(ColumnOptions, {\n        columnOptions: columnOptions,\n        condition: columnData,\n        conditionData: selectedColumns,\n        disabled: disabled\n      }), disabled ? '' : /*#__PURE__*/_jsxs(ButtonGroup, {\n        style: {\n          marginLeft: '0.5rem'\n        },\n        size: \"small\",\n        children: [selectedColumns.length >= columnOptions.length ? '' : /*#__PURE__*/_jsx(Tooltip, {\n          title: t('make_a_list:tooltip.add_column'),\n          children: /*#__PURE__*/_jsx(IconButton, {\n            onClick: addNewColumn(columnData.condition_id),\n            children: /*#__PURE__*/_jsx(AddCircle, {\n              style: {\n                color: '#7D90B2'\n              }\n            })\n          })\n        }), /*#__PURE__*/_jsx(Tooltip, {\n          title: t('make_a_list:tooltip.remove_column'),\n          children: /*#__PURE__*/_jsx(IconButton, {\n            onClick: removeColumn(columnData.condition_id),\n            children: /*#__PURE__*/_jsx(Cancel, {\n              style: {\n                color: '#7D90B2'\n              }\n            })\n          })\n        })]\n      })]\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [selectedColumns.length === 0 ? /*#__PURE__*/_jsx(_Fragment, {\n      children: disabled ? /*#__PURE__*/_jsx(\"div\", {\n        style: {\n          marginLeft: '1.6rem'\n        },\n        children: /*#__PURE__*/_jsx(Typography, {\n          variant: \"subtitle1\",\n          gutterBottom: true,\n          color: \"textSecondary\",\n          children: t('advanced_filter:column_list.no_column_selected')\n        })\n      }) : /*#__PURE__*/_jsx(Tooltip, {\n        title: t('advanced_filter:column_list.add_sort_condition'),\n        children: /*#__PURE__*/_jsx(IconButton, {\n          onClick: addNewColumn(),\n          children: /*#__PURE__*/_jsx(AddCircle, {\n            style: {\n              color: '#7D90B2'\n            }\n          })\n        })\n      })\n    }) : '', selectedColumnsComponent]\n  });\n}\n\nexport default ColumnList; // // The main component (which is exported)\n// function SortConditionList ({ columnOptions, sortOptions, sortData: sortConditionData, disabled, hideSortOption = false }) {\n//   // trick for forcing rerender\n//   const [, setValue] = useState(0)\n//   const forceRerender = () => {\n//     setValue((value) => value + 1)\n//   }\n//   const sortConditionComponents = []\n//   const addNewSortCondition = (sortConditionId?) => () => {\n//     const sortConditionIndex = _.findIndex(sortConditionData, {\n//       id: sortConditionId\n//     })\n//     const selectedColumns = sortConditionData.map((cond) => cond.id)\n//     sortConditionData.splice(sortConditionIndex + 1, 0, {\n//       id: columnOptions.filter(\n//         (col) => !selectedColumns.includes(col.id)\n//       )[0].id,\n//       direction: sortOptions[0].value\n//     })\n//     forceRerender()\n//   }\n//   const removeSortCondition = (sortConditionId) => () => {\n//     const sortConditionIndex = _.findIndex(sortConditionData, {\n//       id: sortConditionId\n//     })\n//     sortConditionData.splice(sortConditionIndex, 1)\n//     forceRerender()\n//   }\n//   for (const sortCond of sortConditionData) {\n//     sortConditionComponents.push(\n//       <div style={{ marginBottom: '0.5rem' }}>\n//         <ColumnOptions\n//           columnOptions={columnOptions}\n//           condition={sortCond}\n//           conditionData={sortConditionData}\n//           disabled={disabled}\n//         />\n//         {!hideSortOption && <SortOptions sortOptions={sortOptions} condition={sortCond} disabled={disabled} />}\n//         {disabled ? '' : (\n//           <ButtonGroup\n//             style={{ marginLeft: '0.5rem' }}\n//             size=\"small\"\n//           >\n//             {sortConditionData.length >= columnOptions.length ? (\n//               ''\n//             ) : (\n//               <IconButton onClick={addNewSortCondition(sortCond.id)}>\n//                 <AddCircle />\n//               </IconButton>\n//             )}\n//             <IconButton onClick={removeSortCondition(sortCond.id)}>\n//               <Cancel />\n//             </IconButton>\n//           </ButtonGroup>\n//         )}\n//       </div>\n//     )\n//   }\n//   return (\n//     <>\n//       {sortConditionData.length === 0 ? (\n//         <>\n//           {\n//             disabled ? (\n//               <div style={{ marginLeft: '1.6rem' }}>\n//                 <Typography variant=\"subtitle1\" gutterBottom color=\"textSecondary\">\n//                   No sort conditions\n//                 </Typography>\n//               </div>\n//             ) : (\n//               <Tooltip title=\"Add sort condition\">\n//                 <IconButton onClick={addNewSortCondition()}>\n//                   <AddCircle />\n//                 </IconButton>\n//               </Tooltip>\n//             )\n//           }\n//         </>\n//       ) : (\n//         ''\n//       )}\n//       {sortConditionComponents}\n//     </>\n//   )\n// }\n// export default SortConditionList","map":null,"metadata":{},"sourceType":"module"}