{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\DataTable\\\\Common\\\\MultilingualDescription\\\\DialogCopyDesc.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useCallback, useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Grid, Paper, RadioGroup, FormControlLabel, Radio } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { DialogMain, DataTable, AppAutocompleteAsync } from '@/components';\nimport _ from 'lodash';\nimport { commonStore } from '@/store/reducers';\nimport { defaultProperties } from '@/utils/columnProperties';\nimport HttpService from '@/helper/HttpService';\n\nconst DialogCopyDesc = props => {\n  const {\n    open,\n    onClose,\n    compName,\n    entity,\n    descriptionValues,\n    onChange,\n    checkboxesToSelect,\n    autocompleteProps\n  } = props;\n  const httpService = new HttpService('');\n  const dispatch = useDispatch();\n  const {\n    0: selectedRows,\n    1: setSelectedRows\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: descriptionList,\n    1: setDescriptionList\n  } = useState([]);\n  const {\n    0: paramApi,\n    1: setParamApi\n  } = useState({\n    entity: '',\n    compName: ''\n  });\n  const {\n    0: defaultOptions,\n    1: setDefaultOptions\n  } = useState([]);\n  const isContainCheckboxes = checkboxesToSelect.length > 0;\n  useEffect(() => {\n    if (isContainCheckboxes) {\n      const defaultCheckbox = _.find(checkboxesToSelect, {\n        default: true\n      });\n\n      defaultCheckbox && setParamApi({\n        entity: defaultCheckbox.entity,\n        compName: defaultCheckbox.value\n      });\n    } else {\n      setParamApi({\n        entity,\n        compName\n      });\n    }\n  }, [entity, compName, checkboxesToSelect, isContainCheckboxes]);\n\n  const fecthDescs = async id => {\n    setLoading(true);\n\n    try {\n      const data = await httpService.get(`${paramApi.entity}/${id}/descriptions`);\n      const ids = data.descriptions.map(des => des.id);\n      setDescriptionList(data.descriptions);\n      setSelectedRows(ids);\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error));\n    }\n\n    setLoading(false);\n  };\n\n  const handleSelect = async (event, option) => {\n    setSelectedRows([]);\n    await fecthDescs(option.value);\n  };\n\n  const handleSelectRows = ({\n    selectionModel\n  }) => {\n    setSelectedRows(selectionModel);\n  };\n\n  const handleCopyDescs = () => {\n    const descList = descriptionList.filter(desc => selectedRows.includes(desc.id)).map(({\n      description,\n      id\n    }) => ({\n      language_id: id,\n      description\n    }));\n\n    const mergeDescription = _.uniqBy([...descList, ...descriptionValues], 'language_id');\n\n    onChange(mergeDescription);\n    handleCloseDialog();\n  };\n\n  const handleCloseDialog = () => {\n    setDescriptionList([]);\n    setSelectedRows([]);\n    onClose();\n  };\n\n  const handleSelectModule = ({\n    entity,\n    value\n  }) => () => {\n    setParamApi({\n      entity,\n      compName: value\n    });\n    setDefaultOptions([]);\n  };\n\n  const renderCheckboxesSelect = useCallback(() => checkboxesToSelect.map(checkbox => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n    value: checkbox.value,\n    control: /*#__PURE__*/_jsxDEV(Radio, {\n      color: \"primary\",\n      onChange: handleSelectModule(checkbox)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 20\n    }, this),\n    label: checkbox.label\n  }, checkbox.value, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this)), [checkboxesToSelect, handleSelectModule]);\n  return /*#__PURE__*/_jsxDEV(DialogMain, {\n    open: open,\n    title: \"Copy descriptions\",\n    fullWidth: true,\n    maxWidth: \"sm\",\n    loading: loading,\n    onOk: handleCopyDescs,\n    onClose: handleCloseDialog,\n    okText: \"Save\",\n    okButtonProps: {\n      disabled: selectedRows.length === 0 || loading\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      style: {\n        marginTop: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(When, {\n        condition: isContainCheckboxes,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n            row: true,\n            \"aria-label\": \"position\",\n            name: \"position\",\n            defaultValue: \"top\",\n            value: paramApi.compName,\n            children: renderCheckboxesSelect()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(AppAutocompleteAsync, _objectSpread({\n          disabled: !paramApi.compName,\n          compName: paramApi.compName,\n          onChange: handleSelect,\n          label: \"Copy descriptions from\",\n          defaultOptions: defaultOptions\n        }, autocompleteProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          children: /*#__PURE__*/_jsxDEV(DataTable, {\n            hideFooter: true,\n            tableHeight: 275,\n            rows: descriptionList,\n            checkboxSelection: true,\n            selectionModel: selectedRows,\n            onSelectionModelChange: handleSelectRows,\n            columns: [_objectSpread(_objectSpread({}, defaultProperties), {}, {\n              field: 'language_desc',\n              headerName: 'Language',\n              width: 130\n            }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n              field: 'description',\n              headerName: 'Description',\n              flex: 0.7\n            })]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n\nDialogCopyDesc.defaultProps = {\n  checkboxesToSelect: []\n};\nexport default DialogCopyDesc;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/DataTable/Common/MultilingualDescription/DialogCopyDesc.tsx"],"names":["useCallback","useState","useEffect","useDispatch","Grid","Paper","RadioGroup","FormControlLabel","Radio","When","DialogMain","DataTable","AppAutocompleteAsync","_","commonStore","defaultProperties","HttpService","DialogCopyDesc","props","open","onClose","compName","entity","descriptionValues","onChange","checkboxesToSelect","autocompleteProps","httpService","dispatch","selectedRows","setSelectedRows","loading","setLoading","descriptionList","setDescriptionList","paramApi","setParamApi","defaultOptions","setDefaultOptions","isContainCheckboxes","length","defaultCheckbox","find","default","value","fecthDescs","id","data","get","ids","descriptions","map","des","error","actions","setError","handleSelect","event","option","handleSelectRows","selectionModel","handleCopyDescs","descList","filter","desc","includes","description","language_id","mergeDescription","uniqBy","handleCloseDialog","handleSelectModule","renderCheckboxesSelect","checkbox","label","disabled","marginTop","field","headerName","width","flex","defaultProps"],"mappings":"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","sourcesContent":["import { useCallback, useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { Grid, Paper, RadioGroup, FormControlLabel, Radio } from '@material-ui/core'\nimport { When } from 'react-if'\nimport { DialogMain, DataTable, AppAutocompleteAsync } from '@/components'\n\nimport _ from 'lodash'\nimport { commonStore } from '@/store/reducers'\nimport { defaultProperties } from '@/utils/columnProperties'\nimport HttpService from '@/helper/HttpService'\n\nimport type { MultilingualDescription } from '@/types/Common'\n\nexport type DialogCopyDescProps = {\n  open: boolean\n  compName: string\n  onClose(): void\n  entity: string\n  descriptionValues: MultilingualDescription[]\n  onChange(values: MultilingualDescription[]): void\n  checkboxesToSelect?: CheckBoxCopyDesc[]\n  autocompleteProps?: any\n}\n\nexport type CheckBoxCopyDesc = {\n  value: string\n  label: string\n  entity: string\n  default?: boolean\n}\n\nexport type DescriptionCopy = {\n  description: string\n  id: number\n  language_desc: string\n}\n\nconst DialogCopyDesc: React.FC<DialogCopyDescProps> = (props) => {\n  const { open, onClose, compName, entity, descriptionValues, onChange, checkboxesToSelect, autocompleteProps } = props\n\n  const httpService = new HttpService('')\n\n  const dispatch = useDispatch()\n\n  const [selectedRows, setSelectedRows] = useState<number[]>([])\n  const [loading, setLoading] = useState(false)\n  const [descriptionList, setDescriptionList] = useState<DescriptionCopy[]>([])\n  const [paramApi, setParamApi] = useState({ entity: '', compName: '' })\n  const [defaultOptions, setDefaultOptions] = useState([])\n\n  const isContainCheckboxes = checkboxesToSelect.length > 0\n\n  useEffect(() => {\n    if (isContainCheckboxes) {\n      const defaultCheckbox = _.find(checkboxesToSelect, { default: true })\n      defaultCheckbox &&\n        setParamApi({\n          entity: defaultCheckbox.entity,\n          compName: defaultCheckbox.value\n        })\n    } else {\n      setParamApi({ entity, compName })\n    }\n  }, [entity, compName, checkboxesToSelect, isContainCheckboxes])\n\n  const fecthDescs = async (id) => {\n    setLoading(true)\n    try {\n      const data = await httpService.get(`${paramApi.entity}/${id}/descriptions`)\n      const ids = data.descriptions.map((des) => des.id)\n      setDescriptionList(data.descriptions)\n      setSelectedRows(ids)\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error))\n    }\n    setLoading(false)\n  }\n\n  const handleSelect = async (event, option) => {\n    setSelectedRows([])\n    await fecthDescs(option.value)\n  }\n\n  const handleSelectRows = ({ selectionModel }) => {\n    setSelectedRows(selectionModel)\n  }\n\n  const handleCopyDescs = () => {\n    const descList = descriptionList\n      .filter((desc) => selectedRows.includes(desc.id))\n      .map(({ description, id }) => ({ language_id: id, description }))\n    const mergeDescription = _.uniqBy([...descList, ...descriptionValues], 'language_id')\n    onChange(mergeDescription)\n    handleCloseDialog()\n  }\n\n  const handleCloseDialog = () => {\n    setDescriptionList([])\n    setSelectedRows([])\n    onClose()\n  }\n\n  const handleSelectModule =\n    ({ entity, value }) =>\n    () => {\n      setParamApi({ entity, compName: value })\n      setDefaultOptions([])\n    }\n\n  const renderCheckboxesSelect = useCallback(\n    () =>\n      checkboxesToSelect.map((checkbox) => (\n        <FormControlLabel\n          key={checkbox.value}\n          value={checkbox.value}\n          control={<Radio color=\"primary\" onChange={handleSelectModule(checkbox)} />}\n          label={checkbox.label}\n        />\n      )),\n    [checkboxesToSelect, handleSelectModule]\n  )\n\n  return (\n    <DialogMain\n      open={open}\n      title=\"Copy descriptions\"\n      fullWidth\n      maxWidth=\"sm\"\n      loading={loading}\n      onOk={handleCopyDescs}\n      onClose={handleCloseDialog}\n      okText=\"Save\"\n      okButtonProps={{ disabled: selectedRows.length === 0 || loading }}\n    >\n      <Grid container spacing={2} style={{ marginTop: 4 }}>\n        <When condition={isContainCheckboxes}>\n          <Grid item xs={12}>\n            <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\" value={paramApi.compName}>\n              {renderCheckboxesSelect()}\n            </RadioGroup>\n          </Grid>\n        </When>\n        <Grid item xs={12}>\n          <AppAutocompleteAsync\n            disabled={!paramApi.compName}\n            compName={paramApi.compName}\n            onChange={handleSelect}\n            label=\"Copy descriptions from\"\n            defaultOptions={defaultOptions}\n            {...autocompleteProps}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Paper>\n            <DataTable\n              hideFooter\n              tableHeight={275}\n              rows={descriptionList}\n              checkboxSelection\n              selectionModel={selectedRows}\n              onSelectionModelChange={handleSelectRows}\n              columns={[\n                {\n                  ...defaultProperties,\n                  field: 'language_desc',\n                  headerName: 'Language',\n                  width: 130\n                },\n                {\n                  ...defaultProperties,\n                  field: 'description',\n                  headerName: 'Description',\n                  flex: 0.7\n                }\n              ]}\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n    </DialogMain>\n  )\n}\n\nDialogCopyDesc.defaultProps = {\n  checkboxesToSelect: []\n}\n\nexport default DialogCopyDesc\n"]},"metadata":{},"sourceType":"module"}