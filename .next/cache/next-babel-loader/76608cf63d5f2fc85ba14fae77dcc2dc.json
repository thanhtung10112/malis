{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { FormControlLabel, Checkbox } from '@material-ui/core';\nimport { useController } from 'react-hook-form';\nimport useStyles from './styles';\n\nfunction ControlledChecbox(props) {\n  const classes = useStyles();\n\n  const {\n    control,\n    name,\n    rules,\n    defaultValue,\n    color\n  } = props,\n        checkboxProps = _objectWithoutProperties(props, [\"control\", \"name\", \"rules\", \"defaultValue\", \"color\"]);\n\n  const {\n    field: {\n      onChange,\n      value\n    }\n  } = useController({\n    name,\n    rules,\n    defaultValue,\n    control\n  }),\n        inputProps = _objectWithoutProperties(useController({\n    name,\n    rules,\n    defaultValue,\n    control\n  }).field, [\"onChange\", \"value\"]);\n\n  const onChangeCheckbox = (_, checked) => {\n    onChange(checked);\n  };\n\n  return /*#__PURE__*/_jsx(FormControlLabel, _objectSpread(_objectSpread({}, checkboxProps), {}, {\n    classes: {\n      label: classes.labelCheckbox\n    },\n    control: /*#__PURE__*/_jsx(Checkbox, _objectSpread(_objectSpread({}, inputProps), {}, {\n      color: color,\n      classes: classes,\n      checked: value,\n      onChange: onChangeCheckbox\n    }))\n  }));\n}\n\nControlledChecbox.defaultProps = {\n  color: 'primary'\n};\nexport default ControlledChecbox;","map":null,"metadata":{},"sourceType":"module"}