{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\DataTable\\\\EditInline\\\\Autocomplete\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { AppAutocomplete } from '@/components';\nimport useStyles from './style';\n\nconst DataTableAutocomplete = props => {\n  const {\n    params,\n    onChange\n  } = props,\n        autoCompleteProps = _objectWithoutProperties(props, [\"params\", \"onChange\"]);\n\n  const {\n    api,\n    id,\n    field,\n    value\n  } = params;\n  const classes = useStyles();\n\n  const handleChange = (event, optionValue, reason) => {\n    api.setCellMode(id, field, 'view');\n    onChange(event, optionValue, reason);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppAutocomplete, _objectSpread({\n    value: value,\n    disableClearable: false,\n    className: classes.root,\n    onChange: handleChange,\n    textFieldProps: {\n      autoFocus: true\n    },\n    renderOption: option => option === null || option === void 0 ? void 0 : option.description\n  }, autoCompleteProps), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\nexport default DataTableAutocomplete;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/DataTable/EditInline/Autocomplete/index.tsx"],"names":["AppAutocomplete","useStyles","DataTableAutocomplete","props","params","onChange","autoCompleteProps","api","id","field","value","classes","handleChange","event","optionValue","reason","setCellMode","root","autoFocus","option","description"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,eAAT,QAAgC,cAAhC;AAEA,OAAOC,SAAP,MAAsB,SAAtB;;AAIA,MAAMC,qBAA2D,GAAIC,KAAD,IAAW;AAC7E,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA6CF,KAAnD;AAAA,QAA6BG,iBAA7B,4BAAmDH,KAAnD;;AAEA,QAAM;AAAEI,IAAAA,GAAF;AAAOC,IAAAA,EAAP;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA4BN,MAAlC;AAEA,QAAMO,OAAO,GAAGV,SAAS,EAAzB;;AAEA,QAAMW,YAAY,GAAG,CAACC,KAAD,EAAQC,WAAR,EAAqBC,MAArB,KAAgC;AACnDR,IAAAA,GAAG,CAACS,WAAJ,CAAgBR,EAAhB,EAAoBC,KAApB,EAA2B,MAA3B;AACAJ,IAAAA,QAAQ,CAACQ,KAAD,EAAQC,WAAR,EAAqBC,MAArB,CAAR;AACD,GAHD;;AAKA,sBACE,QAAC,eAAD;AACE,IAAA,KAAK,EAAEL,KADT;AAEE,IAAA,gBAAgB,EAAE,KAFpB;AAGE,IAAA,SAAS,EAAEC,OAAO,CAACM,IAHrB;AAIE,IAAA,QAAQ,EAAEL,YAJZ;AAKE,IAAA,cAAc,EAAE;AAAEM,MAAAA,SAAS,EAAE;AAAb,KALlB;AAME,IAAA,YAAY,EAAGC,MAAD,IAAYA,MAAZ,aAAYA,MAAZ,uBAAYA,MAAM,CAAEC;AANpC,KAOMd,iBAPN;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAvBD;;AAyBA,eAAeJ,qBAAf","sourcesContent":["import { AppAutocomplete } from '@/components'\n\nimport useStyles from './style'\n\nimport type { DataTableAutocompleteProps } from './type'\n\nconst DataTableAutocomplete: React.FC<DataTableAutocompleteProps> = (props) => {\n  const { params, onChange, ...autoCompleteProps } = props\n\n  const { api, id, field, value } = params\n\n  const classes = useStyles()\n\n  const handleChange = (event, optionValue, reason) => {\n    api.setCellMode(id, field, 'view')\n    onChange(event, optionValue, reason)\n  }\n\n  return (\n    <AppAutocomplete\n      value={value}\n      disableClearable={false}\n      className={classes.root}\n      onChange={handleChange}\n      textFieldProps={{ autoFocus: true }}\n      renderOption={(option) => option?.description}\n      {...autoCompleteProps}\n    />\n  )\n}\n\nexport default DataTableAutocomplete\n"]},"metadata":{},"sourceType":"module"}