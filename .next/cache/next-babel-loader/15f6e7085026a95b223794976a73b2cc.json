{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, putResolve } from 'redux-saga/effects';\nimport { call, put, all, select } from 'typed-redux-saga';\nimport { jobStore, commonStore, advancedFilterActions } from '@/store/reducers';\nimport jobApi from '@/apis/job.api';\nimport _ from 'lodash';\nimport { getDefaultValue } from '@/utils/getDefaultValues';\n\nfunction* fetchInitDataForList() {\n  const data = yield call(jobApi.getInitDataForList);\n  const selectedJobCategory = yield* select(jobStore.selectSelectedJobCategory);\n\n  if (_.isNull(selectedJobCategory.id)) {\n    const defaultJobCategory = getDefaultValue(data.job_categories, false);\n    yield put(jobStore.actions.setSelectedCategory(defaultJobCategory));\n  }\n\n  yield put(jobStore.actions.setInitDataForList(data));\n}\n\nfunction* fetchInitDataForCE() {\n  const data = yield call(jobApi.getInitDataForCE);\n  data.job_template = _.pick(data.job_template, ['language', 'equipment_type', 'erection_site', 'people_responsible', 'squad_leader', 'drawings_responsible', 'job_users']);\n  const jobStandard = data.parameters.PLNO.map(item => _.pick(item, ['description', 'id', 'parameter_id']));\n  yield put(jobStore.actions.setDetail(_objectSpread(_objectSpread({}, data.job_template), {}, {\n    job_standard: jobStandard\n  })));\n  yield put(jobStore.actions.setInitDataForCE(data));\n}\n\nfunction* fetchList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData,\n    selectedCategory\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    selectedCategory: select(jobStore.selectSelectedJobCategory)\n  });\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(jobApi.getList, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery,\n    job_category_id: selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.id\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(jobStore.actions.setDataList(data.jobs));\n}\n\nfunction* getJobList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForList);\n    const permissions = yield* select(jobStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchList);\n    }\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* openJobCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    yield put(jobStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* getUserGroupMapping({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const data = yield call(jobApi.getUserGroupMapping, payload);\n    yield put(jobStore.actions.setTransferUserAvailableList(data.available_users));\n    yield put(jobStore.actions.setOpenTransferList(true));\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* createJob({\n  payload\n}) {\n  yield put(jobStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      message\n    } = yield call(jobApi.create, payload);\n    const {\n      job_template\n    } = yield* select(jobStore.selectInitDataForCE);\n    yield put(jobStore.actions.setDetail(job_template));\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(jobStore.actions.setDialogStateLoading(false));\n}\n\nfunction* closeJobDialog() {\n  try {\n    yield putResolve(jobStore.actions.setDialogStateOpen(false));\n    yield call(getJobList);\n    yield put(jobStore.actions.resetDetail());\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n}\n\nfunction* openJobUpdateDialog({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    const {\n      job\n    } = yield call(jobApi.getDetail, payload);\n    job.job_currencies = job.job_currencies.map(currency => _objectSpread({\n      id: currency.currency_id\n    }, currency));\n    yield putResolve(jobStore.actions.setDetail(job));\n    yield put(jobStore.actions.setDialogState({\n      open: true,\n      editMode: true\n    }));\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* updateJob({\n  payload\n}) {\n  yield put(jobStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      id,\n      formData\n    } = payload;\n    const {\n      message\n    } = yield call(jobApi.update, id, formData);\n    yield put(commonStore.actions.setSuccessMessage(message));\n    yield call(closeJobDialog);\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(jobStore.actions.setDialogStateLoading(false));\n}\n\nfunction* jobSaga() {\n  yield takeEvery(jobStore.sagaGetList, getJobList);\n  yield takeEvery(jobStore.sagaOpenCreateDialog, openJobCreateDialog);\n  yield takeEvery(jobStore.sagaGetUserGroupMapping, getUserGroupMapping);\n  yield takeEvery(jobStore.sagaCreate, createJob);\n  yield takeEvery(jobStore.sagaCloseDialog, closeJobDialog);\n  yield takeEvery(jobStore.sagaOpenUpdateDialog, openJobUpdateDialog);\n  yield takeEvery(jobStore.sagaUpdate, updateJob);\n}\n\nexport default jobSaga;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/saga/job.saga.ts"],"names":["takeEvery","putResolve","call","put","all","select","jobStore","commonStore","advancedFilterActions","jobApi","_","getDefaultValue","fetchInitDataForList","data","getInitDataForList","selectedJobCategory","selectSelectedJobCategory","isNull","id","defaultJobCategory","job_categories","actions","setSelectedCategory","setInitDataForList","fetchInitDataForCE","getInitDataForCE","job_template","pick","jobStandard","parameters","PLNO","map","item","setDetail","job_standard","setInitDataForCE","fetchList","tableState","searchQuery","filterData","selectedCategory","selectTableState","selectSearchQuery","selectFilterData","page","per_page","getList","s","job_category_id","setTableState","total_items","setDataList","jobs","getJobList","setLoadingPage","permissions","selectPermissions","view","error","setError","openJobCreateDialog","setDialogStateOpen","getUserGroupMapping","payload","setTransferUserAvailableList","available_users","setOpenTransferList","createJob","setDialogStateLoading","message","create","selectInitDataForCE","setSuccessMessage","closeJobDialog","resetDetail","openJobUpdateDialog","job","getDetail","job_currencies","currency","currency_id","setDialogState","open","editMode","updateJob","formData","update","jobSaga","sagaGetList","sagaOpenCreateDialog","sagaGetUserGroupMapping","sagaCreate","sagaCloseDialog","sagaOpenUpdateDialog","sagaUpdate"],"mappings":"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","sourcesContent":["import { takeEvery, putResolve } from 'redux-saga/effects'\n\nimport { call, put, all, select } from 'typed-redux-saga'\n\nimport { jobStore, commonStore, advancedFilterActions } from '@/store/reducers'\n\nimport jobApi from '@/apis/job.api'\nimport _ from 'lodash'\nimport { getDefaultValue } from '@/utils/getDefaultValues'\n\nfunction* fetchInitDataForList() {\n  const data = yield call(jobApi.getInitDataForList)\n  const selectedJobCategory = yield* select(jobStore.selectSelectedJobCategory)\n  if (_.isNull(selectedJobCategory.id)) {\n    const defaultJobCategory = getDefaultValue(data.job_categories, false)\n    yield put(jobStore.actions.setSelectedCategory(defaultJobCategory))\n  }\n  yield put(jobStore.actions.setInitDataForList(data))\n}\n\nfunction* fetchInitDataForCE() {\n  const data = yield call(jobApi.getInitDataForCE)\n  data.job_template = _.pick(data.job_template, [\n    'language',\n    'equipment_type',\n    'erection_site',\n    'people_responsible',\n    'squad_leader',\n    'drawings_responsible',\n    'job_users'\n  ])\n  const jobStandard = data.parameters.PLNO.map((item) => _.pick(item, ['description', 'id', 'parameter_id']))\n\n  yield put(\n    jobStore.actions.setDetail({\n      ...data.job_template,\n      job_standard: jobStandard\n    })\n  )\n  yield put(jobStore.actions.setInitDataForCE(data))\n}\n\nfunction* fetchList() {\n  const { tableState, searchQuery, filterData, selectedCategory } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    selectedCategory: select(jobStore.selectSelectedJobCategory)\n  })\n  const { page, per_page } = tableState\n  const data = yield call(jobApi.getList, {\n    per_page,\n    page,\n    s: searchQuery,\n    job_category_id: selectedCategory?.id,\n    ...filterData\n  })\n  yield put(commonStore.actions.setTableState({ total_items: data.total_items }))\n  yield put(jobStore.actions.setDataList(data.jobs))\n}\n\nfunction* getJobList() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchInitDataForList)\n    const permissions = yield* select(jobStore.selectPermissions)\n    if (permissions?.view) {\n      yield call(fetchList)\n    }\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* openJobCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true))\n\n  try {\n    yield call(fetchInitDataForCE)\n    yield put(jobStore.actions.setDialogStateOpen(true))\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* getUserGroupMapping({ payload }: ReturnType<typeof jobStore.sagaGetUserGroupMapping>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n\n  try {\n    const data = yield call(jobApi.getUserGroupMapping, payload)\n    yield put(jobStore.actions.setTransferUserAvailableList(data.available_users))\n    yield put(jobStore.actions.setOpenTransferList(true))\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* createJob({ payload }: ReturnType<typeof jobStore.sagaCreate>) {\n  yield put(jobStore.actions.setDialogStateLoading(true))\n  try {\n    const { message } = yield call(jobApi.create, payload)\n    const { job_template } = yield* select(jobStore.selectInitDataForCE)\n    yield put(jobStore.actions.setDetail(job_template))\n    yield put(commonStore.actions.setSuccessMessage(message))\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n  yield put(jobStore.actions.setDialogStateLoading(false))\n}\n\nfunction* closeJobDialog() {\n  try {\n    yield putResolve(jobStore.actions.setDialogStateOpen(false))\n    yield call(getJobList)\n    yield put(jobStore.actions.resetDetail())\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n}\n\nfunction* openJobUpdateDialog({ payload }: ReturnType<typeof jobStore.sagaOpenUpdateDialog>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchInitDataForCE)\n    const { job } = yield call(jobApi.getDetail, payload)\n    job.job_currencies = job.job_currencies.map((currency) => ({\n      id: currency.currency_id,\n      ...currency\n    }))\n    yield putResolve(jobStore.actions.setDetail(job))\n    yield put(jobStore.actions.setDialogState({ open: true, editMode: true }))\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* updateJob({ payload }: ReturnType<typeof jobStore.sagaUpdate>) {\n  yield put(jobStore.actions.setDialogStateLoading(true))\n\n  try {\n    const { id, formData } = payload\n    const { message } = yield call(jobApi.update, id, formData)\n    yield put(commonStore.actions.setSuccessMessage(message))\n    yield call(closeJobDialog)\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n\n  yield put(jobStore.actions.setDialogStateLoading(false))\n}\n\nfunction* jobSaga() {\n  yield takeEvery(jobStore.sagaGetList, getJobList)\n  yield takeEvery(jobStore.sagaOpenCreateDialog, openJobCreateDialog)\n  yield takeEvery(jobStore.sagaGetUserGroupMapping, getUserGroupMapping)\n  yield takeEvery(jobStore.sagaCreate, createJob)\n  yield takeEvery(jobStore.sagaCloseDialog, closeJobDialog)\n  yield takeEvery(jobStore.sagaOpenUpdateDialog, openJobUpdateDialog)\n  yield takeEvery(jobStore.sagaUpdate, updateJob)\n}\n\nexport default jobSaga\n"]},"metadata":{},"sourceType":"module"}