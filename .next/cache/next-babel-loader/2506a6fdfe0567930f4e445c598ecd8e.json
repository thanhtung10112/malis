{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport { useTranslation } from 'next-i18next';\nimport { userStore } from '@/store/reducers';\nimport { Grid, Typography, makeStyles } from '@material-ui/core';\nimport { Unless, When } from 'react-if';\nimport { FormControllerAutocomplete, FormControllerTextField, FormControllerPasswordField, FormControllerDatePicker, SectionTimezone } from '@/components';\nimport _ from 'lodash';\nconst useStyles = makeStyles(theme => ({\n  resetPassword: {\n    cursor: 'pointer',\n    opacity: 0.6,\n    textDecoration: 'underline',\n    transition: theme.transitions.create('all', {\n      duration: theme.transitions.duration.standard,\n      easing: 'easing-out'\n    }),\n    '&:hover': {\n      opacity: 1\n    }\n  }\n}));\n\nconst TabGeneral = () => {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation('user');\n  const userForm = useFormContext();\n  const watchValidFrom = userForm.watch('valid_from', null);\n  const watchValidUntil = userForm.watch('valid_until', null);\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(userStore.selectInitDataForCE),\n        {\n    parameters\n  } = _useSelector,\n        initDataForCE = _objectWithoutProperties(_useSelector, [\"parameters\"]);\n\n  const userDetail = useSelector(userStore.selectDetail);\n\n  const isCreating = _.isNil(userDetail.id);\n\n  const handleOpenResetPwdDialog = () => {\n    dispatch(userStore.actions.setResetPwdDialogOpen(true));\n  };\n\n  return /*#__PURE__*/_jsxs(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsx(FormControllerTextField, {\n        control: userForm.control,\n        required: true,\n        name: \"user_id\",\n        label: \"Username\",\n        autoFocus: isCreating,\n        disabled: !isCreating\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsx(FormControllerTextField, {\n        control: userForm.control,\n        name: \"user_abb\",\n        label: \"User Abbr.\"\n      })\n    }), /*#__PURE__*/_jsxs(When, {\n      condition: isCreating,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(FormControllerPasswordField, {\n          control: userForm.control,\n          required: true,\n          type: \"password\",\n          name: \"password\",\n          label: \"Password\"\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(FormControllerTextField, {\n          control: userForm.control,\n          required: true,\n          type: \"password\",\n          name: \"confirm_password\",\n          label: \"Confirm Password\"\n        })\n      })]\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(FormControllerTextField, {\n        control: userForm.control,\n        required: true,\n        name: \"first_name\",\n        label: \"First name\"\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(FormControllerTextField, {\n        control: userForm.control,\n        required: true,\n        name: \"last_name\",\n        label: \"Last name\"\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(FormControllerTextField, {\n        control: userForm.control,\n        name: \"email\",\n        label: \"Email\"\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n        getOptionSelected: (option, value) => option.id === value,\n        closeIcon: null,\n        control: userForm.control,\n        name: \"puco\",\n        options: parameters.PUCO,\n        renderOption: ({\n          parameter_id,\n          description\n        }) => `${parameter_id} - ${description}`,\n        label: \"Purchasing company\",\n        required: true\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n        getOptionSelected: (option, value) => option.id === value,\n        closeIcon: null,\n        control: userForm.control,\n        name: \"default_language\",\n        options: parameters.PLLA,\n        renderOption: ({\n          parameter_id,\n          description\n        }) => `${parameter_id} - ${description}`,\n        label: \"Default language\",\n        required: true\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsx(FormControllerDatePicker, {\n        name: \"valid_from\",\n        label: \"Valid from\",\n        control: userForm.control,\n        maxDate: watchValidUntil\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsx(FormControllerDatePicker, {\n        name: \"valid_until\",\n        label: \"Valid until\",\n        control: userForm.control,\n        minDate: watchValidFrom\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n        getOptionSelected: (option, value) => option.id === value,\n        closeIcon: null,\n        control: userForm.control,\n        name: \"time_zone\",\n        options: initDataForCE.timezones,\n        renderOption: option => option.description,\n        label: \"Timezone\",\n        required: true,\n        getOptionLabel: option => {\n          if (_.isString(option)) {\n            const findOption = _.find(initDataForCE.timezones, {\n              id: option\n            });\n\n            return findOption === null || findOption === void 0 ? void 0 : findOption.description;\n          }\n\n          return option.description;\n        }\n      })\n    }), /*#__PURE__*/_jsxs(Unless, {\n      condition: isCreating,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(Typography, {\n          variant: \"inherit\",\n          display: \"block\",\n          onClick: handleOpenResetPwdDialog,\n          className: classes.resetPassword,\n          children: t('form.label.reset_password')\n        })\n      }), /*#__PURE__*/_jsx(SectionTimezone, {\n        value: userDetail\n      })]\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(\"div\", {})\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(\"div\", {})\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(\"div\", {})\n    })]\n  });\n};\n\nexport default TabGeneral;","map":null,"metadata":{},"sourceType":"module"}