{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Drawing\\\\DialogRevision.tsx\";\nimport { Grid } from '@material-ui/core';\nimport { DialogMain, FormControllerTextField } from '@/components';\nimport { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'next-i18next';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { drawingStore } from '@/store/reducers';\n\nconst DialogRevision = () => {\n  const {\n    t\n  } = useTranslation('drawing');\n  const validationSchema = useMemo(() => yup.object({\n    new_revision: yup.string().required(t('validation_message.new_revision_required')).matches(/^[A-Z0-9]{1,8}$/, t('validation_message.new_revision_matches')),\n    description: yup.string().required(t('validation_message.description_required'))\n  }), []);\n  const revisionForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  });\n  const dispatch = useDispatch();\n  const {\n    open,\n    loading,\n    detail: revisionDetail\n  } = useSelector(drawingStore.selectRevisionDialog);\n  const drawingDetail = useSelector(drawingStore.selectDetail);\n  useEffect(() => {\n    if (!open) {\n      dispatch(drawingStore.actions.resetRevisionDialogDetail());\n    }\n  }, [open]);\n  useEffect(() => {\n    revisionForm.reset(revisionDetail);\n  }, [revisionDetail]);\n  const handleSaveRevision = revisionForm.handleSubmit(formData => {\n    dispatch(drawingStore.sagaSaveNewRev({\n      revision: formData,\n      drawingId: drawingDetail.id\n    }));\n  });\n\n  const handleClose = () => {\n    dispatch(drawingStore.actions.setRevisionDialogOpen(false));\n  };\n\n  return /*#__PURE__*/_jsxDEV(DialogMain, {\n    open: open,\n    loading: loading,\n    fullWidth: true,\n    title: t('form.title.save_as_revision'),\n    maxWidth: \"sm\",\n    okText: t('common:button.save'),\n    onOk: handleSaveRevision,\n    onClose: handleClose,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      style: {\n        marginTop: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(FormControllerTextField, {\n          name: \"new_revision\",\n          label: \"New revision\",\n          required: true,\n          control: revisionForm.control\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(FormControllerTextField, {\n          name: \"reason\",\n          label: \"Reason of Change(internal)\",\n          control: revisionForm.control,\n          multiline: true,\n          rows: 10\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(FormControllerTextField, {\n          name: \"description\",\n          label: \"Description(external)\",\n          required: true,\n          control: revisionForm.control\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\nexport default DialogRevision;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Drawing/DialogRevision.tsx"],"names":["Grid","DialogMain","FormControllerTextField","useEffect","useMemo","useSelector","useDispatch","useForm","useTranslation","yup","yupResolver","drawingStore","DialogRevision","t","validationSchema","object","new_revision","string","required","matches","description","revisionForm","shouldUnregister","resolver","dispatch","open","loading","detail","revisionDetail","selectRevisionDialog","drawingDetail","selectDetail","actions","resetRevisionDialogDetail","reset","handleSaveRevision","handleSubmit","formData","sagaSaveNewRev","revision","drawingId","id","handleClose","setRevisionDialogOpen","marginTop","control"],"mappings":"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","sourcesContent":["import { Grid } from '@material-ui/core'\nimport { DialogMain, FormControllerTextField } from '@/components'\n\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useForm } from 'react-hook-form'\nimport { useTranslation } from 'next-i18next'\n\nimport * as yup from 'yup'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport { drawingStore } from '@/store/reducers'\n\nimport type { RevisionDetail } from '@/types/Drawing'\n\nconst DialogRevision: React.FC = () => {\n  const { t } = useTranslation('drawing')\n\n  const validationSchema = useMemo(\n    () =>\n      yup.object({\n        new_revision: yup\n          .string()\n          .required(t('validation_message.new_revision_required'))\n          .matches(/^[A-Z0-9]{1,8}$/, t('validation_message.new_revision_matches')),\n        description: yup.string().required(t('validation_message.description_required'))\n      }),\n    []\n  )\n\n  const revisionForm = useForm<RevisionDetail>({\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  })\n\n  const dispatch = useDispatch()\n  const { open, loading, detail: revisionDetail } = useSelector(drawingStore.selectRevisionDialog)\n  const drawingDetail = useSelector(drawingStore.selectDetail)\n\n  useEffect(() => {\n    if (!open) {\n      dispatch(drawingStore.actions.resetRevisionDialogDetail())\n    }\n  }, [open])\n\n  useEffect(() => {\n    revisionForm.reset(revisionDetail)\n  }, [revisionDetail])\n\n  const handleSaveRevision = revisionForm.handleSubmit((formData) => {\n    dispatch(\n      drawingStore.sagaSaveNewRev({\n        revision: formData,\n        drawingId: drawingDetail.id\n      })\n    )\n  })\n\n  const handleClose = () => {\n    dispatch(drawingStore.actions.setRevisionDialogOpen(false))\n  }\n\n  return (\n    <DialogMain\n      open={open}\n      loading={loading}\n      fullWidth\n      title={t('form.title.save_as_revision')}\n      maxWidth=\"sm\"\n      okText={t('common:button.save')}\n      onOk={handleSaveRevision}\n      onClose={handleClose}\n    >\n      <Grid container spacing={2} style={{ marginTop: 4 }}>\n        <Grid item xs={12}>\n          <FormControllerTextField name=\"new_revision\" label=\"New revision\" required control={revisionForm.control} />\n        </Grid>\n        <Grid item xs={12}>\n          <FormControllerTextField\n            name=\"reason\"\n            label=\"Reason of Change(internal)\"\n            control={revisionForm.control}\n            multiline\n            rows={10}\n          />\n        </Grid>\n\n        <Grid item xs={12}>\n          <FormControllerTextField\n            name=\"description\"\n            label=\"Description(external)\"\n            required\n            control={revisionForm.control}\n          />\n        </Grid>\n      </Grid>\n    </DialogMain>\n  )\n}\n\nexport default DialogRevision\n"]},"metadata":{},"sourceType":"module"}