{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Card, CardHeader, Checkbox, List, ListItem, ListItemText, Grid, Button, ListItemIcon } from '@material-ui/core';\nimport { DragIndicator as DragIndicatorIcon } from '@material-ui/icons';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { DialogMain } from '@/components';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport useDraggableInPortal from '@/hooks/useDraggableInPortal';\nimport useStyles from './styles';\n\nfunction not(a, b) {\n  return a.filter(value => b.findIndex(item => value.id === item.id) === -1);\n}\n\nfunction reorder(list, startIndex, endIndex) {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n}\n\nfunction DialogTransferList(props) {\n  const {\n    titleLeft,\n    titleRight,\n    leftSideList,\n    rightSideList,\n    onSave,\n    onClose,\n    onChangeRightSideList,\n    onChangeLeftSideList\n  } = props,\n        rest = _objectWithoutProperties(props, [\"titleLeft\", \"titleRight\", \"leftSideList\", \"rightSideList\", \"onSave\", \"onClose\", \"onChangeRightSideList\", \"onChangeLeftSideList\"]);\n\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([]);\n  const renderDraggable = useDraggableInPortal();\n\n  const leftChecked = _.intersectionWith(leftSideList, checked, _.isEqual);\n\n  const rightChecked = _.intersectionWith(rightSideList, checked, _.isEqual);\n\n  const handleToggle = value => () => {\n    setChecked(prevState => immer(prevState, draftState => {\n      if (draftState.length <= 0) {\n        draftState.push(value);\n        return;\n      }\n\n      const currentIndex = checked.findIndex(item => item.id === value.id);\n\n      if (currentIndex === -1) {\n        draftState.push(value);\n      } else {\n        draftState.splice(currentIndex, 1);\n      }\n    }));\n  };\n\n  const isChecked = value => checked.findIndex(item => item.id === value.id) !== -1;\n\n  const numberOfChecked = items => {\n    if (checked.length === 0) {\n      return 0;\n    }\n\n    const intersectArray = _.intersectionWith(items, checked, _.isEqual);\n\n    return intersectArray.length;\n  };\n\n  const handleToggleAll = items => () => {\n    if (numberOfChecked(items) === items.length) {\n      setChecked([]);\n    } else {\n      setChecked(items);\n    }\n  };\n\n  const handleCheckedRight = () => {\n    const newRightList = rightSideList.concat(leftChecked);\n    const newLeftList = not(leftSideList, leftChecked);\n    onChangeRightSideList(newRightList);\n    onChangeLeftSideList(newLeftList);\n    setChecked(not(checked, leftChecked));\n  };\n\n  const handleCheckedLeft = () => {\n    const newLeftList = leftSideList.concat(rightChecked);\n    const newRightList = not(rightSideList, rightChecked);\n    onChangeRightSideList(newRightList);\n    onChangeLeftSideList(newLeftList);\n    setChecked(not(checked, rightChecked));\n  };\n\n  const onSaveList = () => {\n    onSave();\n  };\n\n  const onDragEndItem = result => {\n    if (result.source && result.destination) {\n      const items = reorder(rightSideList, result.source.index, result.destination.index);\n      onChangeRightSideList(items);\n    }\n  };\n\n  const handleClose = () => {\n    setChecked([]);\n    onClose();\n  };\n\n  const customList = (title, items) => /*#__PURE__*/_jsxs(Card, {\n    children: [/*#__PURE__*/_jsx(CardHeader, {\n      className: classes.cardHeader,\n      classes: {\n        title: classes.cardHeaderTitle,\n        subheader: classes.cardHeaderSubtitle\n      },\n      avatar: /*#__PURE__*/_jsx(Checkbox, {\n        color: \"primary\",\n        onClick: handleToggleAll(items),\n        checked: numberOfChecked(items) === items.length && items.length !== 0,\n        indeterminate: numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0,\n        disabled: items.length === 0,\n        inputProps: {\n          'aria-label': 'all items selected'\n        }\n      }),\n      title: title,\n      subheader: `${numberOfChecked(items)}/${items.length} selected`\n    }), /*#__PURE__*/_jsxs(List, {\n      className: classes.list,\n      dense: true,\n      component: \"div\",\n      role: \"list\",\n      children: [items.map(value => {\n        const labelId = `transfer-list-all-item-${value.id}-label`;\n        return /*#__PURE__*/_jsxs(ListItem, {\n          role: \"listitem\",\n          button: true,\n          onClick: handleToggle(value),\n          className: classes.itemList,\n          children: [/*#__PURE__*/_jsx(ListItemIcon, {\n            children: /*#__PURE__*/_jsx(Checkbox, {\n              color: \"primary\",\n              checked: isChecked(value),\n              tabIndex: -1,\n              disableRipple: true,\n              inputProps: {\n                'aria-labelledby': labelId\n              }\n            })\n          }), /*#__PURE__*/_jsx(ListItemText, {\n            id: labelId,\n            primary: `${value.user_id} (${value.first_name} ${value.last_name})`,\n            classes: {\n              primary: classes.itemText\n            }\n          })]\n        }, value.id);\n      }), /*#__PURE__*/_jsx(ListItem, {})]\n    })]\n  });\n\n  return /*#__PURE__*/_jsx(DialogMain, _objectSpread(_objectSpread({}, rest), {}, {\n    onClose: handleClose,\n    onOk: onSaveList,\n    okText: \"Save\",\n    enterToOk: false,\n    classes: {\n      paper: classes.root\n    },\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 1,\n      justify: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 5,\n        children: customList(titleLeft, leftSideList)\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 2,\n        children: /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          direction: \"column\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsx(Button, {\n            variant: \"outlined\",\n            size: \"small\",\n            className: classes.button,\n            onClick: handleCheckedRight,\n            disabled: leftChecked.length === 0,\n            \"aria-label\": \"move selected right\",\n            children: \">\"\n          }), /*#__PURE__*/_jsx(Button, {\n            variant: \"outlined\",\n            size: \"small\",\n            className: classes.button,\n            onClick: handleCheckedLeft,\n            disabled: rightChecked.length === 0,\n            \"aria-label\": \"move selected left\",\n            children: \"<\"\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 5,\n        children: /*#__PURE__*/_jsxs(Card, {\n          children: [/*#__PURE__*/_jsx(CardHeader, {\n            className: classes.cardHeader,\n            classes: {\n              title: classes.cardHeaderTitle,\n              subheader: classes.cardHeaderSubtitle\n            },\n            avatar: /*#__PURE__*/_jsx(Checkbox, {\n              color: \"primary\",\n              onClick: handleToggleAll(rightSideList),\n              checked: numberOfChecked(rightSideList) === rightSideList.length && rightSideList.length !== 0,\n              indeterminate: numberOfChecked(rightSideList) !== rightSideList.length && numberOfChecked(rightSideList) !== 0,\n              disabled: rightSideList.length === 0,\n              inputProps: {\n                'aria-label': 'all items selected'\n              }\n            }),\n            title: titleRight,\n            subheader: `${numberOfChecked(rightSideList)}/${rightSideList.length} selected`\n          }), /*#__PURE__*/_jsx(DragDropContext, {\n            onDragEnd: onDragEndItem,\n            children: /*#__PURE__*/_jsx(Droppable, {\n              droppableId: \"droppable\",\n              children: provided => /*#__PURE__*/_jsxs(List, _objectSpread(_objectSpread({\n                className: classes.list\n              }, provided.droppableProps), {}, {\n                ref: provided.innerRef,\n                dense: true,\n                component: \"div\",\n                role: \"list\",\n                children: [rightSideList.map((value, index) => {\n                  const labelId = `transfer-list-all-item-${value.id}-label`;\n                  return /*#__PURE__*/_jsx(Draggable, {\n                    draggableId: value.id + '',\n                    index: index,\n                    children: renderDraggable(provided => /*#__PURE__*/_jsxs(ListItem, _objectSpread(_objectSpread({\n                      role: \"listitem\",\n                      button: true,\n                      onClick: handleToggle(value),\n                      className: classes.itemList,\n                      ref: provided.innerRef\n                    }, provided.draggableProps), {}, {\n                      children: [/*#__PURE__*/_jsx(ListItemIcon, {\n                        children: /*#__PURE__*/_jsx(Checkbox, {\n                          color: \"primary\",\n                          checked: isChecked(value),\n                          tabIndex: -1,\n                          disableRipple: true,\n                          inputProps: {\n                            'aria-labelledby': labelId\n                          }\n                        })\n                      }), /*#__PURE__*/_jsx(ListItemText, {\n                        id: labelId,\n                        primary: `${value.user_id} (${value.first_name} ${value.last_name})`,\n                        classes: {\n                          primary: classes.itemText\n                        }\n                      }), /*#__PURE__*/_jsx(\"span\", _objectSpread(_objectSpread({}, provided.dragHandleProps), {}, {\n                        children: /*#__PURE__*/_jsx(DragIndicatorIcon, {})\n                      }))]\n                    }), value.id))\n                  }, value.id);\n                }), provided.placeholder]\n              }))\n            })\n          })]\n        })\n      })]\n    })\n  }));\n}\n\nexport default DialogTransferList;","map":null,"metadata":{},"sourceType":"module"}