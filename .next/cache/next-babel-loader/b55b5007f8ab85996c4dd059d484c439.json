{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, put, putResolve, call } from 'redux-saga/effects';\nimport { select, all } from 'typed-redux-saga';\nimport { manufacturerStore, commonStore, advancedFilterActions } from '@/store/reducers';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport manufacturerApi from '@/apis/manufacturer.api';\nexport function* fetchList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData\n  } = yield all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData)\n  });\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(manufacturerApi.getList, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(manufacturerStore.actions.setDataList(data.manufacturers));\n}\nexport function* fetchInitDataForList() {\n  const data = yield call(manufacturerApi.getInitDataForList);\n  yield put(manufacturerStore.actions.setInitDataForList(data));\n}\nexport function* fetchInitDataForCE() {\n  const _yield$call = yield call(manufacturerApi.getInitDataForCE),\n        {\n    permissions\n  } = _yield$call,\n        response = _objectWithoutProperties(_yield$call, [\"permissions\"]);\n\n  yield all([put(manufacturerStore.actions.setPermissions(permissions)), put(manufacturerStore.actions.setInitDataForCE(response)), put(manufacturerStore.actions.setDetail({\n    manufacturer_id: response.next_code\n  }))]);\n}\nexport function* fetchDetail(id) {\n  const {\n    manufacturer\n  } = yield call(manufacturerApi.getDetail, id);\n  yield put(manufacturerStore.actions.setDetail(manufacturer));\n}\nexport function* getManufacturerList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForList);\n    const permissions = yield* select(manufacturerStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* openManuCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    yield put(manufacturerStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* openManuUpdateDialog({\n  payload: id\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    yield call(fetchDetail, id);\n    yield put(manufacturerStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* createManu({\n  payload\n}) {\n  yield put(manufacturerStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      message\n    } = yield call(manufacturerApi.create, payload);\n    yield call(fetchInitDataForCE);\n    yield put(commonStore.actions.setSuccessMessage(message));\n    yield put(manufacturerStore.actions.resetDetail());\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(manufacturerStore.actions.setDialogStateLoading(false));\n}\nexport function* updateManu({\n  payload\n}) {\n  yield put(manufacturerStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      id,\n      formData\n    } = payload;\n    const {\n      message\n    } = yield call(manufacturerApi.update, id, formData);\n    yield call(closeManuDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(manufacturerStore.actions.setDialogStateLoading(false));\n}\nexport function* generateManuId({\n  payload: formData\n}) {\n  yield put(manufacturerStore.actions.setDialogStateLoading(true));\n\n  try {\n    const data = yield call(manufacturerApi.getNextCode, formData.manufacturer_id);\n    yield put(manufacturerStore.actions.setDetail(_objectSpread(_objectSpread({}, formData), {}, {\n      manufacturer_id: data.generated_code\n    })));\n    yield put(commonStore.actions.setSuccessMessage(data.message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(manufacturerStore.actions.setDialogStateLoading(false));\n}\nexport function* closeManuDialog() {\n  yield putResolve(manufacturerStore.actions.setDialogStateOpen(false));\n  yield call(getManufacturerList);\n  yield put(manufacturerStore.actions.resetDetail());\n}\n\nfunction* manufacturerSaga() {\n  yield takeEvery(manufacturerStore.sagaGetList, getManufacturerList);\n  yield takeEvery(manufacturerStore.sagaOpenCreateDialog, openManuCreateDialog);\n  yield takeEvery(manufacturerStore.sagaOpenUpdateDialog, openManuUpdateDialog);\n  yield takeEvery(manufacturerStore.sagaCreate, createManu);\n  yield takeEvery(manufacturerStore.sagaUpdate, updateManu);\n  yield takeEvery(manufacturerStore.sagaGenerateCode, generateManuId);\n  yield takeEvery(manufacturerStore.sagaCloseDialog, closeManuDialog);\n}\n\nexport default manufacturerSaga;","map":null,"metadata":{},"sourceType":"module"}