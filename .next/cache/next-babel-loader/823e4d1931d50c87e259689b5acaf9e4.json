{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Paper, Checkbox, Tooltip } from '@material-ui/core';\nimport { DataTable, DataTableTextField, DataTableAutocomplete } from '@/components';\nimport { Switch, Case, If, Then, Else } from 'react-if';\nimport { useController } from 'react-hook-form';\nimport useStyles from './styles';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport * as yup from 'yup';\nimport clsx from 'clsx';\nimport * as columnProperties from '@/utils/columnProperties';\n\nconst TableExtendedProperties = props => {\n  const classes = useStyles();\n  const {\n    propertiesList,\n    name,\n    control,\n    tableHeight,\n    editMode,\n    parameterName\n  } = props;\n  const {\n    field: {\n      value: propertiesValue,\n      onChange\n    }\n  } = useController({\n    name,\n    control\n  });\n\n  const getStylesRowDisabled = params => {\n    const language = _.find(propertiesList, {\n      id: params.id\n    });\n\n    return clsx({\n      [classes.disable]: (language === null || language === void 0 ? void 0 : language.status) === false\n    });\n  };\n\n  const onChangeValue = (id, value) => {\n    const newPropertiesValue = immer(propertiesValue, draft => {\n      const {\n        parameter_id\n      } = _.find(propertiesList, {\n        id\n      });\n\n      if (value === '' || value === false) {\n        delete draft[parameter_id];\n      } else {\n        draft[parameter_id] = value;\n      }\n    });\n    onChange(newPropertiesValue);\n  };\n\n  const handleChangeValueDropdown = id => (event, optionValue, reason) => {\n    const newPropertiesValue = immer(propertiesValue, draft => {\n      const {\n        parameter_id\n      } = _.find(propertiesList, {\n        id\n      });\n\n      if (reason === 'clear') {\n        delete draft[parameter_id];\n      } else {\n        draft[parameter_id] = optionValue.properties.value;\n      }\n    });\n    onChange(newPropertiesValue);\n  };\n\n  const filteredProperties = React.useMemo(() => {\n    const types = ['boolean', 'string', 'dropdown'];\n    const propertiesWithTypes = propertiesList.filter(property => types.includes(property.properties.type));\n\n    if (editMode) {\n      const filterList = propertiesWithTypes.filter(property => {\n        return property.status === true || _.has(propertiesValue, property.parameter_id);\n      });\n      return filterList;\n    } else {\n      return propertiesWithTypes.filter(property => property.status === true);\n    }\n  }, [propertiesList, propertiesValue]);\n\n  const getValueDropdown = (value, list) => {\n    if (list.length === 0) {\n      return value;\n    }\n\n    const optionValue = _.find(list, item => {\n      var _item$properties;\n\n      return ((_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.value) === value;\n    });\n\n    return (optionValue === null || optionValue === void 0 ? void 0 : optionValue.description) || value;\n  };\n\n  const renderDropdownField = params => {\n    const {\n      properties\n    } = params.row;\n    let value = '';\n\n    if (params.value) {\n      value = _.find(properties.valid_value_list, option => {\n        var _option$properties;\n\n        return ((_option$properties = option.properties) === null || _option$properties === void 0 ? void 0 : _option$properties.value) === params.value;\n      });\n    }\n\n    return /*#__PURE__*/_jsx(DataTableAutocomplete, {\n      value: value,\n      params: params,\n      options: (properties === null || properties === void 0 ? void 0 : properties.valid_value_list) || [],\n      onChange: handleChangeValueDropdown(params.id)\n    });\n  };\n\n  return /*#__PURE__*/_jsx(Paper, {\n    elevation: 1,\n    children: /*#__PURE__*/_jsx(DataTable, {\n      tableHeight: tableHeight,\n      disableColumnMenu: true,\n      disableSelectionOnClick: true,\n      rows: filteredProperties,\n      hideFooter: true,\n      getRowClassName: getStylesRowDisabled,\n      onCellDoubleClick: (params, event) => {\n        const {\n          properties,\n          status\n        } = params.row;\n\n        if (properties.type === 'boolean' || !status) {\n          event.stopPropagation();\n        }\n      },\n      columns: [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n        field: 'description',\n        headerName: 'Properties',\n        width: 180\n      }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Value')), {}, {\n        field: 'value',\n        flex: 0.6,\n\n        valueGetter(params) {\n          const {\n            parameter_id\n          } = params.row;\n          return propertiesValue[parameter_id] || '';\n        },\n\n        renderEditCell(params) {\n          const {\n            properties\n          } = params.row;\n          return /*#__PURE__*/_jsxs(Switch, {\n            children: [/*#__PURE__*/_jsx(Case, {\n              condition: properties.type === 'string',\n              children: /*#__PURE__*/_jsx(DataTableTextField, {\n                rules: yup.string().matches(properties.regex, {\n                  message: `Key's value is invalid! please refer to the \"code of ${parameterName} parameter\" regex.`,\n                  excludeEmptyString: true\n                }),\n                params: params,\n                onChangeValue: onChangeValue,\n                placeholder: properties.placeholder\n              })\n            }), /*#__PURE__*/_jsx(Case, {\n              condition: properties.type === 'dropdown',\n              children: renderDropdownField(params)\n            })]\n          });\n        },\n\n        renderCell(params) {\n          const {\n            properties,\n            parameter_id,\n            status,\n            id\n          } = params.row;\n          const value = propertiesValue[parameter_id];\n          return /*#__PURE__*/_jsxs(Switch, {\n            children: [/*#__PURE__*/_jsx(Case, {\n              condition: properties.type === 'boolean',\n              children: /*#__PURE__*/_jsx(Tooltip, {\n                title: properties.placeholder,\n                children: /*#__PURE__*/_jsx(Checkbox, {\n                  color: \"primary\",\n                  className: classes.checkbox,\n                  disabled: !status,\n                  checked: Boolean(value),\n                  onChange: (event, checked) => onChangeValue(id, checked)\n                })\n              })\n            }), /*#__PURE__*/_jsx(Case, {\n              condition: properties.type === 'string',\n              children: /*#__PURE__*/_jsxs(If, {\n                condition: Boolean(value),\n                children: [/*#__PURE__*/_jsx(Then, {\n                  children: /*#__PURE__*/_jsx(\"div\", {\n                    className: classes.textValue,\n                    children: value\n                  })\n                }), /*#__PURE__*/_jsx(Else, {\n                  children: /*#__PURE__*/_jsx(\"div\", {\n                    className: classes.placeholder,\n                    children: properties.placeholder\n                  })\n                })]\n              })\n            }), /*#__PURE__*/_jsx(Case, {\n              condition: properties.type === 'dropdown',\n              children: /*#__PURE__*/_jsxs(If, {\n                condition: Boolean(value),\n                children: [/*#__PURE__*/_jsx(Then, {\n                  children: /*#__PURE__*/_jsx(\"div\", {\n                    className: classes.textValue,\n                    children: getValueDropdown(value, properties.valid_value_list || [])\n                  })\n                }), /*#__PURE__*/_jsx(Else, {\n                  children: /*#__PURE__*/_jsx(\"div\", {\n                    className: classes.placeholder,\n                    children: properties.placeholder\n                  })\n                })]\n              })\n            })]\n          });\n        }\n\n      })]\n    })\n  });\n};\n\nTableExtendedProperties.defaultProps = {\n  tableHeight: 360,\n  editMode: false\n};\nexport default TableExtendedProperties;","map":null,"metadata":{},"sourceType":"module"}