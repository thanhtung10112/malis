{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice, createAction } from '@reduxjs/toolkit';\nexport var resetState = createAction('makeAList/RESET_STATE');\nexport var presetDetail = {\n  id: null,\n  name: '',\n  entity: '',\n  description: '',\n  is_user_default: false,\n  is_shared: false,\n  is_system_default: false,\n  columns_displayed: [],\n  sort_conditions: [],\n  where_conditions: {\n    conjunction: 'AND',\n    type: 'group',\n    conditions: []\n  },\n  ignore_case: false,\n  distinct: false,\n  created_by: '',\n  created_at: '',\n  updated_by: '',\n  updated_at: ''\n};\nexport var systemPreset = {\n  id: null,\n  name: ''\n};\nexport var permissions = {\n  update_system_default_presets: false\n};\nexport var initialState = {\n  isOpen: false,\n  isEditMode: false,\n  entity: '',\n  systemPreset: systemPreset,\n  presetDetail: presetDetail,\n  presetDefault: presetDetail,\n  presetList: [],\n  permissions: permissions,\n  filterType: 'own',\n  initData: {\n    columns: [],\n    comparators: [],\n    logicalOperators: [],\n    sortOptions: []\n  },\n  loading: {\n    table: false,\n    dialog: false\n  },\n  saveAsForm: {\n    open: false,\n    clearError: false,\n    error: ''\n  },\n  malForm: {\n    clearError: false,\n    error: ''\n  }\n};\nvar makeAListReducer = createSlice({\n  name: 'makeAList',\n  initialState: initialState,\n  reducers: {\n    setOpen: function setOpen(state, action) {\n      state.isOpen = action.payload;\n    },\n    setIsEditMode: function setIsEditMode(state, action) {\n      state.isEditMode = action.payload;\n    },\n    setPresetDetail: function setPresetDetail(state, action) {\n      state.presetDetail = _objectSpread(_objectSpread({}, state.presetDetail), action.payload);\n    },\n    resetPresetDetail: function resetPresetDetail(state) {\n      state.presetDetail = _objectSpread(_objectSpread({}, presetDetail), {}, {\n        entity: state.presetDetail.entity\n      });\n    },\n    setPresetList: function setPresetList(state, action) {\n      state.presetList = action.payload;\n    },\n    setFilterType: function setFilterType(state, action) {\n      state.filterType = action.payload;\n    },\n    setInitData: function setInitData(state, action) {\n      state.initData = action.payload;\n    },\n    setSystemPreset: function setSystemPreset(state, action) {\n      state.systemPreset = action.payload;\n    },\n    setPresetDefault: function setPresetDefault(state, action) {\n      state.presetDefault = action.payload;\n    },\n    setPermissions: function setPermissions(state, action) {\n      state.permissions = action.payload;\n    },\n    setLoadingTable: function setLoadingTable(state, action) {\n      state.loading.table = action.payload;\n    },\n    setLoadingDialog: function setLoadingDialog(state, action) {\n      state.loading.dialog = action.payload;\n    },\n    setSaveAsForm: function setSaveAsForm(state, action) {\n      state.saveAsForm = _objectSpread(_objectSpread({}, state.saveAsForm), action.payload);\n    },\n    setMalForm: function setMalForm(state, action) {\n      state.malForm = _objectSpread(_objectSpread({}, state.malForm), action.payload);\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n});\nvar _makeAListReducer$act = makeAListReducer.actions,\n    setOpen = _makeAListReducer$act.setOpen,\n    setIsEditMode = _makeAListReducer$act.setIsEditMode,\n    setPresetDetail = _makeAListReducer$act.setPresetDetail,\n    resetPresetDetail = _makeAListReducer$act.resetPresetDetail,\n    setPresetList = _makeAListReducer$act.setPresetList,\n    setFilterType = _makeAListReducer$act.setFilterType,\n    setInitData = _makeAListReducer$act.setInitData,\n    setSystemPreset = _makeAListReducer$act.setSystemPreset,\n    setPresetDefault = _makeAListReducer$act.setPresetDefault,\n    setPermissions = _makeAListReducer$act.setPermissions,\n    setLoadingTable = _makeAListReducer$act.setLoadingTable,\n    setSaveAsForm = _makeAListReducer$act.setSaveAsForm,\n    setLoadingDialog = _makeAListReducer$act.setLoadingDialog,\n    setMalForm = _makeAListReducer$act.setMalForm;\nexport { setOpen, setIsEditMode, setPresetDetail, resetPresetDetail, setPresetList, setFilterType, setInitData, setSystemPreset, setPresetDefault, setPermissions, setLoadingTable, setSaveAsForm, setLoadingDialog, setMalForm };\nexport var open = createAction('makeAList/OPEN');\nexport var create = createAction('makeAList/CREATE');\nexport var getList = createAction('makeAList/GET_LIST');\nexport var getDetail = createAction('makeAList/GET_DETAIL');\nexport var getInitData = createAction('makeAList/GET_INIT_DATA');\nexport var share = createAction('makeAList/SHARE');\nexport var update = createAction('makeAList/UPDATE');\nexport var remove = createAction('makeAList/REMOVE');\nexport var clearDefault = createAction('makeAList/CLEAR_DEFAULT');\nexport var exportMakeAList = createAction('makeAList/EXPORT');\nexport var changeFilterType = createAction('makeAList/CHANGE_FILTER_TYPE');\nexport var saveAs = createAction('makeAList/SAVE_AS');\nexport var stopMakeAList = createAction('makeAList/STOP');\nexport var selectIsOpen = function selectIsOpen(state) {\n  return state.makeAList.isOpen;\n};\nexport var selectIsEditMode = function selectIsEditMode(state) {\n  return state.makeAList.isEditMode;\n};\nexport var selectPresetDetail = function selectPresetDetail(state) {\n  return state.makeAList.presetDetail;\n};\nexport var selectColumnDisplay = function selectColumnDisplay(state) {\n  return state.makeAList.presetDetail.columns_displayed;\n};\nexport var selectWhereConditions = function selectWhereConditions(state) {\n  return state.makeAList.presetDetail.where_conditions;\n};\nexport var selectSortConditions = function selectSortConditions(state) {\n  return state.makeAList.presetDetail.sort_conditions;\n};\nexport var selectPresetList = function selectPresetList(state) {\n  return state.makeAList.presetList;\n};\nexport var selectPresetDefault = function selectPresetDefault(state) {\n  return state.makeAList.presetDefault;\n};\nexport var selectSystemPreset = function selectSystemPreset(state) {\n  return state.makeAList.systemPreset;\n};\nexport var selectFilterType = function selectFilterType(state) {\n  return state.makeAList.filterType;\n};\nexport var selectPermissions = function selectPermissions(state) {\n  return state.makeAList.permissions;\n};\nexport var selectEntity = function selectEntity(state) {\n  return state.makeAList.entity;\n};\nexport var selectColumnsData = function selectColumnsData(state) {\n  return state.makeAList.initData.columns;\n};\nexport var selectComparatorsData = function selectComparatorsData(state) {\n  return state.makeAList.initData.comparators;\n};\nexport var selectLogicalOperatorsData = function selectLogicalOperatorsData(state) {\n  return state.makeAList.initData.logicalOperators;\n};\nexport var selectSortOptionsData = function selectSortOptionsData(state) {\n  return state.makeAList.initData.sortOptions;\n};\nexport var selectLoadingTable = function selectLoadingTable(state) {\n  return state.makeAList.loading.table;\n};\nexport var selectLoadingDialog = function selectLoadingDialog(state) {\n  return state.makeAList.loading.dialog;\n};\nexport var selectSaveAsForm = function selectSaveAsForm(state) {\n  return state.makeAList.saveAsForm;\n};\nexport var selectMalForm = function selectMalForm(state) {\n  return state.makeAList.malForm;\n};\nexport default makeAListReducer.reducer;","map":null,"metadata":{},"sourceType":"module"}