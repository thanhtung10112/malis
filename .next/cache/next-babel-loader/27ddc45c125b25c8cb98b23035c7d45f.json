{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DialogMain, FormControllerTabs, AppTabHistoryLog, TableExtendedProperties, BtnHelp } from '@/components';\nimport TabGeneral from './TabGeneral';\nimport { commonStore, specificationStore } from '@/store/reducers';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport _ from 'lodash';\nimport getValidationSchema from './validationSchema';\n\nvar DialogSpecificationCE = function DialogSpecificationCE() {\n  var _useTranslation = useTranslation('specification'),\n      t = _useTranslation.t;\n\n  var dispatch = useDispatch();\n  var dialogState = useSelector(specificationStore.selectDialogState);\n  var specificationDetail = useSelector(specificationStore.selectDetail);\n  var userDrawing = useSelector(commonStore.selectUserValueDrawing);\n\n  var _useSelector = useSelector(specificationStore.selectInitDataForCE),\n      parameters = _useSelector.parameters,\n      wiki_page = _useSelector.wiki_page;\n\n  var permissions = useSelector(specificationStore.selectPermissions);\n\n  var isCreating = _.isNil(specificationDetail.id);\n\n  var vaidationSchema = useMemo(function () {\n    return getValidationSchema(t);\n  }, []);\n  var specificationForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(vaidationSchema)\n  });\n  useEffect(function () {\n    specificationForm.reset(specificationDetail);\n  }, [specificationDetail]);\n  useEffect(function () {\n    if (userDrawing.value === -1) {\n      dispatch(specificationStore.actions.setDetail({\n        drawing_id: null\n      }));\n    } else {\n      dispatch(specificationStore.actions.setDetail({\n        drawing_id: userDrawing\n      }));\n    }\n  }, [userDrawing]);\n  var handleSubmitForm = specificationForm.handleSubmit(function (formData) {\n    formData.drawing_id = formData.drawing_id.value;\n\n    var data = _.pick(formData, ['job_id', 'drawing_id', 'spec_id', 'descriptions']);\n\n    if (isCreating) {\n      dispatch(specificationStore.sagaCreate(data));\n    } else {\n      var specEdit = _.pick(formData, 'descriptions');\n\n      dispatch(specificationStore.sagaUpdate({\n        id: formData.id,\n        formData: specEdit\n      }));\n    }\n  });\n\n  var handleClose = function handleClose() {\n    dispatch(specificationStore.sagaCloseDialog());\n  };\n\n  var handleChangeTab = function handleChangeTab(event, nextTab) {\n    dispatch(specificationStore.actions.setDialogStateTab(nextTab));\n  };\n\n  var handleChangeHistoryLogs = function handleChangeHistoryLogs(data) {\n    dispatch(specificationStore.actions.setHistoryLogs(data));\n  };\n\n  var generalTab = {\n    label: t('common:tab.general'),\n    panel: /*#__PURE__*/_jsx(TabGeneral, {}),\n    errorKey: ['drawing_id', 'spec_id', 'job_id']\n  };\n  var historyTab = {\n    label: t('common:tab.history'),\n    panel: /*#__PURE__*/_jsx(AppTabHistoryLog, {\n      isOpenDialog: dialogState.open,\n      data: dialogState.historyLogs,\n      onChange: handleChangeHistoryLogs,\n      entityId: specificationDetail.id,\n      mode: \"horizonatal\",\n      tableHeight: 315,\n      descriptionRows: 20,\n      entity: \"specification\"\n    }),\n    disabled: isCreating\n  };\n  var extendedPropertyTab = {\n    label: t('common:tab.extended_properties'),\n    panel: /*#__PURE__*/_jsx(TableExtendedProperties, {\n      control: specificationForm.control,\n      name: \"additional_attributes\",\n      editMode: !isCreating,\n      propertiesList: parameters.SSAT,\n      tableHeight: 335,\n      parameterName: \"SSAT\"\n    })\n  };\n  var tabs = [generalTab, extendedPropertyTab, historyTab];\n  return /*#__PURE__*/_jsx(DialogMain, {\n    fullWidth: true,\n    maxWidth: \"md\",\n    open: dialogState.open,\n    loading: dialogState.loading,\n    title: /*#__PURE__*/_jsx(BtnHelp, {\n      title: isCreating ? t('form.title.create_specification') : t('form.title.update_specification'),\n      href: wiki_page\n    }),\n    onOk: handleSubmitForm,\n    onClose: handleClose,\n    okText: isCreating ? t('common:button.create') : t('common:button.update'),\n    okButtonProps: {\n      disabled: dialogState.loading || !(permissions === null || permissions === void 0 ? void 0 : permissions.edit) && !isCreating\n    },\n    children: /*#__PURE__*/_jsx(FormControllerTabs, {\n      form: specificationForm,\n      value: dialogState.tab,\n      onChange: handleChangeTab,\n      tabs: tabs\n    })\n  });\n};\n\nexport default DialogSpecificationCE;","map":null,"metadata":{},"sourceType":"module"}