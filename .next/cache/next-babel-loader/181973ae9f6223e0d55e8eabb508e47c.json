{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport useStyles from './styles';\nimport { useForm } from 'react-hook-form';\nimport { Grid, Typography } from '@material-ui/core';\nimport SyncAltIcon from '@material-ui/icons/SyncAlt';\nimport { FormControllerAutocomplete, FormControllerTextField, SectionTimezone, DialogMain, AppTabHistoryLog, FormControllerTabs, FormControllerNumberField, BtnHelp } from '@/components';\nimport { Unless } from 'react-if';\nimport _ from 'lodash';\nimport { currencyStore } from '@/store/reducers';\nimport { currencyRateFormat } from '@/utils/constant';\nimport clsx from 'clsx';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport getValidationSchema from './validationSchema';\n\nfunction CurrencyAddEditDialog() {\n  var _useTranslation = useTranslation('currency'),\n      t = _useTranslation.t;\n\n  var classes = useStyles();\n\n  var _useState = useState(0),\n      tab = _useState[0],\n      setTab = _useState[1];\n\n  var dispatch = useDispatch();\n  var dialogState = useSelector(currencyStore.selectDialogState);\n  var initDataForCE = useSelector(currencyStore.selectInitDataForCE);\n  var baseCurrency = useSelector(currencyStore.selectUserBaseCurrency);\n  var currencyDetail = useSelector(currencyStore.selectDetail);\n  var permissions = useSelector(currencyStore.selectPermissions);\n\n  var _useSelector = useSelector(currencyStore.selectInitDataForCE),\n      wiki_page = _useSelector.wiki_page;\n\n  var isCreating = _.isNil(currencyDetail.id);\n\n  var titleDialog = isCreating ? t('form.create_currency') : t('form.update_currency');\n  var validationSchema = useMemo(function () {\n    return getValidationSchema(t);\n  }, []);\n  var currencyForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  });\n  var watchCurrencyId = currencyForm.watch('currency_id', '');\n  var watchIsBaseRateMode = currencyForm.watch('is_base_rate_mode', false);\n  var disableSwapRating = !isCreating && !currencyDetail.base_currency;\n  useEffect(function () {\n    var resetData = _objectSpread({}, currencyDetail);\n\n    if (_.isNil(currencyDetail.is_base_rate_mode)) {\n      resetData.is_base_rate_mode = false;\n    }\n\n    currencyForm.reset(_objectSpread({}, resetData));\n  }, [currencyDetail]);\n\n  var handleClose = function handleClose() {\n    currencyForm.clearErrors();\n    setTab(0);\n    dispatch(currencyStore.sagaCloseDialog());\n  };\n\n  var onSwapRateMode = function onSwapRateMode() {\n    if (!disableSwapRating) {\n      currencyForm.setValue('is_base_rate_mode', !watchIsBaseRateMode);\n      currencyForm.setValue('multiplier', null);\n      currencyForm.setValue('rate', '');\n      currencyForm.unregister('rate');\n      currencyForm.clearErrors(['rate', 'multiplier']);\n    }\n  };\n\n  var onSubmitData = currencyForm.handleSubmit(function (formData) {\n    var data = _.pick(formData, ['base_currency', 'currency_id', 'description', 'is_base_rate_mode', 'multiplier', 'rate', 'round_to']);\n\n    if (isCreating) {\n      data.base_currency = baseCurrency.id;\n      dispatch(currencyStore.sagaCreate(data));\n    } else {\n      dispatch(currencyStore.sagaUpdate({\n        id: formData.id,\n        formData: data\n      }));\n    }\n  });\n\n  var handleChangeTab = function handleChangeTab(_, nextTab) {\n    setTab(nextTab);\n  };\n\n  var handleChangeHistoryLogs = function handleChangeHistoryLogs(data) {\n    dispatch(currencyStore.actions.setHistoryLogs(data));\n  };\n\n  var TabGeneral = /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      style: {\n        marginTop: 8\n      },\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(FormControllerTextField, {\n          name: \"currency_id\",\n          control: currencyForm.control,\n          label: t('label.code'),\n          required: true,\n          disabled: !isCreating,\n          transformValue: function transformValue(value) {\n            return _.toUpper(value);\n          },\n          limitText: 3\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n          disableClearable: true,\n          control: currencyForm.control,\n          name: \"round_to\",\n          options: initDataForCE.round_to_options,\n          renderOption: function renderOption(option) {\n            return option.description;\n          },\n          label: t('label.round_to'),\n          required: true\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(Grid, {\n      className: classes.gridTop,\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 5,\n        className: classes.wrapContent,\n        children: [/*#__PURE__*/_jsx(FormControllerAutocomplete, {\n          disableClearable: true,\n          control: currencyForm.control,\n          name: \"multiplier\",\n          options: initDataForCE.multiplier_options,\n          disabled: !isCreating && !currencyDetail.base_currency,\n          renderOption: function renderOption(option) {\n            return option.description;\n          },\n          primaryKeyOption: \"value\",\n          style: {\n            width: '100%'\n          },\n          label: \"Multiplier\",\n          required: true\n        }), /*#__PURE__*/_jsx(Typography, {\n          display: \"inline\",\n          variant: \"caption\",\n          className: classes.multiplierLabel,\n          children: watchIsBaseRateMode ? baseCurrency.currency_id : watchCurrencyId\n        })]\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 2,\n        className: classes.wrapSymbol,\n        children: [/*#__PURE__*/_jsx(SyncAltIcon, {\n          className: clsx(classes.syncAltIcon, disableSwapRating && classes.disabled),\n          onClick: onSwapRateMode\n        }), /*#__PURE__*/_jsx(Typography, {\n          display: \"inline\",\n          variant: \"caption\",\n          className: classes.symbolEqual,\n          children: \"=\"\n        })]\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 5,\n        className: classes.wrapContent,\n        children: [/*#__PURE__*/_jsx(FormControllerNumberField, {\n          control: currencyForm.control,\n          name: \"rate\",\n          label: \"Rate\",\n          required: true,\n          disabled: !isCreating && !currencyDetail.base_currency,\n          decimalScale: currencyRateFormat.precision,\n          fixedDecimalScale: currencyRateFormat.precision\n        }), /*#__PURE__*/_jsx(Typography, {\n          display: \"inline\",\n          variant: \"caption\",\n          className: classes.multiplierLabel,\n          children: watchIsBaseRateMode ? watchCurrencyId : baseCurrency.currency_id\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(Grid, {\n      className: classes.gridTop,\n      container: true,\n      spacing: 1,\n      children: /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(FormControllerTextField, {\n          control: currencyForm.control,\n          label: t('label.description'),\n          multiline: true,\n          rows: 12,\n          name: \"description\"\n        })\n      })\n    }), /*#__PURE__*/_jsx(Unless, {\n      condition: isCreating,\n      children: /*#__PURE__*/_jsx(SectionTimezone, {\n        value: currencyDetail\n      })\n    })]\n  });\n\n  var generalTab = {\n    label: t('common:tab.general'),\n    panel: TabGeneral,\n    errorKey: ['currency_id', 'multiplier', 'rate', 'round_to', 'description']\n  };\n  var historyTab = {\n    label: t('common:tab.history'),\n    disabled: isCreating,\n    panel: /*#__PURE__*/_jsx(AppTabHistoryLog, {\n      isOpenDialog: dialogState.open,\n      data: dialogState.historyLogs,\n      onChange: handleChangeHistoryLogs,\n      entityId: currencyDetail.id,\n      tableHeight: 250,\n      entity: \"currency\"\n    })\n  };\n  var tabs = [generalTab, historyTab];\n  return /*#__PURE__*/_jsx(DialogMain, {\n    open: dialogState.open,\n    title: /*#__PURE__*/_jsx(BtnHelp, {\n      title: titleDialog,\n      href: wiki_page\n    }),\n    onOk: onSubmitData,\n    onClose: handleClose,\n    loading: dialogState.loading,\n    height: 470,\n    okButtonProps: {\n      disabled: dialogState.loading || !(permissions === null || permissions === void 0 ? void 0 : permissions.edit) && !isCreating\n    },\n    okText: isCreating ? t('common:button.create') : t('common:button.update'),\n    children: /*#__PURE__*/_jsx(FormControllerTabs, {\n      value: tab,\n      onChange: handleChangeTab,\n      form: currencyForm,\n      tabs: tabs\n    })\n  });\n}\n\nexport default CurrencyAddEditDialog;","map":null,"metadata":{},"sourceType":"module"}