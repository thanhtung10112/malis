{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { createAction, createSlice, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport var name = 'assembly';\nexport var resetState = createAction(\"\".concat(name, \"/\").concat(actionTypes.RESET_STATE));\nvar initialState = {\n  dataList: [],\n  initDataForList: {\n    jobs: [],\n    permissions: {\n      assembly: null\n    },\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  }\n};\nvar assemblySlice = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    setInitDataForList: function setInitDataForList(state, _ref) {\n      var payload = _ref.payload;\n      state.initDataForList = payload;\n    },\n    setDataList: function setDataList(state, _ref2) {\n      var payload = _ref2.payload;\n      state.dataList = payload;\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n});\nvar actions = assemblySlice.actions;\nexport { actions };\nexport var sagaGetList = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_LIST));\nexport var sagaChangeUserJob = createAction(\"\".concat(name, \"/\").concat(actionTypes.CHANGE_USER_JOB));\nexport var sagaChangeUserDrawing = createAction(\"\".concat(name, \"/\").concat(actionTypes.CHANGE_USER_DRAWING));\nexport var sagaRemove = createAction(\"\".concat(name, \"/\").concat(actionTypes.REMOVE));\nexport var selectState = function selectState(state) {\n  return state[name];\n};\nexport var selectInitDataForList = createSelector(selectState, function (state) {\n  return state.initDataForList;\n});\nexport var selectPermissions = createSelector(selectState, function (state) {\n  return state.initDataForList.permissions.assembly;\n});\nexport var selectDataList = createSelector(selectState, function (state) {\n  return state.dataList;\n});\nexport default assemblySlice;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/reducers/assembly.reducer.ts"],"names":["createAction","createSlice","createSelector","actionTypes","name","resetState","RESET_STATE","initialState","dataList","initDataForList","jobs","permissions","assembly","parameters","PLLA","wiki_page","column_tooltips","assemblySlice","reducers","setInitDataForList","state","payload","setDataList","extraReducers","type","actions","sagaGetList","GET_LIST","sagaChangeUserJob","CHANGE_USER_JOB","sagaChangeUserDrawing","CHANGE_USER_DRAWING","sagaRemove","REMOVE","selectState","selectInitDataForList","selectPermissions","selectDataList"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,WAAvB,EAAmDC,cAAnD,QAAyE,kBAAzE;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAMA,OAAO,IAAMC,IAAY,GAAG,UAArB;AACP,OAAO,IAAMC,UAAU,GAAGL,YAAY,WAAII,IAAJ,cAAYD,WAAW,CAACG,WAAxB,EAA/B;AAEP,IAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,eAAe,EAAE;AACfC,IAAAA,IAAI,EAAE,EADS;AAEfC,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE;AADC,KAFE;AAKfC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AADI,KALG;AAQfC,IAAAA,SAAS,EAAE,EARI;AASfC,IAAAA,eAAe,EAAE;AATF;AAFE,CAArB;AAeA,IAAMC,aAAa,GAAGhB,WAAW,CAAC;AAChCG,EAAAA,IAAI,EAAJA,IADgC;AAEhCG,EAAAA,YAAY,EAAZA,YAFgC;AAGhCW,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBADQ,8BACWC,KADX,QACuE;AAAA,UAAnDC,OAAmD,QAAnDA,OAAmD;AAC7ED,MAAAA,KAAK,CAACX,eAAN,GAAwBY,OAAxB;AACD,KAHO;AAIRC,IAAAA,WAJQ,uBAIIF,KAJJ,SAIuD;AAAA,UAA1CC,OAA0C,SAA1CA,OAA0C;AAC7DD,MAAAA,KAAK,CAACZ,QAAN,GAAiBa,OAAjB;AACD;AANO,GAHsB;AAWhCE,EAAAA,aAAa,sBACVlB,UAAU,CAACmB,IADD,cACS;AAClB,WAAOjB,YAAP;AACD,GAHU;AAXmB,CAAD,CAAjC;IAkBekB,O,GAAYR,a,CAAZQ,O;;AAEf,OAAO,IAAMC,WAAW,GAAG1B,YAAY,WAAII,IAAJ,cAAYD,WAAW,CAACwB,QAAxB,EAAhC;AACP,OAAO,IAAMC,iBAAiB,GAAG5B,YAAY,WAAqBI,IAArB,cAA6BD,WAAW,CAAC0B,eAAzC,EAAtC;AACP,OAAO,IAAMC,qBAAqB,GAAG9B,YAAY,WAAqBI,IAArB,cAA6BD,WAAW,CAAC4B,mBAAzC,EAA1C;AACP,OAAO,IAAMC,UAAU,GAAGhC,YAAY,WAAwBI,IAAxB,cAAgCD,WAAW,CAAC8B,MAA5C,EAA/B;AAEP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACd,KAAD;AAAA,SAA4BA,KAAK,CAAChB,IAAD,CAAjC;AAAA,CAApB;AACP,OAAO,IAAM+B,qBAAqB,GAAGjC,cAAc,CAACgC,WAAD,EAAc,UAACd,KAAD;AAAA,SAAWA,KAAK,CAACX,eAAjB;AAAA,CAAd,CAA5C;AACP,OAAO,IAAM2B,iBAAiB,GAAGlC,cAAc,CAACgC,WAAD,EAAc,UAACd,KAAD;AAAA,SAAWA,KAAK,CAACX,eAAN,CAAsBE,WAAtB,CAAkCC,QAA7C;AAAA,CAAd,CAAxC;AACP,OAAO,IAAMyB,cAAc,GAAGnC,cAAc,CAACgC,WAAD,EAAc,UAACd,KAAD;AAAA,SAAWA,KAAK,CAACZ,QAAjB;AAAA,CAAd,CAArC;AAEP,eAAeS,aAAf","sourcesContent":["import { createAction, createSlice, PayloadAction, createSelector } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\n\nimport type { DataForDropdown, Entity, ParameterOption, PayloadOperation } from '@/types/Common'\nimport type { AssemblyInitDataForList, AssemblyItem } from '@/types/Assembly'\nimport type { RootReducerType } from './rootReducer'\n\nexport const name: Entity = 'assembly'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nconst initialState = {\n  dataList: [] as AssemblyItem[],\n  initDataForList: {\n    jobs: [],\n    permissions: {\n      assembly: null\n    },\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as AssemblyInitDataForList\n}\n\nconst assemblySlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setInitDataForList(state, { payload }: PayloadAction<AssemblyInitDataForList>) {\n      state.initDataForList = payload\n    },\n    setDataList(state, { payload }: PayloadAction<AssemblyItem[]>) {\n      state.dataList = payload\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\nexport const { actions } = assemblySlice\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaChangeUserJob = createAction<ParameterOption>(`${name}/${actionTypes.CHANGE_USER_JOB}`)\nexport const sagaChangeUserDrawing = createAction<DataForDropdown>(`${name}/${actionTypes.CHANGE_USER_DRAWING}`)\nexport const sagaRemove = createAction<PayloadOperation[]>(`${name}/${actionTypes.REMOVE}`)\n\nexport const selectState = (state: RootReducerType) => state[name]\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.assembly)\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\n\nexport default assemblySlice\n"]},"metadata":{},"sourceType":"module"}