{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createSelector, createAction } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nexport const name = 'drawing';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nexport const initialState = {\n  drawingGroupId: -1,\n  dataList: [],\n  detail: {\n    job_id: null,\n    drawing_id: '',\n    revision: 'A',\n    drawing_format: null,\n    drawing_purpose: null,\n    file_prefix: null,\n    file_type: null,\n    associated_documents: [],\n    customer_id: '',\n    additional_attributes: {},\n    descriptions: [],\n    exclude_from_customer: false,\n    exclude_from_other: false,\n    exclude_from_supplier: false,\n    item_list: [],\n    is_detail_drawing: false,\n    is_drawing: true,\n    is_other_document: false,\n    is_schematic: false,\n    is_specification: false\n  },\n  dialogState: {\n    open: false,\n    loading: false,\n    tab: 0,\n    historyLogs: []\n  },\n  initDataForList: {\n    drawing_groups: [{\n      description: 'All',\n      group_id: null,\n      children: []\n    }],\n    jobs: [],\n    permissions: {\n      drawing: null\n    },\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  initDataForCE: {\n    parameters: {\n      DWAT: [],\n      DWPU: [],\n      // drawing purpose\n      FPRE: [],\n      // file name prefix\n      FTYP: [],\n      // file type\n      PLFO: [],\n      // format\n      PLLA: [],\n      // descriptions\n      PLAT: [] // extended properties\n\n    },\n    wiki_page: ''\n  },\n  revisionDialog: {\n    open: false,\n    loading: false,\n    detail: {\n      new_revision: '',\n      reason: '',\n      description: ''\n    }\n  },\n  componentList: []\n};\nconst drawing = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setDialogStateTab(state, {\n      payload\n    }) {\n      state.dialogState.tab = payload;\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setPermissions(state, {\n      payload\n    }) {\n      state.initDataForList.permissions.drawing = payload;\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      state.dialogState.historyLogs = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    setDrawingGroupId(state, {\n      payload\n    }) {\n      state.drawingGroupId = payload;\n    },\n\n    resetDetail(state, {\n      payload: {\n        userJob\n      }\n    }) {\n      const detailDefaultValue = getDefaultValues(state.initDataForCE.parameters, {\n        drawing_purpose: 'DWPU',\n        file_prefix: 'FPRE',\n        file_type: 'FTYP',\n        drawing_format: 'PLFO'\n      }, initialState.detail);\n      detailDefaultValue.job_id = userJob.value > -1 ? userJob.value : null;\n      state.componentList = initialState.componentList;\n      state.detail = _objectSpread({}, detailDefaultValue);\n      state.dialogState.tab = 0;\n    },\n\n    setRevisionDialogOpen(state, {\n      payload\n    }) {\n      state.revisionDialog.open = payload;\n    },\n\n    setRevisionDialogLoading(state, {\n      payload\n    }) {\n      state.revisionDialog.loading = payload;\n    },\n\n    setRevisionDialogDetail(state, {\n      payload\n    }) {\n      state.revisionDialog.detail = _objectSpread(_objectSpread({}, state.revisionDialog.detail), payload);\n    },\n\n    resetRevisionDialogDetail(state) {\n      state.revisionDialog.detail = _objectSpread({}, initialState.revisionDialog.detail);\n    },\n\n    setComponentList(state, {\n      payload\n    }) {\n      state.componentList = payload;\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n}); // Actions\n\nexport const {\n  actions\n} = drawing; // Saga actions\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaOpenCreatePartDialog = createAction(`${name}/OPEN_CREATE_PART_DIALOG`);\nexport const sagaChangeUserJob = createAction(`${name}/${actionTypes.CHANGE_USER_JOB}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaUpdate = createAction(`${name}/${actionTypes.UPDATE}`);\nexport const sagaOpenRevDialog = createAction(`${name}/OPEN_REV_DIALOG`);\nexport const sagaSaveNewRev = createAction(`${name}/SAVE_NEW_REV`);\nexport const sagaGetDrawingPartList = createAction(`${name}/GET_DRAWING_PART_LIST`); // Selectors\n\nconst selectState = state => state[name];\n\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport const selectPermissions = createSelector(selectState, state => state.initDataForList.permissions.drawing);\nexport const selectDrawingGroups = createSelector(selectState, ({\n  initDataForList\n}) => {\n  const {\n    drawing_groups\n  } = initDataForList;\n  return drawing_groups[0];\n});\nexport const selectDetail = createSelector(selectState, ({\n  detail\n}) => detail);\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport const selectInitDataForCE = createSelector(selectState, ({\n  initDataForCE\n}) => initDataForCE);\nexport const selectParameters = createSelector(selectState, ({\n  initDataForCE\n}) => initDataForCE.parameters);\nexport const selectDrawingGroupId = createSelector(selectState, ({\n  drawingGroupId\n}) => drawingGroupId);\nexport const selectRevisionDialog = createSelector(selectState, state => state.revisionDialog);\nexport const selectComponentList = createSelector(selectState, state => state.componentList);\nexport default drawing;","map":null,"metadata":{},"sourceType":"module"}