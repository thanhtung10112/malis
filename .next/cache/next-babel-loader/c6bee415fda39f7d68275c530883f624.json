{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchInitDataForList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchInitDataForCE),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(fetchList),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(getJobList),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(openJobCreateDialog),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(getUserGroupMapping),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(createJob),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(closeJobDialog),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(openJobUpdateDialog),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(updateJob),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(jobSaga);\n\nimport { takeEvery, putResolve } from 'redux-saga/effects';\nimport { call, put, all, select } from 'typed-redux-saga';\nimport { jobStore, commonStore, advancedFilterActions } from '@/store/reducers';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport jobApi from '@/apis/job.api';\nimport _ from 'lodash';\nimport { getDefaultValue } from '@/utils/getDefaultValues';\n\nfunction fetchInitDataForList() {\n  var data, selectedJobCategory, defaultJobCategory;\n  return _regeneratorRuntime.wrap(function fetchInitDataForList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(jobApi.getInitDataForList);\n\n        case 2:\n          data = _context.sent;\n          return _context.delegateYield(select(jobStore.selectSelectedJobCategory), \"t0\", 4);\n\n        case 4:\n          selectedJobCategory = _context.t0;\n\n          if (!_.isNull(selectedJobCategory.id)) {\n            _context.next = 9;\n            break;\n          }\n\n          defaultJobCategory = getDefaultValue(data.job_categories, false);\n          _context.next = 9;\n          return put(jobStore.actions.setSelectedCategory(defaultJobCategory));\n\n        case 9:\n          _context.next = 11;\n          return put(jobStore.actions.setInitDataForList(data));\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction fetchInitDataForCE() {\n  var data, jobStandard;\n  return _regeneratorRuntime.wrap(function fetchInitDataForCE$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return call(jobApi.getInitDataForCE);\n\n        case 2:\n          data = _context2.sent;\n          data.job_template = _.pick(data.job_template, ['language', 'equipment_type', 'erection_site', 'people_responsible', 'squad_leader', 'drawings_responsible', 'job_users']);\n          jobStandard = data.parameters.PLNO.map(function (item) {\n            return _.pick(item, ['description', 'id', 'parameter_id']);\n          });\n          _context2.next = 7;\n          return put(jobStore.actions.setDetail(_objectSpread(_objectSpread({}, data.job_template), {}, {\n            job_standard: jobStandard\n          })));\n\n        case 7:\n          _context2.next = 9;\n          return put(jobStore.actions.setInitDataForCE(data));\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction fetchList() {\n  var _yield$all, tableState, searchQuery, filterData, selectedCategory, page, per_page, data;\n\n  return _regeneratorRuntime.wrap(function fetchList$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.delegateYield(all({\n            tableState: select(commonStore.selectTableState),\n            searchQuery: select(commonStore.selectSearchQuery),\n            filterData: select(advancedFilterActions.selectFilterData),\n            selectedCategory: select(jobStore.selectSelectedJobCategory)\n          }), \"t0\", 1);\n\n        case 1:\n          _yield$all = _context3.t0;\n          tableState = _yield$all.tableState;\n          searchQuery = _yield$all.searchQuery;\n          filterData = _yield$all.filterData;\n          selectedCategory = _yield$all.selectedCategory;\n          page = tableState.page, per_page = tableState.per_page;\n          _context3.next = 9;\n          return call(jobApi.getList, _objectSpread({\n            per_page: per_page,\n            page: page,\n            s: searchQuery,\n            job_category_id: selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.id\n          }, filterData));\n\n        case 9:\n          data = _context3.sent;\n          _context3.next = 12;\n          return put(commonStore.actions.setTableState({\n            total_items: data.total_items\n          }));\n\n        case 12:\n          _context3.next = 14;\n          return put(jobStore.actions.setDataList(data.jobs));\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction getJobList() {\n  var permissions;\n  return _regeneratorRuntime.wrap(function getJobList$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 2:\n          _context4.prev = 2;\n          _context4.next = 5;\n          return call(fetchInitDataForList);\n\n        case 5:\n          return _context4.delegateYield(select(jobStore.selectPermissions), \"t0\", 6);\n\n        case 6:\n          permissions = _context4.t0;\n\n          if (!(permissions === null || permissions === void 0 ? void 0 : permissions.view)) {\n            _context4.next = 10;\n            break;\n          }\n\n          _context4.next = 10;\n          return call(fetchList);\n\n        case 10:\n          _context4.next = 16;\n          break;\n\n        case 12:\n          _context4.prev = 12;\n          _context4.t1 = _context4[\"catch\"](2);\n          _context4.next = 16;\n          return errorSaga.handleError(_context4.t1);\n\n        case 16:\n          _context4.next = 18;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 18:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[2, 12]]);\n}\n\nfunction openJobCreateDialog() {\n  return _regeneratorRuntime.wrap(function openJobCreateDialog$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 2:\n          _context5.prev = 2;\n          _context5.next = 5;\n          return call(fetchInitDataForCE);\n\n        case 5:\n          _context5.next = 7;\n          return put(jobStore.actions.setDialogStateOpen(true));\n\n        case 7:\n          _context5.next = 13;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](2);\n          _context5.next = 13;\n          return errorSaga.handleError(_context5.t0);\n\n        case 13:\n          _context5.next = 15;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 15:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[2, 9]]);\n}\n\nfunction getUserGroupMapping(_ref) {\n  var payload, data;\n  return _regeneratorRuntime.wrap(function getUserGroupMapping$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          payload = _ref.payload;\n          _context6.next = 3;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 3:\n          _context6.prev = 3;\n          _context6.next = 6;\n          return call(jobApi.getUserGroupMapping, payload);\n\n        case 6:\n          data = _context6.sent;\n          _context6.next = 9;\n          return put(jobStore.actions.setTransferUserAvailableList(data.available_users));\n\n        case 9:\n          _context6.next = 11;\n          return put(jobStore.actions.setOpenTransferList(true));\n\n        case 11:\n          _context6.next = 17;\n          break;\n\n        case 13:\n          _context6.prev = 13;\n          _context6.t0 = _context6[\"catch\"](3);\n          _context6.next = 17;\n          return errorSaga.handleError(_context6.t0);\n\n        case 17:\n          _context6.next = 19;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 19:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[3, 13]]);\n}\n\nfunction createJob(_ref2) {\n  var payload, _yield$call, message, _yield$select, job_template;\n\n  return _regeneratorRuntime.wrap(function createJob$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context7.next = 3;\n          return put(jobStore.actions.setDialogStateLoading(true));\n\n        case 3:\n          _context7.prev = 3;\n          _context7.next = 6;\n          return call(jobApi.create, payload);\n\n        case 6:\n          _yield$call = _context7.sent;\n          message = _yield$call.message;\n          return _context7.delegateYield(select(jobStore.selectInitDataForCE), \"t0\", 9);\n\n        case 9:\n          _yield$select = _context7.t0;\n          job_template = _yield$select.job_template;\n          _context7.next = 13;\n          return put(jobStore.actions.setDetail(job_template));\n\n        case 13:\n          _context7.next = 15;\n          return put(commonStore.actions.setSuccessMessage(message));\n\n        case 15:\n          _context7.next = 21;\n          break;\n\n        case 17:\n          _context7.prev = 17;\n          _context7.t1 = _context7[\"catch\"](3);\n          _context7.next = 21;\n          return errorSaga.handleError(_context7.t1);\n\n        case 21:\n          _context7.next = 23;\n          return put(jobStore.actions.setDialogStateLoading(false));\n\n        case 23:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[3, 17]]);\n}\n\nfunction closeJobDialog() {\n  return _regeneratorRuntime.wrap(function closeJobDialog$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return putResolve(jobStore.actions.setDialogStateOpen(false));\n\n        case 3:\n          _context8.next = 5;\n          return call(getJobList);\n\n        case 5:\n          _context8.next = 7;\n          return put(jobStore.actions.resetDetail());\n\n        case 7:\n          _context8.next = 13;\n          break;\n\n        case 9:\n          _context8.prev = 9;\n          _context8.t0 = _context8[\"catch\"](0);\n          _context8.next = 13;\n          return errorSaga.handleError(_context8.t0);\n\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 9]]);\n}\n\nfunction openJobUpdateDialog(_ref3) {\n  var payload, _yield$call2, job;\n\n  return _regeneratorRuntime.wrap(function openJobUpdateDialog$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          payload = _ref3.payload;\n          _context9.next = 3;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 3:\n          _context9.prev = 3;\n          _context9.next = 6;\n          return call(fetchInitDataForCE);\n\n        case 6:\n          _context9.next = 8;\n          return call(jobApi.getDetail, payload);\n\n        case 8:\n          _yield$call2 = _context9.sent;\n          job = _yield$call2.job;\n          job.job_currencies = job.job_currencies.map(function (currency) {\n            return _objectSpread({\n              id: currency.currency_id\n            }, currency);\n          });\n          _context9.next = 13;\n          return putResolve(jobStore.actions.setDetail(job));\n\n        case 13:\n          _context9.next = 15;\n          return put(jobStore.actions.setDialogState({\n            open: true,\n            editMode: true\n          }));\n\n        case 15:\n          _context9.next = 21;\n          break;\n\n        case 17:\n          _context9.prev = 17;\n          _context9.t0 = _context9[\"catch\"](3);\n          _context9.next = 21;\n          return errorSaga.handleError(_context9.t0);\n\n        case 21:\n          _context9.next = 23;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 23:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[3, 17]]);\n}\n\nfunction updateJob(_ref4) {\n  var payload, id, formData, _yield$call3, message;\n\n  return _regeneratorRuntime.wrap(function updateJob$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          payload = _ref4.payload;\n          _context10.next = 3;\n          return put(jobStore.actions.setDialogStateLoading(true));\n\n        case 3:\n          _context10.prev = 3;\n          id = payload.id, formData = payload.formData;\n          _context10.next = 7;\n          return call(jobApi.update, id, formData);\n\n        case 7:\n          _yield$call3 = _context10.sent;\n          message = _yield$call3.message;\n          _context10.next = 11;\n          return put(commonStore.actions.setSuccessMessage(message));\n\n        case 11:\n          _context10.next = 13;\n          return call(closeJobDialog);\n\n        case 13:\n          _context10.next = 19;\n          break;\n\n        case 15:\n          _context10.prev = 15;\n          _context10.t0 = _context10[\"catch\"](3);\n          _context10.next = 19;\n          return errorSaga.handleError(_context10.t0);\n\n        case 19:\n          _context10.next = 21;\n          return put(jobStore.actions.setDialogStateLoading(false));\n\n        case 21:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[3, 15]]);\n}\n\nfunction jobSaga() {\n  return _regeneratorRuntime.wrap(function jobSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeEvery(jobStore.sagaGetList, getJobList);\n\n        case 2:\n          _context11.next = 4;\n          return takeEvery(jobStore.sagaOpenCreateDialog, openJobCreateDialog);\n\n        case 4:\n          _context11.next = 6;\n          return takeEvery(jobStore.sagaGetUserGroupMapping, getUserGroupMapping);\n\n        case 6:\n          _context11.next = 8;\n          return takeEvery(jobStore.sagaCreate, createJob);\n\n        case 8:\n          _context11.next = 10;\n          return takeEvery(jobStore.sagaCloseDialog, closeJobDialog);\n\n        case 10:\n          _context11.next = 12;\n          return takeEvery(jobStore.sagaOpenUpdateDialog, openJobUpdateDialog);\n\n        case 12:\n          _context11.next = 14;\n          return takeEvery(jobStore.sagaUpdate, updateJob);\n\n        case 14:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nexport default jobSaga;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/saga/job.saga.ts"],"names":["fetchInitDataForList","fetchInitDataForCE","fetchList","getJobList","openJobCreateDialog","getUserGroupMapping","createJob","closeJobDialog","openJobUpdateDialog","updateJob","jobSaga","takeEvery","putResolve","call","put","all","select","jobStore","commonStore","advancedFilterActions","errorSaga","jobApi","_","getDefaultValue","getInitDataForList","data","selectSelectedJobCategory","selectedJobCategory","isNull","id","defaultJobCategory","job_categories","actions","setSelectedCategory","setInitDataForList","getInitDataForCE","job_template","pick","jobStandard","parameters","PLNO","map","item","setDetail","job_standard","setInitDataForCE","tableState","selectTableState","searchQuery","selectSearchQuery","filterData","selectFilterData","selectedCategory","page","per_page","getList","s","job_category_id","setTableState","total_items","setDataList","jobs","setLoadingPage","selectPermissions","permissions","view","handleError","setDialogStateOpen","payload","setTransferUserAvailableList","available_users","setOpenTransferList","setDialogStateLoading","create","message","selectInitDataForCE","setSuccessMessage","resetDetail","getDetail","job","job_currencies","currency","currency_id","setDialogState","open","editMode","formData","update","sagaGetList","sagaOpenCreateDialog","sagaGetUserGroupMapping","sagaCreate","sagaCloseDialog","sagaOpenUpdateDialog","sagaUpdate"],"mappings":"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","sourcesContent":["import { takeEvery, putResolve } from 'redux-saga/effects'\n\nimport { call, put, all, select } from 'typed-redux-saga'\n\nimport { jobStore, commonStore, advancedFilterActions } from '@/store/reducers'\nimport * as errorSaga from '@/store/saga/errorSaga'\n\nimport jobApi from '@/apis/job.api'\nimport _ from 'lodash'\nimport { getDefaultValue } from '@/utils/getDefaultValues'\n\nfunction* fetchInitDataForList() {\n  const data = yield call(jobApi.getInitDataForList)\n  const selectedJobCategory = yield* select(jobStore.selectSelectedJobCategory)\n  if (_.isNull(selectedJobCategory.id)) {\n    const defaultJobCategory = getDefaultValue(data.job_categories, false)\n    yield put(jobStore.actions.setSelectedCategory(defaultJobCategory))\n  }\n  yield put(jobStore.actions.setInitDataForList(data))\n}\n\nfunction* fetchInitDataForCE() {\n  const data = yield call(jobApi.getInitDataForCE)\n  data.job_template = _.pick(data.job_template, [\n    'language',\n    'equipment_type',\n    'erection_site',\n    'people_responsible',\n    'squad_leader',\n    'drawings_responsible',\n    'job_users'\n  ])\n  const jobStandard = data.parameters.PLNO.map((item) => _.pick(item, ['description', 'id', 'parameter_id']))\n\n  yield put(\n    jobStore.actions.setDetail({\n      ...data.job_template,\n      job_standard: jobStandard\n    })\n  )\n  yield put(jobStore.actions.setInitDataForCE(data))\n}\n\nfunction* fetchList() {\n  const { tableState, searchQuery, filterData, selectedCategory } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    selectedCategory: select(jobStore.selectSelectedJobCategory)\n  })\n  const { page, per_page } = tableState\n  const data = yield call(jobApi.getList, {\n    per_page,\n    page,\n    s: searchQuery,\n    job_category_id: selectedCategory?.id,\n    ...filterData\n  })\n  yield put(commonStore.actions.setTableState({ total_items: data.total_items }))\n  yield put(jobStore.actions.setDataList(data.jobs))\n}\n\nfunction* getJobList() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchInitDataForList)\n    const permissions = yield* select(jobStore.selectPermissions)\n    if (permissions?.view) {\n      yield call(fetchList)\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* openJobCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true))\n\n  try {\n    yield call(fetchInitDataForCE)\n    yield put(jobStore.actions.setDialogStateOpen(true))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* getUserGroupMapping({ payload }: ReturnType<typeof jobStore.sagaGetUserGroupMapping>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n\n  try {\n    const data = yield call(jobApi.getUserGroupMapping, payload)\n    yield put(jobStore.actions.setTransferUserAvailableList(data.available_users))\n    yield put(jobStore.actions.setOpenTransferList(true))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* createJob({ payload }: ReturnType<typeof jobStore.sagaCreate>) {\n  yield put(jobStore.actions.setDialogStateLoading(true))\n  try {\n    const { message } = yield call(jobApi.create, payload)\n    const { job_template } = yield* select(jobStore.selectInitDataForCE)\n    yield put(jobStore.actions.setDetail(job_template))\n    yield put(commonStore.actions.setSuccessMessage(message))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(jobStore.actions.setDialogStateLoading(false))\n}\n\nfunction* closeJobDialog() {\n  try {\n    yield putResolve(jobStore.actions.setDialogStateOpen(false))\n    yield call(getJobList)\n    yield put(jobStore.actions.resetDetail())\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n}\n\nfunction* openJobUpdateDialog({ payload }: ReturnType<typeof jobStore.sagaOpenUpdateDialog>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchInitDataForCE)\n    const { job } = yield call(jobApi.getDetail, payload)\n    job.job_currencies = job.job_currencies.map((currency) => ({\n      id: currency.currency_id,\n      ...currency\n    }))\n    yield putResolve(jobStore.actions.setDetail(job))\n    yield put(jobStore.actions.setDialogState({ open: true, editMode: true }))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* updateJob({ payload }: ReturnType<typeof jobStore.sagaUpdate>) {\n  yield put(jobStore.actions.setDialogStateLoading(true))\n\n  try {\n    const { id, formData } = payload\n    const { message } = yield call(jobApi.update, id, formData)\n    yield put(commonStore.actions.setSuccessMessage(message))\n    yield call(closeJobDialog)\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n\n  yield put(jobStore.actions.setDialogStateLoading(false))\n}\n\nfunction* jobSaga() {\n  yield takeEvery(jobStore.sagaGetList, getJobList)\n  yield takeEvery(jobStore.sagaOpenCreateDialog, openJobCreateDialog)\n  yield takeEvery(jobStore.sagaGetUserGroupMapping, getUserGroupMapping)\n  yield takeEvery(jobStore.sagaCreate, createJob)\n  yield takeEvery(jobStore.sagaCloseDialog, closeJobDialog)\n  yield takeEvery(jobStore.sagaOpenUpdateDialog, openJobUpdateDialog)\n  yield takeEvery(jobStore.sagaUpdate, updateJob)\n}\n\nexport default jobSaga\n"]},"metadata":{},"sourceType":"module"}