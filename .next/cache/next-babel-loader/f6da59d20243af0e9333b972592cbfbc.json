{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\pages\\\\assemblies.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '@/styles/page/layout';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport { useTranslation } from 'next-i18next';\nimport { AppLayout, EditIcon, DataTableCellExpand, CreateIcon, AppAutocompleteStyled, AppAutocompleteStyledAsync, DeleteIcon, useConfirm, DialogPart } from '@/components';\nimport { assemblyStore, commonStore, partStore } from '@/store/reducers';\nimport { defaultProperties, iconColumn, centerColumn, rightColumn, descriptionsColumn } from '@/utils/columnProperties';\nimport AppNumber from '@/helper/AppNumber';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nimport _ from 'lodash';\n\nconst AssembliesPage = () => {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation('assembly');\n  const {\n    confirm\n  } = useConfirm();\n  const breadcrumbData = useMemo(() => [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Basic Options',\n    href: '/drawings'\n  }, {\n    label: 'Assemblies Management',\n    href: '/assemblies'\n  }], []);\n  const dispatch = useDispatch();\n  const permissions = useSelector(assemblyStore.selectPermissions);\n\n  const _useSelector = useSelector(assemblyStore.selectInitDataForList),\n        {\n    column_tooltips,\n    wiki_page\n  } = _useSelector,\n        initDataForList = _objectWithoutProperties(_useSelector, [\"column_tooltips\", \"wiki_page\"]);\n\n  const userJob = useSelector(commonStore.selectUserValueJob);\n  const userDrawing = useSelector(commonStore.selectUserValueDrawing);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const currentLang = useSelector(commonStore.selectCurrentLanguage);\n  const dataList = useSelector(assemblyStore.selectDataList);\n  useEffect(() => {\n    return () => dispatch(commonStore.actions.resetUserValue());\n  }, []);\n\n  const handleOpenCreateDialog = () => {\n    dispatch(partStore.sagaOpenCreateDialog('assembly'));\n  };\n\n  const handleChangeUserJob = (event, optionValue) => {\n    dispatch(assemblyStore.sagaChangeUserJob(optionValue));\n  };\n\n  const handleChangeUserDrawing = (event, optionValue) => {\n    dispatch(assemblyStore.sagaChangeUserDrawing(optionValue));\n  };\n\n  const handleOpenUpdateDialog = id => () => {\n    dispatch(partStore.sagaOpenUpdateDialog({\n      id,\n      entity: 'assembly'\n    }));\n  };\n\n  const handleDeleteAssemblies = async () => {\n    const description = getMessageConfirm(t, 'assembly', selectedRows, 'delete');\n    const result = await confirm({\n      description\n    });\n\n    if (result === 'OK') {\n      const parts = _.map(selectedRows, partId => {\n        const {\n          dpn,\n          id\n        } = _.find(dataList, {\n          id: partId\n        });\n\n        return {\n          entity_id: dpn,\n          id\n        };\n      });\n\n      dispatch(assemblyStore.sagaRemove(parts));\n    }\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, defaultProperties), iconColumn), {}, {\n    description: column_tooltips.edit,\n    field: 'id',\n    headerName: 'Edit',\n    renderCell: params => {\n      return /*#__PURE__*/_jsxDEV(EditIcon, {\n        onClick: handleOpenUpdateDialog(params.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 16\n      }, this);\n    }\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.dpn,\n    field: 'dpn',\n    headerName: 'Assembly #',\n    flex: 0.2\n  }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), descriptionsColumn(currentLang)), {}, {\n    description: column_tooltips.descriptions,\n    flex: 0.3\n  }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), rightColumn), {}, {\n    description: column_tooltips.mass,\n    headerName: 'Mass (kg)',\n    flex: 0.2,\n    field: 'mass',\n\n    renderCell(params) {\n      const value = AppNumber.format(params.value, {\n        precision: 4\n      });\n      return /*#__PURE__*/_jsxDEV(DataTableCellExpand, {\n        value: value,\n        width: params.colDef.width\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 16\n      }, this);\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), centerColumn), {}, {\n    description: column_tooltips.raw_unit,\n    field: 'raw_unit',\n    headerName: 'Unit'\n  })];\n  const buttonsPage = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 18\n    }, this),\n    onClick: handleOpenCreateDialog,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create) || userJob.value < 0 || !(userJob === null || userJob === void 0 ? void 0 : userJob.value)\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 18\n    }, this),\n    onClick: handleDeleteAssemblies,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.delete) || selectedRows.length === 0 || userJob.value < 0\n  }];\n\n  const Options = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppAutocompleteStyled, {\n      className: classes.controlAutocomplete,\n      width: 200,\n      label: \"Jobs\",\n      options: initDataForList.jobs,\n      value: userJob,\n      renderOption: option => option.description,\n      primaryKeyOption: \"value\",\n      onChange: handleChangeUserJob\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppAutocompleteStyledAsync, {\n      disabled: !(userJob === null || userJob === void 0 ? void 0 : userJob.value),\n      width: 250,\n      label: \"Drawings\",\n      className: classes.controlAutocomplete,\n      compName: \"drawing_list\",\n      additionalData: {\n        limit_to_job: userJob.value,\n        include_all_drawings_option: true\n      },\n      onChange: handleChangeUserDrawing,\n      value: userDrawing,\n      defaultOptions: [commonStore.initialState.userValue.drawing]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    entity: \"assembly\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: wiki_page,\n    searchProps: {\n      width: 320\n    },\n    buttons: buttonsPage,\n    permissions: permissions,\n    tableProps: {\n      columns\n    },\n    Dialogs: /*#__PURE__*/_jsxDEV(DialogPart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 16\n    }, this),\n    Options: Options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'assembly', 'make_a_list', 'advanced_filter', 'item', 'manufacturer']);\nexport default AssembliesPage;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/pages/assemblies.tsx"],"names":["useEffect","useMemo","useDispatch","useSelector","useStyles","useAuthMiddleware","useTranslation","AppLayout","EditIcon","DataTableCellExpand","CreateIcon","AppAutocompleteStyled","AppAutocompleteStyledAsync","DeleteIcon","useConfirm","DialogPart","assemblyStore","commonStore","partStore","defaultProperties","iconColumn","centerColumn","rightColumn","descriptionsColumn","AppNumber","getMessageConfirm","_","AssembliesPage","classes","t","confirm","breadcrumbData","label","href","dispatch","permissions","selectPermissions","selectInitDataForList","column_tooltips","wiki_page","initDataForList","userJob","selectUserValueJob","userDrawing","selectUserValueDrawing","selectedRows","selectSelectedRows","currentLang","selectCurrentLanguage","dataList","selectDataList","actions","resetUserValue","handleOpenCreateDialog","sagaOpenCreateDialog","handleChangeUserJob","event","optionValue","sagaChangeUserJob","handleChangeUserDrawing","sagaChangeUserDrawing","handleOpenUpdateDialog","id","sagaOpenUpdateDialog","entity","handleDeleteAssemblies","description","result","parts","map","partId","dpn","find","entity_id","sagaRemove","columns","edit","field","headerName","renderCell","params","value","flex","descriptions","mass","format","precision","colDef","width","raw_unit","buttonsPage","startIcon","onClick","disabled","create","delete","length","Options","controlAutocomplete","jobs","option","limit_to_job","include_all_drawings_option","initialState","userValue","drawing","getServerSideProps"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useStyles from '@/styles/page/layout'\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware'\nimport { useTranslation } from 'next-i18next'\n\nimport {\n  AppLayout,\n  EditIcon,\n  DataTableCellExpand,\n  CreateIcon,\n  AppAutocompleteStyled,\n  AppAutocompleteStyledAsync,\n  DeleteIcon,\n  useConfirm,\n  DialogPart\n} from '@/components'\n\nimport { assemblyStore, commonStore, partStore } from '@/store/reducers'\nimport { defaultProperties, iconColumn, centerColumn, rightColumn, descriptionsColumn } from '@/utils/columnProperties'\nimport AppNumber from '@/helper/AppNumber'\nimport getMessageConfirm from '@/utils/getMessageConfirm'\nimport _ from 'lodash'\n\nimport type { GridColumns } from '@material-ui/data-grid'\nimport type { DataForDropdown, ParameterOption, PayloadOperation } from '@/types/Common'\n\nconst AssembliesPage = () => {\n  const classes = useStyles()\n  const { t } = useTranslation('assembly')\n  const { confirm } = useConfirm()\n\n  const breadcrumbData = useMemo(\n    () => [\n      { label: 'Home', href: '/' },\n      { label: 'Basic Options', href: '/drawings' },\n      { label: 'Assemblies Management', href: '/assemblies' }\n    ],\n    []\n  )\n\n  const dispatch = useDispatch()\n  const permissions = useSelector(assemblyStore.selectPermissions)\n  const { column_tooltips, wiki_page, ...initDataForList } = useSelector(assemblyStore.selectInitDataForList)\n  const userJob = useSelector(commonStore.selectUserValueJob)\n  const userDrawing = useSelector(commonStore.selectUserValueDrawing)\n  const selectedRows = useSelector(commonStore.selectSelectedRows)\n  const currentLang = useSelector(commonStore.selectCurrentLanguage)\n  const dataList = useSelector(assemblyStore.selectDataList)\n\n  useEffect(() => {\n    return () => dispatch(commonStore.actions.resetUserValue())\n  }, [])\n\n  const handleOpenCreateDialog = () => {\n    dispatch(partStore.sagaOpenCreateDialog('assembly'))\n  }\n\n  const handleChangeUserJob = (event, optionValue: ParameterOption) => {\n    dispatch(assemblyStore.sagaChangeUserJob(optionValue))\n  }\n\n  const handleChangeUserDrawing = (event, optionValue: DataForDropdown) => {\n    dispatch(assemblyStore.sagaChangeUserDrawing(optionValue))\n  }\n\n  const handleOpenUpdateDialog = (id) => () => {\n    dispatch(partStore.sagaOpenUpdateDialog({ id, entity: 'assembly' }))\n  }\n\n  const handleDeleteAssemblies = async () => {\n    const description = getMessageConfirm(t, 'assembly', selectedRows, 'delete')\n    const result = await confirm({ description })\n    if (result === 'OK') {\n      const parts: PayloadOperation[] = _.map(selectedRows, (partId) => {\n        const { dpn, id } = _.find(dataList, { id: partId })\n        return { entity_id: dpn, id }\n      })\n      dispatch(assemblyStore.sagaRemove(parts))\n    }\n  }\n\n  const columns: GridColumns = [\n    {\n      ...defaultProperties,\n      ...iconColumn,\n      description: column_tooltips.edit,\n      field: 'id',\n      headerName: 'Edit',\n      renderCell: (params) => {\n        return <EditIcon onClick={handleOpenUpdateDialog(params.value)} />\n      }\n    },\n    {\n      ...defaultProperties,\n      description: column_tooltips.dpn,\n      field: 'dpn',\n      headerName: 'Assembly #',\n      flex: 0.2\n    },\n    {\n      ...defaultProperties,\n      ...descriptionsColumn(currentLang),\n      description: column_tooltips.descriptions,\n      flex: 0.3\n    },\n    {\n      ...defaultProperties,\n      ...rightColumn,\n      description: column_tooltips.mass,\n      headerName: 'Mass (kg)',\n      flex: 0.2,\n      field: 'mass',\n      renderCell(params) {\n        const value = AppNumber.format(params.value, { precision: 4 })\n        return <DataTableCellExpand value={value} width={params.colDef.width} />\n      }\n    },\n    {\n      ...defaultProperties,\n      ...centerColumn,\n      description: column_tooltips.raw_unit,\n      field: 'raw_unit',\n      headerName: 'Unit'\n    }\n  ]\n\n  const buttonsPage = [\n    {\n      label: t('common:button.new'),\n      startIcon: <CreateIcon />,\n      onClick: handleOpenCreateDialog,\n      disabled: !permissions?.create || userJob.value < 0 || !userJob?.value\n    },\n    {\n      label: t('common:button.delete'),\n      startIcon: <DeleteIcon />,\n      onClick: handleDeleteAssemblies,\n      disabled: !permissions?.delete || selectedRows.length === 0 || userJob.value < 0\n    }\n  ]\n\n  const Options = (\n    <>\n      <AppAutocompleteStyled\n        className={classes.controlAutocomplete}\n        width={200}\n        label=\"Jobs\"\n        options={initDataForList.jobs}\n        value={userJob}\n        renderOption={(option) => option.description}\n        primaryKeyOption=\"value\"\n        onChange={handleChangeUserJob}\n      />\n      <AppAutocompleteStyledAsync\n        disabled={!userJob?.value}\n        width={250}\n        label=\"Drawings\"\n        className={classes.controlAutocomplete}\n        compName=\"drawing_list\"\n        additionalData={{\n          limit_to_job: userJob.value,\n          include_all_drawings_option: true\n        }}\n        onChange={handleChangeUserDrawing}\n        value={userDrawing}\n        defaultOptions={[commonStore.initialState.userValue.drawing]}\n      />\n    </>\n  )\n\n  return (\n    <AppLayout\n      entity=\"assembly\"\n      breadcrumbs={breadcrumbData}\n      wikiPage={wiki_page}\n      searchProps={{\n        width: 320\n      }}\n      buttons={buttonsPage}\n      permissions={permissions}\n      tableProps={{\n        columns\n      }}\n      Dialogs={<DialogPart />}\n      Options={Options}\n    />\n  )\n}\n\nexport const getServerSideProps = useAuthMiddleware([\n  'common',\n  'assembly',\n  'make_a_list',\n  'advanced_filter',\n  'item',\n  'manufacturer'\n])\n\nexport default AssembliesPage\n"]},"metadata":{},"sourceType":"module"}