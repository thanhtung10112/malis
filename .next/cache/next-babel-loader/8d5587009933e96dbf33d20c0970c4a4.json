{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, put, putResolve } from 'redux-saga/effects';\nimport { select, call, all } from 'typed-redux-saga';\nimport { itemStore, commonStore, advancedFilterActions, drawingStore, summaryReportActions } from '@/store/reducers';\nimport _ from 'lodash';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport itemApi from '@/apis/item.api';\nimport partApi from '@/apis/part.api';\n/**\n * This function is used to get init data for list of item entity\n */\n\nexport function* fetchItemInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n  const data = yield call(itemApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  }); // when logged in as the fresh user, the API will not send the selected_job attribute\n  // then we will set selected_job as an empty object\n\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {};\n  } // the API will not send the selected_job attribute if you are in the all_job or all_standard mode,\n  // then we will set selected_job = current selected user job\n\n\n  if (userJob.value === -1 || userJob.value === -2) {\n    data.selected_job = userJob;\n  }\n\n  yield put(commonStore.actions.setUserValueJob(data.selected_job));\n  yield put(itemStore.actions.setInitDataForList(data));\n}\n/**\n * this function is used to get item list based on user_job, user_drawing and common search attributes\n */\n\nexport function* fetchItemList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData,\n    userJob,\n    userDrawing\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    userDrawing: select(commonStore.selectUserValueDrawing)\n  });\n\n  if (!userJob.value) {\n    return;\n  }\n\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(itemApi.getList, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    drawing_id: userDrawing.value\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(itemStore.actions.setDataList(data.items));\n}\n/**\n * this function is used to get the list of the item\n * if current user has the view item permission\n */\n\nexport function* getItemList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchItemInitDataForList);\n    const permissions = yield* select(itemStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchItemList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n/**\n * this function is used change the userjob, then set user_drawing = all_drawing\n * and then get list item\n * @param {ParameterOption} userJob option from job_option on the top of the item page\n */\n\nexport function* changeUserJob({\n  payload\n}) {\n  const {\n    optionValue,\n    confirm\n  } = payload;\n\n  if (confirm === 'save') {\n    yield put(commonStore.sagaUpdateMultiple({\n      entity: 'item',\n      action: itemStore.sagaChangeUserJob,\n      payloadAction: {\n        optionValue\n      }\n    }));\n  } else {\n    yield all([put(commonStore.actions.setUserValueJob(optionValue)), put(commonStore.actions.setUserValueDrawing(commonStore.initialState.userValue.drawing))]);\n    yield call(getItemList);\n  }\n}\n/**\n * this function is used change the user drawing\n * if userDrawing = -1 (all_drawing), then set selected_drawing = init data\n * @param {DataForDropdown} userDrawing option from drawing_option on the top of the item page\n */\n\nexport function* changeUserDrawing({\n  payload\n}) {\n  const {\n    optionValue,\n    confirm\n  } = payload;\n\n  if (confirm === 'save') {\n    yield put(commonStore.sagaUpdateMultiple({\n      entity: 'item',\n      action: itemStore.sagaChangeUserDrawing,\n      payloadAction: {\n        optionValue\n      }\n    }));\n  } else {\n    yield putResolve(commonStore.actions.setUserValueDrawing(optionValue));\n    yield call(getItemList);\n  }\n}\n\nfunction* removeItem({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const data = yield call(partApi.executeOperation, 'delete', payload);\n\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data));\n      yield put(summaryReportActions.setOpen(true));\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message));\n    }\n\n    const entity = yield* select(commonStore.selectEntity);\n\n    if (entity === 'drawing') {\n      yield put(drawingStore.sagaGetDrawingPartList());\n    } else {\n      yield call(fetchItemList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* itemSaga() {\n  yield takeEvery(itemStore.sagaGetList, getItemList);\n  yield takeEvery(itemStore.sagaChangeUserJob, changeUserJob);\n  yield takeEvery(itemStore.sagaChangeUserDrawing, changeUserDrawing);\n  yield takeEvery(itemStore.sagaRemove, removeItem);\n}\n\nexport default itemSaga;","map":null,"metadata":{},"sourceType":"module"}