{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '@/styles/page/layout';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport { useTranslation } from 'next-i18next';\nimport { Grid, Tooltip } from '@material-ui/core';\nimport { AppLayout, EditIcon, CreateIcon, DialogSpecificationCE, AppAutocompleteStyled, DeleteIcon, useConfirm, DialogDrawingCreateEdit, DialogPart } from '@/components';\nimport { specificationStore, commonStore } from '@/store/reducers';\nimport { defaultProperties, iconColumn, descriptionsColumn } from '@/utils/columnProperties';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nimport parseHTML from 'html-react-parser';\nimport _ from 'lodash';\n\nconst SpecificationsPage = () => {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation('specification');\n  const {\n    confirm\n  } = useConfirm();\n  const breadcrumbData = useMemo(() => [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Drawings',\n    href: '/drawings'\n  }, {\n    label: 'Specifications Management',\n    href: '/specifications'\n  }], []);\n  const dispatch = useDispatch();\n  const permissions = useSelector(specificationStore.selectPermissions);\n  const userJob = useSelector(commonStore.selectUserValueJob);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const currentLang = useSelector(commonStore.selectCurrentLanguage);\n  const dataList = useSelector(specificationStore.selectDataList);\n  const {\n    wiki_page,\n    column_tooltips,\n    jobs: jobOptions\n  } = useSelector(specificationStore.selectInitDataForList);\n  useEffect(() => {\n    return () => dispatch(commonStore.actions.resetUserValue());\n  }, []);\n\n  const handleOpenCreateDialog = () => {\n    dispatch(specificationStore.sagaOpenCreateDialog());\n  };\n\n  const handleChangeUserJob = (event, optionValue) => {\n    dispatch(specificationStore.sagaChangeUserJob(optionValue));\n  };\n\n  const handleOpenUpdateDialog = id => () => {\n    dispatch(specificationStore.sagaOpenUpdateDialog(id));\n  };\n\n  const handleDeleteSpecifications = async () => {\n    const description = getMessageConfirm(t, 'specification', selectedRows, 'delete');\n    const result = await confirm({\n      description\n    });\n\n    if (result === 'OK') {\n      const specs = _.map(selectedRows, partId => {\n        const {\n          specification_id,\n          id\n        } = _.find(dataList, {\n          id: partId\n        });\n\n        return {\n          entity_id: specification_id,\n          id\n        };\n      });\n\n      dispatch(specificationStore.sagaRemove(specs));\n    }\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, defaultProperties), iconColumn), {}, {\n    description: column_tooltips.edit,\n    field: 'id',\n    headerName: 'Edit',\n    renderCell: params => {\n      return /*#__PURE__*/_jsx(EditIcon, {\n        onClick: handleOpenUpdateDialog(params.value)\n      });\n    }\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.spec_id,\n    field: 'specification_id',\n    headerName: 'Document #',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), descriptionsColumn(currentLang)), {}, {\n    description: column_tooltips.description,\n    headerName: 'Description',\n    flex: 0.6,\n\n    renderCell(params) {\n      const {\n        value\n      } = params;\n      const description = parseHTML(value);\n      return /*#__PURE__*/_jsx(Tooltip, {\n        title: description,\n        classes: {\n          tooltip: classes.tooltip\n        },\n        children: /*#__PURE__*/_jsx(Grid, {\n          container: true,\n          spacing: 2,\n          style: {\n            whiteSpace: 'initial',\n            alignSelf: 'baseline',\n            lineHeight: 'initial'\n          },\n          children: /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: description\n          })\n        })\n      });\n    }\n\n  })];\n  const buttonsPage = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n    onClick: handleOpenCreateDialog,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create) || userJob.value < 0 || !(userJob === null || userJob === void 0 ? void 0 : userJob.value)\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n    onClick: handleDeleteSpecifications,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.delete) || selectedRows.length === 0\n  }];\n\n  const Options = /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(AppAutocompleteStyled, {\n      className: classes.controlAutocomplete,\n      width: 200,\n      label: \"Jobs\",\n      options: jobOptions,\n      value: userJob,\n      renderOption: option => option.description,\n      primaryKeyOption: \"value\",\n      onChange: handleChangeUserJob\n    })\n  });\n\n  const Dialogs = /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(DialogSpecificationCE, {}), /*#__PURE__*/_jsx(DialogDrawingCreateEdit, {}), /*#__PURE__*/_jsx(DialogPart, {})]\n  });\n\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: \"specification\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: wiki_page,\n    searchProps: {\n      width: 320\n    },\n    buttons: buttonsPage,\n    permissions: permissions,\n    tableProps: {\n      columns,\n      rowHeight: 150\n    },\n    Dialogs: Dialogs,\n    Options: Options\n  });\n};\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'specification', 'make_a_list', 'advanced_filter', 'drawing']);\nexport default SpecificationsPage;","map":null,"metadata":{},"sourceType":"module"}