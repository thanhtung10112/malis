{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\DataTable\\\\Overlay\\\\ColumnMenu\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { GridColumnMenuContainer, GridColumnMenu, useGridSlotComponentProps } from '@material-ui/data-grid';\nimport { makeStyles } from '@material-ui/core';\nimport { Switch, Case, Default } from 'react-if';\nimport clsx from 'clsx';\nimport { commonStore } from '@/store/reducers';\nconst useStyles = makeStyles(theme => ({\n  columnItem: {\n    width: 127,\n    height: 26,\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0.5, 1),\n    cursor: 'pointer',\n    '&:hover': {\n      backgroundColor: theme.palette.action.hover\n    },\n    '&.selected': {\n      backgroundColor: theme.palette.action.selected\n    }\n  }\n}));\n\nconst DataTableColumnMenu = props => {\n  const {\n    apiRef\n  } = useGridSlotComponentProps();\n\n  const {\n    hideMenu,\n    currentColumn,\n    color\n  } = props,\n        other = _objectWithoutProperties(props, [\"hideMenu\", \"currentColumn\", \"color\"]);\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const languageList = useSelector(state => {\n    const {\n      entity\n    } = state.common;\n\n    if (!entity) {\n      return [];\n    }\n\n    const parameters = state[entity].initDataForList.parameters;\n\n    if (!parameters) {\n      return [];\n    }\n\n    return parameters.PLLA;\n  });\n  const currentLanguage = useSelector(commonStore.selectCurrentLanguage);\n\n  const handleSelectLang = language => () => {\n    dispatch(commonStore.actions.setCurrentLanguage(language));\n    apiRef.current.hideColumnMenu();\n  };\n\n  const renderLanguages = () => languageList.filter(language => language.status).map(language => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: clsx(classes.columnItem, {\n        selected: language.id === currentLanguage.id\n      }),\n      onClick: handleSelectLang(language),\n      children: language.description\n    }, language.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }, this);\n  });\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Case, {\n      condition: currentColumn.field === 'description',\n      children: /*#__PURE__*/_jsxDEV(GridColumnMenuContainer, _objectSpread(_objectSpread({\n        hideMenu: hideMenu,\n        currentColumn: currentColumn\n      }, other), {}, {\n        children: renderLanguages()\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Default, {\n      children: /*#__PURE__*/_jsxDEV(GridColumnMenu, _objectSpread({\n        hideMenu: hideMenu,\n        currentColumn: currentColumn\n      }, other), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\nexport default DataTableColumnMenu;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/DataTable/Overlay/ColumnMenu/index.tsx"],"names":["useSelector","useDispatch","GridColumnMenuContainer","GridColumnMenu","useGridSlotComponentProps","makeStyles","Switch","Case","Default","clsx","commonStore","useStyles","theme","columnItem","width","height","display","alignItems","padding","spacing","cursor","backgroundColor","palette","action","hover","selected","DataTableColumnMenu","props","apiRef","hideMenu","currentColumn","color","other","classes","dispatch","languageList","state","entity","common","parameters","initDataForList","PLLA","currentLanguage","selectCurrentLanguage","handleSelectLang","language","actions","setCurrentLanguage","current","hideColumnMenu","renderLanguages","filter","status","map","id","description","field"],"mappings":"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","sourcesContent":["import { useSelector, useDispatch } from 'react-redux'\n\nimport { GridColumnMenuContainer, GridColumnMenu, useGridSlotComponentProps } from '@material-ui/data-grid'\nimport { makeStyles } from '@material-ui/core'\nimport { Switch, Case, Default } from 'react-if'\n\nimport clsx from 'clsx'\nimport { commonStore } from '@/store/reducers'\n\nimport type { RootReducerType } from '@/store/reducers/rootReducer'\n\nconst useStyles = makeStyles((theme) => ({\n  columnItem: {\n    width: 127,\n    height: 26,\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0.5, 1),\n    cursor: 'pointer',\n    '&:hover': {\n      backgroundColor: theme.palette.action.hover\n    },\n    '&.selected': {\n      backgroundColor: theme.palette.action.selected\n    }\n  }\n}))\n\nconst DataTableColumnMenu = (props) => {\n  const { apiRef } = useGridSlotComponentProps()\n  const { hideMenu, currentColumn, color, ...other } = props\n\n  const classes = useStyles()\n\n  const dispatch = useDispatch()\n  const languageList = useSelector((state: RootReducerType) => {\n    const { entity } = state.common\n    if (!entity) {\n      return []\n    }\n    const parameters = state[entity].initDataForList.parameters\n    if (!parameters) {\n      return []\n    }\n    return parameters.PLLA\n  })\n  const currentLanguage = useSelector(commonStore.selectCurrentLanguage)\n\n  const handleSelectLang = (language) => () => {\n    dispatch(commonStore.actions.setCurrentLanguage(language))\n    apiRef.current.hideColumnMenu()\n  }\n\n  const renderLanguages = () =>\n    languageList\n      .filter((language) => language.status)\n      .map((language) => {\n        return (\n          <div\n            key={language.id}\n            className={clsx(classes.columnItem, {\n              selected: language.id === currentLanguage.id\n            })}\n            onClick={handleSelectLang(language)}\n          >\n            {language.description}\n          </div>\n        )\n      })\n\n  return (\n    <Switch>\n      <Case condition={currentColumn.field === 'description'}>\n        <GridColumnMenuContainer hideMenu={hideMenu} currentColumn={currentColumn} {...other}>\n          {renderLanguages()}\n        </GridColumnMenuContainer>\n      </Case>\n      <Default>\n        <GridColumnMenu hideMenu={hideMenu} currentColumn={currentColumn} {...other} />\n      </Default>\n    </Switch>\n  )\n}\n\nexport default DataTableColumnMenu\n"]},"metadata":{},"sourceType":"module"}