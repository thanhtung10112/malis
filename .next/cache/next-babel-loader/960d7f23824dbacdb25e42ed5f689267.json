{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '@/styles/page/layout';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport { useTranslation } from 'next-i18next';\nimport { AppLayout, EditIcon, CreateIcon, DialogMaterialCE, AppAutocompleteStyled, DeleteIcon, SaveIcon, MakeAListIcon } from '@/components';\nimport { materialStore, commonStore } from '@/store/reducers';\nimport { defaultProperties, iconColumn } from '@/utils/columnProperties'; // import { DataGrid } from '@material-ui/data-grid'\n\nconst SpecificationsPage = () => {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation('material');\n  const breadcrumbData = useMemo(() => [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Drawings',\n    href: '/drawings'\n  }, {\n    label: 'Material List',\n    href: '/materials'\n  }], []);\n  const dispatch = useDispatch();\n  const permissions = useSelector(materialStore.selectPermissions);\n  const userJob = useSelector(commonStore.selectUserValueJob); // const materialSum = useSelector(materialStore.selectMaterialSum)\n\n  useEffect(() => {\n    return () => dispatch(commonStore.actions.resetUserValue());\n  }, []);\n\n  const handleOpenCreateDialog = () => {\n    dispatch(materialStore.actions.setDialogStateOpen(true));\n  };\n\n  const handleChangeUserJob = (event, optionValue) => {\n    console.warn('optionValue', '>>>', optionValue);\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, defaultProperties), iconColumn), {}, {\n    field: 'id',\n    headerName: 'Edit',\n\n    renderCell() {\n      return /*#__PURE__*/_jsx(EditIcon, {});\n    }\n\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'part_id',\n    headerName: 'Part #',\n    flex: 0.2\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'description',\n    headerName: 'Description',\n    flex: 0.3\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'MASS',\n    headerName: 'U.MASS(Kg)',\n    flex: 0.1\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'INST',\n    headerName: 'INST',\n    flex: 0.1\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'SPAR',\n    headerName: 'SPAR',\n    flex: 0.1\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'COM',\n    headerName: 'COM',\n    flex: 0.1\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'REP',\n    headerName: 'REP',\n    flex: 0.1\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'EREC',\n    headerName: 'EREC',\n    flex: 0.1\n  })];\n  const buttonsPage = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n    onClick: handleOpenCreateDialog\n  }, {\n    label: t('common:button.save'),\n    startIcon: /*#__PURE__*/_jsx(SaveIcon, {})\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsx(DeleteIcon, {})\n  }, {\n    label: t('common:button.make_a_list'),\n    startIcon: /*#__PURE__*/_jsx(MakeAListIcon, {})\n  }];\n\n  const Options = /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(AppAutocompleteStyled, {\n      className: classes.controlAutocomplete,\n      width: 250,\n      label: \"Jobs\",\n      options: [],\n      value: userJob,\n      renderOption: option => option.description,\n      primaryKeyOption: \"value\",\n      onChange: handleChangeUserJob\n    })\n  });\n\n  const Dialogs = /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(DialogMaterialCE, {})\n  }); // const bottomSection = (\n  //   <div style={{ height: 35, width: '100%' }}>\n  //     <DataGrid\n  //       disableSelectionOnClick\n  //       disableColumnMenu\n  //       checkboxSelection\n  //       hideFooter\n  //       columns={columns}\n  //       headerHeight={0}\n  //       rowHeight={35}\n  //       getRowClassName={() => classes.totalBudgetRow}\n  //       rows={[materialSum]}\n  //       onCellDoubleClick={(_, event) => {\n  //         event.stopPropagation()\n  //       }}\n  //     />\n  //   </div>\n  // )\n\n\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: \"materials\",\n    breadcrumbs: breadcrumbData,\n    searchProps: {\n      width: 320\n    },\n    buttons: buttonsPage,\n    permissions: permissions,\n    tableProps: {\n      columns\n    },\n    Dialogs: Dialogs,\n    Options: Options // bottomSection={bottomSection}\n\n  });\n};\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'materials', 'make_a_list', 'advanced_filter', 'drawing']);\nexport default SpecificationsPage;","map":null,"metadata":{},"sourceType":"module"}