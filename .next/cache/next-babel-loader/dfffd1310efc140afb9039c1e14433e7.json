{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Typography, Box } from '@material-ui/core';\nimport { ExpandMoreOutlined } from '@material-ui/icons';\nimport Popover from 'material-ui-popup-state/HoverPopover';\nimport useStyles from '../styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport { usePopupState, bindHover, bindPopover } from 'material-ui-popup-state/hooks';\nimport { useConfirm } from '@/components/Dialog/Common/Confirmation';\nimport clsx from 'clsx';\nimport { commonStore } from '@/store/reducers';\nimport { unsaveDialogOptions } from '@/utils/constant';\n\nfunction NavigationItem(props) {\n  const {\n    label,\n    links\n  } = props;\n  const router = useRouter();\n  const classes = useStyles();\n  const popupState = usePopupState({\n    variant: 'popover',\n    popupId: `${label} - links`\n  });\n  const {\n    confirm\n  } = useConfirm();\n  const dispatch = useDispatch();\n  const editRows = useSelector(commonStore.selectEditRows);\n  const entity = useSelector(commonStore.selectEntity);\n\n  const onRedirectPage = href => async event => {\n    event.preventDefault();\n    let result = '';\n\n    if (editRows.length > 0) {\n      result = await confirm(unsaveDialogOptions);\n    }\n\n    if (result === '') {\n      router.push(href);\n    } else if (result !== 'cancel') {\n      dispatch(commonStore.sagaUpdateMultiple({\n        entity,\n        href\n      }));\n    }\n  };\n\n  const activeLink = links.some(link => link.href === router.pathname);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", _objectSpread(_objectSpread({\n      className: clsx(classes.navigationItem, {\n        [classes.active]: activeLink\n      })\n    }, bindHover(popupState)), {}, {\n      children: [/*#__PURE__*/_jsx(Typography, {\n        component: Box,\n        variant: \"body1\",\n        fontWeight: \"fontWeightMedium\",\n        className: classes.label,\n        children: label\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: classes.dropdownIcon,\n        children: /*#__PURE__*/_jsx(ExpandMoreOutlined, {})\n      })]\n    })), links && /*#__PURE__*/_jsx(Popover, _objectSpread(_objectSpread({}, bindPopover(popupState)), {}, {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      transformOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      disableRestoreFocus: true,\n      children: /*#__PURE__*/_jsx(\"ul\", {\n        className: classes.dropdownList,\n        children: links.map(link => /*#__PURE__*/_jsx(\"li\", {\n          className: classes.dropdownItem,\n          children: /*#__PURE__*/_jsx(\"a\", {\n            href: link.href,\n            onClick: onRedirectPage(link.href),\n            children: /*#__PURE__*/_jsx(Typography, {\n              variant: \"body1\",\n              component: \"div\",\n              children: /*#__PURE__*/_jsx(Box, {\n                fontWeight: \"fontWeightMedium\",\n                children: link.label\n              })\n            })\n          })\n        }, link.label + link.href))\n      })\n    }))]\n  });\n}\n\nexport default NavigationItem;","map":null,"metadata":{},"sourceType":"module"}