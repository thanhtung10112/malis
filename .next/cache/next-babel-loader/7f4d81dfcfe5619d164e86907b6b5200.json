{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useStyles from './styles';\nimport useDialogContext from './Context/useDialogContext';\nimport useGetData from '@/hooks/useGetData';\nimport { Grid } from '@material-ui/core';\nimport { TableMultilingualDescription, AppAutocompleteAsync, FormControllerTextField, SectionTimezone, AppAutocomplete, FormControllerNumberField, useConfirm } from '@/components';\nimport { Unless } from 'react-if';\nimport _ from 'lodash';\nimport partApi from '@/apis/part.api';\nimport { commonStore } from '@/store/reducers';\nimport { StatusCode } from '@/utils/StatusCode';\n\nconst TabGeneral = () => {\n  var _tagForm$errors$job_i, _tagForm$errors$schem;\n\n  const classes = useStyles();\n  const {\n    confirm\n  } = useConfirm();\n  const {\n    getGeneratedCode\n  } = useGetData('elements');\n  const {\n    0: defaultPartList,\n    1: setDefaultPartList\n  } = useState([]);\n  const tagForm = useFormContext();\n  const watchSchematic = tagForm.watch('schematic_id', null);\n  const watchPartId = tagForm.watch('part_id', null);\n  const watchId = tagForm.watch('id', null);\n  const {\n    detail,\n    initData,\n    onChangeLoading\n  } = useDialogContext();\n  const {\n    parameters\n  } = initData;\n  const dispatch = useDispatch();\n  const userJob = useSelector(commonStore.selectUserValueJob);\n\n  const isCreating = _.isNil(detail.id);\n\n  const handleChangeSchematicId = async (event, optionValue) => {\n    setDefaultPartList([]);\n    onChangeLoading(true);\n\n    try {\n      tagForm.setValue('schematic_id', optionValue);\n      const elementId = await getGeneratedCode({\n        drawing_id: optionValue.value\n      });\n      tagForm.setValue('element_id', elementId);\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    onChangeLoading(false);\n  };\n\n  const handleFormatElementId = event => {\n    const {\n      value\n    } = event.target;\n    const formatValue = value.padStart(4, '0');\n    tagForm.setValue('element_id', formatValue);\n  };\n\n  const getAdditionalDataPart = () => {\n    const data = {};\n    data.limit_to_job = userJob.value;\n\n    if (!_.isNil(watchSchematic)) {\n      data.excluded_drawings = [watchSchematic.value];\n    }\n\n    return data;\n  };\n\n  const additionalDataPart = getAdditionalDataPart();\n\n  const displayConfirmRefDialog = async message => {\n    await confirm({\n      title: 'Warning',\n      description: message,\n      buttons: [{\n        label: 'Ok',\n        action: 'OK'\n      }]\n    });\n  };\n\n  const getPart = async selectedPart => {\n    onChangeLoading(true);\n\n    try {\n      var _formData$schematic_i;\n\n      const formData = tagForm.getValues();\n      const reqPayload = {\n        selected_part: selectedPart.value,\n        selected_drawing: (_formData$schematic_i = formData.schematic_id) === null || _formData$schematic_i === void 0 ? void 0 : _formData$schematic_i.value,\n        current_item: formData.id || null\n      };\n      const {\n        part,\n        message\n      } = await partApi.getReferencedPart(reqPayload);\n      const partFormat = {\n        description: selectedPart.description,\n        entity_id: part.dpn,\n        value: part.id\n      };\n      tagForm.setValue('part_id', partFormat);\n      tagForm.setValue('descriptions', part.descriptions);\n\n      if (selectedPart.value !== part.id) {\n        displayConfirmRefDialog(message);\n      } else {\n        dispatch(commonStore.actions.setSuccessMessage(message));\n      }\n    } catch (error) {\n      const {\n        status,\n        data\n      } = error.response;\n\n      if (status === StatusCode.BAD_REQUEST) {\n        displayConfirmRefDialog(data.message);\n      }\n    }\n\n    onChangeLoading(false);\n  };\n\n  const handleSelectPart = (event, optionValue, reason) => {\n    if (reason === 'remove-option') {\n      tagForm.setValue('part_id', null);\n    } else {\n      getPart(optionValue);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          style: {\n            marginTop: 8\n          },\n          children: /*#__PURE__*/_jsx(AppAutocomplete, {\n            helperText: (_tagForm$errors$job_i = tagForm.errors.job_id) === null || _tagForm$errors$job_i === void 0 ? void 0 : _tagForm$errors$job_i.message,\n            error: Boolean(tagForm.errors.job_id),\n            value: userJob,\n            popupIcon: null,\n            disabled: true,\n            label: \"Job\",\n            required: true,\n            primaryKeyOption: \"value\",\n            options: [],\n            renderOption: option => option.description\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(AppAutocompleteAsync, {\n            disabled: !isCreating,\n            helperText: (_tagForm$errors$schem = tagForm.errors.schematic_id) === null || _tagForm$errors$schem === void 0 ? void 0 : _tagForm$errors$schem.message,\n            error: Boolean(tagForm.errors.schematic_id),\n            value: watchSchematic,\n            compName: \"drawing_list\",\n            additionalData: {\n              limit_to_job: userJob.value\n            },\n            required: true,\n            label: \"Schematic #\",\n            onChange: handleChangeSchematicId\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerNumberField, {\n            disabled: !isCreating,\n            fixedDecimalScale: false,\n            decimalScale: null,\n            thousandSeparator: \"\",\n            isNumericString: true,\n            control: tagForm.control,\n            label: \"Element #\",\n            required: true,\n            name: \"element_id\",\n            onBlur: handleFormatElementId\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerTextField, {\n            control: tagForm.control,\n            label: \"Tag #\",\n            name: \"tag\",\n            required: true\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(AppAutocompleteAsync, {\n            disabled: !watchSchematic,\n            disableClearable: false,\n            value: watchPartId,\n            compName: \"part_list\",\n            additionalData: additionalDataPart,\n            label: \"Part #\",\n            onChange: handleSelectPart,\n            defaultOptions: defaultPartList,\n            filterOptions: options => {\n              if (_.isNil(options)) {\n                return [];\n              }\n\n              if (isCreating) {\n                return options;\n              }\n\n              return _.filter(options, option => option.value !== watchId);\n            }\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsx(TableMultilingualDescription, {\n        languageList: parameters.PLLA,\n        editMode: !isCreating,\n        name: \"descriptions\",\n        tableHeight: 160,\n        control: tagForm.control,\n        copyable: true,\n        copyDialogProps: {\n          checkboxesToSelect: [{\n            label: 'Drawing',\n            value: 'drawing_list',\n            entity: 'drawings'\n          }, {\n            label: 'Item/Assembly',\n            value: 'part_list',\n            entity: 'parts'\n          }, {\n            label: 'Tag',\n            value: 'element_list',\n            entity: 'elements',\n            default: true\n          }]\n        },\n        disabled: Boolean(watchPartId)\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: classes.tabGeneral__divider\n      })\n    }), /*#__PURE__*/_jsxs(Grid, {\n      item: true,\n      xs: 6,\n      children: [/*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerTextField, {\n            control: tagForm.control,\n            label: \"Fluid\",\n            name: \"fluid\"\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerTextField, {\n            control: tagForm.control,\n            label: \"Tech. data\",\n            name: \"tech_data\"\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Unless, {\n        condition: isCreating,\n        children: /*#__PURE__*/_jsx(SectionTimezone, {\n          value: detail\n        })\n      })]\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsx(TableMultilingualDescription, {\n        languageList: parameters.PLLA,\n        editMode: !isCreating,\n        name: \"functions\",\n        tableHeight: 160,\n        control: tagForm.control,\n        copyable: true,\n        copyDialogProps: {\n          compName: 'element_list',\n          entity: 'elements'\n        }\n      })\n    })]\n  });\n};\n\nexport default TabGeneral;","map":null,"metadata":{},"sourceType":"module"}