{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, put, putResolve } from 'redux-saga/effects';\nimport { select, all, call } from 'typed-redux-saga';\nimport { v1 as uuidv1 } from 'uuid';\nimport { advancedFilterActions, commonStore, userStore, authStore } from '@/store/reducers';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport userApi from '@/apis/user.api';\nimport { getProfile } from './auth.saga';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\n\nfunction* fetchInitDataForList() {\n  const data = yield call(userApi.getInitDataForList);\n  yield put(userStore.actions.setInitDataForList(data));\n}\n\nfunction* fetchDetail(id) {\n  const {\n    user\n  } = yield call(userApi.getDetail, id);\n  user.job_access = user.job_access.map(item => _objectSpread(_objectSpread({}, item), {}, {\n    id: uuidv1()\n  }));\n  yield put(userStore.actions.setDetail(user));\n}\n\nfunction* fetchList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData)\n  });\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(userApi.getList, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(userStore.actions.setDataList(data.user_lists));\n}\n\nfunction* fetchInitDataForCE() {\n  const data = yield call(userApi.getInitDataForCE);\n  const defaultValue = getDefaultValues(data, {\n    default_language: 'parameters.PLLA',\n    puco: 'parameters.PUCO',\n    time_zone: 'timezones'\n  });\n  yield all([put(userStore.actions.setInitDataForCE(data)), put(userStore.actions.setDetail(defaultValue))]);\n}\n\nexport function* getUserList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForList);\n    const permissions = yield* select(userStore.selectPermissions);\n\n    if (permissions.view) {\n      yield call(fetchList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* openUserCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    yield put(userStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* createUser({\n  payload\n}) {\n  yield put(userStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      message\n    } = yield call(userApi.create, payload);\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(userStore.actions.resetDetail())]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(userStore.actions.setDialogStateLoading(false));\n}\nexport function* openUserUpdateDialog({\n  payload: userId\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    yield call(fetchDetail, userId);\n    yield put(userStore.actions.setDialogState({\n      open: true,\n      editMode: true\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* resetPassword({\n  payload\n}) {\n  yield put(userStore.actions.setResetPwdDialogLoading(true));\n\n  try {\n    const {\n      id\n    } = yield* select(userStore.selectDetail);\n    const {\n      message\n    } = yield call(userApi.update, id, payload);\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(userStore.actions.setResetPwdDialogOpen(false))]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(userStore.actions.setResetPwdDialogLoading(false));\n}\nexport function* updateUser({\n  payload\n}) {\n  yield put(userStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      id,\n      formData\n    } = payload;\n    const profile = yield* select(authStore.selectProfile);\n    const {\n      message\n    } = yield call(userApi.update, id, formData);\n    yield put(commonStore.actions.setSuccessMessage(message));\n    yield call(closeUserDialog); // fetch profile after updated myself\n\n    if (formData.user_id === profile.user_name) {\n      yield call(getProfile);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(userStore.actions.setDialogStateLoading(false));\n}\nexport function* closeUserDialog() {\n  try {\n    yield putResolve(userStore.actions.setDialogStateOpen(false));\n    yield call(getUserList);\n    yield put(userStore.actions.resetDetail());\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeEvery(userStore.sagaGetList, getUserList);\n  yield takeEvery(userStore.sagaOpenCreateDialog, openUserCreateDialog);\n  yield takeEvery(userStore.sagaCreate, createUser);\n  yield takeEvery(userStore.sagaOpenUpdateDialog, openUserUpdateDialog);\n  yield takeEvery(userStore.sagaUpdate, updateUser);\n  yield takeEvery(userStore.sagaResetPassword, resetPassword);\n  yield takeEvery(userStore.sagaCloseDialog, closeUserDialog);\n}\n\nexport default userSaga;","map":null,"metadata":{},"sourceType":"module"}