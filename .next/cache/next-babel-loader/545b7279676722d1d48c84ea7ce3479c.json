{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport { Button, Grid } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { FormControllerTextField, TableMultilingualDescription, FormControllerAutocomplete, AppAutocompleteAsync, SectionTimezone, AppAutocomplete, CopyIcon, DropdownIcon, FormControllerNumberField } from '@/components';\nimport DialogCopyItem from './DialogCopyItem';\nimport { commonStore, partStore } from '@/store/reducers';\nimport _ from 'lodash';\nimport { itemMassFormat } from '@/utils/constant';\n\nconst TabGeneral = () => {\n  var _itemForm$errors$job_, _itemForm$errors$draw;\n\n  const {\n    t\n  } = useTranslation('common');\n  const {\n    0: openCopyItem,\n    1: setOpenCopyItem\n  } = useState(false);\n  const {\n    0: defaultPartList,\n    1: setDefaultPartList\n  } = useState([]);\n  const itemForm = useFormContext();\n  const itemFormData = itemForm.getValues();\n  const watchDrawingId = itemForm.watch('drawing_id', null);\n  const watchRefTo = itemForm.watch('reference_to', null);\n  const watchId = itemForm.watch('id', null);\n\n  const isCreating = _.isNil(watchId);\n\n  const dispatch = useDispatch();\n  const parameters = useSelector(partStore.selectParameters);\n  const userJob = useSelector(commonStore.selectUserValueJob);\n  const entity = useSelector(commonStore.selectEntity);\n\n  const getAdditionalDataPart = () => {\n    const data = {};\n    data.limit_to_job = userJob.value;\n\n    if (!_.isNil(watchDrawingId)) {\n      data.excluded_drawings = [watchDrawingId.value];\n    }\n\n    return data;\n  };\n\n  const additionalDataPart = getAdditionalDataPart();\n\n  const handleChangeDrawingId = (event, optionValue) => {\n    const formData = itemForm.getValues();\n    setDefaultPartList([]);\n    dispatch(partStore.sagaChangeDrawing({\n      formData,\n      drawing: optionValue,\n      entity: 'item'\n    }));\n  };\n\n  const handleSetOpenCopyItem = isOpen => () => {\n    if (_.isNull(watchRefTo)) {\n      setOpenCopyItem(isOpen);\n    }\n  };\n\n  const handleSelectPart = (event, optionValue) => {\n    var _formData$drawing_id;\n\n    const formData = itemForm.getValues();\n    const payload = {\n      selected_part: (optionValue === null || optionValue === void 0 ? void 0 : optionValue.value) || null,\n      selected_drawing: (_formData$drawing_id = formData.drawing_id) === null || _formData$drawing_id === void 0 ? void 0 : _formData$drawing_id.value,\n      current_item: isCreating ? null : formData.id\n    };\n    dispatch(partStore.sagaGetPartRefItem(payload));\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(AppAutocomplete, {\n              helperText: (_itemForm$errors$job_ = itemForm.errors.job_id) === null || _itemForm$errors$job_ === void 0 ? void 0 : _itemForm$errors$job_.message,\n              error: Boolean(itemForm.errors.job_id),\n              value: userJob,\n              popupIcon: null,\n              disabled: true,\n              label: \"Job\",\n              required: true,\n              primaryKeyOption: \"value\",\n              options: [],\n              renderOption: option => option.description\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(AppAutocompleteAsync, {\n              popupIcon: entity === 'drawing' ? null : /*#__PURE__*/_jsx(DropdownIcon, {}),\n              helperText: (_itemForm$errors$draw = itemForm.errors.drawing_id) === null || _itemForm$errors$draw === void 0 ? void 0 : _itemForm$errors$draw.message,\n              error: Boolean(itemForm.errors.drawing_id),\n              disabled: !isCreating || entity === 'drawing',\n              value: watchDrawingId,\n              compName: \"drawing_list\",\n              additionalData: {\n                limit_to_job: userJob.value\n              },\n              required: true,\n              label: \"Drawing #\",\n              onChange: handleChangeDrawingId\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 8,\n            children: /*#__PURE__*/_jsx(FormControllerTextField, {\n              disabled: !isCreating,\n              control: itemForm.control,\n              name: \"dpn\",\n              required: true,\n              label: \"Item #\"\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsx(Button, {\n              startIcon: /*#__PURE__*/_jsx(CopyIcon, {}),\n              style: {\n                padding: '0 4px',\n                textTransform: 'capitalize'\n              },\n              onClick: handleSetOpenCopyItem(true),\n              disabled: Boolean(watchRefTo),\n              children: t('button.copy_attribute')\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(AppAutocompleteAsync, {\n              disabled: !watchDrawingId,\n              disableClearable: false,\n              value: watchRefTo,\n              compName: \"part_list\",\n              additionalData: additionalDataPart,\n              label: \"Reference Part Number\",\n              onChange: handleSelectPart,\n              defaultOptions: defaultPartList,\n              filterOptions: options => {\n                if (_.isNil(options)) {\n                  return [];\n                }\n\n                if (isCreating) {\n                  return options;\n                }\n\n                return _.filter(options, option => option.value !== watchId);\n              }\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(FormControllerNumberField, {\n              control: itemForm.control,\n              name: \"mass\",\n              required: true,\n              label: \"Mass (kg)\",\n              disabled: Boolean(watchRefTo),\n              decimalScale: itemMassFormat.precision,\n              fixedDecimalScale: itemMassFormat.precision\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n              control: itemForm.control,\n              name: \"unit\",\n              required: true,\n              label: \"Unit\",\n              primaryKeyOption: \"value\",\n              options: parameters.UNIT,\n              renderOption: option => option.description,\n              disabled: Boolean(watchRefTo)\n            })\n          }), /*#__PURE__*/_jsx(When, {\n            condition: !isCreating,\n            children: /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              style: {\n                padding: 0\n              },\n              children: /*#__PURE__*/_jsx(SectionTimezone, {\n                value: itemFormData\n              })\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsx(TableMultilingualDescription, {\n          disabled: Boolean(watchRefTo),\n          languageList: parameters.PLLA,\n          editMode: !isCreating,\n          name: \"descriptions\",\n          tableHeight: 290,\n          control: itemForm.control,\n          copyable: true,\n          copyDialogProps: {\n            checkboxesToSelect: [{\n              label: 'Drawing',\n              value: 'drawing_list',\n              entity: 'drawings'\n            }, {\n              label: 'Item/Assembly',\n              value: 'part_list',\n              entity: 'parts',\n              default: true\n            }]\n          }\n        })\n      })]\n    }), /*#__PURE__*/_jsx(DialogCopyItem, {\n      open: openCopyItem,\n      onClose: handleSetOpenCopyItem(false)\n    })]\n  });\n};\n\nexport default TabGeneral;","map":null,"metadata":{},"sourceType":"module"}