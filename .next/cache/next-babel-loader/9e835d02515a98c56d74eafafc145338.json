{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Job\\\\TabGeneral\\\\index.tsx\";\nimport { useMemo, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport useStyles from './styles';\nimport useDialogContext from '../Context/useDialogContext';\nimport { Grid, Tooltip } from '@material-ui/core';\nimport { MoreHoriz as MoreHorizIcon } from '@material-ui/icons';\nimport { AppTitle, DialogTransferList, TableMultilingualDescription, FormControllerAutocomplete, AppTextField, SectionTimezone, FormControllerTextField } from '@/components';\nimport { Unless } from 'react-if';\nimport parseHTML from 'html-react-parser';\nimport _ from 'lodash';\nimport AppNumber from '@/helper/AppNumber';\nimport { jobStore } from '@/store/reducers';\n\nfunction TabGeneral() {\n  var _jobForm$errors$peopl, _jobForm$errors$squad, _jobForm$errors$job_u;\n\n  const classes = useStyles();\n  const {\n    isCreating\n  } = useDialogContext();\n  const jobForm = useFormContext();\n  const watchPeopleResponsible = jobForm.watch('people_responsible', []);\n  const watchSquadLeader = jobForm.watch('squad_leader', []);\n  const watchDrawingsResponsible = jobForm.watch('drawings_responsible', []);\n  const watchJobUsers = jobForm.watch('job_users', []);\n  const transformPeopleResponsible = watchPeopleResponsible.map(user => user.user_id).join(';');\n  const transformSquadLeader = watchSquadLeader.map(user => user.user_id).join(';');\n  const transformDrawingsResponsible = watchDrawingsResponsible.map(user => user.user_id).join(';');\n  const transformJobUsers = watchJobUsers.map(user => user.user_id).join(';');\n  const dispatch = useDispatch();\n  const {\n    tooltip,\n    parameters,\n    erection_sites,\n    group_map\n  } = useSelector(jobStore.selectInitDataForCE);\n  const tooltipForJobId = parseHTML(tooltip);\n  const transferListState = useSelector(jobStore.selectTransferListState);\n  const keyMapping = useSelector(jobStore.selectKeyMapping);\n  const jobDetail = useSelector(jobStore.selectDetail);\n  const usersAvailableGroup = transferListState.userAvailableList;\n\n  const usersAvailable = _.differenceWith(usersAvailableGroup, transferListState.userGroup, _.isEqual);\n\n  const getTitleForTransferList = () => {\n    switch (keyMapping) {\n      case 'people_responsible':\n        return 'Job Responsible (*)';\n\n      case 'squad_leader':\n        return 'Squad Leader (*)';\n\n      case 'drawings_responsible':\n        return 'Drawing Responsible';\n\n      case 'job_users':\n        return 'Access Group (*)';\n\n      default:\n        return 'Job Responsible (*)';\n    }\n  };\n\n  const titleForTransferList = useMemo(getTitleForTransferList, [keyMapping]);\n  useEffect(() => {\n    if (keyMapping) {\n      const usersGroupInJobDetail = jobForm.watch(keyMapping, []);\n      dispatch(jobStore.actions.setTransferListUserGroup(usersGroupInJobDetail));\n    }\n  }, [jobDetail, keyMapping]);\n\n  const onSaveTransferList = async () => {\n    const {\n      userGroup\n    } = transferListState;\n\n    if (keyMapping !== 'job_users') {\n      const jobUsersGroup = _.unionWith(watchJobUsers, userGroup, _.isEqual);\n\n      jobForm.setValue('job_users', jobUsersGroup);\n      jobForm.setValue(keyMapping, userGroup);\n    } else {\n      jobForm.setValue('job_users', userGroup);\n    } // clear error before submitting\n\n\n    await jobForm.trigger([keyMapping, 'job_users']);\n    dispatch(jobStore.actions.setOpenTransferList(false));\n  };\n\n  const onChangeLeftSideList = list => {\n    dispatch(jobStore.actions.setTransferUserAvailableList(list));\n  };\n\n  const onChangeRightSideList = list => {\n    dispatch(jobStore.actions.setTransferListUserGroup(list));\n  };\n\n  const onOpenTransferList = (userKeyGroup, keyMapping) => () => {\n    dispatch(jobStore.sagaGetUserGroupMapping(userKeyGroup));\n    dispatch(jobStore.actions.setKeyMapping(keyMapping));\n  };\n\n  const onCloseTransferList = () => {\n    dispatch(jobStore.actions.closeTransferList());\n  };\n\n  const handleTransformJobId = event => {\n    const {\n      value\n    } = event.target;\n\n    if (AppNumber.isNumber(value)) {\n      const formatValue = _.padStart(value, 4, '0');\n\n      jobForm.setValue('job_id', formatValue);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: tooltipForJobId,\n              children: /*#__PURE__*/_jsxDEV(FormControllerTextField, {\n                name: \"job_id\",\n                control: jobForm.control,\n                label: \"Job #\",\n                required: true,\n                disabled: !isCreating,\n                onBlur: handleTransformJobId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(FormControllerAutocomplete, {\n              name: \"language\",\n              control: jobForm.control,\n              options: parameters.PLLA,\n              renderOption: option => `${option.parameter_id} - ${option.description}`,\n              label: \"Language\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormControllerAutocomplete, {\n              name: \"equipment_type\",\n              control: jobForm.control,\n              options: parameters.EQTY,\n              label: \"Equipment Type\",\n              required: true,\n              renderOption: option => `${option.parameter_id} - ${option.description}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormControllerAutocomplete, {\n              name: \"erection_site\",\n              control: jobForm.control,\n              options: erection_sites,\n              renderOption: option => `${option.location_id} - ${option.name}`,\n              label: \"Erection Site\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          className: classes.section,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(AppTitle, {\n              label: \"Communication\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 11,\n            children: /*#__PURE__*/_jsxDEV(AppTextField, {\n              label: \"Job Responsible\",\n              disabled: true,\n              required: true,\n              value: transformPeopleResponsible,\n              error: Boolean(jobForm.errors.people_responsible),\n              helperText: (_jobForm$errors$peopl = jobForm.errors.people_responsible) === null || _jobForm$errors$peopl === void 0 ? void 0 : _jobForm$errors$peopl.message,\n              InputLabelProps: {\n                shrink: Boolean(transformPeopleResponsible)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 1,\n            children: /*#__PURE__*/_jsxDEV(MoreHorizIcon, {\n              onClick: onOpenTransferList(group_map.job_responsible, 'people_responsible')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 11,\n            children: /*#__PURE__*/_jsxDEV(AppTextField, {\n              label: \"Coordinators\",\n              disabled: true,\n              required: true,\n              value: transformSquadLeader,\n              error: Boolean(jobForm.errors.squad_leader),\n              helperText: (_jobForm$errors$squad = jobForm.errors.squad_leader) === null || _jobForm$errors$squad === void 0 ? void 0 : _jobForm$errors$squad.message,\n              InputLabelProps: {\n                shrink: Boolean(transformSquadLeader)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 1,\n            children: /*#__PURE__*/_jsxDEV(MoreHorizIcon, {\n              onClick: onOpenTransferList(group_map.job_squad_leader, 'squad_leader')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 11,\n            children: /*#__PURE__*/_jsxDEV(AppTextField, {\n              label: \"Drawings Responsible\",\n              disabled: true,\n              value: transformDrawingsResponsible,\n              InputLabelProps: {\n                shrink: Boolean(transformDrawingsResponsible)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 1,\n            children: /*#__PURE__*/_jsxDEV(MoreHorizIcon, {\n              onClick: onOpenTransferList(group_map.job_drawing, 'drawings_responsible')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          className: classes.section,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(AppTitle, {\n              label: \"Rights\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 11,\n            children: /*#__PURE__*/_jsxDEV(AppTextField, {\n              label: \"Access Group\",\n              required: true,\n              disabled: true,\n              value: transformJobUsers,\n              error: Boolean(jobForm.errors.job_users),\n              helperText: (_jobForm$errors$job_u = jobForm.errors.job_users) === null || _jobForm$errors$job_u === void 0 ? void 0 : _jobForm$errors$job_u.message,\n              InputLabelProps: {\n                shrink: Boolean(transformJobUsers)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 1,\n            children: /*#__PURE__*/_jsxDEV(MoreHorizIcon, {\n              onClick: onOpenTransferList(group_map.job_all, 'job_users')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: [/*#__PURE__*/_jsxDEV(AppTitle, {\n          label: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableMultilingualDescription, {\n          tableHeight: 315,\n          name: \"job_descriptions\",\n          editMode: !isCreating,\n          control: jobForm.control,\n          className: classes.section,\n          languageList: parameters.PLLA\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Unless, {\n        condition: isCreating,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          style: {\n            padding: '0 12px'\n          },\n          children: /*#__PURE__*/_jsxDEV(SectionTimezone, {\n            value: jobDetail,\n            style: {\n              padding: 0,\n              marginTop: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogTransferList, {\n      title: titleForTransferList,\n      open: transferListState.open,\n      leftSideList: usersAvailable,\n      rightSideList: transferListState.userGroup,\n      titleLeft: \"Available Users\",\n      titleRight: titleForTransferList,\n      onSave: onSaveTransferList,\n      onClose: onCloseTransferList,\n      onChangeLeftSideList: onChangeLeftSideList,\n      onChangeRightSideList: onChangeRightSideList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nexport default TabGeneral;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Job/TabGeneral/index.tsx"],"names":["useMemo","useEffect","useSelector","useDispatch","useFormContext","useStyles","useDialogContext","Grid","Tooltip","MoreHoriz","MoreHorizIcon","AppTitle","DialogTransferList","TableMultilingualDescription","FormControllerAutocomplete","AppTextField","SectionTimezone","FormControllerTextField","Unless","parseHTML","_","AppNumber","jobStore","TabGeneral","classes","isCreating","jobForm","watchPeopleResponsible","watch","watchSquadLeader","watchDrawingsResponsible","watchJobUsers","transformPeopleResponsible","map","user","user_id","join","transformSquadLeader","transformDrawingsResponsible","transformJobUsers","dispatch","tooltip","parameters","erection_sites","group_map","selectInitDataForCE","tooltipForJobId","transferListState","selectTransferListState","keyMapping","selectKeyMapping","jobDetail","selectDetail","usersAvailableGroup","userAvailableList","usersAvailable","differenceWith","userGroup","isEqual","getTitleForTransferList","titleForTransferList","usersGroupInJobDetail","actions","setTransferListUserGroup","onSaveTransferList","jobUsersGroup","unionWith","setValue","trigger","setOpenTransferList","onChangeLeftSideList","list","setTransferUserAvailableList","onChangeRightSideList","onOpenTransferList","userKeyGroup","sagaGetUserGroupMapping","setKeyMapping","onCloseTransferList","closeTransferList","handleTransformJobId","event","value","target","isNumber","formatValue","padStart","control","PLLA","option","parameter_id","description","EQTY","location_id","name","section","Boolean","errors","people_responsible","message","shrink","job_responsible","squad_leader","job_squad_leader","job_drawing","job_users","job_all","padding","marginTop","open"],"mappings":"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","sourcesContent":["import { useMemo, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useFormContext } from 'react-hook-form'\nimport useStyles from './styles'\nimport useDialogContext from '../Context/useDialogContext'\n\nimport { Grid, Tooltip } from '@material-ui/core'\nimport { MoreHoriz as MoreHorizIcon } from '@material-ui/icons'\nimport {\n  AppTitle,\n  DialogTransferList,\n  TableMultilingualDescription,\n  FormControllerAutocomplete,\n  AppTextField,\n  SectionTimezone,\n  FormControllerTextField\n} from '@/components'\n\nimport { Unless } from 'react-if'\n\nimport parseHTML from 'html-react-parser'\nimport _ from 'lodash'\nimport AppNumber from '@/helper/AppNumber'\nimport { jobStore } from '@/store/reducers'\n\nimport type { JobKeyMapping, JobDetail } from '@/types/Job'\n\nfunction TabGeneral() {\n  const classes = useStyles()\n  const { isCreating } = useDialogContext()\n\n  const jobForm = useFormContext<JobDetail>()\n\n  const watchPeopleResponsible = jobForm.watch('people_responsible', [])\n  const watchSquadLeader = jobForm.watch('squad_leader', [])\n  const watchDrawingsResponsible = jobForm.watch('drawings_responsible', [])\n  const watchJobUsers = jobForm.watch('job_users', [])\n\n  const transformPeopleResponsible = watchPeopleResponsible.map((user) => user.user_id).join(';')\n  const transformSquadLeader = watchSquadLeader.map((user) => user.user_id).join(';')\n  const transformDrawingsResponsible = watchDrawingsResponsible.map((user) => user.user_id).join(';')\n  const transformJobUsers = watchJobUsers.map((user) => user.user_id).join(';')\n\n  const dispatch = useDispatch()\n  const { tooltip, parameters, erection_sites, group_map } = useSelector(jobStore.selectInitDataForCE)\n  const tooltipForJobId = parseHTML(tooltip)\n  const transferListState = useSelector(jobStore.selectTransferListState)\n  const keyMapping = useSelector(jobStore.selectKeyMapping)\n  const jobDetail = useSelector(jobStore.selectDetail)\n\n  const usersAvailableGroup = transferListState.userAvailableList\n  const usersAvailable = _.differenceWith(usersAvailableGroup, transferListState.userGroup, _.isEqual)\n\n  const getTitleForTransferList = () => {\n    switch (keyMapping) {\n      case 'people_responsible':\n        return 'Job Responsible (*)'\n      case 'squad_leader':\n        return 'Squad Leader (*)'\n      case 'drawings_responsible':\n        return 'Drawing Responsible'\n      case 'job_users':\n        return 'Access Group (*)'\n      default:\n        return 'Job Responsible (*)'\n    }\n  }\n\n  const titleForTransferList = useMemo(getTitleForTransferList, [keyMapping])\n\n  useEffect(() => {\n    if (keyMapping) {\n      const usersGroupInJobDetail = jobForm.watch(keyMapping, [])\n      dispatch(jobStore.actions.setTransferListUserGroup(usersGroupInJobDetail))\n    }\n  }, [jobDetail, keyMapping])\n\n  const onSaveTransferList = async () => {\n    const { userGroup } = transferListState\n    if (keyMapping !== 'job_users') {\n      const jobUsersGroup = _.unionWith(watchJobUsers, userGroup, _.isEqual)\n      jobForm.setValue('job_users', jobUsersGroup)\n      jobForm.setValue(keyMapping, userGroup)\n    } else {\n      jobForm.setValue('job_users', userGroup)\n    }\n\n    // clear error before submitting\n    await jobForm.trigger([keyMapping, 'job_users'])\n\n    dispatch(jobStore.actions.setOpenTransferList(false))\n  }\n\n  const onChangeLeftSideList = (list) => {\n    dispatch(jobStore.actions.setTransferUserAvailableList(list))\n  }\n\n  const onChangeRightSideList = (list) => {\n    dispatch(jobStore.actions.setTransferListUserGroup(list))\n  }\n\n  const onOpenTransferList = (userKeyGroup: string, keyMapping: JobKeyMapping) => () => {\n    dispatch(jobStore.sagaGetUserGroupMapping(userKeyGroup))\n    dispatch(jobStore.actions.setKeyMapping(keyMapping))\n  }\n\n  const onCloseTransferList = () => {\n    dispatch(jobStore.actions.closeTransferList())\n  }\n\n  const handleTransformJobId = (event) => {\n    const { value } = event.target\n    if (AppNumber.isNumber(value)) {\n      const formatValue = _.padStart(value, 4, '0')\n      jobForm.setValue('job_id', formatValue)\n    }\n  }\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid item xs={6}>\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <Tooltip title={tooltipForJobId}>\n                <FormControllerTextField\n                  name=\"job_id\"\n                  control={jobForm.control}\n                  label=\"Job #\"\n                  required\n                  disabled={!isCreating}\n                  onBlur={handleTransformJobId}\n                />\n              </Tooltip>\n            </Grid>\n            <Grid item xs={6}>\n              <FormControllerAutocomplete\n                name=\"language\"\n                control={jobForm.control}\n                options={parameters.PLLA}\n                renderOption={(option) => `${option.parameter_id} - ${option.description}`}\n                label=\"Language\"\n                required\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControllerAutocomplete\n                name=\"equipment_type\"\n                control={jobForm.control}\n                options={parameters.EQTY}\n                label=\"Equipment Type\"\n                required\n                renderOption={(option) => `${option.parameter_id} - ${option.description}`}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControllerAutocomplete\n                name=\"erection_site\"\n                control={jobForm.control}\n                options={erection_sites}\n                renderOption={(option) => `${option.location_id} - ${option.name}`}\n                label=\"Erection Site\"\n                required\n              />\n            </Grid>\n          </Grid>\n\n          <Grid container spacing={2} className={classes.section}>\n            <Grid item xs={12}>\n              <AppTitle label=\"Communication\" />\n            </Grid>\n            <Grid item xs={11}>\n              <AppTextField\n                label=\"Job Responsible\"\n                disabled\n                required\n                value={transformPeopleResponsible}\n                error={Boolean(jobForm.errors.people_responsible)}\n                helperText={(jobForm.errors.people_responsible as any)?.message}\n                InputLabelProps={{\n                  shrink: Boolean(transformPeopleResponsible)\n                }}\n              />\n            </Grid>\n            <Grid item xs={1}>\n              <MoreHorizIcon onClick={onOpenTransferList(group_map.job_responsible, 'people_responsible')} />\n            </Grid>\n            <Grid item xs={11}>\n              <AppTextField\n                label=\"Coordinators\"\n                disabled\n                required\n                value={transformSquadLeader}\n                error={Boolean(jobForm.errors.squad_leader)}\n                helperText={(jobForm.errors.squad_leader as any)?.message}\n                InputLabelProps={{ shrink: Boolean(transformSquadLeader) }}\n              />\n            </Grid>\n            <Grid item xs={1}>\n              <MoreHorizIcon onClick={onOpenTransferList(group_map.job_squad_leader, 'squad_leader')} />\n            </Grid>\n            <Grid item xs={11}>\n              <AppTextField\n                label=\"Drawings Responsible\"\n                disabled\n                value={transformDrawingsResponsible}\n                InputLabelProps={{\n                  shrink: Boolean(transformDrawingsResponsible)\n                }}\n              />\n            </Grid>\n            <Grid item xs={1}>\n              <MoreHorizIcon onClick={onOpenTransferList(group_map.job_drawing, 'drawings_responsible')} />\n            </Grid>\n          </Grid>\n\n          <Grid container spacing={2} className={classes.section}>\n            <Grid item xs={12}>\n              <AppTitle label=\"Rights\" />\n            </Grid>\n            <Grid item xs={11}>\n              <AppTextField\n                label=\"Access Group\"\n                required\n                disabled\n                value={transformJobUsers}\n                error={Boolean(jobForm.errors.job_users)}\n                helperText={(jobForm.errors.job_users as any)?.message}\n                InputLabelProps={{ shrink: Boolean(transformJobUsers) }}\n              />\n            </Grid>\n            <Grid item xs={1}>\n              <MoreHorizIcon onClick={onOpenTransferList(group_map.job_all, 'job_users')} />\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid item xs={6}>\n          <AppTitle label=\"Description\" />\n\n          <TableMultilingualDescription\n            tableHeight={315}\n            name=\"job_descriptions\"\n            editMode={!isCreating}\n            control={jobForm.control}\n            className={classes.section}\n            languageList={parameters.PLLA}\n          />\n        </Grid>\n\n        <Unless condition={isCreating}>\n          <Grid item xs={12} style={{ padding: '0 12px' }}>\n            <SectionTimezone value={jobDetail} style={{ padding: 0, marginTop: 0 }} />\n          </Grid>\n        </Unless>\n      </Grid>\n      <DialogTransferList\n        title={titleForTransferList}\n        open={transferListState.open}\n        leftSideList={usersAvailable}\n        rightSideList={transferListState.userGroup}\n        titleLeft=\"Available Users\"\n        titleRight={titleForTransferList}\n        onSave={onSaveTransferList}\n        onClose={onCloseTransferList}\n        onChangeLeftSideList={onChangeLeftSideList}\n        onChangeRightSideList={onChangeRightSideList}\n      />\n    </>\n  )\n}\n\nexport default TabGeneral\n"]},"metadata":{},"sourceType":"module"}