{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { useTranslation } from 'next-i18next';\nimport { DialogContent, Grid, Typography, Button, Tab, Tabs, Tooltip, Paper } from '@material-ui/core';\nimport { DialogMain, MalisPanel, SortConditionList, ConditionTree, ColumnList, ExportProgressDialog, useConfirm, AppTitle, DialogSaveAsPreset, ExcelIcon, confirmConstant } from '@/components/index';\nimport { When, If, Then, Else } from 'react-if';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\nimport CloseIcon from '@material-ui/icons/Close';\nimport TablePresetList from './TablePresetList';\nimport TabOptions from './TabOptions';\nimport SectionGeneralInfo from './SectionGeneralInfo';\nimport useStyles from './styles';\nimport useStylesLayout from '@/styles/page/layout';\nimport { authStore, makeAListActions } from '@/store/reducers';\nimport _ from 'lodash';\nimport clsx from 'clsx';\nimport getValidationSchema from './validationSchema';\nexport default function MakeAListDialog() {\n  var _useTranslation = useTranslation('make_a_list'),\n      t = _useTranslation.t;\n\n  var classes = useStyles();\n  var classesLayout = useStylesLayout();\n\n  var _useConfirm = useConfirm(),\n      confirm = _useConfirm.confirm;\n\n  var _useState = useState(0),\n      activeTab = _useState[0],\n      setActiveTab = _useState[1];\n\n  var _useState2 = useState(false),\n      disabledActions = _useState2[0],\n      setDisableActions = _useState2[1];\n\n  var dispatch = useDispatch();\n  var isEditMode = useSelector(makeAListActions.selectIsEditMode);\n  var isOpen = useSelector(makeAListActions.selectIsOpen);\n  var presetDetail = useSelector(makeAListActions.selectPresetDetail);\n  var columnsDisplayed = useSelector(makeAListActions.selectColumnDisplay);\n  var whereConditions = useSelector(makeAListActions.selectWhereConditions);\n  var sortConditions = useSelector(makeAListActions.selectSortConditions);\n  var columnOptions = useSelector(makeAListActions.selectColumnsData);\n  var comparatorOptions = useSelector(makeAListActions.selectComparatorsData);\n  var conjunctionOptions = useSelector(makeAListActions.selectLogicalOperatorsData);\n  var sortOptions = useSelector(makeAListActions.selectSortOptionsData);\n  var permissions = useSelector(makeAListActions.selectPermissions);\n  var saveAsFormSelector = useSelector(makeAListActions.selectSaveAsForm);\n  var malFormSelector = useSelector(makeAListActions.selectMalForm);\n  var loadingDialog = useSelector(makeAListActions.selectLoadingDialog);\n  var userInfo = useSelector(authStore.selectProfile);\n  var columnsDisplayedData = useMemo(function () {\n    return _.cloneDeep(columnsDisplayed);\n  }, [columnsDisplayed]);\n  var sortConditionsData = useMemo(function () {\n    return _.cloneDeep(sortConditions);\n  }, [sortConditions]);\n  var whereConditionsData = useMemo(function () {\n    return _.cloneDeep(whereConditions);\n  }, [whereConditions]);\n  var isSharedMode = presetDetail.created_by && presetDetail.created_by !== userInfo.user_name;\n  var saveAsForm = useForm({\n    defaultValues: {\n      save_as_name: ''\n    },\n    shouldUnregister: false\n  });\n  var validationSchema = useMemo(function () {\n    return getValidationSchema(t);\n  }, []);\n  var makeAListForm = useForm({\n    defaultValues: makeAListActions.presetDetail,\n    shouldUnregister: false\n  });\n  useEffect(function () {\n    makeAListForm.reset(_objectSpread({}, presetDetail));\n  }, [presetDetail]); // handle error for the SaveAs form\n\n  useEffect(function () {\n    if (saveAsFormSelector.error) {\n      saveAsForm.setError('save_as_name', {\n        message: saveAsFormSelector.error\n      });\n    }\n  }, [saveAsFormSelector.error]); // clear error in SaveAs form if clone successfully!\n\n  useEffect(function () {\n    if (saveAsFormSelector.clearError) {\n      saveAsForm.clearErrors();\n    }\n  }, [saveAsFormSelector.clearError]); // handle error for the Mal form\n\n  useEffect(function () {\n    if (malFormSelector.error) {\n      makeAListForm.setError('name', {\n        message: malFormSelector.error\n      });\n    }\n  }, [malFormSelector.error]); // handle error in Mal form if clone successfully!\n\n  useEffect(function () {\n    if (malFormSelector.clearError) {\n      makeAListForm.clearErrors();\n    }\n  }, [malFormSelector.clearError]);\n  useEffect(function () {\n    var isDisabled = columnsDisplayed.length <= 0;\n    setDisableActions(isDisabled);\n  }, [columnsDisplayed]);\n  useEffect(function () {\n    return function () {\n      dispatch(makeAListActions.resetState());\n    };\n  }, []);\n  useEffect(function () {\n    dispatch(makeAListActions.setIsEditMode(true));\n  }, []);\n\n  var handleChange = function handleChange(_, tabIndex) {\n    setActiveTab(tabIndex);\n  };\n\n  var handleClose = function handleClose() {\n    dispatch(makeAListActions.setOpen(false));\n    dispatch(makeAListActions.setFilterType('own')); // dispatch(makeAListActions.resetState())\n\n    makeAListForm.clearErrors();\n  };\n\n  var handleExport = function handleExport(destination) {\n    return function () {\n      dispatch(makeAListActions.exportMakeAList({\n        destination: destination,\n        displayedColumns: columnsDisplayedData,\n        sortConditions: sortConditionsData,\n        whereCondtions: whereConditionsData,\n        distinct: presetDetail.distinct,\n        ignoreCase: presetDetail.ignore_case\n      }));\n    };\n  };\n\n  var onSubmitData = makeAListForm.handleSubmit(function (data) {\n    data.columns_displayed = columnsDisplayedData;\n    data.sort_conditions = sortConditionsData;\n    data.where_conditions = whereConditionsData;\n\n    if (isEditMode) {\n      dispatch(makeAListActions.update(data));\n    } else {\n      dispatch(makeAListActions.create(data));\n    }\n  });\n\n  var onSaveSharedPreset = function onSaveSharedPreset() {\n    var _makeAListForm$getVal = makeAListForm.getValues(),\n        name = _makeAListForm$getVal.name;\n\n    var copyName = \"Copy of \".concat(name);\n    saveAsForm.setValue('save_as_name', copyName, {\n      shouldValidate: true,\n      shouldDirty: true\n    });\n    dispatch(makeAListActions.setSaveAsForm({\n      open: true\n    }));\n  };\n\n  var onSubmitSaveAsForm = saveAsForm.handleSubmit(function (data) {\n    var values = makeAListForm.getValues();\n\n    var payload = _objectSpread(_objectSpread({}, values), {}, {\n      name: data.save_as_name,\n      is_shared: false,\n      columns_displayed: columnsDisplayedData,\n      sort_conditions: sortConditionsData,\n      where_conditions: whereConditionsData\n    });\n\n    dispatch(makeAListActions.saveAs(payload));\n  });\n\n  var onCloseSaveAsForm = function onCloseSaveAsForm() {\n    dispatch(makeAListActions.setSaveAsForm({\n      open: false\n    }));\n    saveAsForm.clearErrors();\n    saveAsForm.reset();\n  };\n\n  var onUpdateSystemPreset = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return confirm({\n                title: t('common:label.warning'),\n                description: t('message.update_system_preset_warning')\n              });\n\n            case 2:\n              result = _context.sent;\n\n              if (result === confirmConstant.actionTypes.OK) {\n                data = makeAListForm.getValues();\n                data.where_conditions = whereConditionsData;\n                data.columns_displayed = columnsDisplayedData;\n                data.sort_conditions = sortConditionsData;\n                dispatch(makeAListActions.update(data));\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onUpdateSystemPreset() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var onDeletePreset = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return confirm({\n                title: t('common:label.confirmation'),\n                description: t('message.confirm_delete_preset')\n              });\n\n            case 2:\n              result = _context2.sent;\n\n              if (result === confirmConstant.actionTypes.OK) {\n                dispatch(makeAListActions.remove());\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onDeletePreset() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var watchColumnChange = function watchColumnChange() {\n    var isDisabled = columnsDisplayedData.length <= 0;\n    setDisableActions(isDisabled);\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(DialogMain, {\n      open: isOpen,\n      fullWidth: true,\n      maxWidth: \"lg\",\n      onClose: handleClose,\n      hideButtonsAction: true,\n      title: /*#__PURE__*/_jsx(Typography, {\n        variant: \"h5\",\n        component: \"h4\",\n        className: classes.title,\n        children: t('make_a_list')\n      }),\n      children: /*#__PURE__*/_jsx(FormProvider, _objectSpread(_objectSpread({}, makeAListForm), {}, {\n        children: /*#__PURE__*/_jsx(DialogContent, {\n          className: classes.dialogContent,\n          children: /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            spacing: 2,\n            children: [/*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 4,\n              children: /*#__PURE__*/_jsx(TablePresetList, {\n                setActiveTab: setActiveTab\n              })\n            }), /*#__PURE__*/_jsxs(Grid, {\n              item: true,\n              xs: 8,\n              children: [/*#__PURE__*/_jsxs(Paper, {\n                className: classes.sectionCriteria,\n                children: [/*#__PURE__*/_jsxs(Tabs, {\n                  value: activeTab,\n                  onChange: handleChange,\n                  style: {\n                    padding: '5px'\n                  },\n                  children: [/*#__PURE__*/_jsx(Tab, {\n                    label: \"Columns\"\n                  }), /*#__PURE__*/_jsx(Tab, {\n                    label: \"Select on\"\n                  }), /*#__PURE__*/_jsx(Tab, {\n                    label: \"Sort on\"\n                  }), /*#__PURE__*/_jsx(Tab, {\n                    label: \"Options\"\n                  })]\n                }), /*#__PURE__*/_jsxs(MalisPanel, {\n                  value: activeTab,\n                  index: 0,\n                  className: classes.tabPanel,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"subtitle2\",\n                    gutterBottom: true,\n                    children: t('label.choose_column_displayed')\n                  }), /*#__PURE__*/_jsx(ColumnList, {\n                    columnOptions: columnOptions,\n                    selectedColumns: columnsDisplayedData,\n                    disabled: false,\n                    onRemove: watchColumnChange,\n                    onAdd: watchColumnChange\n                  })]\n                }), /*#__PURE__*/_jsxs(MalisPanel, {\n                  value: activeTab,\n                  index: 1,\n                  className: classes.tabPanel,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"subtitle2\",\n                    gutterBottom: true,\n                    children: t('label.select_criteria')\n                  }), /*#__PURE__*/_jsx(ConditionTree, {\n                    columnOptions: columnOptions,\n                    comparatorOptions: comparatorOptions,\n                    conjunctionOptions: conjunctionOptions,\n                    data: whereConditionsData,\n                    maxLevel: 0,\n                    disabled: false\n                  })]\n                }), /*#__PURE__*/_jsxs(MalisPanel, {\n                  value: activeTab,\n                  index: 2,\n                  className: classes.tabPanel,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"subtitle2\",\n                    gutterBottom: true,\n                    children: t('label.select_sorting')\n                  }), /*#__PURE__*/_jsx(SortConditionList, {\n                    columnOptions: columnOptions,\n                    sortOptions: sortOptions,\n                    sortData: sortConditionsData,\n                    disabled: false\n                  })]\n                }), /*#__PURE__*/_jsx(MalisPanel, {\n                  value: activeTab,\n                  index: 3,\n                  className: classes.tabPanel,\n                  children: /*#__PURE__*/_jsx(TabOptions, {})\n                })]\n              }), /*#__PURE__*/_jsxs(Paper, {\n                className: classes.sectionGeneralInfor,\n                children: [/*#__PURE__*/_jsx(AppTitle, {\n                  label: \"General information\"\n                }), /*#__PURE__*/_jsx(Grid, {\n                  spacing: 2,\n                  container: true,\n                  component: \"form\",\n                  id: \"make-a-list-form\",\n                  onSubmit: onSubmitData,\n                  children: /*#__PURE__*/_jsx(SectionGeneralInfo, {\n                    isSharedMode: isSharedMode\n                  })\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: classes.wrapButtonGroup,\n                children: [/*#__PURE__*/_jsxs(\"div\", {\n                  className: \"wrapButtonLeft\",\n                  children: [/*#__PURE__*/_jsxs(If, {\n                    condition: isSharedMode,\n                    children: [/*#__PURE__*/_jsx(Then, {\n                      children: /*#__PURE__*/_jsx(Button, {\n                        className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                        variant: \"contained\",\n                        onClick: onSaveSharedPreset,\n                        startIcon: /*#__PURE__*/_jsx(FileCopyIcon, {}),\n                        children: t('common:button.save_as')\n                      })\n                    }), /*#__PURE__*/_jsx(Else, {\n                      children: /*#__PURE__*/_jsx(Button, {\n                        className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                        variant: \"contained\",\n                        form: \"make-a-list-form\",\n                        type: \"submit\",\n                        startIcon: isEditMode ? /*#__PURE__*/_jsx(EditIcon, {}) : /*#__PURE__*/_jsx(SaveIcon, {}),\n                        children: isEditMode ? t('common:button.update') : t('make_a_list:button.save')\n                      })\n                    })]\n                  }), /*#__PURE__*/_jsx(When, {\n                    condition: !isSharedMode && isEditMode,\n                    children: /*#__PURE__*/_jsx(Button, {\n                      variant: \"contained\",\n                      className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                      onClick: onDeletePreset,\n                      startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n                      children: t('common:button.delete')\n                    })\n                  }), /*#__PURE__*/_jsx(When, {\n                    condition: presetDetail.is_system_default && permissions.update_system_default_presets,\n                    children: /*#__PURE__*/_jsx(Button, {\n                      className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                      variant: \"contained\",\n                      onClick: onUpdateSystemPreset,\n                      startIcon: /*#__PURE__*/_jsx(EditIcon, {}),\n                      children: t('common:button.update')\n                    })\n                  })]\n                }), /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"wrapButtonRight\",\n                  children: [/*#__PURE__*/_jsx(Button, {\n                    className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                    variant: \"contained\",\n                    onClick: handleExport('screen'),\n                    disabled: disabledActions,\n                    startIcon: /*#__PURE__*/_jsx(ListAltIcon, {}),\n                    children: t('common:button.export_to_screen')\n                  }), /*#__PURE__*/_jsx(Button, {\n                    className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                    variant: \"contained\",\n                    onClick: handleExport('pdf'),\n                    disabled: disabledActions,\n                    startIcon: /*#__PURE__*/_jsx(PictureAsPdfIcon, {}),\n                    children: t('common:button.export_to_pdf')\n                  }), /*#__PURE__*/_jsx(Button, {\n                    className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                    variant: \"contained\",\n                    onClick: handleExport('excel'),\n                    disabled: disabledActions,\n                    startIcon: /*#__PURE__*/_jsx(ExcelIcon, {}),\n                    children: t('common:button.export_to_excel')\n                  }), /*#__PURE__*/_jsx(Tooltip, {\n                    title: t('make_a_list:tooltip.close'),\n                    children: /*#__PURE__*/_jsx(Button, {\n                      variant: \"contained\",\n                      onClick: handleClose,\n                      className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                      startIcon: /*#__PURE__*/_jsx(CloseIcon, {}),\n                      children: t('common:button.close')\n                    })\n                  })]\n                })]\n              })]\n            })]\n          })\n        })\n      }))\n    }), /*#__PURE__*/_jsx(DialogSaveAsPreset, {\n      open: saveAsFormSelector.open,\n      loading: loadingDialog,\n      control: saveAsForm.control,\n      onClose: onCloseSaveAsForm,\n      onSubmit: onSubmitSaveAsForm,\n      rules: validationSchema.name\n    }), /*#__PURE__*/_jsx(ExportProgressDialog, {})]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}