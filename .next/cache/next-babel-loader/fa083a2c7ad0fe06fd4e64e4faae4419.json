{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { takeEvery, put, call, putResolve } from 'redux-saga/effects';\nimport { select, all } from 'typed-redux-saga';\nimport _ from 'lodash';\nimport { specificationStore, commonStore, advancedFilterActions, summaryReportActions, drawingStore } from '@/store/reducers';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport specificationApi from '@/apis/specification.api';\n\nfunction* fetchSpecificationInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n  const data = yield call(specificationApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  });\n\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {};\n  }\n\n  yield put(commonStore.actions.setUserValueJob(data.selected_job));\n  yield put(specificationStore.actions.setInitDataForList(data));\n}\n\nfunction* fetchSpecificationInitDataForCE(jobId = null) {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n\n  const _yield$call = yield call(specificationApi.getInitDataForCE, {\n    job_id_pk: jobId || userJob.value\n  }),\n        {\n    permissions,\n    selected_job\n  } = _yield$call,\n        dataInit = _objectWithoutProperties(_yield$call, [\"permissions\", \"selected_job\"]);\n\n  yield put(specificationStore.actions.setInitDataForCE(dataInit));\n  yield put(specificationStore.actions.setDetail({\n    job_id: selected_job.value\n  }));\n}\n\nfunction* createSpecification({\n  payload\n}) {\n  yield put(specificationStore.actions.setDialogStateLoading(true));\n\n  try {\n    yield call(fetchSpecificationInitDataForCE);\n    const {\n      message\n    } = yield call(specificationApi.create, payload);\n    const userJob = yield* select(commonStore.selectUserValueJob);\n    yield putResolve(specificationStore.actions.resetDetail({\n      userJob\n    }));\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(specificationStore.actions.setDialogStateTab(0))]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(specificationStore.actions.setDialogStateLoading(false));\n}\n\nfunction* getSpecGenerateCode({\n  payload\n}) {\n  yield put(specificationStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      drawing,\n      formData\n    } = payload;\n    const {\n      generated_code\n    } = yield call(specificationApi.getGenerateCode, drawing.value);\n    yield put(specificationStore.actions.setDetail(_objectSpread(_objectSpread({}, formData), {}, {\n      drawing_id: drawing,\n      spec_id: generated_code\n    })));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(specificationStore.actions.setDialogStateLoading(false));\n}\n\nfunction* openSpecificationCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchSpecificationInitDataForCE);\n    yield put(specificationStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* fetchSpecificationList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData,\n    userJob\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob)\n  });\n\n  if (!userJob.value) {\n    return;\n  }\n\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(specificationApi.getList, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(specificationStore.actions.setDataList(data.specifications));\n}\n\nfunction* closeSpecificationDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const userJob = yield* select(commonStore.selectUserValueJob);\n    yield put(specificationStore.actions.setDialogStateOpen(false));\n    yield call(getSpecificationList);\n    yield put(specificationStore.actions.resetDetail({\n      userJob\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* getSpecificationList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchSpecificationInitDataForList);\n    const permissions = yield* select(specificationStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchSpecificationList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* removeSpecs({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const data = yield call(specificationApi.executeOperation, 'delete', payload);\n\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data));\n      yield put(summaryReportActions.setOpen(true));\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message));\n    }\n\n    yield call(fetchSpecificationList);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* changeUserJob({\n  payload\n}) {\n  yield put(commonStore.actions.setUserValueJob(payload));\n  yield call(getSpecificationList);\n}\n\nfunction getSpecificationId(spec_id) {\n  const REGEX = /D\\S+/g;\n  const match = spec_id.match(REGEX);\n\n  if (_.isArray(match)) {\n    return match[0];\n  }\n\n  return '';\n}\n\nfunction* openDrawingDialog({\n  payload\n}) {\n  try {\n    const {\n      drawing_id\n    } = payload;\n    yield put(specificationStore.actions.setDetail(payload));\n    yield put(drawingStore.sagaOpenUpdateDialog(drawing_id.value));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\n\nexport function* fetchSpecificationDetail(specId) {\n  const {\n    specification\n  } = yield call(specificationApi.getDetail, specId);\n  specification.drawing_id = specification.related_drawing;\n  specification.spec_id = getSpecificationId(specification.spec_id);\n  return specification;\n}\n\nfunction* openSpecUpdateDialog({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const specification = yield call(fetchSpecificationDetail, payload);\n    yield call(fetchSpecificationInitDataForCE, specification.job_id);\n    yield putResolve(specificationStore.actions.setDetail(specification));\n    yield put(specificationStore.actions.setDialogState({\n      editMode: true,\n      open: true\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* updateSpec({\n  payload\n}) {\n  yield put(specificationStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      id,\n      formData\n    } = payload;\n    const {\n      message\n    } = yield call(specificationApi.update, id, formData);\n    yield call(closeSpecificationDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(specificationStore.actions.setDialogStateLoading(false));\n}\n\nfunction* specificationSaga() {\n  yield takeEvery(specificationStore.sagaGetList, getSpecificationList);\n  yield takeEvery(specificationStore.sagaCreate, createSpecification);\n  yield takeEvery(specificationStore.sagaGenerateCode, getSpecGenerateCode);\n  yield takeEvery(specificationStore.sagaOpenCreateDialog, openSpecificationCreateDialog);\n  yield takeEvery(specificationStore.sagaCloseDialog, closeSpecificationDialog);\n  yield takeEvery(specificationStore.sagaRemove, removeSpecs);\n  yield takeEvery(specificationStore.sagaChangeUserJob, changeUserJob);\n  yield takeEvery(specificationStore.sagaOpenUpdateDialog, openSpecUpdateDialog);\n  yield takeEvery(specificationStore.sagaUpdate, updateSpec);\n  yield takeEvery(specificationStore.sagaOpenDrawingDialog, openDrawingDialog);\n}\n\nexport default specificationSaga;","map":null,"metadata":{},"sourceType":"module"}