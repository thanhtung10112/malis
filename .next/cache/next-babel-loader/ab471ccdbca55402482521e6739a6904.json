{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Card, CardHeader, Checkbox, List, ListItem, ListItemText, Grid, Button, ListItemIcon } from '@material-ui/core';\nimport { DragIndicator as DragIndicatorIcon } from '@material-ui/icons';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { DialogMain } from '@/components';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport useDraggableInPortal from '@/hooks/useDraggableInPortal';\nimport useStyles from './styles';\n\nfunction not(a, b) {\n  return a.filter(function (value) {\n    return b.findIndex(function (item) {\n      return value.id === item.id;\n    }) === -1;\n  });\n}\n\nfunction reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n}\n\nfunction DialogTransferList(props) {\n  var titleLeft = props.titleLeft,\n      titleRight = props.titleRight,\n      leftSideList = props.leftSideList,\n      rightSideList = props.rightSideList,\n      onSave = props.onSave,\n      onClose = props.onClose,\n      onChangeRightSideList = props.onChangeRightSideList,\n      onChangeLeftSideList = props.onChangeLeftSideList,\n      rest = _objectWithoutProperties(props, [\"titleLeft\", \"titleRight\", \"leftSideList\", \"rightSideList\", \"onSave\", \"onClose\", \"onChangeRightSideList\", \"onChangeLeftSideList\"]);\n\n  var classes = useStyles();\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      checked = _React$useState2[0],\n      setChecked = _React$useState2[1];\n\n  var renderDraggable = useDraggableInPortal();\n\n  var leftChecked = _.intersectionWith(leftSideList, checked, _.isEqual);\n\n  var rightChecked = _.intersectionWith(rightSideList, checked, _.isEqual);\n\n  var handleToggle = function handleToggle(value) {\n    return function () {\n      setChecked(function (prevState) {\n        return immer(prevState, function (draftState) {\n          if (draftState.length <= 0) {\n            draftState.push(value);\n            return;\n          }\n\n          var currentIndex = checked.findIndex(function (item) {\n            return item.id === value.id;\n          });\n\n          if (currentIndex === -1) {\n            draftState.push(value);\n          } else {\n            draftState.splice(currentIndex, 1);\n          }\n        });\n      });\n    };\n  };\n\n  var isChecked = function isChecked(value) {\n    return checked.findIndex(function (item) {\n      return item.id === value.id;\n    }) !== -1;\n  };\n\n  var numberOfChecked = function numberOfChecked(items) {\n    if (checked.length === 0) {\n      return 0;\n    }\n\n    var intersectArray = _.intersectionWith(items, checked, _.isEqual);\n\n    return intersectArray.length;\n  };\n\n  var handleToggleAll = function handleToggleAll(items) {\n    return function () {\n      if (numberOfChecked(items) === items.length) {\n        setChecked([]);\n      } else {\n        setChecked(items);\n      }\n    };\n  };\n\n  var handleCheckedRight = function handleCheckedRight() {\n    var newRightList = rightSideList.concat(leftChecked);\n    var newLeftList = not(leftSideList, leftChecked);\n    onChangeRightSideList(newRightList);\n    onChangeLeftSideList(newLeftList);\n    setChecked(not(checked, leftChecked));\n  };\n\n  var handleCheckedLeft = function handleCheckedLeft() {\n    var newLeftList = leftSideList.concat(rightChecked);\n    var newRightList = not(rightSideList, rightChecked);\n    onChangeRightSideList(newRightList);\n    onChangeLeftSideList(newLeftList);\n    setChecked(not(checked, rightChecked));\n  };\n\n  var onSaveList = function onSaveList() {\n    onSave();\n  };\n\n  var onDragEndItem = function onDragEndItem(result) {\n    if (result.source && result.destination) {\n      var items = reorder(rightSideList, result.source.index, result.destination.index);\n      onChangeRightSideList(items);\n    }\n  };\n\n  var handleClose = function handleClose() {\n    setChecked([]);\n    onClose();\n  };\n\n  var customList = function customList(title, items) {\n    return /*#__PURE__*/_jsxs(Card, {\n      children: [/*#__PURE__*/_jsx(CardHeader, {\n        className: classes.cardHeader,\n        classes: {\n          title: classes.cardHeaderTitle,\n          subheader: classes.cardHeaderSubtitle\n        },\n        avatar: /*#__PURE__*/_jsx(Checkbox, {\n          color: \"primary\",\n          onClick: handleToggleAll(items),\n          checked: numberOfChecked(items) === items.length && items.length !== 0,\n          indeterminate: numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0,\n          disabled: items.length === 0,\n          inputProps: {\n            'aria-label': 'all items selected'\n          }\n        }),\n        title: title,\n        subheader: \"\".concat(numberOfChecked(items), \"/\").concat(items.length, \" selected\")\n      }), /*#__PURE__*/_jsxs(List, {\n        className: classes.list,\n        dense: true,\n        component: \"div\",\n        role: \"list\",\n        children: [items.map(function (value) {\n          var labelId = \"transfer-list-all-item-\".concat(value.id, \"-label\");\n          return /*#__PURE__*/_jsxs(ListItem, {\n            role: \"listitem\",\n            button: true,\n            onClick: handleToggle(value),\n            className: classes.itemList,\n            children: [/*#__PURE__*/_jsx(ListItemIcon, {\n              children: /*#__PURE__*/_jsx(Checkbox, {\n                color: \"primary\",\n                checked: isChecked(value),\n                tabIndex: -1,\n                disableRipple: true,\n                inputProps: {\n                  'aria-labelledby': labelId\n                }\n              })\n            }), /*#__PURE__*/_jsx(ListItemText, {\n              id: labelId,\n              primary: \"\".concat(value.user_id, \" (\").concat(value.first_name, \" \").concat(value.last_name, \")\"),\n              classes: {\n                primary: classes.itemText\n              }\n            })]\n          }, value.id);\n        }), /*#__PURE__*/_jsx(ListItem, {})]\n      })]\n    });\n  };\n\n  return /*#__PURE__*/_jsx(DialogMain, _objectSpread(_objectSpread({}, rest), {}, {\n    onClose: handleClose,\n    onOk: onSaveList,\n    okText: \"Save\",\n    enterToOk: false,\n    classes: {\n      paper: classes.root\n    },\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 1,\n      justify: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 5,\n        children: customList(titleLeft, leftSideList)\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 2,\n        children: /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          direction: \"column\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsx(Button, {\n            variant: \"outlined\",\n            size: \"small\",\n            className: classes.button,\n            onClick: handleCheckedRight,\n            disabled: leftChecked.length === 0,\n            \"aria-label\": \"move selected right\",\n            children: \">\"\n          }), /*#__PURE__*/_jsx(Button, {\n            variant: \"outlined\",\n            size: \"small\",\n            className: classes.button,\n            onClick: handleCheckedLeft,\n            disabled: rightChecked.length === 0,\n            \"aria-label\": \"move selected left\",\n            children: \"<\"\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 5,\n        children: /*#__PURE__*/_jsxs(Card, {\n          children: [/*#__PURE__*/_jsx(CardHeader, {\n            className: classes.cardHeader,\n            classes: {\n              title: classes.cardHeaderTitle,\n              subheader: classes.cardHeaderSubtitle\n            },\n            avatar: /*#__PURE__*/_jsx(Checkbox, {\n              color: \"primary\",\n              onClick: handleToggleAll(rightSideList),\n              checked: numberOfChecked(rightSideList) === rightSideList.length && rightSideList.length !== 0,\n              indeterminate: numberOfChecked(rightSideList) !== rightSideList.length && numberOfChecked(rightSideList) !== 0,\n              disabled: rightSideList.length === 0,\n              inputProps: {\n                'aria-label': 'all items selected'\n              }\n            }),\n            title: titleRight,\n            subheader: \"\".concat(numberOfChecked(rightSideList), \"/\").concat(rightSideList.length, \" selected\")\n          }), /*#__PURE__*/_jsx(DragDropContext, {\n            onDragEnd: onDragEndItem,\n            children: /*#__PURE__*/_jsx(Droppable, {\n              droppableId: \"droppable\",\n              children: function children(provided) {\n                return /*#__PURE__*/_jsxs(List, _objectSpread(_objectSpread({\n                  className: classes.list\n                }, provided.droppableProps), {}, {\n                  ref: provided.innerRef,\n                  dense: true,\n                  component: \"div\",\n                  role: \"list\",\n                  children: [rightSideList.map(function (value, index) {\n                    var labelId = \"transfer-list-all-item-\".concat(value.id, \"-label\");\n                    return /*#__PURE__*/_jsx(Draggable, {\n                      draggableId: value.id + '',\n                      index: index,\n                      children: renderDraggable(function (provided) {\n                        return /*#__PURE__*/_jsxs(ListItem, _objectSpread(_objectSpread({\n                          role: \"listitem\",\n                          button: true,\n                          onClick: handleToggle(value),\n                          className: classes.itemList,\n                          ref: provided.innerRef\n                        }, provided.draggableProps), {}, {\n                          children: [/*#__PURE__*/_jsx(ListItemIcon, {\n                            children: /*#__PURE__*/_jsx(Checkbox, {\n                              color: \"primary\",\n                              checked: isChecked(value),\n                              tabIndex: -1,\n                              disableRipple: true,\n                              inputProps: {\n                                'aria-labelledby': labelId\n                              }\n                            })\n                          }), /*#__PURE__*/_jsx(ListItemText, {\n                            id: labelId,\n                            primary: \"\".concat(value.user_id, \" (\").concat(value.first_name, \" \").concat(value.last_name, \")\"),\n                            classes: {\n                              primary: classes.itemText\n                            }\n                          }), /*#__PURE__*/_jsx(\"span\", _objectSpread(_objectSpread({}, provided.dragHandleProps), {}, {\n                            children: /*#__PURE__*/_jsx(DragIndicatorIcon, {})\n                          }))]\n                        }), value.id);\n                      })\n                    }, value.id);\n                  }), provided.placeholder]\n                }));\n              }\n            })\n          })]\n        })\n      })]\n    })\n  }));\n}\n\nexport default DialogTransferList;","map":null,"metadata":{},"sourceType":"module"}