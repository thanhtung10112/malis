{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _ from 'lodash';\nexport const getDefaultValue = (items, isGetFirstItem) => {\n  const findObj = _.find(items, {\n    is_default: true,\n    status: true\n  });\n\n  if (items.length === 0) {\n    return null;\n  }\n\n  if (_.isNil(findObj) && isGetFirstItem) {\n    return items[0];\n  }\n\n  return findObj || null;\n};\nexport function getDefaultValues(params, obj, defaultValue = {}, isGetFirstItem = false, pKey = 'id') {\n  const mapValue = {};\n\n  _.forIn(obj, (value, key) => {\n    const getValuesByPath = _.get(params, value);\n\n    const defaultValue = getDefaultValue(getValuesByPath, isGetFirstItem);\n    mapValue[key] = _.isNil(defaultValue) ? null : defaultValue[pKey];\n  });\n\n  return _objectSpread(_objectSpread({}, defaultValue), mapValue);\n}","map":null,"metadata":{},"sourceType":"module"}