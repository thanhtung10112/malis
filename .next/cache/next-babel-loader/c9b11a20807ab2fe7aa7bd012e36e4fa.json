{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\MakeAList\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { useTranslation } from 'next-i18next';\nimport { DialogContent, Grid, Typography, Button, Tab, Tabs, Tooltip, Paper } from '@material-ui/core';\nimport { DialogMain, MalisPanel, SortConditionList, ConditionTree, ColumnList, ExportProgressDialog, useConfirm, AppTitle, DialogSaveAsPreset, ExcelIcon, confirmConstant } from '@/components/index';\nimport { When, If, Then, Else } from 'react-if';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\nimport CloseIcon from '@material-ui/icons/Close';\nimport TablePresetList from './TablePresetList';\nimport TabOptions from './TabOptions';\nimport SectionGeneralInfo from './SectionGeneralInfo';\nimport useStyles from './styles';\nimport useStylesLayout from '@/styles/page/layout';\nimport { authStore, makeAListActions } from '@/store/reducers';\nimport _ from 'lodash';\nimport clsx from 'clsx';\nimport getValidationSchema from './validationSchema';\nexport default function MakeAListDialog() {\n  _s();\n\n  var _useTranslation = useTranslation('make_a_list'),\n      t = _useTranslation.t;\n\n  var classes = useStyles();\n  var classesLayout = useStylesLayout();\n\n  var _useConfirm = useConfirm(),\n      confirm = _useConfirm.confirm;\n\n  var _useState = useState(0),\n      activeTab = _useState[0],\n      setActiveTab = _useState[1];\n\n  var _useState2 = useState(false),\n      disabledActions = _useState2[0],\n      setDisableActions = _useState2[1];\n\n  var dispatch = useDispatch();\n  var isEditMode = useSelector(makeAListActions.selectIsEditMode);\n  var isOpen = useSelector(makeAListActions.selectIsOpen);\n  var presetDetail = useSelector(makeAListActions.selectPresetDetail);\n  var columnsDisplayed = useSelector(makeAListActions.selectColumnDisplay);\n  var whereConditions = useSelector(makeAListActions.selectWhereConditions);\n  var sortConditions = useSelector(makeAListActions.selectSortConditions);\n  var columnOptions = useSelector(makeAListActions.selectColumnsData);\n  var comparatorOptions = useSelector(makeAListActions.selectComparatorsData);\n  var conjunctionOptions = useSelector(makeAListActions.selectLogicalOperatorsData);\n  var sortOptions = useSelector(makeAListActions.selectSortOptionsData);\n  var permissions = useSelector(makeAListActions.selectPermissions);\n  var saveAsFormSelector = useSelector(makeAListActions.selectSaveAsForm);\n  var malFormSelector = useSelector(makeAListActions.selectMalForm);\n  var loadingDialog = useSelector(makeAListActions.selectLoadingDialog);\n  var userInfo = useSelector(authStore.selectProfile);\n  var columnsDisplayedData = useMemo(function () {\n    return _.cloneDeep(columnsDisplayed);\n  }, [columnsDisplayed]);\n  var sortConditionsData = useMemo(function () {\n    return _.cloneDeep(sortConditions);\n  }, [sortConditions]);\n  var whereConditionsData = useMemo(function () {\n    return _.cloneDeep(whereConditions);\n  }, [whereConditions]);\n  var isSharedMode = presetDetail.created_by && presetDetail.created_by !== userInfo.user_name;\n  var saveAsForm = useForm({\n    defaultValues: {\n      save_as_name: ''\n    },\n    shouldUnregister: false\n  });\n  var validationSchema = useMemo(function () {\n    return getValidationSchema(t);\n  }, []);\n  var makeAListForm = useForm({\n    defaultValues: makeAListActions.presetDetail,\n    shouldUnregister: false\n  });\n  useEffect(function () {\n    makeAListForm.reset(_objectSpread({}, presetDetail));\n  }, [presetDetail]); // handle error for the SaveAs form\n\n  useEffect(function () {\n    if (saveAsFormSelector.error) {\n      saveAsForm.setError('save_as_name', {\n        message: saveAsFormSelector.error\n      });\n    }\n  }, [saveAsFormSelector.error]); // clear error in SaveAs form if clone successfully!\n\n  useEffect(function () {\n    if (saveAsFormSelector.clearError) {\n      saveAsForm.clearErrors();\n    }\n  }, [saveAsFormSelector.clearError]); // handle error for the Mal form\n\n  useEffect(function () {\n    if (malFormSelector.error) {\n      makeAListForm.setError('name', {\n        message: malFormSelector.error\n      });\n    }\n  }, [malFormSelector.error]); // handle error in Mal form if clone successfully!\n\n  useEffect(function () {\n    if (malFormSelector.clearError) {\n      makeAListForm.clearErrors();\n    }\n  }, [malFormSelector.clearError]);\n  useEffect(function () {\n    var isDisabled = columnsDisplayed.length <= 0;\n    setDisableActions(isDisabled);\n  }, [columnsDisplayed]);\n  useEffect(function () {\n    return function () {\n      dispatch(makeAListActions.resetState());\n    };\n  }, []);\n  useEffect(function () {\n    dispatch(makeAListActions.setIsEditMode(true));\n  }, []);\n\n  var handleChange = function handleChange(_, tabIndex) {\n    setActiveTab(tabIndex);\n  };\n\n  var handleClose = function handleClose() {\n    dispatch(makeAListActions.setOpen(false));\n    dispatch(makeAListActions.setFilterType('own')); // dispatch(makeAListActions.resetState())\n\n    makeAListForm.clearErrors();\n  };\n\n  var handleExport = function handleExport(destination) {\n    return function () {\n      dispatch(makeAListActions.exportMakeAList({\n        destination: destination,\n        displayedColumns: columnsDisplayedData,\n        sortConditions: sortConditionsData,\n        whereCondtions: whereConditionsData,\n        distinct: presetDetail.distinct,\n        ignoreCase: presetDetail.ignore_case\n      }));\n    };\n  };\n\n  var onSubmitData = makeAListForm.handleSubmit(function (data) {\n    data.columns_displayed = columnsDisplayedData;\n    data.sort_conditions = sortConditionsData;\n    data.where_conditions = whereConditionsData;\n\n    if (isEditMode) {\n      dispatch(makeAListActions.update(data));\n    } else {\n      dispatch(makeAListActions.create(data));\n    }\n  });\n\n  var onSaveSharedPreset = function onSaveSharedPreset() {\n    var _makeAListForm$getVal = makeAListForm.getValues(),\n        name = _makeAListForm$getVal.name;\n\n    var copyName = \"Copy of \".concat(name);\n    saveAsForm.setValue('save_as_name', copyName, {\n      shouldValidate: true,\n      shouldDirty: true\n    });\n    dispatch(makeAListActions.setSaveAsForm({\n      open: true\n    }));\n  };\n\n  var onSubmitSaveAsForm = saveAsForm.handleSubmit(function (data) {\n    var values = makeAListForm.getValues();\n\n    var payload = _objectSpread(_objectSpread({}, values), {}, {\n      name: data.save_as_name,\n      is_shared: false,\n      columns_displayed: columnsDisplayedData,\n      sort_conditions: sortConditionsData,\n      where_conditions: whereConditionsData\n    });\n\n    dispatch(makeAListActions.saveAs(payload));\n  });\n\n  var onCloseSaveAsForm = function onCloseSaveAsForm() {\n    dispatch(makeAListActions.setSaveAsForm({\n      open: false\n    }));\n    saveAsForm.clearErrors();\n    saveAsForm.reset();\n  };\n\n  var onUpdateSystemPreset = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return confirm({\n                title: t('common:label.warning'),\n                description: t('message.update_system_preset_warning')\n              });\n\n            case 2:\n              result = _context.sent;\n\n              if (result === confirmConstant.actionTypes.OK) {\n                data = makeAListForm.getValues();\n                data.where_conditions = whereConditionsData;\n                data.columns_displayed = columnsDisplayedData;\n                data.sort_conditions = sortConditionsData;\n                dispatch(makeAListActions.update(data));\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onUpdateSystemPreset() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var onDeletePreset = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return confirm({\n                title: t('common:label.confirmation'),\n                description: t('message.confirm_delete_preset')\n              });\n\n            case 2:\n              result = _context2.sent;\n\n              if (result === confirmConstant.actionTypes.OK) {\n                dispatch(makeAListActions.remove());\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onDeletePreset() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var watchColumnChange = function watchColumnChange() {\n    var isDisabled = columnsDisplayedData.length <= 0;\n    setDisableActions(isDisabled);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DialogMain, {\n      open: isOpen,\n      fullWidth: true,\n      maxWidth: \"lg\",\n      onClose: handleClose,\n      hideButtonsAction: true,\n      title: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        component: \"h4\",\n        className: classes.title,\n        children: t('make_a_list')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(FormProvider, _objectSpread(_objectSpread({}, makeAListForm), {}, {\n        children: /*#__PURE__*/_jsxDEV(DialogContent, {\n          className: classes.dialogContent,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 4,\n              children: /*#__PURE__*/_jsxDEV(TablePresetList, {\n                setActiveTab: setActiveTab\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 8,\n              children: [/*#__PURE__*/_jsxDEV(Paper, {\n                className: classes.sectionCriteria,\n                children: [/*#__PURE__*/_jsxDEV(Tabs, {\n                  value: activeTab,\n                  onChange: handleChange,\n                  style: {\n                    padding: '5px'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Tab, {\n                    label: \"Columns\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 263,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                    label: \"Select on\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 264,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                    label: \"Sort on\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 265,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                    label: \"Options\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 266,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(MalisPanel, {\n                  value: activeTab,\n                  index: 0,\n                  className: classes.tabPanel,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle2\",\n                    gutterBottom: true,\n                    children: t('label.choose_column_displayed')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 270,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(ColumnList, {\n                    columnOptions: columnOptions,\n                    selectedColumns: columnsDisplayedData,\n                    disabled: false,\n                    onRemove: watchColumnChange,\n                    onAdd: watchColumnChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 273,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(MalisPanel, {\n                  value: activeTab,\n                  index: 1,\n                  className: classes.tabPanel,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle2\",\n                    gutterBottom: true,\n                    children: t('label.select_criteria')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(ConditionTree, {\n                    columnOptions: columnOptions,\n                    comparatorOptions: comparatorOptions,\n                    conjunctionOptions: conjunctionOptions,\n                    data: whereConditionsData,\n                    maxLevel: 0,\n                    disabled: false\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 286,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 282,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(MalisPanel, {\n                  value: activeTab,\n                  index: 2,\n                  className: classes.tabPanel,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle2\",\n                    gutterBottom: true,\n                    children: t('label.select_sorting')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(SortConditionList, {\n                    columnOptions: columnOptions,\n                    sortOptions: sortOptions,\n                    sortData: sortConditionsData,\n                    disabled: false\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 300,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(MalisPanel, {\n                  value: activeTab,\n                  index: 3,\n                  className: classes.tabPanel,\n                  children: /*#__PURE__*/_jsxDEV(TabOptions, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 309,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Paper, {\n                className: classes.sectionGeneralInfor,\n                children: [/*#__PURE__*/_jsxDEV(AppTitle, {\n                  label: \"General information\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  spacing: 2,\n                  container: true,\n                  component: \"form\",\n                  id: \"make-a-list-form\",\n                  onSubmit: onSubmitData,\n                  children: /*#__PURE__*/_jsxDEV(SectionGeneralInfo, {\n                    isSharedMode: isSharedMode\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.wrapButtonGroup,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"wrapButtonLeft\",\n                  children: [/*#__PURE__*/_jsxDEV(If, {\n                    condition: isSharedMode,\n                    children: [/*#__PURE__*/_jsxDEV(Then, {\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                        variant: \"contained\",\n                        onClick: onSaveSharedPreset,\n                        startIcon: /*#__PURE__*/_jsxDEV(FileCopyIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 327,\n                          columnNumber: 38\n                        }, this),\n                        children: t('common:button.save_as')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 323,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 322,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Else, {\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                        variant: \"contained\",\n                        form: \"make-a-list-form\",\n                        type: \"submit\",\n                        startIcon: isEditMode ? /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 338,\n                          columnNumber: 51\n                        }, this) : /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 338,\n                          columnNumber: 66\n                        }, this),\n                        children: isEditMode ? t('common:button.update') : t('make_a_list:button.save')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 333,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 332,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 321,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(When, {\n                    condition: !isSharedMode && isEditMode,\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"contained\",\n                      className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                      onClick: onDeletePreset,\n                      startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 350,\n                        columnNumber: 36\n                      }, this),\n                      children: t('common:button.delete')\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 346,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 345,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(When, {\n                    condition: presetDetail.is_system_default && permissions.update_system_default_presets,\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                      variant: \"contained\",\n                      onClick: onUpdateSystemPreset,\n                      startIcon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 361,\n                        columnNumber: 36\n                      }, this),\n                      children: t('common:button.update')\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 357,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 356,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"wrapButtonRight\",\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                    variant: \"contained\",\n                    onClick: handleExport('screen'),\n                    disabled: disabledActions,\n                    startIcon: /*#__PURE__*/_jsxDEV(ListAltIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 373,\n                      columnNumber: 34\n                    }, this),\n                    children: t('common:button.export_to_screen')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 368,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                    variant: \"contained\",\n                    onClick: handleExport('pdf'),\n                    disabled: disabledActions,\n                    startIcon: /*#__PURE__*/_jsxDEV(PictureAsPdfIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 382,\n                      columnNumber: 34\n                    }, this),\n                    children: t('common:button.export_to_pdf')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 377,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                    variant: \"contained\",\n                    onClick: handleExport('excel'),\n                    disabled: disabledActions,\n                    startIcon: /*#__PURE__*/_jsxDEV(ExcelIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 391,\n                      columnNumber: 34\n                    }, this),\n                    children: t('common:button.export_to_excel')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 386,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                    title: t('make_a_list:tooltip.close'),\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"contained\",\n                      onClick: handleClose,\n                      className: clsx(classesLayout.buttonControl, classes.buttonAction),\n                      startIcon: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 400,\n                        columnNumber: 36\n                      }, this),\n                      children: t('common:button.close')\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 396,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 395,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogSaveAsPreset, {\n      open: saveAsFormSelector.open,\n      loading: loadingDialog,\n      control: saveAsForm.control,\n      onClose: onCloseSaveAsForm,\n      onSubmit: onSubmitSaveAsForm,\n      rules: validationSchema.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExportProgressDialog, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MakeAListDialog, \"EvuaSeiFJ+zvKxdGjw1pE3+CRZE=\", false, function () {\n  return [useTranslation, useStyles, useStylesLayout, useConfirm, useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useForm, useForm];\n});\n\n_c = MakeAListDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"MakeAListDialog\");","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/MakeAList/index.tsx"],"names":["useState","useEffect","useMemo","useDispatch","useSelector","useForm","FormProvider","useTranslation","DialogContent","Grid","Typography","Button","Tab","Tabs","Tooltip","Paper","DialogMain","MalisPanel","SortConditionList","ConditionTree","ColumnList","ExportProgressDialog","useConfirm","AppTitle","DialogSaveAsPreset","ExcelIcon","confirmConstant","When","If","Then","Else","FileCopyIcon","EditIcon","SaveIcon","ListAltIcon","DeleteIcon","PictureAsPdfIcon","CloseIcon","TablePresetList","TabOptions","SectionGeneralInfo","useStyles","useStylesLayout","authStore","makeAListActions","_","clsx","getValidationSchema","MakeAListDialog","t","classes","classesLayout","confirm","activeTab","setActiveTab","disabledActions","setDisableActions","dispatch","isEditMode","selectIsEditMode","isOpen","selectIsOpen","presetDetail","selectPresetDetail","columnsDisplayed","selectColumnDisplay","whereConditions","selectWhereConditions","sortConditions","selectSortConditions","columnOptions","selectColumnsData","comparatorOptions","selectComparatorsData","conjunctionOptions","selectLogicalOperatorsData","sortOptions","selectSortOptionsData","permissions","selectPermissions","saveAsFormSelector","selectSaveAsForm","malFormSelector","selectMalForm","loadingDialog","selectLoadingDialog","userInfo","selectProfile","columnsDisplayedData","cloneDeep","sortConditionsData","whereConditionsData","isSharedMode","created_by","user_name","saveAsForm","defaultValues","save_as_name","shouldUnregister","validationSchema","makeAListForm","reset","error","setError","message","clearError","clearErrors","isDisabled","length","resetState","setIsEditMode","handleChange","tabIndex","handleClose","setOpen","setFilterType","handleExport","destination","exportMakeAList","displayedColumns","whereCondtions","distinct","ignoreCase","ignore_case","onSubmitData","handleSubmit","data","columns_displayed","sort_conditions","where_conditions","update","create","onSaveSharedPreset","getValues","name","copyName","setValue","shouldValidate","shouldDirty","setSaveAsForm","open","onSubmitSaveAsForm","values","payload","is_shared","saveAs","onCloseSaveAsForm","onUpdateSystemPreset","title","description","result","actionTypes","OK","onDeletePreset","remove","watchColumnChange","dialogContent","sectionCriteria","padding","tabPanel","sectionGeneralInfor","wrapButtonGroup","buttonControl","buttonAction","is_system_default","update_system_default_presets","control"],"mappings":"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","sourcesContent":["import { useState, useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useForm, FormProvider } from 'react-hook-form'\nimport { useTranslation } from 'next-i18next'\n\nimport { DialogContent, Grid, Typography, Button, Tab, Tabs, Tooltip, Paper } from '@material-ui/core'\n\nimport {\n  DialogMain,\n  MalisPanel,\n  SortConditionList,\n  ConditionTree,\n  ColumnList,\n  ExportProgressDialog,\n  useConfirm,\n  AppTitle,\n  DialogSaveAsPreset,\n  ExcelIcon,\n  confirmConstant\n} from '@/components/index'\n\nimport { When, If, Then, Else } from 'react-if'\n\nimport FileCopyIcon from '@material-ui/icons/FileCopy'\nimport EditIcon from '@material-ui/icons/Edit'\nimport SaveIcon from '@material-ui/icons/Save'\nimport ListAltIcon from '@material-ui/icons/ListAlt'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf'\nimport CloseIcon from '@material-ui/icons/Close'\n\nimport TablePresetList from './TablePresetList'\nimport TabOptions from './TabOptions'\nimport SectionGeneralInfo from './SectionGeneralInfo'\n\nimport useStyles from './styles'\nimport useStylesLayout from '@/styles/page/layout'\n\nimport { authStore, makeAListActions } from '@/store/reducers'\n\nimport _ from 'lodash'\nimport clsx from 'clsx'\nimport getValidationSchema from './validationSchema'\n\nexport default function MakeAListDialog() {\n  const { t } = useTranslation('make_a_list')\n  const classes = useStyles()\n  const classesLayout = useStylesLayout()\n\n  const { confirm } = useConfirm()\n\n  const [activeTab, setActiveTab] = useState(0)\n  const [disabledActions, setDisableActions] = useState(false)\n\n  const dispatch = useDispatch()\n\n  const isEditMode = useSelector(makeAListActions.selectIsEditMode)\n  const isOpen = useSelector(makeAListActions.selectIsOpen)\n\n  const presetDetail = useSelector(makeAListActions.selectPresetDetail)\n  const columnsDisplayed = useSelector(makeAListActions.selectColumnDisplay)\n  const whereConditions = useSelector(makeAListActions.selectWhereConditions)\n  const sortConditions = useSelector(makeAListActions.selectSortConditions)\n\n  const columnOptions = useSelector(makeAListActions.selectColumnsData)\n  const comparatorOptions = useSelector(makeAListActions.selectComparatorsData)\n  const conjunctionOptions = useSelector(makeAListActions.selectLogicalOperatorsData)\n  const sortOptions = useSelector(makeAListActions.selectSortOptionsData)\n\n  const permissions = useSelector(makeAListActions.selectPermissions)\n\n  const saveAsFormSelector = useSelector(makeAListActions.selectSaveAsForm)\n  const malFormSelector = useSelector(makeAListActions.selectMalForm)\n\n  const loadingDialog = useSelector(makeAListActions.selectLoadingDialog)\n\n  const userInfo = useSelector(authStore.selectProfile)\n\n  const columnsDisplayedData = useMemo(() => _.cloneDeep(columnsDisplayed), [columnsDisplayed])\n  const sortConditionsData = useMemo(() => _.cloneDeep(sortConditions), [sortConditions])\n  const whereConditionsData = useMemo(() => _.cloneDeep(whereConditions), [whereConditions])\n\n  const isSharedMode = presetDetail.created_by && presetDetail.created_by !== userInfo.user_name\n\n  const saveAsForm = useForm({\n    defaultValues: { save_as_name: '' },\n    shouldUnregister: false\n  })\n  const validationSchema = useMemo(() => getValidationSchema(t), [])\n\n  const makeAListForm = useForm({\n    defaultValues: makeAListActions.presetDetail,\n    shouldUnregister: false\n  })\n\n  useEffect(() => {\n    makeAListForm.reset({\n      ...presetDetail\n    })\n  }, [presetDetail])\n\n  // handle error for the SaveAs form\n  useEffect(() => {\n    if (saveAsFormSelector.error) {\n      saveAsForm.setError('save_as_name', { message: saveAsFormSelector.error })\n    }\n  }, [saveAsFormSelector.error])\n\n  // clear error in SaveAs form if clone successfully!\n  useEffect(() => {\n    if (saveAsFormSelector.clearError) {\n      saveAsForm.clearErrors()\n    }\n  }, [saveAsFormSelector.clearError])\n\n  // handle error for the Mal form\n  useEffect(() => {\n    if (malFormSelector.error) {\n      makeAListForm.setError('name', { message: malFormSelector.error })\n    }\n  }, [malFormSelector.error])\n\n  // handle error in Mal form if clone successfully!\n  useEffect(() => {\n    if (malFormSelector.clearError) {\n      makeAListForm.clearErrors()\n    }\n  }, [malFormSelector.clearError])\n\n  useEffect(() => {\n    const isDisabled = columnsDisplayed.length <= 0\n    setDisableActions(isDisabled)\n  }, [columnsDisplayed])\n\n  useEffect(() => {\n    return () => {\n      dispatch(makeAListActions.resetState())\n    }\n  }, [])\n\n  useEffect(() => {\n    dispatch(makeAListActions.setIsEditMode(true))\n  }, [])\n\n  const handleChange = (_, tabIndex) => {\n    setActiveTab(tabIndex)\n  }\n\n  const handleClose = () => {\n    dispatch(makeAListActions.setOpen(false))\n    dispatch(makeAListActions.setFilterType('own'))\n    // dispatch(makeAListActions.resetState())\n    makeAListForm.clearErrors()\n  }\n\n  const handleExport = (destination) => () => {\n    dispatch(\n      makeAListActions.exportMakeAList({\n        destination: destination,\n        displayedColumns: columnsDisplayedData,\n        sortConditions: sortConditionsData,\n        whereCondtions: whereConditionsData,\n        distinct: presetDetail.distinct,\n        ignoreCase: presetDetail.ignore_case\n      })\n    )\n  }\n\n  const onSubmitData = makeAListForm.handleSubmit((data) => {\n    data.columns_displayed = columnsDisplayedData\n    data.sort_conditions = sortConditionsData\n    data.where_conditions = whereConditionsData\n    if (isEditMode) {\n      dispatch(makeAListActions.update(data))\n    } else {\n      dispatch(makeAListActions.create(data))\n    }\n  })\n\n  const onSaveSharedPreset = () => {\n    const { name } = makeAListForm.getValues()\n    const copyName = `Copy of ${name}`\n    saveAsForm.setValue('save_as_name', copyName, {\n      shouldValidate: true,\n      shouldDirty: true\n    })\n    dispatch(makeAListActions.setSaveAsForm({ open: true }))\n  }\n\n  const onSubmitSaveAsForm = saveAsForm.handleSubmit((data) => {\n    const values = makeAListForm.getValues()\n    const payload = {\n      ...values,\n      name: data.save_as_name,\n      is_shared: false,\n      columns_displayed: columnsDisplayedData,\n      sort_conditions: sortConditionsData,\n      where_conditions: whereConditionsData\n    }\n    dispatch(makeAListActions.saveAs(payload))\n  })\n\n  const onCloseSaveAsForm = () => {\n    dispatch(makeAListActions.setSaveAsForm({ open: false }))\n    saveAsForm.clearErrors()\n    saveAsForm.reset()\n  }\n\n  const onUpdateSystemPreset = async () => {\n    const result = await confirm({\n      title: t('common:label.warning'),\n      description: t('message.update_system_preset_warning')\n    })\n    if (result === confirmConstant.actionTypes.OK) {\n      const data = makeAListForm.getValues()\n      data.where_conditions = whereConditionsData\n      data.columns_displayed = columnsDisplayedData\n      data.sort_conditions = sortConditionsData\n      dispatch(makeAListActions.update(data))\n    }\n  }\n\n  const onDeletePreset = async () => {\n    const result = await confirm({\n      title: t('common:label.confirmation'),\n      description: t('message.confirm_delete_preset')\n    })\n    if (result === confirmConstant.actionTypes.OK) {\n      dispatch(makeAListActions.remove())\n    }\n  }\n\n  const watchColumnChange = () => {\n    const isDisabled = columnsDisplayedData.length <= 0\n    setDisableActions(isDisabled)\n  }\n\n  return (\n    <>\n      <DialogMain\n        open={isOpen}\n        fullWidth\n        maxWidth=\"lg\"\n        onClose={handleClose}\n        hideButtonsAction\n        title={\n          <Typography variant=\"h5\" component=\"h4\" className={classes.title}>\n            {t('make_a_list')}\n          </Typography>\n        }\n      >\n        <FormProvider {...makeAListForm}>\n          <DialogContent className={classes.dialogContent}>\n            <Grid container spacing={2}>\n              <Grid item xs={4}>\n                <TablePresetList setActiveTab={setActiveTab} />\n              </Grid>\n\n              {/* Preset detail */}\n              <Grid item xs={8}>\n                <Paper className={classes.sectionCriteria}>\n                  <Tabs value={activeTab} onChange={handleChange} style={{ padding: '5px' }}>\n                    <Tab label=\"Columns\" />\n                    <Tab label=\"Select on\" />\n                    <Tab label=\"Sort on\" />\n                    <Tab label=\"Options\" />\n                  </Tabs>\n\n                  <MalisPanel value={activeTab} index={0} className={classes.tabPanel}>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      {t('label.choose_column_displayed')}\n                    </Typography>\n                    <ColumnList\n                      columnOptions={columnOptions}\n                      selectedColumns={columnsDisplayedData}\n                      disabled={false}\n                      onRemove={watchColumnChange}\n                      onAdd={watchColumnChange}\n                    />\n                  </MalisPanel>\n\n                  <MalisPanel value={activeTab} index={1} className={classes.tabPanel}>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      {t('label.select_criteria')}\n                    </Typography>\n                    <ConditionTree\n                      columnOptions={columnOptions}\n                      comparatorOptions={comparatorOptions}\n                      conjunctionOptions={conjunctionOptions}\n                      data={whereConditionsData}\n                      maxLevel={0}\n                      disabled={false}\n                    />\n                  </MalisPanel>\n\n                  <MalisPanel value={activeTab} index={2} className={classes.tabPanel}>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      {t('label.select_sorting')}\n                    </Typography>\n                    <SortConditionList\n                      columnOptions={columnOptions}\n                      sortOptions={sortOptions}\n                      sortData={sortConditionsData}\n                      disabled={false}\n                    />\n                  </MalisPanel>\n\n                  <MalisPanel value={activeTab} index={3} className={classes.tabPanel}>\n                    <TabOptions />\n                  </MalisPanel>\n                </Paper>\n                <Paper className={classes.sectionGeneralInfor}>\n                  <AppTitle label=\"General information\" />\n                  <Grid spacing={2} container component=\"form\" id=\"make-a-list-form\" onSubmit={onSubmitData}>\n                    <SectionGeneralInfo isSharedMode={isSharedMode} />\n                  </Grid>\n                </Paper>\n\n                <div className={classes.wrapButtonGroup}>\n                  <div className=\"wrapButtonLeft\">\n                    <If condition={isSharedMode}>\n                      <Then>\n                        <Button\n                          className={clsx(classesLayout.buttonControl, classes.buttonAction)}\n                          variant=\"contained\"\n                          onClick={onSaveSharedPreset}\n                          startIcon={<FileCopyIcon />}\n                        >\n                          {t('common:button.save_as')}\n                        </Button>\n                      </Then>\n                      <Else>\n                        <Button\n                          className={clsx(classesLayout.buttonControl, classes.buttonAction)}\n                          variant=\"contained\"\n                          form=\"make-a-list-form\"\n                          type=\"submit\"\n                          startIcon={isEditMode ? <EditIcon /> : <SaveIcon />}\n                        >\n                          {isEditMode ? t('common:button.update') : t('make_a_list:button.save')}\n                        </Button>\n                      </Else>\n                    </If>\n\n                    <When condition={!isSharedMode && isEditMode}>\n                      <Button\n                        variant=\"contained\"\n                        className={clsx(classesLayout.buttonControl, classes.buttonAction)}\n                        onClick={onDeletePreset}\n                        startIcon={<DeleteIcon />}\n                      >\n                        {t('common:button.delete')}\n                      </Button>\n                    </When>\n\n                    <When condition={presetDetail.is_system_default && permissions.update_system_default_presets}>\n                      <Button\n                        className={clsx(classesLayout.buttonControl, classes.buttonAction)}\n                        variant=\"contained\"\n                        onClick={onUpdateSystemPreset}\n                        startIcon={<EditIcon />}\n                      >\n                        {t('common:button.update')}\n                      </Button>\n                    </When>\n                  </div>\n                  <div className=\"wrapButtonRight\">\n                    <Button\n                      className={clsx(classesLayout.buttonControl, classes.buttonAction)}\n                      variant=\"contained\"\n                      onClick={handleExport('screen')}\n                      disabled={disabledActions}\n                      startIcon={<ListAltIcon />}\n                    >\n                      {t('common:button.export_to_screen')}\n                    </Button>\n                    <Button\n                      className={clsx(classesLayout.buttonControl, classes.buttonAction)}\n                      variant=\"contained\"\n                      onClick={handleExport('pdf')}\n                      disabled={disabledActions}\n                      startIcon={<PictureAsPdfIcon />}\n                    >\n                      {t('common:button.export_to_pdf')}\n                    </Button>\n                    <Button\n                      className={clsx(classesLayout.buttonControl, classes.buttonAction)}\n                      variant=\"contained\"\n                      onClick={handleExport('excel')}\n                      disabled={disabledActions}\n                      startIcon={<ExcelIcon />}\n                    >\n                      {t('common:button.export_to_excel')}\n                    </Button>\n                    <Tooltip title={t('make_a_list:tooltip.close')}>\n                      <Button\n                        variant=\"contained\"\n                        onClick={handleClose}\n                        className={clsx(classesLayout.buttonControl, classes.buttonAction)}\n                        startIcon={<CloseIcon />}\n                      >\n                        {t('common:button.close')}\n                      </Button>\n                    </Tooltip>\n                  </div>\n                </div>\n              </Grid>\n            </Grid>\n          </DialogContent>\n        </FormProvider>\n      </DialogMain>\n\n      <DialogSaveAsPreset\n        open={saveAsFormSelector.open}\n        loading={loadingDialog}\n        control={saveAsForm.control}\n        onClose={onCloseSaveAsForm}\n        onSubmit={onSubmitSaveAsForm}\n        rules={validationSchema.name}\n      />\n\n      <ExportProgressDialog />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}