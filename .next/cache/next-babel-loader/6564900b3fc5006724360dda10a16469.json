{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport { useForm } from 'react-hook-form';\nimport { Grid } from '@material-ui/core';\nimport { TableExtendedProperties, DialogMain, AppTabHistoryLog, FormControllerTabs, BtnHelp } from '@/components/index';\nimport TabGeneral from './TabGeneral';\nimport TabSpecialties from './TabSpecialties';\nimport _ from 'lodash';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport getValidationSchema from './validationSchema';\nimport { locationStore } from '@/store/reducers';\nimport { removalProperties } from '@/utils/constant';\n\nfunction LocationDialog() {\n  const {\n    t\n  } = useTranslation('location');\n  const validationSchema = useMemo(() => getValidationSchema(t), []);\n  const locationForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  });\n  const {\n    0: tab,\n    1: setTab\n  } = useState(0);\n  const dispatch = useDispatch();\n  const dialogState = useSelector(locationStore.selectDialogState);\n  const locationDetail = useSelector(locationStore.selectDetail);\n  const {\n    parameters,\n    wiki_page\n  } = useSelector(locationStore.selectInitDataForCE);\n  const permissions = useSelector(locationStore.selectPermissions);\n  const titleDialog = dialogState.editMode ? t('form.title.update_location') : t('form.title.create_location');\n  useEffect(() => {\n    locationForm.reset(locationDetail);\n    setTab(0);\n  }, [locationDetail]);\n\n  const onChangeTab = (_, newValue) => {\n    setTab(newValue);\n  };\n\n  const onHandleSubmit = locationForm.handleSubmit(data => {\n    const payload = _.omit(data, [...removalProperties, 'use_in_job']);\n\n    if (dialogState.editMode) {\n      dispatch(locationStore.sagaUpdate({\n        location: payload,\n        id: data.id\n      }));\n    } else {\n      dispatch(locationStore.sagaCreate(payload));\n    }\n  });\n\n  const onClose = () => {\n    locationForm.clearErrors();\n    dispatch(locationStore.sagaCloseDialog());\n  };\n\n  const handleChangeHistoryLogs = data => {\n    dispatch(locationStore.actions.setHistoryLogs(data));\n  };\n\n  const generalTab = {\n    label: t('common:tab.general'),\n    errorKey: ['location_id', 'language', 'location_type', 'name', 'office_email', 'office_zip', 'comment', 'office_email', 'office_zip', 'workshop_email'],\n    panel: /*#__PURE__*/_jsx(TabGeneral, {})\n  };\n  const specialtiesTab = {\n    label: t('form.tab.specialties'),\n    panel: /*#__PURE__*/_jsx(TabSpecialties, {})\n  };\n  const extendedPropertiesTab = {\n    label: t('common:tab.extended_properties'),\n    panel: /*#__PURE__*/_jsx(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(TableExtendedProperties, {\n          control: locationForm.control,\n          name: \"additional_attributes\",\n          tableHeight: 505,\n          propertiesList: parameters.LOAT,\n          editMode: dialogState.editMode,\n          parameterName: \"LOAT\"\n        })\n      })\n    })\n  };\n  const historyTab = {\n    label: t('common:tab.history'),\n    panel: /*#__PURE__*/_jsx(AppTabHistoryLog, {\n      isOpenDialog: dialogState.open,\n      data: dialogState.historyLogs,\n      onChange: handleChangeHistoryLogs,\n      entityId: locationDetail.id,\n      entity: \"location\"\n    }),\n    disabled: !dialogState.editMode\n  };\n  const tabs = [generalTab, specialtiesTab, extendedPropertiesTab, historyTab];\n  return /*#__PURE__*/_jsx(DialogMain, {\n    open: dialogState.open,\n    title: /*#__PURE__*/_jsx(BtnHelp, {\n      title: titleDialog,\n      href: wiki_page\n    }),\n    loading: dialogState.loading,\n    onOk: onHandleSubmit,\n    onClose: onClose,\n    height: dialogState.editMode ? 627 : 580,\n    okButtonProps: {\n      disabled: dialogState.loading || !(permissions === null || permissions === void 0 ? void 0 : permissions.edit) && dialogState.editMode\n    },\n    okText: dialogState.editMode ? t('common:button.update') : t('common:button.create'),\n    children: /*#__PURE__*/_jsx(FormControllerTabs, {\n      value: tab,\n      onChange: onChangeTab,\n      form: locationForm,\n      tabs: tabs\n    })\n  });\n}\n\nexport default LocationDialog;","map":null,"metadata":{},"sourceType":"module"}