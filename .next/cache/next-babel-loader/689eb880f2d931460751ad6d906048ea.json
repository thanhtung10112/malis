{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createSelector, createAction } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nimport _ from 'lodash';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nimport isAssembly from '@/utils/isAssembly';\nimport { manufacturerStore } from '@/store/reducers';\nexport const name = 'part';\nexport const itemDetail = {\n  job_id: null,\n  drawing_id: null,\n  dpn: '',\n  reference_to: null,\n  mass: 0,\n  unit: null,\n  manufacturer_equiv: null,\n  manufacturers: [],\n  material_equiv: null,\n  descriptions: [],\n  manufacturer_equiv_standards: [],\n  material_equiv_standards: [],\n  additional_attributes: {}\n};\nexport const assemblyDetail = {\n  job_id: null,\n  drawing_id: null,\n  dpn: '',\n  unit: null,\n  descriptions: [],\n  items: [],\n  manufacturers: [],\n  is_assembly: true,\n  additional_attributes: {},\n  drawing_items: []\n};\nexport const initialState = {\n  partList: [],\n  initData: {\n    parameters: {\n      MAAT: [],\n      PLLA: [],\n      UNIT: [],\n      PAAT: []\n    }\n  },\n  confirmRef: {\n    open: false,\n    message: ''\n  },\n  manufacturer: {\n    detail: manufacturerStore.initialState.detail,\n    dialogState: manufacturerStore.initialState.dialogState,\n    initData: _objectSpread(_objectSpread({}, manufacturerStore.initialState.initDataForCE), {}, {\n      permissions: null\n    })\n  }\n};\nconst partSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    addPart(state, {\n      payload\n    }) {\n      const part = _objectSpread(_objectSpread({}, payload), {}, {\n        loading: false,\n        tab: 0,\n        historyLogs: []\n      });\n\n      state.partList.push(part);\n    },\n\n    setInitData(state, {\n      payload\n    }) {\n      state.initData = payload;\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      const {\n        length\n      } = state.partList;\n\n      if (length > 0) {\n        state.partList[length - 1].historyLogs = payload;\n      }\n    },\n\n    setPartLoading(state, {\n      payload\n    }) {\n      const currentPart = _.last(state.partList);\n\n      const {\n        length\n      } = state.partList;\n\n      if (length <= 0) {\n        return;\n      }\n\n      if (currentPart.loading !== payload) {\n        state.partList[length - 1].loading = payload;\n      }\n    },\n\n    updateCurrentPart(state, {\n      payload\n    }) {\n      const {\n        length\n      } = state.partList;\n      state.partList[length - 1].detail = _objectSpread(_objectSpread({}, state.partList[length - 1].detail), payload);\n    },\n\n    setConfirmRef(state, {\n      payload\n    }) {\n      state.confirmRef.open = payload.open;\n      state.confirmRef.message = payload.message;\n    },\n\n    setConfirmRefOpen(state, {\n      payload\n    }) {\n      state.confirmRef.open = payload;\n    },\n\n    resetCurrentPart(state, {\n      payload\n    }) {\n      const {\n        length\n      } = state.partList;\n      const {\n        userJob,\n        userDrawing,\n        generateCode\n      } = payload;\n      const currentPart = state.partList[length - 1].detail;\n      const initDetail = isAssembly(currentPart) ? assemblyDetail : itemDetail;\n      const defaultValues = getDefaultValues(state.initData.parameters, {\n        unit: 'UNIT'\n      }, initDetail);\n      defaultValues.job_id = userJob.value;\n      defaultValues.drawing_id = userDrawing.value === -1 ? null : userDrawing;\n\n      if (generateCode) {\n        defaultValues.dpn = generateCode;\n      }\n\n      state.partList[length - 1].detail = defaultValues;\n    },\n\n    removePart(state) {\n      state.partList.pop();\n    },\n\n    setPartTab(state, {\n      payload\n    }) {\n      const currentPart = _.last(state.partList);\n\n      const {\n        length\n      } = state.partList;\n\n      if (length <= 0) {\n        return;\n      }\n\n      if (currentPart.tab !== payload) {\n        state.partList[length - 1].tab = payload;\n      }\n    },\n\n    // Manufacturer\n    setManuDetail(state, {\n      payload\n    }) {\n      state.manufacturer.detail = _objectSpread(_objectSpread({}, state.manufacturer.detail), payload);\n    },\n\n    setManuDialogOpen(state, {\n      payload\n    }) {\n      state.manufacturer.dialogState.open = payload;\n    },\n\n    setManuDialogLoading(state, {\n      payload\n    }) {\n      state.manufacturer.dialogState.loading = payload;\n    },\n\n    setManuInitData(state, {\n      payload\n    }) {\n      state.manufacturer.initData = payload;\n    },\n\n    addManufacturer(state, {\n      payload\n    }) {\n      const {\n        length\n      } = state.partList;\n      state.partList[length - 1].detail.manufacturers.push(payload);\n    },\n\n    setDrawingItems(state, {\n      payload\n    }) {\n      const {\n        length\n      } = state.partList;\n\n      if (length <= 0) {\n        return;\n      }\n\n      ;\n      state.partList[length - 1].detail.drawing_items = payload;\n    }\n\n  }\n});\nexport const {\n  actions\n} = partSlice; // saga actions\n\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaGetItemCopy = createAction(`${name}/GET_ITEM_COPY`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaGetDrawingItems = createAction(`${name}/GET_DRAWING_ITEMS`); // saga actions Manufacturer\n\nexport const sagaOpenManuDialog = createAction(`${name}/OPEN_UPDATE_MANU_DIALOG`);\nexport const sagaCreateManu = createAction(`${name}/CREATE_MANU`);\nexport const sagaCloseManuDialog = createAction(`${name}/CLOSE_MANU_DIALOG`);\nexport const sagaGetManuId = createAction(`${name}/GET_MANU_ID`); // selectors\n\nexport const selectState = state => state[name];\nexport const selectPartList = createSelector(selectState, state => state.partList);\nexport const selectParameters = createSelector(selectState, state => state.initData.parameters);\nexport const selectCurrentPart = createSelector(selectState, state => _.last(state.partList));\nexport const selectConfirmRef = createSelector(selectState, state => state.confirmRef);\nexport const selectPartManu = createSelector(selectState, state => state.manufacturer);\nexport const selectDrawingItems = createSelector(selectState, state => {\n  const {\n    partList\n  } = state;\n\n  if (partList.length <= 0) {\n    return [];\n  }\n\n  const {\n    detail\n  } = _.last(partList);\n\n  return detail.drawing_items || [];\n});\nexport default partSlice;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/reducers/part.reducer.ts"],"names":["createSlice","createSelector","createAction","actionTypes","_","getDefaultValues","isAssembly","manufacturerStore","name","itemDetail","job_id","drawing_id","dpn","reference_to","mass","unit","manufacturer_equiv","manufacturers","material_equiv","descriptions","manufacturer_equiv_standards","material_equiv_standards","additional_attributes","assemblyDetail","items","is_assembly","drawing_items","initialState","partList","initData","parameters","MAAT","PLLA","UNIT","PAAT","confirmRef","open","message","manufacturer","detail","dialogState","initDataForCE","permissions","partSlice","reducers","addPart","state","payload","part","loading","tab","historyLogs","push","setInitData","setHistoryLogs","length","setPartLoading","currentPart","last","updateCurrentPart","setConfirmRef","setConfirmRefOpen","resetCurrentPart","userJob","userDrawing","generateCode","initDetail","defaultValues","value","removePart","pop","setPartTab","setManuDetail","setManuDialogOpen","setManuDialogLoading","setManuInitData","addManufacturer","setDrawingItems","actions","sagaCreate","CREATE","sagaCloseDialog","CLOSE_DIALOG","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaGetItemCopy","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaGetDrawingItems","sagaOpenManuDialog","sagaCreateManu","sagaCloseManuDialog","sagaGetManuId","selectState","selectPartList","selectParameters","selectCurrentPart","selectConfirmRef","selectPartManu","selectDrawingItems"],"mappings":"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","sourcesContent":["import { createSlice, createSelector, PayloadAction, createAction } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\nimport _ from 'lodash'\nimport { getDefaultValues } from '@/utils/getDefaultValues'\nimport isAssembly from '@/utils/isAssembly'\nimport { manufacturerStore } from '@/store/reducers'\n\nimport type { RootReducerType } from './rootReducer'\nimport type { ItemDetail, ItemManufacturer } from '@/types/Item'\nimport type { AssemblyDetail } from '@/types/Assembly'\nimport type { DataForDropdown, HistoryLog, ParameterOption } from '@/types/Common'\nimport type { PartDetail, PartEntity } from '@/types/Part'\nimport type { ManufacturerInitDataForCE, ManufacturerPermissions, ManufacturerItem } from '@/types/Manufacturer'\n\nexport const name = 'part'\n\nexport type Part = {\n  detail: ItemDetail | AssemblyDetail\n  permissions: any\n  wiki_page: string\n  loading: boolean\n  tab: number\n  historyLogs: HistoryLog[]\n}\n\nexport const itemDetail = {\n  job_id: null,\n  drawing_id: null,\n  dpn: '',\n  reference_to: null,\n  mass: 0,\n  unit: null,\n  manufacturer_equiv: null,\n  manufacturers: [],\n  material_equiv: null,\n  descriptions: [],\n  manufacturer_equiv_standards: [],\n  material_equiv_standards: [],\n  additional_attributes: {}\n} as ItemDetail\n\nexport const assemblyDetail = {\n  job_id: null,\n  drawing_id: null,\n  dpn: '',\n  unit: null,\n  descriptions: [],\n  items: [],\n  manufacturers: [],\n  is_assembly: true,\n  additional_attributes: {},\n  drawing_items: []\n} as AssemblyDetail\n\nexport const initialState = {\n  partList: [] as Part[],\n  initData: {\n    parameters: {\n      MAAT: [],\n      PLLA: [],\n      UNIT: [],\n      PAAT: []\n    }\n  },\n  confirmRef: {\n    open: false,\n    message: ''\n  },\n  manufacturer: {\n    detail: manufacturerStore.initialState.detail,\n    dialogState: manufacturerStore.initialState.dialogState,\n    initData: {\n      ...manufacturerStore.initialState.initDataForCE,\n      permissions: null as ManufacturerPermissions\n    }\n  }\n}\n\nconst partSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    addPart(state, { payload }: PayloadAction<Pick<Part, 'detail' | 'permissions' | 'wiki_page'>>) {\n      const part = {\n        ...payload,\n        loading: false,\n        tab: 0,\n        historyLogs: []\n      } as Part\n      state.partList.push(part)\n    },\n    setInitData(state, { payload }) {\n      state.initData = payload\n    },\n    setHistoryLogs(state, { payload }: PayloadAction<HistoryLog[]>) {\n      const { length } = state.partList\n      if (length > 0) {\n        state.partList[length - 1].historyLogs = payload\n      }\n    },\n    setPartLoading(state, { payload }: PayloadAction<boolean>) {\n      const currentPart = _.last(state.partList)\n      const { length } = state.partList\n      if (length <= 0) {\n        return\n      }\n      if (currentPart.loading !== payload) {\n        state.partList[length - 1].loading = payload\n      }\n    },\n    updateCurrentPart(state, { payload }) {\n      const { length } = state.partList\n      state.partList[length - 1].detail = {\n        ...state.partList[length - 1].detail,\n        ...payload\n      }\n    },\n    setConfirmRef(state, { payload }) {\n      state.confirmRef.open = payload.open\n      state.confirmRef.message = payload.message\n    },\n    setConfirmRefOpen(state, { payload }: PayloadAction<boolean>) {\n      state.confirmRef.open = payload\n    },\n    resetCurrentPart(\n      state,\n      { payload }: PayloadAction<{ userJob: ParameterOption; userDrawing: DataForDropdown; generateCode?: string }>\n    ) {\n      const { length } = state.partList\n      const { userJob, userDrawing, generateCode } = payload\n      const currentPart = state.partList[length - 1].detail\n      const initDetail = isAssembly(currentPart) ? assemblyDetail : itemDetail\n      const defaultValues = getDefaultValues(\n        state.initData.parameters,\n        {\n          unit: 'UNIT'\n        },\n        initDetail\n      )\n      defaultValues.job_id = userJob.value\n      defaultValues.drawing_id = userDrawing.value === -1 ? null : userDrawing\n      if (generateCode) {\n        defaultValues.dpn = generateCode\n      }\n      state.partList[length - 1].detail = defaultValues\n    },\n    removePart(state) {\n      state.partList.pop()\n    },\n    setPartTab(state, { payload }: PayloadAction<number>) {\n      const currentPart = _.last(state.partList)\n      const { length } = state.partList\n      if (length <= 0) {\n        return\n      }\n      if (currentPart.tab !== payload) {\n        state.partList[length - 1].tab = payload\n      }\n    },\n    // Manufacturer\n    setManuDetail(state, { payload }) {\n      state.manufacturer.detail = {\n        ...state.manufacturer.detail,\n        ...payload\n      }\n    },\n    setManuDialogOpen(state, { payload }: PayloadAction<boolean>) {\n      state.manufacturer.dialogState.open = payload\n    },\n    setManuDialogLoading(state, { payload }: PayloadAction<boolean>) {\n      state.manufacturer.dialogState.loading = payload\n    },\n    setManuInitData(\n      state,\n      { payload }: PayloadAction<ManufacturerInitDataForCE & { permissions: ManufacturerPermissions }>\n    ) {\n      state.manufacturer.initData = payload\n    },\n    addManufacturer(state, { payload }: PayloadAction<ItemManufacturer>) {\n      const { length } = state.partList\n      state.partList[length - 1].detail.manufacturers.push(payload)\n    },\n    setDrawingItems(state, { payload }: PayloadAction<any[]>) {\n      const { length } = state.partList\n      if (length <= 0) {\n        return\n      }\n      ;(state.partList[length - 1].detail as AssemblyDetail).drawing_items = payload\n    }\n  }\n})\n\nexport const { actions } = partSlice\n\n// saga actions\nexport const sagaCreate = createAction<{ entity: PartEntity; formData: ItemDetail | AssemblyDetail }>(\n  `${name}/${actionTypes.CREATE}`\n)\n\nexport const sagaCloseDialog = createAction<PartEntity>(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaOpenCreateDialog = createAction<PartEntity>(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaGetItemCopy = createAction<DataForDropdown>(`${name}/GET_ITEM_COPY`)\nexport const sagaOpenUpdateDialog = createAction<{ id: number; entity: PartEntity }>(\n  `${name}/${actionTypes.OPEN_UPDATE_DIALOG}`\n)\nexport const sagaGetDrawingItems = createAction<number>(`${name}/GET_DRAWING_ITEMS`)\n\n// saga actions Manufacturer\nexport const sagaOpenManuDialog = createAction<PartDetail>(`${name}/OPEN_UPDATE_MANU_DIALOG`)\nexport const sagaCreateManu = createAction<ManufacturerItem>(`${name}/CREATE_MANU`)\nexport const sagaCloseManuDialog = createAction(`${name}/CLOSE_MANU_DIALOG`)\nexport const sagaGetManuId = createAction<ManufacturerItem>(`${name}/GET_MANU_ID`)\n\n// selectors\nexport const selectState = (state: RootReducerType) => state[name]\nexport const selectPartList = createSelector(selectState, (state) => state.partList)\nexport const selectParameters = createSelector(selectState, (state) => state.initData.parameters)\nexport const selectCurrentPart = createSelector(selectState, (state) => _.last(state.partList))\nexport const selectConfirmRef = createSelector(selectState, (state) => state.confirmRef)\nexport const selectPartManu = createSelector(selectState, (state) => state.manufacturer)\nexport const selectDrawingItems = createSelector(selectState, (state) => {\n  const { partList } = state\n  if (partList.length <= 0) {\n    return []\n  }\n  const { detail } = _.last(partList)\n  return (detail as AssemblyDetail).drawing_items || []\n})\n\nexport default partSlice\n"]},"metadata":{},"sourceType":"module"}