{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, put, call, putResolve } from 'redux-saga/effects';\nimport { select, all } from 'typed-redux-saga';\nimport _ from 'lodash';\nimport { tagStore, commonStore, advancedFilterActions, summaryReportActions } from '@/store/reducers';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport tagApi from '@/apis/tag.api';\n\nfunction* fetchTagDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n  const data = yield call(tagApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  });\n\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {};\n  }\n\n  yield put(commonStore.actions.setUserValueJob(data.selected_job));\n  yield put(tagStore.actions.setInitDataForList(data));\n}\n\nfunction* fetchTagList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData,\n    userJob,\n    userDrawing\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    userDrawing: select(commonStore.selectUserValueDrawing)\n  });\n\n  if (!userJob.value) {\n    return;\n  }\n\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(tagApi.getList, _objectSpread(_objectSpread({\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value\n  }, filterData), {}, {\n    drawing_id: userDrawing.value\n  }));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(tagStore.actions.setDataList(data.elements));\n}\n\nfunction* getTagList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchTagDataForList);\n    const permissions = yield* select(tagStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchTagList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* removeTag({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const data = yield call(tagApi.executeOperation, 'delete', payload);\n\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data));\n      yield put(summaryReportActions.setOpen(true));\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message));\n    }\n\n    yield call(fetchTagList);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* changeUserJob({\n  payload\n}) {\n  yield put(commonStore.actions.setUserValueJob(payload));\n  yield call(getTagList);\n}\n\nfunction* changeUserDrawing({\n  payload\n}) {\n  yield putResolve(commonStore.actions.setUserValueDrawing(payload));\n  yield call(getTagList);\n}\n\nfunction* tagSaga() {\n  yield takeEvery(tagStore.sagaGetList, getTagList);\n  yield takeEvery(tagStore.sagaRemove, removeTag);\n  yield takeEvery(tagStore.sagaChangeUserJob, changeUserJob);\n  yield takeEvery(tagStore.sagaChangeUserDrawing, changeUserDrawing);\n}\n\nexport default tagSaga;","map":null,"metadata":{},"sourceType":"module"}