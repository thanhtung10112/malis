{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchDrawingInitDataForList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchDrawingInitDataForCE),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(fetchDrawingList),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(fetchDrawingPartList),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(getDrawingPartList),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(getDrawingList),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(openDrawingCreateDialog),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(changeUserJob),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(createDrawing),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(closeDrawingDialog),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(openDrawingUpdateDialog),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(updateDrawing),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(openRevisionDialog),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(saveNewRev),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(openCreatePartDialog),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(drawingSaga);\n\nimport { takeEvery, put, putResolve } from 'redux-saga/effects';\nimport { select, call, all } from 'typed-redux-saga';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport { drawingStore, commonStore, advancedFilterActions, specificationStore, partStore, tagStore } from '@/store/reducers';\nimport _ from 'lodash';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nimport { fetchSpecificationDetail } from '@/store/saga/specification.saga';\nimport drawingApi from '@/apis/drawing.api';\nexport function fetchDrawingInitDataForList() {\n  var userJob, data;\n  return _regeneratorRuntime.wrap(function fetchDrawingInitDataForList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.delegateYield(select(commonStore.selectUserValueJob), \"t0\", 1);\n\n        case 1:\n          userJob = _context.t0;\n          _context.next = 4;\n          return call(drawingApi.getInitDataForList, {\n            job_id_pk: userJob.value\n          });\n\n        case 4:\n          data = _context.sent;\n\n          if (_.isNull(data.selected_job)) {\n            data.selected_job = {};\n          }\n\n          if (userJob.value === -1 || userJob.value === -2) {\n            data.selected_job = userJob;\n          }\n\n          _context.next = 9;\n          return put(commonStore.actions.setUserValueJob(data.selected_job));\n\n        case 9:\n          _context.next = 11;\n          return put(drawingStore.actions.setInitDataForList(data));\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function fetchDrawingInitDataForCE() {\n  var jobId,\n      userJob,\n      _yield$call,\n      permissions,\n      user_job,\n      dataInit,\n      detailDefaultValue,\n      drawingPurpose,\n      _drawingPurpose$prope,\n      exclude_from,\n      excludeList,\n      excludeFrom,\n      _args2 = arguments;\n\n  return _regeneratorRuntime.wrap(function fetchDrawingInitDataForCE$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          jobId = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : null;\n          return _context2.delegateYield(select(commonStore.selectUserValueJob), \"t0\", 2);\n\n        case 2:\n          userJob = _context2.t0;\n          _context2.next = 5;\n          return call(drawingApi.getInitDataForCE, {\n            job_id_pk: jobId || userJob.value\n          });\n\n        case 5:\n          _yield$call = _context2.sent;\n          permissions = _yield$call.permissions;\n          user_job = _yield$call.user_job;\n          dataInit = _objectWithoutProperties(_yield$call, [\"permissions\", \"user_job\"]);\n          detailDefaultValue = getDefaultValues(dataInit.parameters, {\n            drawing_purpose: 'DWPU',\n            file_prefix: 'FPRE',\n            file_type: 'FTYP',\n            drawing_format: 'PLFO'\n          }); // if you are in create mode, then set jobId for the assembly form\n\n          if (_.isNull(jobId)) {\n            detailDefaultValue.job_id = userJob.value;\n          }\n\n          if (!_.isNull(detailDefaultValue.drawing_purpose) && _.isNull(jobId)) {\n            drawingPurpose = _.find(dataInit.parameters.DWPU, {\n              id: detailDefaultValue.drawing_purpose\n            });\n            _drawingPurpose$prope = drawingPurpose === null || drawingPurpose === void 0 ? void 0 : drawingPurpose.properties, exclude_from = _drawingPurpose$prope.exclude_from;\n\n            if (_.isString(exclude_from) && _.size(exclude_from) > 0) {\n              excludeList = {\n                C: 'exclude_from_customer',\n                O: 'exclude_from_other',\n                S: 'exclude_from_supplier'\n              };\n              excludeFrom = exclude_from.split(';'); // C;O;S => [C, O, S]\n\n              _.forIn(excludeList, function (value, key) {\n                if (excludeFrom.includes(key)) {\n                  detailDefaultValue[value] = true;\n                }\n              });\n            }\n          }\n\n          _context2.next = 14;\n          return put(drawingStore.actions.setInitDataForCE(dataInit));\n\n        case 14:\n          _context2.next = 16;\n          return put(drawingStore.actions.setDetail(detailDefaultValue));\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function fetchDrawingList() {\n  var _yield$all, tableState, searchQuery, filterData, userJob, drawingGroup, page, per_page, data;\n\n  return _regeneratorRuntime.wrap(function fetchDrawingList$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.delegateYield(all({\n            tableState: select(commonStore.selectTableState),\n            searchQuery: select(commonStore.selectSearchQuery),\n            filterData: select(advancedFilterActions.selectFilterData),\n            userJob: select(commonStore.selectUserValueJob),\n            drawingGroup: select(drawingStore.selectDrawingGroupId)\n          }), \"t0\", 1);\n\n        case 1:\n          _yield$all = _context3.t0;\n          tableState = _yield$all.tableState;\n          searchQuery = _yield$all.searchQuery;\n          filterData = _yield$all.filterData;\n          userJob = _yield$all.userJob;\n          drawingGroup = _yield$all.drawingGroup;\n\n          if (userJob.value) {\n            _context3.next = 9;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 9:\n          page = tableState.page, per_page = tableState.per_page;\n          _context3.next = 12;\n          return call(drawingApi.getList, _objectSpread({\n            per_page: per_page,\n            page: page,\n            s: searchQuery,\n            job_id: userJob.value,\n            drawing_group_id: drawingGroup\n          }, filterData));\n\n        case 12:\n          data = _context3.sent;\n          _context3.next = 15;\n          return put(commonStore.actions.setTableState({\n            total_items: data.total_items\n          }));\n\n        case 15:\n          _context3.next = 17;\n          return put(drawingStore.actions.setDataList(data.drawings));\n\n        case 17:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function fetchDrawingPartList(drawingId) {\n  var _yield$call2, drawing;\n\n  return _regeneratorRuntime.wrap(function fetchDrawingPartList$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return call(drawingApi.getDetail, drawingId);\n\n        case 2:\n          _yield$call2 = _context4.sent;\n          drawing = _yield$call2.drawing;\n          _context4.next = 6;\n          return put(drawingStore.actions.setComponentList(drawing.item_list));\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function getDrawingPartList() {\n  var drawingDetail;\n  return _regeneratorRuntime.wrap(function getDrawingPartList$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return put(drawingStore.actions.setDialogStateLoading(true));\n\n        case 2:\n          _context5.prev = 2;\n          return _context5.delegateYield(select(drawingStore.selectDetail), \"t0\", 4);\n\n        case 4:\n          drawingDetail = _context5.t0;\n          _context5.next = 7;\n          return call(fetchDrawingPartList, drawingDetail.id);\n\n        case 7:\n          _context5.next = 13;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t1 = _context5[\"catch\"](2);\n          _context5.next = 13;\n          return errorSaga.handleError(_context5.t1);\n\n        case 13:\n          _context5.next = 15;\n          return put(drawingStore.actions.setDialogStateLoading(false));\n\n        case 15:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[2, 9]]);\n}\nexport function getDrawingList() {\n  var permissions;\n  return _regeneratorRuntime.wrap(function getDrawingList$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 2:\n          _context6.prev = 2;\n          _context6.next = 5;\n          return call(fetchDrawingInitDataForList);\n\n        case 5:\n          return _context6.delegateYield(select(drawingStore.selectPermissions), \"t0\", 6);\n\n        case 6:\n          permissions = _context6.t0;\n\n          if (!(permissions === null || permissions === void 0 ? void 0 : permissions.view)) {\n            _context6.next = 10;\n            break;\n          }\n\n          _context6.next = 10;\n          return call(fetchDrawingList);\n\n        case 10:\n          _context6.next = 16;\n          break;\n\n        case 12:\n          _context6.prev = 12;\n          _context6.t1 = _context6[\"catch\"](2);\n          _context6.next = 16;\n          return errorSaga.handleError(_context6.t1);\n\n        case 16:\n          _context6.next = 18;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 18:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[2, 12]]);\n}\nexport function openDrawingCreateDialog() {\n  return _regeneratorRuntime.wrap(function openDrawingCreateDialog$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 2:\n          _context7.prev = 2;\n          _context7.next = 5;\n          return call(fetchDrawingInitDataForCE);\n\n        case 5:\n          _context7.next = 7;\n          return put(drawingStore.actions.setDialogStateOpen(true));\n\n        case 7:\n          _context7.next = 13;\n          break;\n\n        case 9:\n          _context7.prev = 9;\n          _context7.t0 = _context7[\"catch\"](2);\n          _context7.next = 13;\n          return errorSaga.handleError(_context7.t0);\n\n        case 13:\n          _context7.next = 15;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 15:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[2, 9]]);\n}\nexport function changeUserJob(_ref) {\n  var payload;\n  return _regeneratorRuntime.wrap(function changeUserJob$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          payload = _ref.payload;\n          _context8.next = 3;\n          return putResolve(commonStore.actions.setUserValueJob(payload));\n\n        case 3:\n          _context8.next = 5;\n          return call(getDrawingList);\n\n        case 5:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\nexport function createDrawing(_ref2) {\n  var payload, _yield$call3, message, userJob;\n\n  return _regeneratorRuntime.wrap(function createDrawing$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context9.next = 3;\n          return put(drawingStore.actions.setDialogStateLoading(true));\n\n        case 3:\n          _context9.prev = 3;\n          _context9.next = 6;\n          return call(drawingApi.create, payload);\n\n        case 6:\n          _yield$call3 = _context9.sent;\n          message = _yield$call3.message;\n          return _context9.delegateYield(select(commonStore.selectUserValueJob), \"t0\", 9);\n\n        case 9:\n          userJob = _context9.t0;\n          _context9.next = 12;\n          return putResolve(drawingStore.actions.resetDetail({\n            userJob: userJob\n          }));\n\n        case 12:\n          _context9.next = 14;\n          return all([put(commonStore.actions.setSuccessMessage(message)), put(drawingStore.actions.setDialogStateTab(0))]);\n\n        case 14:\n          _context9.next = 20;\n          break;\n\n        case 16:\n          _context9.prev = 16;\n          _context9.t1 = _context9[\"catch\"](3);\n          _context9.next = 20;\n          return errorSaga.handleError(_context9.t1);\n\n        case 20:\n          _context9.next = 22;\n          return put(drawingStore.actions.setDialogStateLoading(false));\n\n        case 22:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[3, 16]]);\n}\nexport function closeDrawingDialog() {\n  var userJob, entity, specDetail, _yield$call4, drawing_id;\n\n  return _regeneratorRuntime.wrap(function closeDrawingDialog$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          return _context10.delegateYield(select(commonStore.selectUserValueJob), \"t0\", 2);\n\n        case 2:\n          userJob = _context10.t0;\n          return _context10.delegateYield(select(commonStore.selectEntity), \"t1\", 4);\n\n        case 4:\n          entity = _context10.t1;\n          return _context10.delegateYield(select(specificationStore.selectDetail), \"t2\", 6);\n\n        case 6:\n          specDetail = _context10.t2;\n          _context10.next = 9;\n          return putResolve(drawingStore.actions.setDialogStateOpen(false));\n\n        case 9:\n          if (!(entity === 'specification')) {\n            _context10.next = 22;\n            break;\n          }\n\n          _context10.next = 12;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 12:\n          _context10.next = 14;\n          return call(fetchSpecificationDetail, specDetail.id);\n\n        case 14:\n          _yield$call4 = _context10.sent;\n          drawing_id = _yield$call4.drawing_id;\n          _context10.next = 18;\n          return put(specificationStore.actions.setDetail({\n            drawing_id: drawing_id\n          }));\n\n        case 18:\n          _context10.next = 20;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 20:\n          _context10.next = 29;\n          break;\n\n        case 22:\n          if (!(entity === 'element')) {\n            _context10.next = 27;\n            break;\n          }\n\n          _context10.next = 25;\n          return put(tagStore.sagaGetList());\n\n        case 25:\n          _context10.next = 29;\n          break;\n\n        case 27:\n          _context10.next = 29;\n          return call(getDrawingList);\n\n        case 29:\n          _context10.next = 31;\n          return put(drawingStore.actions.resetDetail({\n            userJob: userJob\n          }));\n\n        case 31:\n          _context10.next = 37;\n          break;\n\n        case 33:\n          _context10.prev = 33;\n          _context10.t3 = _context10[\"catch\"](0);\n          _context10.next = 37;\n          return errorSaga.handleError(_context10.t3);\n\n        case 37:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 33]]);\n}\nexport function openDrawingUpdateDialog(_ref3) {\n  var id, _yield$call5, drawing;\n\n  return _regeneratorRuntime.wrap(function openDrawingUpdateDialog$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          id = _ref3.payload;\n          _context11.next = 3;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 3:\n          _context11.prev = 3;\n          _context11.next = 6;\n          return call(drawingApi.getDetail, id);\n\n        case 6:\n          _yield$call5 = _context11.sent;\n          drawing = _yield$call5.drawing;\n          drawing.drawing_id = drawing.drawing_id.split(' ')[1];\n          _context11.next = 11;\n          return call(fetchDrawingInitDataForCE, drawing.job_id);\n\n        case 11:\n          _context11.next = 13;\n          return putResolve(drawingStore.actions.setDetail(drawing));\n\n        case 13:\n          _context11.next = 15;\n          return put(drawingStore.actions.setComponentList(drawing.item_list));\n\n        case 15:\n          _context11.next = 17;\n          return put(drawingStore.actions.setDialogStateOpen(true));\n\n        case 17:\n          _context11.next = 23;\n          break;\n\n        case 19:\n          _context11.prev = 19;\n          _context11.t0 = _context11[\"catch\"](3);\n          _context11.next = 23;\n          return errorSaga.handleError(_context11.t0);\n\n        case 23:\n          _context11.next = 25;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 25:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[3, 19]]);\n}\nexport function updateDrawing(_ref4) {\n  var payload, id, drawing, _yield$call6, message;\n\n  return _regeneratorRuntime.wrap(function updateDrawing$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          payload = _ref4.payload;\n          _context12.next = 3;\n          return put(drawingStore.actions.setDialogStateLoading(true));\n\n        case 3:\n          _context12.prev = 3;\n          id = payload.id, drawing = payload.drawing;\n          _context12.next = 7;\n          return call(drawingApi.update, id, drawing);\n\n        case 7:\n          _yield$call6 = _context12.sent;\n          message = _yield$call6.message;\n          _context12.next = 11;\n          return call(closeDrawingDialog);\n\n        case 11:\n          _context12.next = 13;\n          return put(commonStore.actions.setSuccessMessage(message));\n\n        case 13:\n          _context12.next = 19;\n          break;\n\n        case 15:\n          _context12.prev = 15;\n          _context12.t0 = _context12[\"catch\"](3);\n          _context12.next = 19;\n          return errorSaga.handleError(_context12.t0);\n\n        case 19:\n          _context12.next = 21;\n          return put(drawingStore.actions.setDialogStateLoading(false));\n\n        case 21:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12, null, [[3, 15]]);\n}\nexport function openRevisionDialog(_ref5) {\n  var payload, _yield$call7, next_revision;\n\n  return _regeneratorRuntime.wrap(function openRevisionDialog$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          payload = _ref5.payload;\n          _context13.next = 3;\n          return put(drawingStore.actions.setDialogStateLoading(true));\n\n        case 3:\n          _context13.prev = 3;\n          _context13.next = 6;\n          return call(drawingApi.getInitDataForRevise, payload);\n\n        case 6:\n          _yield$call7 = _context13.sent;\n          next_revision = _yield$call7.next_revision;\n          _context13.next = 10;\n          return putResolve(drawingStore.actions.setRevisionDialogDetail({\n            new_revision: next_revision\n          }));\n\n        case 10:\n          _context13.next = 12;\n          return put(drawingStore.actions.setRevisionDialogOpen(true));\n\n        case 12:\n          _context13.next = 18;\n          break;\n\n        case 14:\n          _context13.prev = 14;\n          _context13.t0 = _context13[\"catch\"](3);\n          _context13.next = 18;\n          return errorSaga.handleError(_context13.t0);\n\n        case 18:\n          _context13.next = 20;\n          return put(drawingStore.actions.setDialogStateLoading(false));\n\n        case 20:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[3, 14]]);\n}\nexport function saveNewRev(_ref6) {\n  var payload, drawingId, revision, _yield$call8, message;\n\n  return _regeneratorRuntime.wrap(function saveNewRev$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          payload = _ref6.payload;\n          _context14.next = 3;\n          return put(drawingStore.actions.setRevisionDialogLoading(true));\n\n        case 3:\n          _context14.prev = 3;\n          drawingId = payload.drawingId, revision = payload.revision;\n          _context14.next = 7;\n          return call(drawingApi.saveRevision, drawingId, revision);\n\n        case 7:\n          _yield$call8 = _context14.sent;\n          message = _yield$call8.message;\n          _context14.next = 11;\n          return put(drawingStore.actions.setRevisionDialogOpen(false));\n\n        case 11:\n          _context14.next = 13;\n          return call(closeDrawingDialog);\n\n        case 13:\n          _context14.next = 15;\n          return put(commonStore.actions.setSuccessMessage(message));\n\n        case 15:\n          _context14.next = 21;\n          break;\n\n        case 17:\n          _context14.prev = 17;\n          _context14.t0 = _context14[\"catch\"](3);\n          _context14.next = 21;\n          return errorSaga.handleError(_context14.t0);\n\n        case 21:\n          _context14.next = 23;\n          return put(drawingStore.actions.setRevisionDialogLoading(false));\n\n        case 23:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14, null, [[3, 17]]);\n}\nexport function openCreatePartDialog(_ref7) {\n  var payload, drawingDetail;\n  return _regeneratorRuntime.wrap(function openCreatePartDialog$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          payload = _ref7.payload;\n          _context15.next = 3;\n          return put(drawingStore.actions.setDialogStateLoading(true));\n\n        case 3:\n          _context15.prev = 3;\n          return _context15.delegateYield(select(drawingStore.selectDetail), \"t0\", 5);\n\n        case 5:\n          drawingDetail = _context15.t0;\n          _context15.next = 8;\n          return putResolve(commonStore.actions.setUserValueDrawing({\n            description: '',\n            entity_id: drawingDetail.drawing_id,\n            value: drawingDetail.id\n          }));\n\n        case 8:\n          _context15.next = 10;\n          return put(partStore.sagaOpenCreateDialog(payload));\n\n        case 10:\n          _context15.next = 16;\n          break;\n\n        case 12:\n          _context15.prev = 12;\n          _context15.t1 = _context15[\"catch\"](3);\n          _context15.next = 16;\n          return errorSaga.handleError(_context15.t1);\n\n        case 16:\n          _context15.next = 18;\n          return put(drawingStore.actions.setDialogStateLoading(false));\n\n        case 18:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[3, 12]]);\n}\n\nfunction drawingSaga() {\n  return _regeneratorRuntime.wrap(function drawingSaga$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeEvery(drawingStore.sagaGetList, getDrawingList);\n\n        case 2:\n          _context16.next = 4;\n          return takeEvery(drawingStore.sagaOpenCreateDialog, openDrawingCreateDialog);\n\n        case 4:\n          _context16.next = 6;\n          return takeEvery(drawingStore.sagaChangeUserJob, changeUserJob);\n\n        case 6:\n          _context16.next = 8;\n          return takeEvery(drawingStore.sagaCreate, createDrawing);\n\n        case 8:\n          _context16.next = 10;\n          return takeEvery(drawingStore.sagaCloseDialog, closeDrawingDialog);\n\n        case 10:\n          _context16.next = 12;\n          return takeEvery(drawingStore.sagaOpenUpdateDialog, openDrawingUpdateDialog);\n\n        case 12:\n          _context16.next = 14;\n          return takeEvery(drawingStore.sagaUpdate, updateDrawing);\n\n        case 14:\n          _context16.next = 16;\n          return takeEvery(drawingStore.sagaOpenRevDialog, openRevisionDialog);\n\n        case 16:\n          _context16.next = 18;\n          return takeEvery(drawingStore.sagaSaveNewRev, saveNewRev);\n\n        case 18:\n          _context16.next = 20;\n          return takeEvery(drawingStore.sagaOpenCreatePartDialog, openCreatePartDialog);\n\n        case 20:\n          _context16.next = 22;\n          return takeEvery(drawingStore.sagaGetDrawingPartList, getDrawingPartList);\n\n        case 22:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nexport default drawingSaga;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/saga/drawing.saga.ts"],"names":["fetchDrawingInitDataForList","fetchDrawingInitDataForCE","fetchDrawingList","fetchDrawingPartList","getDrawingPartList","getDrawingList","openDrawingCreateDialog","changeUserJob","createDrawing","closeDrawingDialog","openDrawingUpdateDialog","updateDrawing","openRevisionDialog","saveNewRev","openCreatePartDialog","drawingSaga","takeEvery","put","putResolve","select","call","all","errorSaga","drawingStore","commonStore","advancedFilterActions","specificationStore","partStore","tagStore","_","getDefaultValues","fetchSpecificationDetail","drawingApi","selectUserValueJob","userJob","getInitDataForList","job_id_pk","value","data","isNull","selected_job","actions","setUserValueJob","setInitDataForList","jobId","getInitDataForCE","permissions","user_job","dataInit","detailDefaultValue","parameters","drawing_purpose","file_prefix","file_type","drawing_format","job_id","drawingPurpose","find","DWPU","id","properties","exclude_from","isString","size","excludeList","C","O","S","excludeFrom","split","forIn","key","includes","setInitDataForCE","setDetail","tableState","selectTableState","searchQuery","selectSearchQuery","filterData","selectFilterData","drawingGroup","selectDrawingGroupId","page","per_page","getList","s","drawing_group_id","setTableState","total_items","setDataList","drawings","drawingId","getDetail","drawing","setComponentList","item_list","setDialogStateLoading","selectDetail","drawingDetail","handleError","setLoadingPage","selectPermissions","view","setDialogStateOpen","payload","create","message","resetDetail","setSuccessMessage","setDialogStateTab","selectEntity","entity","specDetail","drawing_id","sagaGetList","update","getInitDataForRevise","next_revision","setRevisionDialogDetail","new_revision","setRevisionDialogOpen","setRevisionDialogLoading","revision","saveRevision","setUserValueDrawing","description","entity_id","sagaOpenCreateDialog","sagaChangeUserJob","sagaCreate","sagaCloseDialog","sagaOpenUpdateDialog","sagaUpdate","sagaOpenRevDialog","sagaSaveNewRev","sagaOpenCreatePartDialog","sagaGetDrawingPartList"],"mappings":"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","sourcesContent":["import { takeEvery, put, putResolve } from 'redux-saga/effects'\nimport { select, call, all } from 'typed-redux-saga'\n\nimport * as errorSaga from '@/store/saga/errorSaga'\n\nimport {\n  drawingStore,\n  commonStore,\n  advancedFilterActions,\n  specificationStore,\n  partStore,\n  tagStore\n} from '@/store/reducers'\n\nimport _ from 'lodash'\nimport { getDefaultValues } from '@/utils/getDefaultValues'\n\nimport { fetchSpecificationDetail } from '@/store/saga/specification.saga'\n\nimport drawingApi from '@/apis/drawing.api'\n\nexport function* fetchDrawingInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob)\n  const data = yield call(drawingApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  })\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {}\n  }\n  if (userJob.value === -1 || userJob.value === -2) {\n    data.selected_job = userJob\n  }\n  yield put(commonStore.actions.setUserValueJob(data.selected_job))\n  yield put(drawingStore.actions.setInitDataForList(data))\n}\n\nexport function* fetchDrawingInitDataForCE(jobId = null) {\n  const userJob = yield* select(commonStore.selectUserValueJob)\n  const { permissions, user_job, ...dataInit } = yield call(drawingApi.getInitDataForCE, {\n    job_id_pk: jobId || userJob.value\n  })\n  const detailDefaultValue = getDefaultValues(dataInit.parameters, {\n    drawing_purpose: 'DWPU',\n    file_prefix: 'FPRE',\n    file_type: 'FTYP',\n    drawing_format: 'PLFO'\n  })\n  // if you are in create mode, then set jobId for the assembly form\n  if (_.isNull(jobId)) {\n    detailDefaultValue.job_id = userJob.value\n  }\n  if (!_.isNull(detailDefaultValue.drawing_purpose) && _.isNull(jobId)) {\n    const drawingPurpose = _.find(dataInit.parameters.DWPU, {\n      id: detailDefaultValue.drawing_purpose\n    })\n    const { exclude_from } = drawingPurpose?.properties\n    if (_.isString(exclude_from) && _.size(exclude_from) > 0) {\n      const excludeList = {\n        C: 'exclude_from_customer',\n        O: 'exclude_from_other',\n        S: 'exclude_from_supplier'\n      }\n      const excludeFrom = exclude_from.split(';') // C;O;S => [C, O, S]\n      _.forIn(excludeList, (value, key) => {\n        if (excludeFrom.includes(key)) {\n          detailDefaultValue[value] = true\n        }\n      })\n    }\n  }\n  yield put(drawingStore.actions.setInitDataForCE(dataInit))\n  yield put(drawingStore.actions.setDetail(detailDefaultValue))\n}\n\nexport function* fetchDrawingList() {\n  const { tableState, searchQuery, filterData, userJob, drawingGroup } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    drawingGroup: select(drawingStore.selectDrawingGroupId)\n  })\n  if (!userJob.value) {\n    return\n  }\n  const { page, per_page } = tableState\n  const data = yield call(drawingApi.getList, {\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    drawing_group_id: drawingGroup,\n    ...filterData\n  })\n  yield put(commonStore.actions.setTableState({ total_items: data.total_items }))\n  yield put(drawingStore.actions.setDataList(data.drawings))\n}\n\nexport function* fetchDrawingPartList(drawingId: number) {\n  const { drawing } = yield call(drawingApi.getDetail, drawingId)\n  yield put(drawingStore.actions.setComponentList(drawing.item_list))\n}\n\nexport function* getDrawingPartList() {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n  try {\n    const drawingDetail = yield* select(drawingStore.selectDetail)\n    yield call(fetchDrawingPartList, drawingDetail.id)\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nexport function* getDrawingList() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchDrawingInitDataForList)\n    const permissions = yield* select(drawingStore.selectPermissions)\n    if (permissions?.view) {\n      yield call(fetchDrawingList)\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nexport function* openDrawingCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchDrawingInitDataForCE)\n    yield put(drawingStore.actions.setDialogStateOpen(true))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nexport function* changeUserJob({ payload }: ReturnType<typeof drawingStore.sagaChangeUserJob>) {\n  yield putResolve(commonStore.actions.setUserValueJob(payload))\n  yield call(getDrawingList)\n}\n\nexport function* createDrawing({ payload }: ReturnType<typeof drawingStore.sagaCreate>) {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n  try {\n    const { message } = yield call(drawingApi.create, payload)\n    const userJob = yield* select(commonStore.selectUserValueJob)\n    yield putResolve(drawingStore.actions.resetDetail({ userJob }))\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(drawingStore.actions.setDialogStateTab(0))])\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nexport function* closeDrawingDialog() {\n  try {\n    const userJob = yield* select(commonStore.selectUserValueJob)\n    const entity = yield* select(commonStore.selectEntity)\n    const specDetail = yield* select(specificationStore.selectDetail)\n    yield putResolve(drawingStore.actions.setDialogStateOpen(false))\n    if (entity === 'specification') {\n      yield put(commonStore.actions.setLoadingPage(true))\n      const { drawing_id } = yield call(fetchSpecificationDetail, specDetail.id)\n      yield put(specificationStore.actions.setDetail({ drawing_id }))\n      yield put(commonStore.actions.setLoadingPage(false))\n    } else if (entity === 'element') {\n      yield put(tagStore.sagaGetList())\n    } else {\n      yield call(getDrawingList)\n    }\n    yield put(drawingStore.actions.resetDetail({ userJob }))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n}\n\nexport function* openDrawingUpdateDialog({ payload: id }: ReturnType<typeof drawingStore.sagaOpenUpdateDialog>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const { drawing } = yield call(drawingApi.getDetail, id)\n    drawing.drawing_id = drawing.drawing_id.split(' ')[1]\n    yield call(fetchDrawingInitDataForCE, drawing.job_id)\n    yield putResolve(drawingStore.actions.setDetail(drawing))\n    yield put(drawingStore.actions.setComponentList(drawing.item_list))\n    yield put(drawingStore.actions.setDialogStateOpen(true))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nexport function* updateDrawing({ payload }: ReturnType<typeof drawingStore.sagaUpdate>) {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n\n  try {\n    const { id, drawing } = payload\n    const { message } = yield call(drawingApi.update, id, drawing)\n    yield call(closeDrawingDialog)\n    yield put(commonStore.actions.setSuccessMessage(message))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nexport function* openRevisionDialog({ payload }: ReturnType<typeof drawingStore.sagaOpenRevDialog>) {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n\n  try {\n    const { next_revision } = yield call(drawingApi.getInitDataForRevise, payload)\n    yield putResolve(\n      drawingStore.actions.setRevisionDialogDetail({\n        new_revision: next_revision\n      })\n    )\n    yield put(drawingStore.actions.setRevisionDialogOpen(true))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nexport function* saveNewRev({ payload }: ReturnType<typeof drawingStore.sagaSaveNewRev>) {\n  yield put(drawingStore.actions.setRevisionDialogLoading(true))\n\n  try {\n    const { drawingId, revision } = payload\n    const { message } = yield call(drawingApi.saveRevision, drawingId, revision)\n    yield put(drawingStore.actions.setRevisionDialogOpen(false))\n    yield call(closeDrawingDialog)\n    yield put(commonStore.actions.setSuccessMessage(message))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n\n  yield put(drawingStore.actions.setRevisionDialogLoading(false))\n}\n\nexport function* openCreatePartDialog({ payload }: ReturnType<typeof drawingStore.sagaOpenCreatePartDialog>) {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n  try {\n    const drawingDetail = yield* select(drawingStore.selectDetail)\n    yield putResolve(\n      commonStore.actions.setUserValueDrawing({\n        description: '',\n        entity_id: drawingDetail.drawing_id,\n        value: drawingDetail.id\n      })\n    )\n    yield put(partStore.sagaOpenCreateDialog(payload))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nfunction* drawingSaga() {\n  yield takeEvery(drawingStore.sagaGetList, getDrawingList)\n  yield takeEvery(drawingStore.sagaOpenCreateDialog, openDrawingCreateDialog)\n  yield takeEvery(drawingStore.sagaChangeUserJob, changeUserJob)\n  yield takeEvery(drawingStore.sagaCreate, createDrawing)\n  yield takeEvery(drawingStore.sagaCloseDialog, closeDrawingDialog)\n  yield takeEvery(drawingStore.sagaOpenUpdateDialog, openDrawingUpdateDialog)\n  yield takeEvery(drawingStore.sagaUpdate, updateDrawing)\n  yield takeEvery(drawingStore.sagaOpenRevDialog, openRevisionDialog)\n  yield takeEvery(drawingStore.sagaSaveNewRev, saveNewRev)\n  yield takeEvery(drawingStore.sagaOpenCreatePartDialog, openCreatePartDialog)\n  yield takeEvery(drawingStore.sagaGetDrawingPartList, getDrawingPartList)\n}\n\nexport default drawingSaga\n"]},"metadata":{},"sourceType":"module"}