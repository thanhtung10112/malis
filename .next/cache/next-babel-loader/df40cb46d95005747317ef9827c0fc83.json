{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createSelector, createAction } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nimport _ from 'lodash';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nimport isAssembly from '@/utils/isAssembly';\nimport { manufacturerStore } from '@/store/reducers';\nexport const name = 'part';\nexport const itemDetail = {\n  job_id: null,\n  drawing_id: null,\n  dpn: '',\n  reference_to: null,\n  mass: 0,\n  unit: null,\n  manufacturer_equiv: null,\n  manufacturers: [],\n  material_equiv: null,\n  descriptions: [],\n  manufacturer_equiv_standards: [],\n  material_equiv_standards: [],\n  additional_attributes: {}\n};\nexport const assemblyDetail = {\n  job_id: null,\n  drawing_id: null,\n  dpn: '',\n  unit: null,\n  descriptions: [],\n  items: [],\n  manufacturers: [],\n  is_assembly: true,\n  additional_attributes: {},\n  drawing_items: []\n};\nexport const initialState = {\n  partList: [],\n  initData: {\n    parameters: {\n      MAAT: [],\n      PLLA: [],\n      UNIT: [],\n      PAAT: []\n    }\n  },\n  confirmRef: {\n    open: false,\n    message: ''\n  },\n  manufacturer: {\n    detail: manufacturerStore.initialState.detail,\n    dialogState: manufacturerStore.initialState.dialogState,\n    initData: _objectSpread(_objectSpread({}, manufacturerStore.initialState.initDataForCE), {}, {\n      permissions: null\n    })\n  }\n};\nconst partSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    addPart(state, {\n      payload\n    }) {\n      const part = _objectSpread(_objectSpread({}, payload), {}, {\n        loading: false,\n        tab: 0,\n        historyLogs: []\n      });\n\n      state.partList.push(part);\n    },\n\n    setInitData(state, {\n      payload\n    }) {\n      state.initData = payload;\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      const {\n        length\n      } = state.partList;\n\n      if (length > 0) {\n        state.partList[length - 1].historyLogs = payload;\n      }\n    },\n\n    setPartLoading(state, {\n      payload\n    }) {\n      const currentPart = _.last(state.partList);\n\n      const {\n        length\n      } = state.partList;\n\n      if (length <= 0) {\n        return;\n      }\n\n      if (currentPart.loading !== payload) {\n        state.partList[length - 1].loading = payload;\n      }\n    },\n\n    updateCurrentPart(state, {\n      payload\n    }) {\n      const {\n        length\n      } = state.partList;\n      state.partList[length - 1].detail = _objectSpread(_objectSpread({}, state.partList[length - 1].detail), payload);\n    },\n\n    setConfirmRef(state, {\n      payload\n    }) {\n      state.confirmRef.open = payload.open;\n      state.confirmRef.message = payload.message;\n    },\n\n    setConfirmRefOpen(state, {\n      payload\n    }) {\n      state.confirmRef.open = payload;\n    },\n\n    resetCurrentPart(state, {\n      payload\n    }) {\n      const {\n        length\n      } = state.partList;\n      const {\n        userJob,\n        userDrawing,\n        generateCode\n      } = payload;\n      const currentPart = state.partList[length - 1].detail;\n      const initDetail = isAssembly(currentPart) ? assemblyDetail : itemDetail;\n      const defaultValues = getDefaultValues(state.initData.parameters, {\n        unit: 'UNIT'\n      }, initDetail);\n      defaultValues.job_id = userJob.value;\n      defaultValues.drawing_id = userDrawing.value === -1 ? null : userDrawing;\n\n      if (generateCode) {\n        defaultValues.dpn = generateCode;\n      }\n\n      state.partList[length - 1].detail = defaultValues;\n    },\n\n    removePart(state) {\n      state.partList.pop();\n    },\n\n    setPartTab(state, {\n      payload\n    }) {\n      const currentPart = _.last(state.partList);\n\n      const {\n        length\n      } = state.partList;\n\n      if (length <= 0) {\n        return;\n      }\n\n      if (currentPart.tab !== payload) {\n        state.partList[length - 1].tab = payload;\n      }\n    },\n\n    // Manufacturer\n    setManuDetail(state, {\n      payload\n    }) {\n      state.manufacturer.detail = _objectSpread(_objectSpread({}, state.manufacturer.detail), payload);\n    },\n\n    setManuDialogOpen(state, {\n      payload\n    }) {\n      state.manufacturer.dialogState.open = payload;\n    },\n\n    setManuDialogLoading(state, {\n      payload\n    }) {\n      state.manufacturer.dialogState.loading = payload;\n    },\n\n    setManuInitData(state, {\n      payload\n    }) {\n      state.manufacturer.initData = payload;\n    },\n\n    addManufacturer(state, {\n      payload\n    }) {\n      const {\n        length\n      } = state.partList;\n      state.partList[length - 1].detail.manufacturers.push(payload);\n    },\n\n    setDrawingItems(state, {\n      payload\n    }) {\n      const {\n        length\n      } = state.partList;\n\n      if (length <= 0) {\n        return;\n      }\n\n      ;\n      state.partList[length - 1].detail.drawing_items = payload;\n    }\n\n  }\n});\nexport const {\n  actions\n} = partSlice; // saga actions\n\nexport const sagaUpdate = createAction(`${name}/${actionTypes.UPDATE}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`);\nexport const sagaSelectEquiv = createAction(`${name}/SELECT_EQUIV`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaGetItemCopy = createAction(`${name}/GET_ITEM_COPY`);\nexport const sagaChangeDrawing = createAction(`${name}/CHANGE_DRAWING`);\nexport const sagaGetPartRefItem = createAction(`${name}/GET_PART_REF_ITEM`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaGetDrawingItems = createAction(`${name}/GET_DRAWING_ITEMS`); // saga actions Manufacturer\n\nexport const sagaOpenManuDialog = createAction(`${name}/OPEN_UPDATE_MANU_DIALOG`);\nexport const sagaCreateManu = createAction(`${name}/CREATE_MANU`);\nexport const sagaCloseManuDialog = createAction(`${name}/CLOSE_MANU_DIALOG`);\nexport const sagaGetManuId = createAction(`${name}/GET_MANU_ID`); // selectors\n\nexport const selectState = state => state[name];\nexport const selectPartList = createSelector(selectState, state => state.partList);\nexport const selectParameters = createSelector(selectState, state => state.initData.parameters);\nexport const selectCurrentPart = createSelector(selectState, state => _.last(state.partList));\nexport const selectConfirmRef = createSelector(selectState, state => state.confirmRef);\nexport const selectPartManu = createSelector(selectState, state => state.manufacturer);\nexport const selectDrawingItems = createSelector(selectState, state => {\n  const {\n    partList\n  } = state;\n\n  if (partList.length <= 0) {\n    return [];\n  }\n\n  const {\n    detail\n  } = _.last(partList);\n\n  return detail.drawing_items || [];\n});\nexport default partSlice;","map":null,"metadata":{},"sourceType":"module"}