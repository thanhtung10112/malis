{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '@/styles/page/layout';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport { useTranslation } from 'next-i18next';\nimport { AppLayout, EditIcon, DataTableCellExpand, CreateIcon, AppAutocompleteStyled, AppAutocompleteStyledAsync, DeleteIcon, useConfirm, DialogPart } from '@/components';\nimport { assemblyStore, commonStore, partStore } from '@/store/reducers';\nimport { defaultProperties, iconColumn, centerColumn, rightColumn, descriptionsColumn } from '@/utils/columnProperties';\nimport AppNumber from '@/helper/AppNumber';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nimport _ from 'lodash';\n\nconst AssembliesPage = () => {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation('assembly');\n  const {\n    confirm\n  } = useConfirm();\n  const breadcrumbData = useMemo(() => [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Basic Options',\n    href: '/drawings'\n  }, {\n    label: 'Assemblies Management',\n    href: '/assemblies'\n  }], []);\n  const dispatch = useDispatch();\n  const permissions = useSelector(assemblyStore.selectPermissions);\n\n  const _useSelector = useSelector(assemblyStore.selectInitDataForList),\n        {\n    column_tooltips,\n    wiki_page\n  } = _useSelector,\n        initDataForList = _objectWithoutProperties(_useSelector, [\"column_tooltips\", \"wiki_page\"]);\n\n  const userJob = useSelector(commonStore.selectUserValueJob);\n  const userDrawing = useSelector(commonStore.selectUserValueDrawing);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const currentLang = useSelector(commonStore.selectCurrentLanguage);\n  const dataList = useSelector(assemblyStore.selectDataList);\n  useEffect(() => {\n    return () => dispatch(commonStore.actions.resetUserValue());\n  }, []);\n\n  const handleOpenCreateDialog = () => {\n    dispatch(partStore.sagaOpenCreateDialog('assembly'));\n  };\n\n  const handleChangeUserJob = (event, optionValue) => {\n    dispatch(assemblyStore.sagaChangeUserJob(optionValue));\n  };\n\n  const handleChangeUserDrawing = (event, optionValue) => {\n    dispatch(assemblyStore.sagaChangeUserDrawing(optionValue));\n  };\n\n  const handleOpenUpdateDialog = id => () => {\n    dispatch(partStore.sagaOpenUpdateDialog({\n      id,\n      entity: 'assembly'\n    }));\n  };\n\n  const handleDeleteAssemblies = async () => {\n    const description = getMessageConfirm(t, 'assembly', selectedRows, 'delete');\n    const result = await confirm({\n      description\n    });\n\n    if (result === 'OK') {\n      const parts = _.map(selectedRows, partId => {\n        const {\n          dpn,\n          id\n        } = _.find(dataList, {\n          id: partId\n        });\n\n        return {\n          entity_id: dpn,\n          id\n        };\n      });\n\n      dispatch(assemblyStore.sagaRemove(parts));\n    }\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, defaultProperties), iconColumn), {}, {\n    description: column_tooltips.edit,\n    field: 'id',\n    headerName: 'Edit',\n    renderCell: params => {\n      return /*#__PURE__*/_jsx(EditIcon, {\n        onClick: handleOpenUpdateDialog(params.value)\n      });\n    }\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.dpn,\n    field: 'dpn',\n    headerName: 'Assembly #',\n    flex: 0.2\n  }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), descriptionsColumn(currentLang)), {}, {\n    description: column_tooltips.descriptions,\n    flex: 0.3\n  }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), rightColumn), {}, {\n    description: column_tooltips.mass,\n    headerName: 'Mass (kg)',\n    flex: 0.2,\n    field: 'mass',\n\n    renderCell(params) {\n      const value = AppNumber.format(params.value, {\n        precision: 4\n      });\n      return /*#__PURE__*/_jsx(DataTableCellExpand, {\n        value: value,\n        width: params.colDef.width\n      });\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), centerColumn), {}, {\n    description: column_tooltips.raw_unit,\n    field: 'raw_unit',\n    headerName: 'Unit'\n  })];\n  const buttonsPage = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n    onClick: handleOpenCreateDialog,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create) || userJob.value < 0 || !(userJob === null || userJob === void 0 ? void 0 : userJob.value)\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n    onClick: handleDeleteAssemblies,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.delete) || selectedRows.length === 0 || userJob.value < 0\n  }];\n\n  const Options = /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(AppAutocompleteStyled, {\n      className: classes.controlAutocomplete,\n      width: 200,\n      label: \"Jobs\",\n      options: initDataForList.jobs,\n      value: userJob,\n      renderOption: option => option.description,\n      primaryKeyOption: \"value\",\n      onChange: handleChangeUserJob\n    }), /*#__PURE__*/_jsx(AppAutocompleteStyledAsync, {\n      disabled: !(userJob === null || userJob === void 0 ? void 0 : userJob.value),\n      width: 250,\n      label: \"Drawings\",\n      className: classes.controlAutocomplete,\n      compName: \"drawing_list\",\n      additionalData: {\n        limit_to_job: userJob.value,\n        include_all_drawings_option: true\n      },\n      onChange: handleChangeUserDrawing,\n      value: userDrawing,\n      defaultOptions: [commonStore.initialState.userValue.drawing]\n    })]\n  });\n\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: \"assembly\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: wiki_page,\n    searchProps: {\n      width: 320\n    },\n    buttons: buttonsPage,\n    permissions: permissions,\n    tableProps: {\n      columns\n    },\n    Dialogs: /*#__PURE__*/_jsx(DialogPart, {}),\n    Options: Options\n  });\n};\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'assembly', 'make_a_list', 'advanced_filter', 'item', 'manufacturer']);\nexport default AssembliesPage;","map":null,"metadata":{},"sourceType":"module"}