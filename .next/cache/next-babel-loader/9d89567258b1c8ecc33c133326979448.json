{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { useTranslation } from 'next-i18next';\nimport { AppAutocompleteAsync, DialogMain } from '@/components';\nimport { partStore } from '@/store/reducers';\n\nconst DialogCopyItem = props => {\n  const {\n    open,\n    onClose\n  } = props;\n  const {\n    t\n  } = useTranslation('item');\n  const {\n    0: itemSelected,\n    1: setItemSelected\n  } = useState({\n    value: null,\n    entity_id: '',\n    description: ''\n  }); // when close this dialog, then reset itemSelected\n\n  useEffect(() => {\n    if (!open) {\n      setItemSelected({\n        value: null,\n        entity_id: '',\n        description: ''\n      });\n    }\n  }, [open]);\n  const dispatch = useDispatch();\n\n  const handleOk = event => {\n    dispatch(partStore.sagaGetItemCopy(itemSelected));\n    onClose(event);\n  };\n  /**\n   * @param {DataForDropdown} optionValue\n   */\n\n\n  const handleSelectItem = (event, optionValue) => {\n    setItemSelected(optionValue);\n  };\n\n  return /*#__PURE__*/_jsx(DialogMain, {\n    title: t('form.title.copy_attribute'),\n    open: open,\n    onOk: handleOk,\n    onClose: onClose,\n    okText: t('common:button.save'),\n    children: /*#__PURE__*/_jsx(AppAutocompleteAsync, {\n      style: {\n        marginTop: 4\n      },\n      label: \"Part #\",\n      compName: \"part_list\",\n      onChange: handleSelectItem\n    })\n  });\n};\n\nexport default DialogCopyItem;","map":null,"metadata":{},"sourceType":"module"}