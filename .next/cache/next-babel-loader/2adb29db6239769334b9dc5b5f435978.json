{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Snackbar } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { commonStore } from '@/store/reducers';\n\nfunction Alert(props) {\n  return /*#__PURE__*/_jsx(MuiAlert, _objectSpread({\n    elevation: 6,\n    variant: \"filled\"\n  }, props));\n}\n\nconst AppMessagePopup = () => {\n  const dispatch = useDispatch();\n  const messageState = useSelector(commonStore.selectMessageState);\n\n  const handleClose = () => {\n    dispatch(commonStore.actions.setDisplayMessage(false));\n  };\n\n  return /*#__PURE__*/_jsx(Snackbar, {\n    open: messageState.display,\n    message: messageState.message,\n    autoHideDuration: 3000,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    onClose: handleClose,\n    children: /*#__PURE__*/_jsx(Alert, {\n      onClose: handleClose,\n      severity: messageState.status,\n      children: messageState.message\n    })\n  });\n};\n\nexport default AppMessagePopup;","map":null,"metadata":{},"sourceType":"module"}