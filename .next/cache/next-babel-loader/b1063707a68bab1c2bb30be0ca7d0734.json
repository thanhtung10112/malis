{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport * as _ from 'lodash';\nimport { Select, MenuItem, FormControl } from '@material-ui/core';\nimport useStyles from '../styles'; // Conjunction, column name, comparator DD and value fields\n// Those components will be used in the rules and groups\n\nfunction ComparatorOptions(_ref) {\n  var rules = _ref.rules,\n      columnOptions = _ref.columnOptions,\n      options = _ref.options,\n      disabled = _ref.disabled,\n      onComparatorChange = _ref.onComparatorChange;\n\n  var selectedColumn = _.find(columnOptions, {\n    id: rules.id\n  });\n\n  var classes = useStyles();\n  var menuItems = [];\n  var i = 0;\n\n  var _iterator = _createForOfIteratorHelper(options),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var comparator = _step.value;\n\n      if (comparator.for_type.includes(selectedColumn.column_type)) {\n        menuItems.push( /*#__PURE__*/_jsx(MenuItem, {\n          value: comparator.value,\n          children: comparator.description\n        }, \"\".concat(comparator.value, \"-\").concat(i)));\n        i++;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var handleComparatorChange = function handleComparatorChange(event) {\n    // rules.comparator = event.target.value\n    onComparatorChange(event.target.value); // forceRerender()\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(FormControl, {\n      variant: \"outlined\",\n      size: \"small\",\n      style: {\n        marginRight: '0.8rem',\n        width: '10rem'\n      },\n      className: classes.wrapSelect,\n      children: /*#__PURE__*/_jsx(Select, {\n        disabled: disabled,\n        value: rules.comparator,\n        onChange: handleComparatorChange,\n        children: menuItems\n      })\n    })\n  });\n}\n\nexport default ComparatorOptions;","map":null,"metadata":{},"sourceType":"module"}