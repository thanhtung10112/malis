{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Paper } from '@material-ui/core';\nimport { DataTableTextField, DialogCodeEditor, DataTableCellExpand, DataTable } from '@/components/index';\nimport { useController } from 'react-hook-form';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport * as columnProperties from '@/utils/columnProperties';\n\nfunction TableAttributes(props) {\n  var attributes = props.attributes,\n      parameterId = props.parameterId,\n      config = props.config,\n      formProps = _objectWithoutProperties(props, [\"attributes\", \"parameterId\", \"config\"]);\n\n  var attributeList = React.useMemo(function () {\n    if (_.isEmpty(attributes)) {\n      return [];\n    }\n\n    return attributes.split(';').map(function (attr) {\n      return {\n        attr: attr\n      };\n    });\n  }, [attributes]);\n\n  var _React$useState = React.useState({\n    isOpen: false,\n    value: '',\n    attribute: '',\n    mode: '',\n    guideline: ''\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      codeEditorState = _React$useState2[0],\n      setCodeEditorState = _React$useState2[1];\n\n  var _useController = useController(_objectSpread({}, formProps)),\n      field = _useController.field;\n\n  var getValueAttribute = function getValueAttribute(attr) {\n    var valueAttr = field.value[attr];\n    return valueAttr || '';\n  };\n\n  var isMarkdownField = function isMarkdownField(attr) {\n    var queryFields = ['columns_definition', 'pre_select_query', 'from_clause'];\n    return parameterId === 'TTIP' || parameterId === 'MKAL' && queryFields.includes(attr);\n  };\n\n  var onChangeAttr = function onChangeAttr(id, value) {\n    field.onChange(immer(field.value, function (draft) {\n      draft[id] = value;\n    }));\n  };\n\n  var handleDbClickToEdit = function handleDbClickToEdit(params, event) {\n    var attr = params.row.attr;\n\n    if (isMarkdownField(attr)) {\n      handleOpenCodeEditor(attr);\n      event.stopPropagation();\n    }\n  };\n\n  var handleOpenCodeEditor = function handleOpenCodeEditor(attr) {\n    setCodeEditorState(function (prevState) {\n      return immer(prevState, function (draft) {\n        var _config$attributes$at, _config$attributes$at2;\n\n        draft.value = getValueAttribute(attr);\n        draft.attribute = attr;\n        draft.mode = (config === null || config === void 0 ? void 0 : (_config$attributes$at = config.attributes[attr]) === null || _config$attributes$at === void 0 ? void 0 : _config$attributes$at.mode) || 'json';\n        draft.guideline = (config === null || config === void 0 ? void 0 : (_config$attributes$at2 = config.attributes[attr]) === null || _config$attributes$at2 === void 0 ? void 0 : _config$attributes$at2.guideline) || '(no guideline)';\n        draft.isOpen = true;\n      });\n    });\n  };\n\n  var onCodeEditorClose = function onCodeEditorClose() {\n    setCodeEditorState(function (prevState) {\n      return immer(prevState, function (draft) {\n        draft.isOpen = false;\n      });\n    });\n  };\n\n  var onCodeEditorConfirm = function onCodeEditorConfirm(value, attribute) {\n    field.onChange(immer(field.value, function (draft) {\n      draft[attribute] = value;\n    }));\n    onCodeEditorClose();\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Paper, {\n      elevation: 1,\n      children: /*#__PURE__*/_jsx(DataTable, {\n        tableHeight: 200,\n        rows: attributeList,\n        hideFooter: true,\n        onCellDoubleClick: handleDbClickToEdit,\n        getRowId: function getRowId(params) {\n          return params.attr;\n        },\n        columns: [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n          field: 'attr',\n          headerName: 'Attribute',\n          sortable: false,\n          width: 150\n        }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Value')), {}, {\n          field: 'raw_value',\n          flex: 0.75,\n          valueGetter: function valueGetter(params) {\n            var attr = params.row.attr;\n            var value = getValueAttribute(attr);\n            return value;\n          },\n          renderEditCell: function renderEditCell(params) {\n            return /*#__PURE__*/_jsx(DataTableTextField, {\n              params: params,\n              onChangeValue: onChangeAttr\n            });\n          },\n          renderCell: function renderCell(params) {\n            var attr = params.row.attr;\n\n            if (isMarkdownField(attr)) {\n              return /*#__PURE__*/_jsx(\"div\", {\n                children: params.value\n              });\n            }\n\n            return /*#__PURE__*/_jsx(DataTableCellExpand, {\n              value: params.value,\n              width: params.colDef.width\n            });\n          }\n        })]\n      })\n    }), /*#__PURE__*/_jsx(DialogCodeEditor, _objectSpread(_objectSpread({}, codeEditorState), {}, {\n      onClose: onCodeEditorClose,\n      onConfirm: onCodeEditorConfirm\n    }))]\n  });\n}\n\nexport default TableAttributes;","map":null,"metadata":{},"sourceType":"module"}