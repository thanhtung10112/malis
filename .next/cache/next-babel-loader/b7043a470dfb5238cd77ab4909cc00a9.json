{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useMemo, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport { DialogMain, AppTabHistoryLog, FormControllerTabs, BtnHelp } from '@/components';\nimport TabGeneral from '../TabGeneral';\nimport TabAdditionalInfo from '../TabAdditionalInfo';\nimport TabOthers from '../TabOthers';\nimport Context from '../Context';\nimport _ from 'lodash';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { jobStore } from '@/store/reducers';\nimport * as constant from '@/utils/constant';\nimport getValidationSchema from '../validationSchema';\n\nfunction DialogJobCreateEdit() {\n  const {\n    t\n  } = useTranslation('job');\n  const validationSchema = useMemo(() => getValidationSchema(t), []);\n  const {\n    0: tab,\n    1: setTab\n  } = useState(0);\n  const jobForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  });\n  const dispatch = useDispatch();\n  const dialogState = useSelector(jobStore.selectDialogState);\n  const jobDetail = useSelector(jobStore.selectDetail);\n  const permissions = useSelector(jobStore.selectPermissions);\n  const {\n    wiki_page\n  } = useSelector(jobStore.selectInitDataForCE);\n\n  const isCreating = _.isNil(jobDetail.id);\n\n  useEffect(() => {\n    jobForm.reset(_objectSpread({}, jobDetail));\n    setTab(0);\n    dispatch(jobStore.actions.setTransferListUserGroup([]));\n  }, [jobDetail]);\n\n  const onCloseCreateEditDialog = () => {\n    jobForm.clearErrors();\n    dispatch(jobStore.sagaCloseDialog());\n  };\n\n  const onSubmitJobData = jobForm.handleSubmit(data => {\n    const payload = _.omit(data, [...constant.removalProperties, 'category', 'malis_version']);\n\n    payload.job_expediting_dates = payload.job_expediting_dates.map(exDate => {\n      if (_.isString(exDate.id)) {\n        return _.omit(exDate, 'id');\n      }\n\n      return exDate;\n    });\n    payload.job_currencies = payload.job_currencies.map(currency => ({\n      currency_id: currency.id,\n      rate: Number(currency.rate)\n    }));\n    payload.job_standard = payload.job_standard.map(job => _.omit(job, 'status'));\n    const formData = new FormData();\n    formData.append('job_info', JSON.stringify(_.omit(payload, 'logo')));\n\n    if (payload.logo) {\n      formData.append('logo', payload.logo);\n    }\n\n    if (isCreating) {\n      dispatch(jobStore.sagaCreate(formData));\n    } else {\n      dispatch(jobStore.sagaUpdate({\n        id: data.id,\n        formData\n      }));\n    }\n  });\n\n  const onChangeTab = (_, nextTab) => {\n    setTab(nextTab);\n  };\n\n  const handleChangeHistoryLogs = data => {\n    dispatch(jobStore.actions.setHistoryLogs(data));\n  };\n\n  const generalTab = {\n    label: t('common:tab.general'),\n    panel: /*#__PURE__*/_jsx(TabGeneral, {}),\n    errorKey: ['job_id', 'language', 'equipment_type', 'erection_site', 'people_responsible', 'squad_leader', 'job_users']\n  };\n  const additionalInfoTab = {\n    label: t('form.tab.additional_info'),\n    panel: /*#__PURE__*/_jsx(TabAdditionalInfo, {})\n  };\n  const otherTab = {\n    label: t('common:tab.others'),\n    panel: /*#__PURE__*/_jsx(TabOthers, {}),\n    errorKey: ['contract_no', 'contract_desc', 'credit_letter', 'logo']\n  };\n  const historyTab = {\n    label: t('common:tab.history'),\n    disabled: isCreating,\n    panel: /*#__PURE__*/_jsx(AppTabHistoryLog, {\n      isOpenDialog: dialogState.open,\n      data: dialogState.historyLogs,\n      onChange: handleChangeHistoryLogs,\n      entityId: jobDetail.id,\n      mode: \"horizonatal\",\n      tableHeight: 390,\n      descriptionRows: 25,\n      entity: \"job\"\n    })\n  };\n  const tabs = [generalTab, additionalInfoTab, otherTab, historyTab];\n  return /*#__PURE__*/_jsx(DialogMain, {\n    open: dialogState.open,\n    loading: dialogState.loading,\n    fullWidth: true,\n    maxWidth: \"md\",\n    title: /*#__PURE__*/_jsx(BtnHelp, {\n      title: isCreating ? t('form.title.create_job') : t('form.title.update_job'),\n      href: wiki_page\n    }),\n    onOk: onSubmitJobData,\n    onClose: onCloseCreateEditDialog,\n    height: 470,\n    okButtonProps: {\n      disabled: dialogState.loading || !(permissions === null || permissions === void 0 ? void 0 : permissions.edit) && !isCreating\n    },\n    okText: isCreating ? t('common:button.create') : t('common:button.update'),\n    children: /*#__PURE__*/_jsx(Context.Provider, {\n      value: {\n        isCreating\n      },\n      children: /*#__PURE__*/_jsx(FormControllerTabs, {\n        value: tab,\n        onChange: onChangeTab,\n        form: jobForm,\n        tabs: tabs\n      })\n    })\n  });\n}\n\nexport default DialogJobCreateEdit;","map":null,"metadata":{},"sourceType":"module"}