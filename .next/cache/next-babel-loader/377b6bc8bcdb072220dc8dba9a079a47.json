{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { useTranslation } from 'next-i18next';\nimport * as _ from 'lodash';\nimport { format as formatDate } from 'date-fns';\nimport { TreeItem } from '@material-ui/lab';\nimport { Cancel } from '@material-ui/icons';\nimport { IconButton, ButtonGroup, Tooltip } from '@material-ui/core';\nimport ColumnOptions from './ColumnOptions';\nimport ComparatorOptions from './ComparatorOptions';\nimport ConditionValue from './ConditionValue';\nimport { Unless } from 'react-if';\nimport useStyles from '../styles'; // A condition rule, which contains columns DD, comparators DD and value filed\n\nfunction ConditionRule({\n  ruleData,\n  parent: parentGroup,\n  forceParentRerender,\n  columnOptions,\n  comparatorOptions,\n  disabled\n}) {\n  const {\n    t\n  } = useTranslation(['advanced_filter']);\n  const classes = useStyles(); // trick for forcing rerender\n\n  const {\n    1: setValue\n  } = useState(0);\n\n  const forceRerender = () => {\n    setValue(value => value + 1);\n  };\n\n  const removeRule = condition_id => () => {\n    const newParentGroupConditions = parentGroup.conditions.filter(cond => cond.condition_id !== condition_id);\n    parentGroup.conditions = newParentGroupConditions;\n    forceParentRerender();\n  };\n\n  const handleColumnNameChange = value => {\n    const selectedColumn = _.find(columnOptions, {\n      id: value\n    });\n\n    ruleData.id = selectedColumn.id;\n    ruleData.column_type = selectedColumn.column_type;\n\n    switch (ruleData.column_type) {\n      case 'string':\n        ruleData.value = '';\n        ruleData.comparator = 'ilike';\n        break;\n\n      case 'number':\n        ruleData.value = 0;\n        ruleData.comparator = 'eq';\n        break;\n\n      case 'date':\n        ruleData.value = formatDate(new Date(), 'yyyy-MM-dd');\n        ruleData.comparator = 'eq';\n        break;\n\n      case 'datetime':\n        ruleData.value = formatDate(new Date(), 'yyyy-MM-dd HH:mm');\n        ruleData.comparator = 'eq';\n        break;\n\n      case 'predefined_value':\n        ruleData.value = [];\n        ruleData.comparator = 'in';\n        ruleData.value_as_string = selectedColumn.value_as_string;\n        break;\n\n      case 'boolean':\n        ruleData.value = false;\n        ruleData.comparator = 'eq';\n        break;\n    }\n\n    forceRerender();\n  };\n\n  const handleComparatorChange = newComparator => {\n    ruleData.comparator = newComparator;\n    forceRerender();\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(TreeItem, {\n      nodeId: \"root\",\n      onLabelClick: event => event.preventDefault(),\n      style: {\n        borderLeft: '1px #D8D8D8 dashed',\n        marginLeft: '1.6rem',\n        marginTop: '0.5rem'\n      },\n      label: /*#__PURE__*/_jsxs(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsx(ColumnOptions, {\n          options: columnOptions,\n          value: ruleData.id,\n          onColumnNameChange: handleColumnNameChange,\n          disabled: disabled\n        }), /*#__PURE__*/_jsx(ComparatorOptions, {\n          rules: ruleData,\n          columnOptions: columnOptions,\n          options: comparatorOptions,\n          disabled: disabled,\n          onComparatorChange: handleComparatorChange\n        }), /*#__PURE__*/_jsx(ConditionValue, {\n          rules: ruleData,\n          columnOptions: columnOptions,\n          disabled: disabled\n        }), /*#__PURE__*/_jsx(Unless, {\n          condition: disabled,\n          children: /*#__PURE__*/_jsx(Tooltip, {\n            title: t('tooltip.condition_remove_rule'),\n            children: /*#__PURE__*/_jsx(ButtonGroup, {\n              className: classes.buttonGroup,\n              size: \"small\",\n              children: /*#__PURE__*/_jsx(IconButton, {\n                onClick: removeRule(ruleData.condition_id),\n                children: /*#__PURE__*/_jsx(Cancel, {\n                  className: classes.iconButton\n                })\n              })\n            })\n          })\n        })]\n      })\n    })\n  });\n}\n\nexport default ConditionRule;","map":null,"metadata":{},"sourceType":"module"}