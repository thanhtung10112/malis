{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, putResolve } from 'redux-saga/effects';\nimport { call, put, all, select } from 'typed-redux-saga';\nimport { jobStore, commonStore, advancedFilterActions } from '@/store/reducers';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport jobApi from '@/apis/job.api';\nimport _ from 'lodash';\nimport { getDefaultValue } from '@/utils/getDefaultValues';\n\nfunction* fetchInitDataForList() {\n  const data = yield call(jobApi.getInitDataForList);\n  const selectedJobCategory = yield* select(jobStore.selectSelectedJobCategory);\n\n  if (_.isNull(selectedJobCategory.id)) {\n    const defaultJobCategory = getDefaultValue(data.job_categories, false);\n    yield put(jobStore.actions.setSelectedCategory(defaultJobCategory));\n  }\n\n  yield put(jobStore.actions.setInitDataForList(data));\n}\n\nfunction* fetchInitDataForCE() {\n  const data = yield call(jobApi.getInitDataForCE);\n  data.job_template = _.pick(data.job_template, ['language', 'equipment_type', 'erection_site', 'people_responsible', 'squad_leader', 'drawings_responsible', 'job_users']);\n  const jobStandard = data.parameters.PLNO.map(item => _.pick(item, ['description', 'id', 'parameter_id']));\n  yield put(jobStore.actions.setDetail(_objectSpread(_objectSpread({}, data.job_template), {}, {\n    job_standard: jobStandard\n  })));\n  yield put(jobStore.actions.setInitDataForCE(data));\n}\n\nfunction* fetchList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData,\n    selectedCategory\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    selectedCategory: select(jobStore.selectSelectedJobCategory)\n  });\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(jobApi.getList, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery,\n    job_category_id: selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.id\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(jobStore.actions.setDataList(data.jobs));\n}\n\nfunction* getJobList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForList);\n    const permissions = yield* select(jobStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* openJobCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    yield put(jobStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* getUserGroupMapping({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const data = yield call(jobApi.getUserGroupMapping, payload);\n    yield put(jobStore.actions.setTransferUserAvailableList(data.available_users));\n    yield put(jobStore.actions.setOpenTransferList(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* createJob({\n  payload\n}) {\n  yield put(jobStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      message\n    } = yield call(jobApi.create, payload);\n    const {\n      job_template\n    } = yield* select(jobStore.selectInitDataForCE);\n    yield put(jobStore.actions.setDetail(job_template));\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(jobStore.actions.setDialogStateLoading(false));\n}\n\nfunction* closeJobDialog() {\n  try {\n    yield putResolve(jobStore.actions.setDialogStateOpen(false));\n    yield call(getJobList);\n    yield put(jobStore.actions.resetDetail());\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\n\nfunction* openJobUpdateDialog({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    const {\n      job\n    } = yield call(jobApi.getDetail, payload);\n    job.job_currencies = job.job_currencies.map(currency => _objectSpread({\n      id: currency.currency_id\n    }, currency));\n    yield putResolve(jobStore.actions.setDetail(job));\n    yield put(jobStore.actions.setDialogState({\n      open: true,\n      editMode: true\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* updateJob({\n  payload\n}) {\n  yield put(jobStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      id,\n      formData\n    } = payload;\n    const {\n      message\n    } = yield call(jobApi.update, id, formData);\n    yield put(commonStore.actions.setSuccessMessage(message));\n    yield call(closeJobDialog);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(jobStore.actions.setDialogStateLoading(false));\n}\n\nfunction* jobSaga() {\n  yield takeEvery(jobStore.sagaGetList, getJobList);\n  yield takeEvery(jobStore.sagaOpenCreateDialog, openJobCreateDialog);\n  yield takeEvery(jobStore.sagaGetUserGroupMapping, getUserGroupMapping);\n  yield takeEvery(jobStore.sagaCreate, createJob);\n  yield takeEvery(jobStore.sagaCloseDialog, closeJobDialog);\n  yield takeEvery(jobStore.sagaOpenUpdateDialog, openJobUpdateDialog);\n  yield takeEvery(jobStore.sagaUpdate, updateJob);\n}\n\nexport default jobSaga;","map":null,"metadata":{},"sourceType":"module"}