{"ast":null,"code":"import { createElement as _createElement } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Dialog, DialogContent, DialogActions, DialogTitle, DialogContentText, Button, Tooltip, LinearProgress, Paper, useTheme } from '@material-ui/core';\nimport Draggable from 'react-draggable';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CheckCircleRounded from '@material-ui/icons/CheckCircleRounded';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport { Unless, When } from 'react-if';\nimport useStyles from './styles';\nimport _ from 'lodash';\nimport clsx from 'clsx';\n\nfunction PaperComponent(_ref) {\n  let {\n    draggable\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"draggable\"]);\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(When, {\n      condition: draggable,\n      children: /*#__PURE__*/_jsx(Draggable, {\n        handle: \".MuiDialogTitle-root\",\n        cancel: '[class*=\"MuiDialogContent-root\"]',\n        bounds: \"parent\",\n        children: /*#__PURE__*/_jsx(Paper, _objectSpread(_objectSpread({}, props), {}, {\n          style: {\n            margin: 0\n          }\n        }))\n      })\n    }), /*#__PURE__*/_jsx(Unless, {\n      condition: draggable,\n      children: /*#__PURE__*/_jsx(Paper, _objectSpread(_objectSpread({}, props), {}, {\n        style: {\n          margin: 0\n        }\n      }))\n    })]\n  });\n}\n\nfunction DialogMain(props) {\n  const {\n    title,\n    closable,\n    onClose,\n    onOk,\n    description,\n    children,\n    extraButtons,\n    okText,\n    closeText,\n    className,\n    closeButtonProps,\n    okButtonProps,\n    loading,\n    enterToOk,\n    bodyStyles,\n    hideCloseButton,\n    hideOkButton,\n    hideButtonsAction,\n    type,\n    draggable,\n    PaperProps,\n    classes: classesDialog\n  } = props,\n        dialogProps = _objectWithoutProperties(props, [\"title\", \"closable\", \"onClose\", \"onOk\", \"description\", \"children\", \"extraButtons\", \"okText\", \"closeText\", \"className\", \"closeButtonProps\", \"okButtonProps\", \"loading\", \"enterToOk\", \"bodyStyles\", \"hideCloseButton\", \"hideOkButton\", \"hideButtonsAction\", \"type\", \"draggable\", \"PaperProps\", \"classes\"]);\n\n  const theme = useTheme();\n  const classes = useStyles(props);\n  const renderButtons = React.useCallback(() => {\n    if (_.isArray(extraButtons)) {\n      return extraButtons.filter(button => !button.hide).map((_ref2, index) => {\n        let {\n          label,\n          hide\n        } = _ref2,\n            buttonProps = _objectWithoutProperties(_ref2, [\"label\", \"hide\"]);\n\n        return /*#__PURE__*/_createElement(Button, _objectSpread(_objectSpread({\n          disabled: loading\n        }, buttonProps), {}, {\n          key: index\n        }), label);\n      });\n    }\n\n    return /*#__PURE__*/_jsx(Button, _objectSpread(_objectSpread({\n      disabled: loading\n    }, extraButtons), {}, {\n      children: extraButtons === null || extraButtons === void 0 ? void 0 : extraButtons.label\n    }));\n  }, [extraButtons]);\n\n  const getColorType = type => theme.palette[type].main;\n\n  const iconList = React.useMemo(() => ({\n    success: CheckCircleRounded,\n    error: ErrorIcon,\n    warning: WarningIcon,\n    info: InfoIcon\n  }), []);\n  const renderTitle = React.useCallback(() => {\n    if (type === 'normal') {\n      return title;\n    }\n\n    const color = getColorType(type);\n    const Icon = iconList[type];\n    return /*#__PURE__*/_jsxs(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsx(Icon, {\n        style: {\n          marginRight: 8,\n          color\n        }\n      }), /*#__PURE__*/_jsx(\"div\", {\n        children: title\n      })]\n    });\n  }, [title, type]);\n  /*\n  React.useEffect(() => {\n    const listener = (event) => {\n      if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n        event.preventDefault()\n        if (enterToOk && _.isFunction(onOk)) {\n          onOk()\n        }\n      }\n    }\n    document.addEventListener('keydown', listener)\n    return () => {\n      document.removeEventListener('keydown', listener)\n    }\n  }, [onOk])\n  */\n\n  return /*#__PURE__*/_jsxs(Dialog, _objectSpread(_objectSpread({}, dialogProps), {}, {\n    className: clsx(classes.root, className),\n    PaperComponent: PaperComponent,\n    PaperProps: _objectSpread({\n      draggable\n    }, PaperProps),\n    classes: _objectSpread({\n      paper: classes.paperRoot\n    }, classesDialog),\n    children: [/*#__PURE__*/_jsx(When, {\n      condition: Boolean(title),\n      children: /*#__PURE__*/_jsx(DialogTitle, {\n        className: classes.title,\n        children: renderTitle()\n      })\n    }), /*#__PURE__*/_jsx(When, {\n      condition: loading,\n      children: /*#__PURE__*/_jsx(LinearProgress, {\n        className: classes.progress\n      })\n    }), /*#__PURE__*/_jsx(When, {\n      condition: closable && _.isFunction(onClose),\n      children: /*#__PURE__*/_jsx(Tooltip, {\n        title: \"Click to close dialog\",\n        children: /*#__PURE__*/_jsx(CloseIcon, {\n          className: clsx(classes.closeIcon, {\n            disabled: loading\n          }),\n          onClick: onClose\n        })\n      })\n    }), /*#__PURE__*/_jsx(When, {\n      condition: description,\n      children: /*#__PURE__*/_jsx(DialogContent, {\n        className: classes.content,\n        style: _objectSpread({}, bodyStyles),\n        children: /*#__PURE__*/_jsx(DialogContentText, {\n          children: description\n        })\n      })\n    }), /*#__PURE__*/_jsx(Unless, {\n      condition: description,\n      children: /*#__PURE__*/_jsx(DialogContent, {\n        className: classes.content,\n        style: _objectSpread({}, bodyStyles),\n        children: children\n      })\n    }), /*#__PURE__*/_jsx(Unless, {\n      condition: hideButtonsAction,\n      children: /*#__PURE__*/_jsxs(DialogActions, {\n        className: classes.buttonActions,\n        children: [/*#__PURE__*/_jsxs(When, {\n          condition: _.isNil(extraButtons),\n          children: [/*#__PURE__*/_jsx(When, {\n            condition: _.isFunction(onOk) && !hideOkButton,\n            children: /*#__PURE__*/_jsx(Button, _objectSpread(_objectSpread({\n              color: \"primary\",\n              disabled: loading,\n              onClick: onOk\n            }, okButtonProps), {}, {\n              children: okText\n            }))\n          }), /*#__PURE__*/_jsx(When, {\n            condition: _.isFunction(onClose) && !hideCloseButton,\n            children: /*#__PURE__*/_jsx(Button, _objectSpread(_objectSpread({\n              disabled: loading,\n              onClick: onClose\n            }, closeButtonProps), {}, {\n              children: closeText\n            }))\n          })]\n        }), /*#__PURE__*/_jsx(Unless, {\n          condition: _.isNil(extraButtons),\n          children: renderButtons()\n        })]\n      })\n    })]\n  }));\n}\n\nDialogMain.defaultProps = {\n  closeText: 'close',\n  okText: 'ok',\n  closable: true,\n  maxWidth: 'sm',\n  enterToOk: false,\n  hideOkButton: false,\n  hideCloseButton: false,\n  hideButtonsAction: false,\n  type: 'normal',\n  draggable: true\n};\nexport default DialogMain;","map":null,"metadata":{},"sourceType":"module"}