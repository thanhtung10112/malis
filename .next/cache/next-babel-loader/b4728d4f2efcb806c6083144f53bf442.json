{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Drawing\\\\TabParts.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport useStyles from './styles';\nimport { useDispatch } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport { Paper, Link } from '@material-ui/core';\nimport { DataTable, CreateIcon, DeleteIcon, useConfirm, AppButton, DialogPart } from '@/components';\nimport _ from 'lodash';\nimport drawingApi from '@/apis/drawing.api';\nimport partApi from '@/apis/part.api';\nimport { defaultProperties, rightColumn } from '@/utils/columnProperties';\nimport { drawingStore, partStore, commonStore, summaryReportActions } from '@/store/reducers';\nimport { isAssemblyByDpn } from '@/utils/isAssembly';\n\nvar TabComponent = function TabComponent() {\n  _s();\n\n  var classes = useStyles();\n\n  var _useConfirm = useConfirm(),\n      confirm = _useConfirm.confirm;\n\n  var _useState = useState([]),\n      selectedRows = _useState[0],\n      setSelectedRows = _useState[1];\n\n  var drawingForm = useFormContext();\n  var watchItemList = drawingForm.watch('item_list', []);\n  var watchId = drawingForm.watch('id', null);\n  var dispatch = useDispatch();\n\n  var handleOpenComponentDialog = function handleOpenComponentDialog(partEntity) {\n    return function () {\n      dispatch(drawingStore.sagaOpenCreatePartDialog(partEntity));\n    };\n  };\n\n  var handleSelectRows = function handleSelectRows(_ref) {\n    var selectionModel = _ref.selectionModel;\n    setSelectedRows(selectionModel);\n  };\n\n  var buildDescription = function buildDescription() {\n    if (selectedRows.length > 1) {\n      return \"Are you sure you want to delete \".concat(selectedRows.length, \" selected parts?\");\n    }\n\n    return \"Are you sure you want to delete \".concat(selectedRows.length, \" selected part?\");\n  };\n\n  var deleteParts = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var parts, data, _yield$drawingApi$get, drawing;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(drawingStore.actions.setDialogStateLoading(true));\n              _context.prev = 1;\n              parts = _.map(selectedRows, function (partId) {\n                var _$find = _.find(watchItemList, {\n                  id: partId\n                }),\n                    dpn = _$find.dpn,\n                    id = _$find.id;\n\n                return {\n                  entity_id: dpn,\n                  id: id\n                };\n              });\n              _context.next = 5;\n              return partApi.executeOperation('delete', parts);\n\n            case 5:\n              data = _context.sent;\n\n              if (data.failed_count > 0) {\n                dispatch(summaryReportActions.setReportData(data));\n                dispatch(summaryReportActions.setOpen(true));\n              } else {\n                dispatch(commonStore.actions.setSuccessMessage(data.message));\n              }\n\n              _context.next = 9;\n              return drawingApi.getDetail(watchId);\n\n            case 9:\n              _yield$drawingApi$get = _context.sent;\n              drawing = _yield$drawingApi$get.drawing;\n              drawingForm.setValue('item_list', drawing.item_list);\n              setSelectedRows([]);\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch(commonStore.actions.setError(_context.t0));\n\n            case 18:\n              dispatch(drawingStore.actions.setDialogStateLoading(false));\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 15]]);\n    }));\n\n    return function deleteParts() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleDeleteParts = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var description, result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              description = buildDescription();\n              _context2.next = 3;\n              return confirm({\n                description: description\n              });\n\n            case 3:\n              result = _context2.sent;\n\n              if (result === 'OK') {\n                deleteParts();\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleDeleteParts() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleOpenPartDialog = function handleOpenPartDialog(id, dpn) {\n    return function (event) {\n      event.preventDefault();\n      var entity = isAssemblyByDpn(dpn) ? 'assembly' : 'item';\n      dispatch(partStore.sagaOpenUpdateDialog({\n        id: id,\n        entity: entity\n      }));\n    };\n  };\n\n  var handleClosePartDialog = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _yield$drawingApi$get2, drawing;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setSelectedRows([]);\n              dispatch(drawingStore.actions.setDialogStateLoading(true));\n              _context3.prev = 2;\n              _context3.next = 5;\n              return drawingApi.getDetail(watchId);\n\n            case 5:\n              _yield$drawingApi$get2 = _context3.sent;\n              drawing = _yield$drawingApi$get2.drawing;\n              drawingForm.setValue('item_list', drawing.item_list);\n              _context3.next = 13;\n              break;\n\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](2);\n              dispatch(commonStore.actions.setError(_context3.t0));\n\n            case 13:\n              dispatch(drawingStore.actions.setDialogStateLoading(false));\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 10]]);\n    }));\n\n    return function handleClosePartDialog() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var newButtonDropdown = [{\n    label: 'Item',\n    onClick: handleOpenComponentDialog('item')\n  }, {\n    label: 'Assembly',\n    onClick: handleOpenComponentDialog('assembly')\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttonGroupRoot,\n      children: [/*#__PURE__*/_jsxDEV(AppButton, {\n        startIcon: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 31\n        }, _this),\n        item: newButtonDropdown,\n        children: \"New\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(AppButton, {\n        startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 31\n        }, _this),\n        onClick: handleDeleteParts,\n        disabled: selectedRows.length === 0,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 1,\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        rows: watchItemList,\n        checkboxSelection: true,\n        selectionModel: selectedRows,\n        onSelectionModelChange: handleSelectRows,\n        onCellClick: function onCellClick(params, event) {\n          if (['dpn', 'reference_to'].includes(params.field)) {\n            event.stopPropagation();\n          }\n        },\n        columns: [_objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'dpn',\n          headerName: 'Item',\n          flex: 0.2,\n          renderCell: function renderCell(params) {\n            var value = params.value,\n                id = params.id;\n            return /*#__PURE__*/_jsxDEV(Link, {\n              href: \"#\",\n              onClick: handleOpenPartDialog(id, value),\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 19\n            }, this);\n          }\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'reference_to',\n          headerName: 'Referenced Part Number',\n          flex: 0.2,\n          renderCell: function renderCell(params) {\n            var value = params.value,\n                row = params.row;\n            return /*#__PURE__*/_jsxDEV(Link, {\n              href: \"#\",\n              onClick: handleOpenPartDialog(row.id_ref, value),\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this);\n          }\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'description',\n          headerName: 'Description',\n          flex: 0.2\n        }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), rightColumn), {}, {\n          field: 'mass',\n          headerName: 'Mass (kg)',\n          flex: 0.1\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'raw_unit',\n          headerName: 'Unit',\n          flex: 0.1\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'material',\n          headerName: 'Material',\n          flex: 0.1\n        })],\n        hideFooter: true,\n        tableHeight: 385\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(DialogPart, {\n      onClose: handleClosePartDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(TabComponent, \"MbZBKmFDkWrOrSw8Ha4CmzRfUbk=\", false, function () {\n  return [useStyles, useConfirm, useFormContext, useDispatch];\n});\n\n_c = TabComponent;\nexport default TabComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TabComponent\");","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Drawing/TabParts.tsx"],"names":["useState","useStyles","useDispatch","useFormContext","Paper","Link","DataTable","CreateIcon","DeleteIcon","useConfirm","AppButton","DialogPart","_","drawingApi","partApi","defaultProperties","rightColumn","drawingStore","partStore","commonStore","summaryReportActions","isAssemblyByDpn","TabComponent","classes","confirm","selectedRows","setSelectedRows","drawingForm","watchItemList","watch","watchId","dispatch","handleOpenComponentDialog","partEntity","sagaOpenCreatePartDialog","handleSelectRows","selectionModel","buildDescription","length","deleteParts","actions","setDialogStateLoading","parts","map","partId","find","id","dpn","entity_id","executeOperation","data","failed_count","setReportData","setOpen","setSuccessMessage","message","getDetail","drawing","setValue","item_list","setError","handleDeleteParts","description","result","handleOpenPartDialog","event","preventDefault","entity","sagaOpenUpdateDialog","handleClosePartDialog","newButtonDropdown","label","onClick","buttonGroupRoot","params","includes","field","stopPropagation","headerName","flex","renderCell","value","row","id_ref"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport useStyles from './styles'\nimport { useDispatch } from 'react-redux'\nimport { useFormContext } from 'react-hook-form'\n\nimport { Paper, Link } from '@material-ui/core'\nimport { DataTable, CreateIcon, DeleteIcon, useConfirm, AppButton, DialogPart } from '@/components'\n\nimport _ from 'lodash'\nimport drawingApi from '@/apis/drawing.api'\nimport partApi from '@/apis/part.api'\nimport { defaultProperties, rightColumn } from '@/utils/columnProperties'\nimport { drawingStore, partStore, commonStore, summaryReportActions } from '@/store/reducers'\nimport { isAssemblyByDpn } from '@/utils/isAssembly'\n\nimport type { PartEntity } from '@/types/Part'\nimport { PayloadOperation } from '@/types/Common'\n\nconst TabComponent: React.FC = () => {\n  const classes = useStyles()\n  const { confirm } = useConfirm()\n\n  const [selectedRows, setSelectedRows] = useState<number[]>([])\n\n  const drawingForm = useFormContext()\n  const watchItemList = drawingForm.watch('item_list', [])\n  const watchId = drawingForm.watch('id', null)\n\n  const dispatch = useDispatch()\n\n  const handleOpenComponentDialog = (partEntity: PartEntity) => () => {\n    dispatch(drawingStore.sagaOpenCreatePartDialog(partEntity))\n  }\n\n  const handleSelectRows = ({ selectionModel }) => {\n    setSelectedRows(selectionModel)\n  }\n\n  const buildDescription = () => {\n    if (selectedRows.length > 1) {\n      return `Are you sure you want to delete ${selectedRows.length} selected parts?`\n    }\n    return `Are you sure you want to delete ${selectedRows.length} selected part?`\n  }\n\n  const deleteParts = async () => {\n    dispatch(drawingStore.actions.setDialogStateLoading(true))\n    try {\n      const parts: PayloadOperation[] = _.map(selectedRows, (partId) => {\n        const { dpn, id } = _.find(watchItemList, { id: partId })\n        return { entity_id: dpn, id }\n      })\n      const data = await partApi.executeOperation('delete', parts)\n      if (data.failed_count > 0) {\n        dispatch(summaryReportActions.setReportData(data))\n        dispatch(summaryReportActions.setOpen(true))\n      } else {\n        dispatch(commonStore.actions.setSuccessMessage(data.message))\n      }\n      const { drawing } = await drawingApi.getDetail(watchId)\n      drawingForm.setValue('item_list', drawing.item_list)\n      setSelectedRows([])\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error))\n    }\n    dispatch(drawingStore.actions.setDialogStateLoading(false))\n  }\n\n  const handleDeleteParts = async () => {\n    const description = buildDescription()\n    const result = await confirm({\n      description\n    })\n    if (result === 'OK') {\n      deleteParts()\n    }\n  }\n\n  const handleOpenPartDialog = (id: number, dpn: string) => (event) => {\n    event.preventDefault()\n    const entity = isAssemblyByDpn(dpn) ? 'assembly' : 'item'\n    dispatch(partStore.sagaOpenUpdateDialog({ id, entity }))\n  }\n\n  const handleClosePartDialog = async () => {\n    setSelectedRows([])\n    dispatch(drawingStore.actions.setDialogStateLoading(true))\n    try {\n      const { drawing } = await drawingApi.getDetail(watchId)\n      drawingForm.setValue('item_list', drawing.item_list)\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error))\n    }\n    dispatch(drawingStore.actions.setDialogStateLoading(false))\n  }\n\n  const newButtonDropdown = [\n    {\n      label: 'Item',\n      onClick: handleOpenComponentDialog('item')\n    },\n    {\n      label: 'Assembly',\n      onClick: handleOpenComponentDialog('assembly')\n    }\n  ]\n\n  return (\n    <>\n      <div className={classes.buttonGroupRoot}>\n        <AppButton startIcon={<CreateIcon />} item={newButtonDropdown}>\n          New\n        </AppButton>\n        <AppButton startIcon={<DeleteIcon />} onClick={handleDeleteParts} disabled={selectedRows.length === 0}>\n          Remove\n        </AppButton>\n      </div>\n      <Paper elevation={1}>\n        <DataTable\n          rows={watchItemList}\n          checkboxSelection\n          selectionModel={selectedRows}\n          onSelectionModelChange={handleSelectRows}\n          onCellClick={(params, event) => {\n            if (['dpn', 'reference_to'].includes(params.field)) {\n              event.stopPropagation()\n            }\n          }}\n          columns={[\n            {\n              ...defaultProperties,\n              field: 'dpn',\n              headerName: 'Item',\n              flex: 0.2,\n              renderCell(params) {\n                const { value, id } = params\n                return (\n                  <Link href=\"#\" onClick={handleOpenPartDialog(id as number, value as string)}>\n                    {value}\n                  </Link>\n                )\n              }\n            },\n            {\n              ...defaultProperties,\n              field: 'reference_to',\n              headerName: 'Referenced Part Number',\n              flex: 0.2,\n              renderCell(params) {\n                const { value, row } = params\n                return (\n                  <Link href=\"#\" onClick={handleOpenPartDialog(row.id_ref, value as string)}>\n                    {value}\n                  </Link>\n                )\n              }\n            },\n            {\n              ...defaultProperties,\n              field: 'description',\n              headerName: 'Description',\n              flex: 0.2\n            },\n            {\n              ...defaultProperties,\n              ...rightColumn,\n              field: 'mass',\n              headerName: 'Mass (kg)',\n              flex: 0.1\n            },\n            {\n              ...defaultProperties,\n              field: 'raw_unit',\n              headerName: 'Unit',\n              flex: 0.1\n            },\n            {\n              ...defaultProperties,\n              field: 'material',\n              headerName: 'Material',\n              flex: 0.1\n            }\n          ]}\n          hideFooter\n          tableHeight={385}\n        />\n      </Paper>\n      <DialogPart onClose={handleClosePartDialog} />\n    </>\n  )\n}\n\nexport default TabComponent\n"]},"metadata":{},"sourceType":"module"}