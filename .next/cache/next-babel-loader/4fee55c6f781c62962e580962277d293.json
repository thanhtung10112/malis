{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { Grid, TextField, Typography } from '@material-ui/core';\nimport { DialogMain, FormControllerAutocomplete, FormControllerRadio, DialogSSEProcess } from '@/components';\nimport useStyles from './styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'next-i18next';\nimport FileSaver from 'file-saver';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport _ from 'lodash';\nimport { budgetActions } from '@/store/reducers';\nimport getValidationSchema from './validationSchema';\n\nfunction BudgetAddEditDialog() {\n  var _budgetForm$errors, _budgetForm$errors2, _budgetForm$errors2$i;\n\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation('budget');\n  const refInputFile = React.useRef({});\n  const validationSchema = React.useMemo(() => getValidationSchema(t), []);\n  const fileTypeOptions = React.useMemo(() => [{\n    id: 0,\n    description: t('form.label.file_type_text')\n  }, {\n    id: 1,\n    description: t('form.label.file_type_excel')\n  }], []);\n  const budgetForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema),\n    defaultValues: {\n      file_type: 1,\n      mode: 0,\n      importFile: null\n    }\n  });\n  const watchFileType = budgetForm.watch('file_type', 0);\n  const dispatch = useDispatch();\n  const importDialogState = useSelector(budgetActions.selectImportDialogState);\n  const resultImportState = useSelector(budgetActions.selectImportResultDialog);\n  const userJob = useSelector(budgetActions.selectUserJob);\n  const importProcess = useSelector(budgetActions.selectImportDialogProcess);\n  React.useEffect(() => {\n    if (!_.isNil(refInputFile.current)) {\n      refInputFile.current.value = '';\n    }\n\n    budgetForm.setValue('importFile', null);\n  }, [watchFileType]);\n\n  const onClose = () => {\n    dispatch(budgetActions.setImportOpen(false));\n    budgetForm.reset();\n  };\n\n  const handleUploadFile = async event => {\n    const {\n      files\n    } = event.target;\n    budgetForm.setValue('importFile', files[0]);\n    await budgetForm.trigger('importFile');\n  };\n\n  const handleSuccess = (operationId, data) => {\n    dispatch(budgetActions.setImportOpen(false));\n    dispatch(budgetActions.setImportResult({\n      result: data.operation_result.report,\n      success: data.operation_result.success,\n      isOpen: true\n    }));\n  };\n\n  const createOperationData = data => {\n    const operationData = {\n      job_id_pk: userJob.value,\n      file_type: data.file_type === 0 ? 'text' : 'excel',\n      mode: data.mode === 0 ? 'test' : 'write'\n    };\n    return operationData;\n  };\n\n  const onImportWriteMode = () => {\n    const data = budgetForm.getValues();\n    data.mode = 1;\n    const operationData = createOperationData(data);\n    dispatch(budgetActions.importCostCode({\n      operationData,\n      file: data.importFile,\n      mode: data.mode\n    }));\n  };\n\n  const onSendReportMail = () => {\n    const data = budgetForm.getValues();\n    const importInfo = {\n      title: t('form.title.report'),\n      content: resultImportState.result\n    };\n    const formData = new FormData();\n    formData.append('import', data.importFile);\n    formData.append('import_info', JSON.stringify(importInfo));\n    dispatch(budgetActions.sendReportMail(formData));\n  };\n\n  const onSubmitForm = budgetForm.handleSubmit(data => {\n    const operationData = {\n      job_id_pk: userJob.value,\n      file_type: data.file_type === 0 ? 'text' : 'excel',\n      mode: data.mode === 0 ? 'test' : 'write'\n    };\n    dispatch(budgetActions.importCostCode({\n      operationData,\n      file: data.importFile,\n      mode: data.mode\n    }));\n  });\n\n  const onCloseImportResult = () => {\n    dispatch(budgetActions.setImportResult({\n      isOpen: false\n    }));\n    dispatch(budgetActions.getList());\n    onClose();\n  };\n\n  const onDownloadImportResult = () => {\n    const {\n      result\n    } = resultImportState;\n    const fileText = new Blob([result], {\n      type: 'text/plain;charset=utf-8'\n    });\n    FileSaver.saveAs(fileText, 'result_import_cost_codes.txt');\n  };\n\n  const renderExtraButtons = () => {\n    const extraButtons = [{\n      label: t('button.import_write_mode'),\n      onClick: onImportWriteMode,\n      hide: importDialogState.mode === 1 || !resultImportState.success // if mode = write or result import = failed\n\n    }, {\n      label: t('button.report'),\n      onClick: onSendReportMail // disabled: true\n\n    }, {\n      label: t('button.download'),\n      onClick: onDownloadImportResult\n    }, {\n      label: t('common:button.close'),\n      onClick: onCloseImportResult\n    }];\n    return extraButtons;\n  };\n\n  const handleCloseImportProcess = () => {\n    dispatch(budgetActions.setOpenImportProcess(false));\n  };\n\n  const handleOpenRemindData = () => {\n    dispatch(budgetActions.getRemindData());\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(DialogMain, {\n      open: importDialogState.isOpen,\n      title: t('form.title.import'),\n      loading: importDialogState.isLoading,\n      okText: t('button.import'),\n      onOk: onSubmitForm,\n      onClose: onClose,\n      children: /*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 3,\n        className: classes.wrapDialog,\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxs(Typography, {\n            display: \"block\",\n            variant: \"body2\",\n            children: [t('import_description'), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.moreInfo,\n              onClick: handleOpenRemindData,\n              children: /*#__PURE__*/_jsx(\"u\", {\n                children: t('import_description_learn_more')\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n            name: \"file_type\",\n            label: t('form.label.file_type'),\n            required: true,\n            options: fileTypeOptions,\n            control: budgetForm.control,\n            disableClearable: true,\n            renderOption: option => option.description\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(TextField, {\n            error: (_budgetForm$errors = budgetForm.errors) === null || _budgetForm$errors === void 0 ? void 0 : _budgetForm$errors.importFile,\n            helperText: (_budgetForm$errors2 = budgetForm.errors) === null || _budgetForm$errors2 === void 0 ? void 0 : (_budgetForm$errors2$i = _budgetForm$errors2.importFile) === null || _budgetForm$errors2$i === void 0 ? void 0 : _budgetForm$errors2$i.message,\n            inputRef: refInputFile,\n            type: \"file\",\n            required: true,\n            onChange: handleUploadFile,\n            inputProps: {\n              style: {\n                height: 23\n              },\n              accept: watchFileType === 0 ? 'text/plain' : ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'].join(',')\n            }\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          style: {\n            paddingTop: 0\n          },\n          children: /*#__PURE__*/_jsx(FormControllerRadio, {\n            label: t('form.label.mode'),\n            name: \"mode\",\n            control: budgetForm.control,\n            options: [{\n              label: t('form.label.mode_test'),\n              value: 0\n            }, {\n              label: t('form.label.mode_write'),\n              value: 1\n            }]\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(DialogMain, {\n      open: resultImportState.isOpen,\n      title: resultImportState.success ? 'Completed' : 'Failed',\n      type: resultImportState.success ? 'success' : 'error',\n      fullWidth: true,\n      maxWidth: \"sm\",\n      loading: importDialogState.isLoading,\n      extraButtons: renderExtraButtons(),\n      children: /*#__PURE__*/_jsx(TextField, {\n        value: resultImportState.result,\n        multiline: true,\n        rows: 20,\n        style: {\n          marginTop: 12\n        }\n      })\n    }), /*#__PURE__*/_jsx(DialogSSEProcess, {\n      open: importProcess.openDialogProcess,\n      operationId: importProcess.operation_id,\n      onClose: handleCloseImportProcess,\n      onSuccess: handleSuccess\n    })]\n  });\n}\n\nexport default BudgetAddEditDialog;","map":null,"metadata":{},"sourceType":"module"}