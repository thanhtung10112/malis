{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useTranslation } from 'next-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport useStyles from '@/styles/page/layout';\nimport { Tooltip } from '@material-ui/core';\nimport { Warning as WarningIcon, ErrorOutline as ErrorOutlineIcon } from '@material-ui/icons';\nimport { DialogJobCreateEdit, AppAutocompleteStyled, AppLayout, CreateIcon, EditIcon, MakeAListIcon, ViewEditionIcon } from '@/components';\nimport { jobStore, commonStore, makeAListActions } from '@/store/reducers';\nimport * as columnProperties from '@/utils/columnProperties';\n\nfunction Jobs() {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation('job');\n  const breadcrumbData = [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Basic Options',\n    href: '/jobs'\n  }, {\n    label: 'Jobs Management',\n    href: '/jobs'\n  }];\n  const dispatch = useDispatch();\n  const jobCategories = useSelector(jobStore.selectJobCategories);\n  const selectedJobCategory = useSelector(jobStore.selectSelectedJobCategory);\n  const jobPermissions = useSelector(jobStore.selectPermissions);\n  const {\n    column_tooltips,\n    wiki_page\n  } = useSelector(jobStore.selectInitDataForList);\n\n  const onOpenMakeAList = () => {\n    dispatch(makeAListActions.open());\n  };\n\n  const onChangeSelectedJobCategory = (event, jobCategory) => {\n    dispatch(jobStore.actions.setSelectedCategory(jobCategory));\n    dispatch(commonStore.actions.setTableState({\n      page: 1\n    }));\n    dispatch(jobStore.sagaGetList());\n  };\n\n  const onOpenCreateDialog = () => {\n    dispatch(jobStore.sagaOpenCreateDialog());\n  };\n\n  const onUpdateDialog = id => () => {\n    dispatch(jobStore.sagaOpenUpdateDialog(id));\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    field: 'id',\n    headerName: 'Edit',\n    description: column_tooltips.edit,\n\n    renderCell(params) {\n      return /*#__PURE__*/_jsx(EditIcon, {\n        onClick: onUpdateDialog(params.value)\n      });\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.job_id,\n    field: 'job_id',\n    headerName: 'Job #'\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.description,\n    field: 'job_description',\n    headerName: 'Description',\n    flex: 0.4\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.language,\n    field: 'language',\n    headerName: 'Language'\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.equipment_type,\n    field: 'equipment_type',\n    headerName: 'EqTy'\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.erection_site,\n    field: 'erection_site',\n    headerName: 'Erection Site',\n    flex: 0.2\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    field: 'erection_site_id',\n\n    renderHeader() {\n      return /*#__PURE__*/_jsx(Tooltip, {\n        title: \"Non-Conformity\",\n        children: /*#__PURE__*/_jsx(WarningIcon, {})\n      });\n    },\n\n    renderCell() {\n      return /*#__PURE__*/_jsx(\"span\", {\n        children: \"0\"\n      });\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    field: 'full_count',\n\n    renderHeader() {\n      return /*#__PURE__*/_jsx(Tooltip, {\n        title: \"Improvement\",\n        children: /*#__PURE__*/_jsx(ErrorOutlineIcon, {})\n      });\n    },\n\n    renderCell() {\n      return /*#__PURE__*/_jsx(\"span\", {\n        children: \"1\"\n      });\n    }\n\n  })];\n  const buttons = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n    disabled: !(jobPermissions === null || jobPermissions === void 0 ? void 0 : jobPermissions.create),\n    onClick: onOpenCreateDialog\n  }, {\n    label: t('common:button.make_a_list'),\n    startIcon: /*#__PURE__*/_jsx(MakeAListIcon, {}),\n    disabled: !(jobPermissions === null || jobPermissions === void 0 ? void 0 : jobPermissions.make_a_list),\n    onClick: onOpenMakeAList\n  }, {\n    label: t('common:button.view_edition'),\n    startIcon: /*#__PURE__*/_jsx(ViewEditionIcon, {}),\n    disabled: true\n  }];\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: \"job\",\n    wikiPage: wiki_page,\n    breadcrumbs: breadcrumbData,\n    permissions: jobPermissions,\n    buttons: buttons,\n    tableProps: {\n      columns: columns\n    },\n    Dialogs: /*#__PURE__*/_jsx(DialogJobCreateEdit, {}),\n    Options: /*#__PURE__*/_jsx(AppAutocompleteStyled, {\n      width: 280,\n      label: \"Job Categories\",\n      className: classes.controlAutocomplete,\n      options: jobCategories,\n      value: selectedJobCategory,\n      primaryKeyOption: \"value\",\n      renderOption: option => option.description,\n      onChange: onChangeSelectedJobCategory\n    })\n  });\n}\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'job', 'make_a_list', 'advanced_filter', 'currency']);\nexport default Jobs;","map":null,"metadata":{},"sourceType":"module"}