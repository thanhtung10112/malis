{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { actionTypes } from '@/utils/constant';\nexport const name = 'job';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nexport const transferListState = {\n  userAvailableList: [],\n  userGroup: [],\n  open: false\n};\nexport const jobDetail = {\n  job_id: '',\n  equipment_type: null,\n  language: null,\n  erection_site: null,\n  job_standard: [],\n  people_responsible: [],\n  squad_leader: [],\n  drawings_responsible: [],\n  contract_no: '',\n  contract_desc: '',\n  credit_letter: '',\n  logo: null,\n  additional_attributes: {},\n  job_currencies: [],\n  job_descriptions: [],\n  job_users: [],\n  job_expediting_dates: []\n};\nexport const initialState = {\n  dataList: [],\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: []\n  },\n  selectedJobCategory: {\n    description: '',\n    id: null,\n    parameter_id: ''\n  },\n  initDataForList: {\n    job_categories: [],\n    permissions: {\n      job: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  initDataForCE: {\n    currencies: [],\n    group_map: {\n      job_all: '',\n      job_drawing: '',\n      job_responsible: '',\n      job_squad_leader: ''\n    },\n    erection_sites: [],\n    parameters: {\n      EQTY: [],\n      JOAT: [],\n      PLLA: [],\n      PLNO: []\n    },\n    tooltip: '<span></span>',\n    job_template: jobDetail,\n    wiki_page: ''\n  },\n  transferListState,\n  keyMapping: null,\n  detail: jobDetail\n};\nconst jobSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      state.dialogState.historyLogs = payload;\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setOpenTransferList(state, {\n      payload\n    }) {\n      state.transferListState.open = payload;\n    },\n\n    setTransferUserAvailableList(state, {\n      payload\n    }) {\n      state.transferListState.userAvailableList = payload;\n    },\n\n    setTransferListUserGroup(state, {\n      payload\n    }) {\n      state.transferListState.userGroup = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    setSelectedCategory(state, {\n      payload\n    }) {\n      state.selectedJobCategory = payload;\n    },\n\n    setKeyMapping(state, {\n      payload\n    }) {\n      state.keyMapping = payload;\n    },\n\n    closeTransferList(state) {\n      state.transferListState = _objectSpread(_objectSpread({}, transferListState), {}, {\n        userGroup: state.transferListState.userGroup\n      });\n    },\n\n    setPermissions(state, {\n      payload\n    }) {\n      state.initDataForList.permissions.job = payload;\n    },\n\n    resetDetail(state) {\n      const jobStandard = state.initDataForCE.parameters.PLNO.map(item => _.pick(item, ['description', 'parameter_id', 'id']));\n      state.detail = _objectSpread(_objectSpread({}, jobDetail), {}, {\n        job_standard: jobStandard\n      });\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n}); // Actions\n\nexport const {\n  actions\n} = jobSlice; // Saga actions\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaUpdate = createAction(`${name}/${actionTypes.UPDATE}`);\nexport const sagaGetUserGroupMapping = createAction(`${name}/GET_USER_GROUP_MAPPING`); // Selector\n\nexport const selectState = state => state[name];\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport const selectJobCategories = createSelector(selectState, state => state.initDataForList.job_categories);\nexport const selectPermissions = createSelector(selectState, state => state.initDataForList.permissions.job);\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectInitDataForCE = createSelector(selectState, state => state.initDataForCE);\nexport const selectTransferListState = createSelector(selectState, state => state.transferListState);\nexport const selectDetail = createSelector(selectState, state => state.detail);\nexport const selectKeyMapping = createSelector(selectState, state => state.keyMapping);\nexport const selectSelectedJobCategory = createSelector(selectState, state => state.selectedJobCategory);\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport default jobSlice;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/reducers/job.reducer.ts"],"names":["createSlice","createAction","createSelector","_","actionTypes","name","resetState","RESET_STATE","transferListState","userAvailableList","userGroup","open","jobDetail","job_id","equipment_type","language","erection_site","job_standard","people_responsible","squad_leader","drawings_responsible","contract_no","contract_desc","credit_letter","logo","additional_attributes","job_currencies","job_descriptions","job_users","job_expediting_dates","initialState","dataList","dialogState","loading","historyLogs","selectedJobCategory","description","id","parameter_id","initDataForList","job_categories","permissions","job","wiki_page","column_tooltips","initDataForCE","currencies","group_map","job_all","job_drawing","job_responsible","job_squad_leader","erection_sites","parameters","EQTY","JOAT","PLLA","PLNO","tooltip","job_template","keyMapping","detail","jobSlice","reducers","setDataList","state","payload","setDialogState","setHistoryLogs","setDialogStateOpen","setDialogStateLoading","setInitDataForList","setInitDataForCE","setOpenTransferList","setTransferUserAvailableList","setTransferListUserGroup","setDetail","setSelectedCategory","setKeyMapping","closeTransferList","setPermissions","resetDetail","jobStandard","map","item","pick","extraReducers","type","actions","sagaGetList","GET_LIST","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaCloseDialog","CLOSE_DIALOG","sagaCreate","CREATE","sagaUpdate","UPDATE","sagaGetUserGroupMapping","selectState","selectDataList","selectJobCategories","selectPermissions","selectDialogState","selectInitDataForCE","selectTransferListState","selectDetail","selectKeyMapping","selectSelectedJobCategory","selectInitDataForList"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,YAAtB,EAAmDC,cAAnD,QAAyE,kBAAzE;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAcA,OAAO,MAAMC,IAAY,GAAG,KAArB;AACP,OAAO,MAAMC,UAAU,GAAGL,YAAY,CAAE,GAAEI,IAAK,IAAGD,WAAW,CAACG,WAAY,EAApC,CAA/B;AAEP,OAAO,MAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,iBAAiB,EAAE,EADY;AAE/BC,EAAAA,SAAS,EAAE,EAFoB;AAG/BC,EAAAA,IAAI,EAAE;AAHyB,CAA1B;AAMP,OAAO,MAAMC,SAAoB,GAAG;AAClCC,EAAAA,MAAM,EAAE,EAD0B;AAElCC,EAAAA,cAAc,EAAE,IAFkB;AAGlCC,EAAAA,QAAQ,EAAE,IAHwB;AAIlCC,EAAAA,aAAa,EAAE,IAJmB;AAKlCC,EAAAA,YAAY,EAAE,EALoB;AAMlCC,EAAAA,kBAAkB,EAAE,EANc;AAOlCC,EAAAA,YAAY,EAAE,EAPoB;AAQlCC,EAAAA,oBAAoB,EAAE,EARY;AASlCC,EAAAA,WAAW,EAAE,EATqB;AAUlCC,EAAAA,aAAa,EAAE,EAVmB;AAWlCC,EAAAA,aAAa,EAAE,EAXmB;AAYlCC,EAAAA,IAAI,EAAE,IAZ4B;AAalCC,EAAAA,qBAAqB,EAAE,EAbW;AAclCC,EAAAA,cAAc,EAAE,EAdkB;AAelCC,EAAAA,gBAAgB,EAAE,EAfgB;AAgBlCC,EAAAA,SAAS,EAAE,EAhBuB;AAiBlCC,EAAAA,oBAAoB,EAAE;AAjBY,CAA7B;AAoBP,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,EADgB;AAE1BC,EAAAA,WAAW,EAAE;AACXrB,IAAAA,IAAI,EAAE,KADK;AAEXsB,IAAAA,OAAO,EAAE,KAFE;AAGXC,IAAAA,WAAW,EAAE;AAHF,GAFa;AAO1BC,EAAAA,mBAAmB,EAAE;AACnBC,IAAAA,WAAW,EAAE,EADM;AAEnBC,IAAAA,EAAE,EAAE,IAFe;AAGnBC,IAAAA,YAAY,EAAE;AAHK,GAPK;AAY1BC,EAAAA,eAAe,EAAE;AACfC,IAAAA,cAAc,EAAE,EADD;AAEfC,IAAAA,WAAW,EAAE;AACXC,MAAAA,GAAG,EAAE;AADM,KAFE;AAKfC,IAAAA,SAAS,EAAE,EALI;AAMfC,IAAAA,eAAe,EAAE;AANF,GAZS;AAoB1BC,EAAAA,aAAa,EAAE;AACbC,IAAAA,UAAU,EAAE,EADC;AAEbC,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE,EADA;AAETC,MAAAA,WAAW,EAAE,EAFJ;AAGTC,MAAAA,eAAe,EAAE,EAHR;AAITC,MAAAA,gBAAgB,EAAE;AAJT,KAFE;AAQbC,IAAAA,cAAc,EAAE,EARH;AASbC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE,EADI;AAEVC,MAAAA,IAAI,EAAE,EAFI;AAGVC,MAAAA,IAAI,EAAE,EAHI;AAIVC,MAAAA,IAAI,EAAE;AAJI,KATC;AAebC,IAAAA,OAAO,EAAE,eAfI;AAgBbC,IAAAA,YAAY,EAAE/C,SAhBD;AAiBb+B,IAAAA,SAAS,EAAE;AAjBE,GApBW;AAuC1BnC,EAAAA,iBAvC0B;AAwC1BoD,EAAAA,UAAU,EAAE,IAxCc;AAyC1BC,EAAAA,MAAM,EAAEjD;AAzCkB,CAArB;AA4CP,MAAMkD,QAAQ,GAAG9D,WAAW,CAAC;AAC3BK,EAAAA,IAD2B;AAE3ByB,EAAAA,YAF2B;AAG3BiC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAA+C;AACxDD,MAAAA,KAAK,CAAClC,QAAN,GAAiBmC,OAAjB;AACD,KAHO;;AAIRC,IAAAA,cAAc,CAACF,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAA8E;AAC1FD,MAAAA,KAAK,CAACjC,WAAN,mCACKiC,KAAK,CAACjC,WADX,GAEKkC,OAFL;AAID,KATO;;AAURE,IAAAA,cAAc,CAACH,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAkD;AAC9DD,MAAAA,KAAK,CAACjC,WAAN,CAAkBE,WAAlB,GAAgCgC,OAAhC;AACD,KAZO;;AAaRG,IAAAA,kBAAkB,CAACJ,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAA6C;AAC7DD,MAAAA,KAAK,CAACjC,WAAN,CAAkBrB,IAAlB,GAAyBuD,OAAzB;AACD,KAfO;;AAgBRI,IAAAA,qBAAqB,CAACL,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAA6C;AAChED,MAAAA,KAAK,CAACjC,WAAN,CAAkBC,OAAlB,GAA4BiC,OAA5B;AACD,KAlBO;;AAmBRK,IAAAA,kBAAkB,CAACN,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAwD;AACxED,MAAAA,KAAK,CAAC1B,eAAN,GAAwB2B,OAAxB;AACD,KArBO;;AAsBRM,IAAAA,gBAAgB,CAACP,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAsD;AACpED,MAAAA,KAAK,CAACpB,aAAN,GAAsBqB,OAAtB;AACD,KAxBO;;AAyBRO,IAAAA,mBAAmB,CAACR,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAA6C;AAC9DD,MAAAA,KAAK,CAACzD,iBAAN,CAAwBG,IAAxB,GAA+BuD,OAA/B;AACD,KA3BO;;AA4BRQ,IAAAA,4BAA4B,CAACT,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAwD;AAClFD,MAAAA,KAAK,CAACzD,iBAAN,CAAwBC,iBAAxB,GAA4CyD,OAA5C;AACD,KA9BO;;AA+BRS,IAAAA,wBAAwB,CAACV,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAwD;AAC9ED,MAAAA,KAAK,CAACzD,iBAAN,CAAwBE,SAAxB,GAAoCwD,OAApC;AACD,KAjCO;;AAkCRU,IAAAA,SAAS,CAACX,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAqB;AAC5BD,MAAAA,KAAK,CAACJ,MAAN,mCACKI,KAAK,CAACJ,MADX,GAEKK,OAFL;AAID,KAvCO;;AAwCRW,IAAAA,mBAAmB,CAACZ,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAqD;AACtED,MAAAA,KAAK,CAAC9B,mBAAN,GAA4B+B,OAA5B;AACD,KA1CO;;AA2CRY,IAAAA,aAAa,CAACb,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAmD;AAC9DD,MAAAA,KAAK,CAACL,UAAN,GAAmBM,OAAnB;AACD,KA7CO;;AA8CRa,IAAAA,iBAAiB,CAACd,KAAD,EAAQ;AACvBA,MAAAA,KAAK,CAACzD,iBAAN,mCACKA,iBADL;AAEEE,QAAAA,SAAS,EAAEuD,KAAK,CAACzD,iBAAN,CAAwBE;AAFrC;AAID,KAnDO;;AAoDRsE,IAAAA,cAAc,CAACf,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAoD;AAChED,MAAAA,KAAK,CAAC1B,eAAN,CAAsBE,WAAtB,CAAkCC,GAAlC,GAAwCwB,OAAxC;AACD,KAtDO;;AAuDRe,IAAAA,WAAW,CAAChB,KAAD,EAAQ;AACjB,YAAMiB,WAAW,GAAGjB,KAAK,CAACpB,aAAN,CAAoBQ,UAApB,CAA+BI,IAA/B,CAAoC0B,GAApC,CAAyCC,IAAD,IAC1DjF,CAAC,CAACkF,IAAF,CAAOD,IAAP,EAAa,CAAC,aAAD,EAAgB,cAAhB,EAAgC,IAAhC,CAAb,CADkB,CAApB;AAGAnB,MAAAA,KAAK,CAACJ,MAAN,mCACKjD,SADL;AAEEK,QAAAA,YAAY,EAAEiE;AAFhB;AAID;;AA/DO,GAHiB;AAoE3BI,EAAAA,aAAa,EAAE;AACb,KAAChF,UAAU,CAACiF,IAAZ,IAAoB;AAClB,aAAOzD,YAAP;AACD;;AAHY;AApEY,CAAD,CAA5B,C,CA2EA;;AACA,OAAO,MAAM;AAAE0D,EAAAA;AAAF,IAAc1B,QAApB,C,CAEP;;AACA,OAAO,MAAM2B,WAAW,GAAGxF,YAAY,CAAE,GAAEI,IAAK,IAAGD,WAAW,CAACsF,QAAS,EAAjC,CAAhC;AACP,OAAO,MAAMC,oBAAoB,GAAG1F,YAAY,CAAE,GAAEI,IAAK,IAAGD,WAAW,CAACwF,kBAAmB,EAA3C,CAAzC;AACP,OAAO,MAAMC,oBAAoB,GAAG5F,YAAY,CAAU,GAAEI,IAAK,IAAGD,WAAW,CAAC0F,kBAAmB,EAAnD,CAAzC;AACP,OAAO,MAAMC,eAAe,GAAG9F,YAAY,CAAE,GAAEI,IAAK,IAAGD,WAAW,CAAC4F,YAAa,EAArC,CAApC;AACP,OAAO,MAAMC,UAAU,GAAGhG,YAAY,CAAY,GAAEI,IAAK,IAAGD,WAAW,CAAC8F,MAAO,EAAzC,CAA/B;AACP,OAAO,MAAMC,UAAU,GAAGlG,YAAY,CAAsC,GAAEI,IAAK,IAAGD,WAAW,CAACgG,MAAO,EAAnE,CAA/B;AACP,OAAO,MAAMC,uBAAuB,GAAGpG,YAAY,CAAU,GAAEI,IAAK,yBAAjB,CAA5C,C,CAEP;;AACA,OAAO,MAAMiG,WAAW,GAAIrC,KAAD,IAA4BA,KAAK,CAAC5D,IAAD,CAArD;AACP,OAAO,MAAMkG,cAAc,GAAGrG,cAAc,CAACoG,WAAD,EAAerC,KAAD,IAAWA,KAAK,CAAClC,QAA/B,CAArC;AACP,OAAO,MAAMyE,mBAAmB,GAAGtG,cAAc,CAACoG,WAAD,EAAerC,KAAD,IAAWA,KAAK,CAAC1B,eAAN,CAAsBC,cAA/C,CAA1C;AACP,OAAO,MAAMiE,iBAAiB,GAAGvG,cAAc,CAACoG,WAAD,EAAerC,KAAD,IAAWA,KAAK,CAAC1B,eAAN,CAAsBE,WAAtB,CAAkCC,GAA3D,CAAxC;AAEP,OAAO,MAAMgE,iBAAiB,GAAGxG,cAAc,CAACoG,WAAD,EAAerC,KAAD,IAAWA,KAAK,CAACjC,WAA/B,CAAxC;AACP,OAAO,MAAM2E,mBAAmB,GAAGzG,cAAc,CAACoG,WAAD,EAAerC,KAAD,IAAWA,KAAK,CAACpB,aAA/B,CAA1C;AACP,OAAO,MAAM+D,uBAAuB,GAAG1G,cAAc,CAACoG,WAAD,EAAerC,KAAD,IAAWA,KAAK,CAACzD,iBAA/B,CAA9C;AAEP,OAAO,MAAMqG,YAAY,GAAG3G,cAAc,CAACoG,WAAD,EAAerC,KAAD,IAAWA,KAAK,CAACJ,MAA/B,CAAnC;AAEP,OAAO,MAAMiD,gBAAgB,GAAG5G,cAAc,CAACoG,WAAD,EAAerC,KAAD,IAAWA,KAAK,CAACL,UAA/B,CAAvC;AAEP,OAAO,MAAMmD,yBAAyB,GAAG7G,cAAc,CAACoG,WAAD,EAAerC,KAAD,IAAWA,KAAK,CAAC9B,mBAA/B,CAAhD;AACP,OAAO,MAAM6E,qBAAqB,GAAG9G,cAAc,CAACoG,WAAD,EAAerC,KAAD,IAAWA,KAAK,CAAC1B,eAA/B,CAA5C;AAEP,eAAeuB,QAAf","sourcesContent":["import { createSlice, createAction, PayloadAction, createSelector } from '@reduxjs/toolkit'\nimport _ from 'lodash'\nimport { actionTypes } from '@/utils/constant'\n\nimport type { Entity, ParameterOption, HistoryLog } from '@/types/Common'\nimport type { RootReducerType } from './rootReducer'\nimport type {\n  JobItem,\n  JobDetail,\n  JobInitDataForCE,\n  UserGroupMapping,\n  JobKeyMapping,\n  JobPermissions,\n  JobInitDataForList\n} from '@/types/Job'\n\nexport const name: Entity = 'job'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const transferListState = {\n  userAvailableList: [] as UserGroupMapping[],\n  userGroup: [] as UserGroupMapping[],\n  open: false\n}\n\nexport const jobDetail: JobDetail = {\n  job_id: '',\n  equipment_type: null,\n  language: null,\n  erection_site: null,\n  job_standard: [],\n  people_responsible: [],\n  squad_leader: [],\n  drawings_responsible: [],\n  contract_no: '',\n  contract_desc: '',\n  credit_letter: '',\n  logo: null,\n  additional_attributes: {},\n  job_currencies: [],\n  job_descriptions: [],\n  job_users: [],\n  job_expediting_dates: []\n}\n\nexport const initialState = {\n  dataList: [] as JobItem[],\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: [] as HistoryLog[]\n  },\n  selectedJobCategory: {\n    description: '',\n    id: null,\n    parameter_id: ''\n  } as ParameterOption,\n  initDataForList: {\n    job_categories: [],\n    permissions: {\n      job: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as JobInitDataForList,\n  initDataForCE: {\n    currencies: [],\n    group_map: {\n      job_all: '',\n      job_drawing: '',\n      job_responsible: '',\n      job_squad_leader: ''\n    },\n    erection_sites: [],\n    parameters: {\n      EQTY: [],\n      JOAT: [],\n      PLLA: [],\n      PLNO: []\n    },\n    tooltip: '<span></span>',\n    job_template: jobDetail,\n    wiki_page: ''\n  } as JobInitDataForCE,\n  transferListState,\n  keyMapping: null as JobKeyMapping,\n  detail: jobDetail\n}\n\nconst jobSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, { payload }: PayloadAction<JobItem[]>) {\n      state.dataList = payload\n    },\n    setDialogState(state, { payload }: PayloadAction<Partial<typeof initialState.dialogState>>) {\n      state.dialogState = {\n        ...state.dialogState,\n        ...payload\n      }\n    },\n    setHistoryLogs(state, { payload }: PayloadAction<HistoryLog[]>) {\n      state.dialogState.historyLogs = payload\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setInitDataForList(state, { payload }: PayloadAction<JobInitDataForList>) {\n      state.initDataForList = payload\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<JobInitDataForCE>) {\n      state.initDataForCE = payload\n    },\n    setOpenTransferList(state, { payload }: PayloadAction<boolean>) {\n      state.transferListState.open = payload\n    },\n    setTransferUserAvailableList(state, { payload }: PayloadAction<UserGroupMapping[]>) {\n      state.transferListState.userAvailableList = payload\n    },\n    setTransferListUserGroup(state, { payload }: PayloadAction<UserGroupMapping[]>) {\n      state.transferListState.userGroup = payload\n    },\n    setDetail(state, { payload }) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    setSelectedCategory(state, { payload }: PayloadAction<ParameterOption>) {\n      state.selectedJobCategory = payload\n    },\n    setKeyMapping(state, { payload }: PayloadAction<JobKeyMapping>) {\n      state.keyMapping = payload\n    },\n    closeTransferList(state) {\n      state.transferListState = {\n        ...transferListState,\n        userGroup: state.transferListState.userGroup\n      }\n    },\n    setPermissions(state, { payload }: PayloadAction<JobPermissions>) {\n      state.initDataForList.permissions.job = payload\n    },\n    resetDetail(state) {\n      const jobStandard = state.initDataForCE.parameters.PLNO.map((item) =>\n        _.pick(item, ['description', 'parameter_id', 'id'])\n      ) as any\n      state.detail = {\n        ...jobDetail,\n        job_standard: jobStandard\n      }\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\n// Actions\nexport const { actions } = jobSlice\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaCreate = createAction<FormData>(`${name}/${actionTypes.CREATE}`)\nexport const sagaUpdate = createAction<{ id: number; formData: FormData }>(`${name}/${actionTypes.UPDATE}`)\nexport const sagaGetUserGroupMapping = createAction<string>(`${name}/GET_USER_GROUP_MAPPING`)\n\n// Selector\nexport const selectState = (state: RootReducerType) => state[name]\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\nexport const selectJobCategories = createSelector(selectState, (state) => state.initDataForList.job_categories)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.job)\n\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\nexport const selectInitDataForCE = createSelector(selectState, (state) => state.initDataForCE)\nexport const selectTransferListState = createSelector(selectState, (state) => state.transferListState)\n\nexport const selectDetail = createSelector(selectState, (state) => state.detail)\n\nexport const selectKeyMapping = createSelector(selectState, (state) => state.keyMapping)\n\nexport const selectSelectedJobCategory = createSelector(selectState, (state) => state.selectedJobCategory)\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\n\nexport default jobSlice\n"]},"metadata":{},"sourceType":"module"}