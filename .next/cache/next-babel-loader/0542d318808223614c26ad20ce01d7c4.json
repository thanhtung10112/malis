{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(updateMultiple),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(cancelBackgroundJob),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(executeOperation),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(commonSaga);\n\nimport { takeEvery, putResolve } from 'redux-saga/effects';\nimport { select, put, call } from 'typed-redux-saga';\nimport { createAction } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nimport _ from 'lodash';\nimport Router from 'next/router';\nimport HttpService from '@/helper/HttpService';\nimport { commonStore, summaryReportActions } from '@/store/reducers';\nimport commonApi from '@/apis/common.api';\nimport { plural } from 'pluralize';\n\nvar getApiUpdateMultiple = function getApiUpdateMultiple(entity) {\n  var pluralEntity = plural(entity);\n  var api = new HttpService(pluralEntity);\n  return api.updateMultiple;\n};\n\nfunction updateMultiple(_ref) {\n  var payload, entity, action, payloadAction, href, api, editRow, data, getListAction;\n  return _regeneratorRuntime.wrap(function updateMultiple$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          entity = payload.entity, action = payload.action, payloadAction = payload.payloadAction, href = payload.href;\n          api = getApiUpdateMultiple(entity);\n          return _context.delegateYield(select(commonStore.selectEditRows), \"t0\", 5);\n\n        case 5:\n          editRow = _context.t0;\n          _context.next = 8;\n          return putResolve(commonStore.actions.setLoadingPage(true));\n\n        case 8:\n          _context.next = 10;\n          return call(api, editRow);\n\n        case 10:\n          data = _context.sent;\n          _context.next = 13;\n          return put(commonStore.actions.setSuccessMessage(data.message));\n\n        case 13:\n          _context.next = 15;\n          return putResolve(commonStore.actions.setLoadingPage(false));\n\n        case 15:\n          if (!href) {\n            _context.next = 19;\n            break;\n          }\n\n          Router.push(href);\n          _context.next = 28;\n          break;\n\n        case 19:\n          if (!(action && _.isFunction(action))) {\n            _context.next = 24;\n            break;\n          }\n\n          _context.next = 22;\n          return put(action(payloadAction));\n\n        case 22:\n          _context.next = 28;\n          break;\n\n        case 24:\n          if (!entity) {\n            _context.next = 28;\n            break;\n          }\n\n          getListAction = createAction(\"\".concat(entity, \"/\").concat(actionTypes.GET_LIST));\n          _context.next = 28;\n          return put(getListAction());\n\n        case 28:\n          _context.next = 34;\n          break;\n\n        case 30:\n          _context.prev = 30;\n          _context.t1 = _context[\"catch\"](1);\n          _context.next = 34;\n          return put(commonStore.actions.setError(_context.t1));\n\n        case 34:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 30]]);\n}\n\nfunction cancelBackgroundJob(_ref2) {\n  var payload, _yield$call, message;\n\n  return _regeneratorRuntime.wrap(function cancelBackgroundJob$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context2.next = 3;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 3:\n          _context2.prev = 3;\n          _context2.next = 6;\n          return call(commonApi.stopBackgroundJob, payload);\n\n        case 6:\n          _yield$call = _context2.sent;\n          message = _yield$call.message;\n          _context2.next = 10;\n          return put(commonStore.actions.setSuccessMessage(message));\n\n        case 10:\n          _context2.next = 16;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](3);\n          _context2.next = 16;\n          return put(commonStore.actions.setError(_context2.t0));\n\n        case 16:\n          _context2.next = 18;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[3, 12]]);\n}\n\nfunction getExecuteOperationApi(entityParam) {\n  var entity = entityParam;\n\n  if (entity === 'manufacturing_standard' || entity === 'material_standard') {\n    entity = 'equivalence';\n  }\n\n  var pluralEntity = plural(entity);\n  var api = new HttpService(pluralEntity);\n  return api.executeOperation;\n}\n\nfunction executeOperation(_ref3) {\n  var payload, entity, operation, operationList, apiReq, data, getListAction;\n  return _regeneratorRuntime.wrap(function executeOperation$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          payload = _ref3.payload;\n          _context3.next = 3;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 3:\n          _context3.prev = 3;\n          entity = payload.entity, operation = payload.operation, operationList = payload.operationList;\n          apiReq = getExecuteOperationApi(entity);\n          _context3.next = 8;\n          return call(apiReq, operation, operationList);\n\n        case 8:\n          data = _context3.sent;\n          _context3.next = 11;\n          return putResolve(commonStore.actions.setLoadingPage(false));\n\n        case 11:\n          if (!(data.failed_count > 0)) {\n            _context3.next = 18;\n            break;\n          }\n\n          _context3.next = 14;\n          return put(summaryReportActions.setReportData(data));\n\n        case 14:\n          _context3.next = 16;\n          return put(summaryReportActions.setOpen(true));\n\n        case 16:\n          _context3.next = 20;\n          break;\n\n        case 18:\n          _context3.next = 20;\n          return put(commonStore.actions.setSuccessMessage(data.message));\n\n        case 20:\n          getListAction = createAction(\"\".concat(entity, \"/\").concat(actionTypes.GET_LIST));\n          _context3.next = 23;\n          return putResolve(getListAction());\n\n        case 23:\n          _context3.next = 29;\n          break;\n\n        case 25:\n          _context3.prev = 25;\n          _context3.t0 = _context3[\"catch\"](3);\n          _context3.next = 29;\n          return put(commonStore.actions.setError(_context3.t0));\n\n        case 29:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[3, 25]]);\n}\n\nfunction commonSaga() {\n  return _regeneratorRuntime.wrap(function commonSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(commonStore.sagaUpdateMultiple, updateMultiple);\n\n        case 2:\n          _context4.next = 4;\n          return takeEvery(commonStore.sagaCancelBackgroundJob, cancelBackgroundJob);\n\n        case 4:\n          _context4.next = 6;\n          return takeEvery(commonStore.sagaExecuteOperation, executeOperation);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default commonSaga;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/saga/common.saga.ts"],"names":["updateMultiple","cancelBackgroundJob","executeOperation","commonSaga","takeEvery","putResolve","select","put","call","createAction","actionTypes","_","Router","HttpService","commonStore","summaryReportActions","commonApi","plural","getApiUpdateMultiple","entity","pluralEntity","api","payload","action","payloadAction","href","selectEditRows","editRow","actions","setLoadingPage","data","setSuccessMessage","message","push","isFunction","getListAction","GET_LIST","setError","stopBackgroundJob","getExecuteOperationApi","entityParam","operation","operationList","apiReq","failed_count","setReportData","setOpen","sagaUpdateMultiple","sagaCancelBackgroundJob","sagaExecuteOperation"],"mappings":"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","sourcesContent":["import { takeEvery, putResolve } from 'redux-saga/effects'\nimport { select, put, call } from 'typed-redux-saga'\nimport { createAction } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\nimport _ from 'lodash'\nimport Router from 'next/router'\nimport HttpService from '@/helper/HttpService'\n\nimport { commonStore, summaryReportActions } from '@/store/reducers'\n\nimport commonApi from '@/apis/common.api'\n\nimport { plural } from 'pluralize'\n\nimport type { Entity } from '@/types/Common'\n\nconst getApiUpdateMultiple = (entity) => {\n  const pluralEntity = plural(entity)\n  const api = new HttpService(pluralEntity)\n  return api.updateMultiple\n}\n\nfunction* updateMultiple({ payload }) {\n  try {\n    const { entity, action, payloadAction, href } = payload\n    const api = getApiUpdateMultiple(entity)\n    const editRow = yield* select(commonStore.selectEditRows)\n    yield putResolve(commonStore.actions.setLoadingPage(true))\n    const data = yield call(api, editRow)\n    yield put(commonStore.actions.setSuccessMessage(data.message))\n    yield putResolve(commonStore.actions.setLoadingPage(false))\n    if (href) {\n      Router.push(href)\n    } else if (action && _.isFunction(action)) {\n      yield put(action(payloadAction))\n    } else if (entity) {\n      const getListAction = createAction(`${entity}/${actionTypes.GET_LIST}`)\n      yield put(getListAction())\n    }\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n}\n\nfunction* cancelBackgroundJob({ payload }: ReturnType<typeof commonStore.sagaCancelBackgroundJob>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const { message } = yield call(commonApi.stopBackgroundJob, payload)\n    yield put(commonStore.actions.setSuccessMessage(message))\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction getExecuteOperationApi(entityParam: Entity) {\n  let entity = entityParam\n  if (entity === 'manufacturing_standard' || entity === 'material_standard') {\n    entity = 'equivalence'\n  }\n  const pluralEntity = plural(entity)\n  const api = new HttpService(pluralEntity)\n  return api.executeOperation\n}\n\nfunction* executeOperation({ payload }: ReturnType<typeof commonStore.sagaExecuteOperation>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const { entity, operation, operationList } = payload\n    const apiReq = getExecuteOperationApi(entity)\n    const data = yield call(apiReq, operation, operationList)\n    yield putResolve(commonStore.actions.setLoadingPage(false))\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data))\n      yield put(summaryReportActions.setOpen(true))\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message))\n    }\n    const getListAction = createAction(`${entity}/${actionTypes.GET_LIST}`)\n    yield putResolve(getListAction())\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n}\n\nfunction* commonSaga() {\n  yield takeEvery(commonStore.sagaUpdateMultiple, updateMultiple)\n  yield takeEvery(commonStore.sagaCancelBackgroundJob, cancelBackgroundJob)\n  yield takeEvery(commonStore.sagaExecuteOperation, executeOperation)\n}\n\nexport default commonSaga\n"]},"metadata":{},"sourceType":"module"}