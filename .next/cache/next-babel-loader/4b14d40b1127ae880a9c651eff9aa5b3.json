{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport _ from 'lodash';\nimport { parseCookies } from 'nookies';\nimport { singular } from 'pluralize';\n\nclass HttpService {\n  constructor(entity) {\n    _defineProperty(this, \"_instance\", void 0);\n\n    _defineProperty(this, \"_entity\", void 0);\n\n    _defineProperty(this, \"saveToken\", () => {\n      const cookies = parseCookies();\n\n      if (_.size(cookies.token) !== 0) {\n        this._instance.defaults.headers.common['Authorization'] = `Bearer ${cookies.token}`;\n      }\n    });\n\n    _defineProperty(this, \"get\", (endpoint, params) => {\n      this.saveToken();\n      return this._instance.get(endpoint, {\n        params\n      });\n    });\n\n    _defineProperty(this, \"post\", (endpoint, data) => {\n      this.saveToken();\n      return this._instance.post(endpoint, data);\n    });\n\n    _defineProperty(this, \"put\", (endpoint, data) => {\n      this.saveToken();\n      return this._instance.put(endpoint, data);\n    });\n\n    _defineProperty(this, \"delete\", (endpoint, data) => {\n      this.saveToken();\n      return this._instance.delete(endpoint, {\n        data\n      });\n    });\n\n    _defineProperty(this, \"getInitDataForList\", (params = {}) => {\n      const singularEntity = singular(this._entity);\n      return this.get('init_data', _objectSpread({\n        comp_name: `list_${singularEntity}`\n      }, params));\n    });\n\n    _defineProperty(this, \"getInitDataForCE\", (params = {}) => {\n      const singularEntity = singular(this._entity);\n      return this.get('init_data', _objectSpread({\n        comp_name: `create_edit_${singularEntity}`\n      }, params));\n    });\n\n    _defineProperty(this, \"getList\", (params = {}) => {\n      return this.get(this._entity, params);\n    });\n\n    _defineProperty(this, \"getDetail\", id => {\n      return this.get(`${this._entity}/${id}`);\n    });\n\n    _defineProperty(this, \"create\", data => {\n      return this.post(this._entity, data);\n    });\n\n    _defineProperty(this, \"update\", (id, data) => {\n      return this.put(`${this._entity}/${id}`, data);\n    });\n\n    _defineProperty(this, \"updateMultiple\", data => {\n      return this.put(this._entity, {\n        [this._entity]: data\n      });\n    });\n\n    _defineProperty(this, \"executeOperation\", (operation, data) => {\n      if (operation === 'delete') {\n        return this.delete(this._entity, {\n          [this._entity]: data\n        });\n      }\n\n      return this.put(`${this._entity}/${operation}`, {\n        [this._entity]: data\n      });\n    });\n\n    _defineProperty(this, \"getGeneratedCode\", query => this.get(`${this._entity}/generate_code`, query));\n\n    this._instance = axios.create({\n      baseURL: process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:5000/'\n    });\n\n    this._instance.interceptors.response.use(this.handleSuccessRes, this.handleErrorRes);\n\n    this._entity = entity;\n  }\n\n  handleSuccessRes(res) {\n    return res.data;\n  }\n\n  handleErrorRes(error) {\n    return Promise.reject(error);\n  }\n\n}\n\nexport default HttpService;","map":null,"metadata":{},"sourceType":"module"}