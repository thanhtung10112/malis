{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport { useForm } from 'react-hook-form';\nimport _ from 'lodash';\nimport { Button, Tab, Tabs, Checkbox, TextField, FormControlLabel, Typography, Grid, Tooltip } from '@material-ui/core';\nimport { FileCopy as FileCopyIcon, Edit as EditIcon, Save as SaveIcon, Delete as DeleteIcon, FilterList as FilterIcon, Close as CloseIcon } from '@material-ui/icons';\nimport { MalisPanel, DialogMain, useConfirm, confirmConstant, FormControllerTextField } from '@/components/index';\nimport { When, Unless } from 'react-if';\nimport ConditionTree from './ConditionTree';\nimport SortConditionList from './SortConditionList';\nimport useStyles from './styles';\nimport { authStore, advancedFilterActions, commonStore } from '@/store/reducers';\nexport var conjunctions = [{\n  description: 'AND',\n  value: 'AND'\n}, {\n  description: 'OR',\n  value: 'OR'\n}];\n\nfunction FilterDetails(_ref) {\n  var _saveAsForm$errors$sa;\n\n  var activeTab = _ref.activeTab,\n      onChangeActiveTab = _ref.onChangeActiveTab;\n  // props.entity is the thing that you will pass to the backend to get the corresponding data for each module\n  var classes = useStyles();\n\n  var _useConfirm = useConfirm(),\n      confirm = _useConfirm.confirm;\n\n  var _useTranslation = useTranslation(['common', 'advanced_filter']),\n      t = _useTranslation.t;\n\n  var dispatch = useDispatch();\n  var columnOptions = useSelector(advancedFilterActions.selectColumn);\n  var comparatorOptions = useSelector(advancedFilterActions.selectComparator);\n  var sortOptions = useSelector(advancedFilterActions.selectSortOptions);\n  var conditionTreeData = useSelector(advancedFilterActions.selectConditionTree);\n  var sortConditions = useSelector(advancedFilterActions.selectSortConditions);\n  var isUserDefault = useSelector(advancedFilterActions.selectUserDefault);\n  var filterName = useSelector(advancedFilterActions.selectFilterDetailName);\n  var isEditMode = useSelector(advancedFilterActions.selectEditMode);\n  var filterDetail = useSelector(advancedFilterActions.selectFilterDetail);\n  var permissions = useSelector(advancedFilterActions.selectPermissions);\n  var loading = useSelector(advancedFilterActions.selectLoading);\n  var afFormSelector = useSelector(advancedFilterActions.selectAfForm);\n  var saveAsFormSelector = useSelector(advancedFilterActions.selectSaveAsForm);\n  var userInfo = useSelector(authStore.selectProfile);\n  var isSharedMode = filterDetail.created_by && filterDetail.created_by !== userInfo.user_name;\n  var conjunctionOptions = conjunctions;\n  var treeData = useMemo(function () {\n    return _.cloneDeep(conditionTreeData);\n  }, [conditionTreeData]);\n  var sortData = useMemo(function () {\n    return _.cloneDeep(sortConditions);\n  }, [sortConditions]);\n  var saveAsForm = useForm({\n    defaultValues: {\n      save_as_name: ''\n    },\n    shouldUnregister: false\n  });\n  var afForm = useForm({\n    defaultValues: {\n      name: ''\n    },\n    shouldUnregister: false\n  });\n  var formValidation = {\n    name: {\n      required: {\n        value: true,\n        message: t('advanced_filter:validations.name_required')\n      },\n      maxLength: {\n        value: 80,\n        message: t('advanced_filter:validations.name_max_length')\n      }\n    }\n  };\n  useEffect(function () {\n    afForm.setValue('name', filterDetail.name);\n    afForm.clearErrors();\n  }, [filterDetail]);\n  useEffect(function () {\n    if (afFormSelector.error) {\n      afForm.setError('name', {\n        message: afFormSelector.error\n      });\n    }\n  }, [afFormSelector.error]);\n  useEffect(function () {\n    if (saveAsFormSelector.error) {\n      saveAsForm.setError('save_as_name', {\n        message: saveAsFormSelector.error\n      });\n    }\n  }, [saveAsFormSelector.error]);\n  useEffect(function () {\n    if (saveAsFormSelector.clearError) {\n      saveAsForm.clearErrors();\n    }\n  }, [saveAsFormSelector.clearError]);\n  useEffect(function () {\n    if (afFormSelector.clearError) {\n      afForm.clearErrors();\n    }\n  }, [afFormSelector.clearError]);\n  var onSubmitTreeData = afForm.handleSubmit(function (data) {\n    dispatch(advancedFilterActions.setFilterDetail(_objectSpread(_objectSpread({}, data), {}, {\n      where_conditions: treeData,\n      sort_conditions: sortData\n    })));\n\n    if (isEditMode) {\n      dispatch(advancedFilterActions.update());\n    } else {\n      dispatch(advancedFilterActions.create());\n    }\n\n    afForm.clearErrors();\n  });\n\n  var onSetDefaultFilter = function onSetDefaultFilter(_, checked) {\n    var nameTextBoxValue = afForm.getValues('name');\n    dispatch(advancedFilterActions.setFilterDetail({\n      name: nameTextBoxValue,\n      is_user_default: checked\n    }));\n  };\n\n  var onCloseAdvanceSearch = function onCloseAdvanceSearch() {\n    dispatch(advancedFilterActions.resetState());\n    dispatch(commonStore.actions.setTableState({\n      page: 1\n    }));\n    dispatch(advancedFilterActions.close());\n  };\n\n  var onDeleteFilter = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var title, description, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              title = t('advanced_filter:confirmation.title');\n              description = t('advanced_filter:confirmation.message_delete');\n              _context.next = 4;\n              return confirm({\n                title: title,\n                description: description\n              });\n\n            case 4:\n              result = _context.sent;\n\n              if (result === confirmConstant.actionTypes.OK) {\n                dispatch(advancedFilterActions.remove());\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onDeleteFilter() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onSaveAsSharedFilter = function onSaveAsSharedFilter() {\n    dispatch(advancedFilterActions.setFilterDetail({\n      is_shared: false,\n      where_conditions: treeData,\n      sort_conditions: sortData\n    }));\n    dispatch(advancedFilterActions.setSaveAsForm({\n      open: true\n    }));\n    var copyName = \"Copy of \".concat(filterName);\n    saveAsForm.setValue('save_as_name', copyName);\n\n    if (copyName.length > formValidation.name.maxLength.value) {\n      saveAsForm.setError('save_as_name', {\n        type: 'manual',\n        message: formValidation.name.maxLength.message\n      });\n    }\n  };\n\n  var onSubmitToSaveAs = saveAsForm.handleSubmit(function (data) {\n    dispatch(advancedFilterActions.saveAs(data.save_as_name));\n  });\n\n  var onCloseSaveAsForm = function onCloseSaveAsForm() {\n    saveAsForm.clearErrors();\n    saveAsForm.reset();\n    dispatch(advancedFilterActions.setSaveAsForm({\n      open: false\n    }));\n  };\n\n  var onApplyAdvanceSearch = function onApplyAdvanceSearch() {\n    var where_conditions = _.cloneDeep(treeData);\n\n    var sort_conditions = _.cloneDeep(sortData);\n\n    dispatch(advancedFilterActions.setDefaultFilter({\n      where_conditions: where_conditions,\n      sort_conditions: sort_conditions\n    }));\n    dispatch(advancedFilterActions.apply());\n  };\n\n  var onUpdateSystemFilter = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var title, description, result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              title = t('advanced_filter:confirmation.title_warning');\n              description = t('advanced_filter:confirmation.description_warning');\n              _context2.next = 4;\n              return confirm({\n                title: title,\n                description: description\n              });\n\n            case 4:\n              result = _context2.sent;\n\n              if (result === confirmConstant.actionTypes.OK) {\n                dispatch(advancedFilterActions.setFilterDetail({\n                  where_conditions: treeData,\n                  sort_conditions: sortData\n                }));\n                dispatch(advancedFilterActions.update());\n              }\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onUpdateSystemFilter() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      alignItems: \"center\",\n      spacing: 2,\n      component: \"form\",\n      id: \"af-form\",\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 7,\n        children: /*#__PURE__*/_jsx(FormControllerTextField, {\n          label: t('advanced_filter:filter_details.name_input'),\n          variant: \"outlined\",\n          name: \"name\",\n          required: true,\n          disabled: isSharedMode,\n          autoFocus: !isSharedMode,\n          control: afForm.control,\n          rules: formValidation.name\n        })\n      }), /*#__PURE__*/_jsx(Unless, {\n        condition: filterDetail.is_system_default,\n        children: /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 5,\n          style: {\n            padding: 0\n          },\n          children: /*#__PURE__*/_jsx(FormControlLabel, {\n            disabled: false,\n            control: /*#__PURE__*/_jsx(Checkbox, {\n              name: \"setAsDefault\",\n              color: \"primary\",\n              checked: isUserDefault,\n              onChange: onSetDefaultFilter,\n              className: classes.checkboxSetDefault\n            }),\n            label: /*#__PURE__*/_jsx(Typography, {\n              component: \"span\",\n              variant: \"body2\",\n              children: t('advanced_filter:filter_details.set_as_default')\n            })\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(Tabs, {\n      value: activeTab,\n      onChange: onChangeActiveTab,\n      children: [/*#__PURE__*/_jsx(Tab, {\n        label: t('advanced_filter:filter_details.filter_tab')\n      }), /*#__PURE__*/_jsx(Tab, {\n        label: t('advanced_filter:filter_details.sort_tab')\n      })]\n    }), /*#__PURE__*/_jsx(MalisPanel, {\n      value: activeTab,\n      index: 0,\n      className: classes.tabPanel,\n      children: /*#__PURE__*/_jsx(ConditionTree, {\n        columnOptions: columnOptions,\n        comparatorOptions: comparatorOptions,\n        conjunctionOptions: conjunctionOptions,\n        data: treeData,\n        maxLevel: 2,\n        disabled: false\n      })\n    }), /*#__PURE__*/_jsx(MalisPanel, {\n      value: activeTab,\n      index: 1,\n      className: classes.tabPanel,\n      children: /*#__PURE__*/_jsx(SortConditionList, {\n        columnOptions: columnOptions,\n        sortOptions: sortOptions,\n        sortData: sortData,\n        disabled: false\n      })\n    }), /*#__PURE__*/_jsxs(\"section\", {\n      className: classes.wrapButtonGroup,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: classes.wrapButtonLeft,\n        children: [/*#__PURE__*/_jsx(When, {\n          condition: isSharedMode,\n          children: /*#__PURE__*/_jsx(Button, {\n            variant: \"contained\",\n            onClick: onSaveAsSharedFilter,\n            startIcon: /*#__PURE__*/_jsx(FileCopyIcon, {}),\n            children: t('common:button.save_as')\n          })\n        }), /*#__PURE__*/_jsx(When, {\n          condition: filterDetail.is_system_default && permissions.update_system_default_presets,\n          children: /*#__PURE__*/_jsx(Tooltip, {\n            title: t('advanced_filter:tooltip.update'),\n            children: /*#__PURE__*/_jsx(Button, {\n              variant: \"contained\",\n              onClick: onUpdateSystemFilter,\n              style: {\n                marginLeft: '5px'\n              },\n              children: t('common:button.update')\n            })\n          })\n        }), /*#__PURE__*/_jsx(Unless, {\n          condition: isSharedMode,\n          children: /*#__PURE__*/_jsx(Tooltip, {\n            title: isEditMode ? t('advanced_filter:tooltip.update') : t('advanced_filter:tooltip.create'),\n            children: /*#__PURE__*/_jsx(Button, {\n              variant: \"contained\",\n              type: \"submit\",\n              form: \"af-form\",\n              onClick: onSubmitTreeData,\n              startIcon: isEditMode ? /*#__PURE__*/_jsx(EditIcon, {}) : /*#__PURE__*/_jsx(SaveIcon, {}),\n              children: isEditMode ? t('common:button.update') : t('common:button.create')\n            })\n          })\n        }), /*#__PURE__*/_jsx(When, {\n          condition: !isSharedMode && isEditMode,\n          children: /*#__PURE__*/_jsx(Button, {\n            variant: \"contained\",\n            color: \"default\",\n            style: {\n              marginLeft: '5px'\n            },\n            onClick: onDeleteFilter,\n            startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n            children: t('common:button.delete')\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: classes.wrapButtonRight,\n        children: [/*#__PURE__*/_jsx(Tooltip, {\n          title: t('advanced_filter:tooltip.apply'),\n          children: /*#__PURE__*/_jsx(Button, {\n            variant: \"contained\",\n            onClick: onApplyAdvanceSearch,\n            startIcon: /*#__PURE__*/_jsx(FilterIcon, {}),\n            children: t('common:button.apply')\n          })\n        }), /*#__PURE__*/_jsx(Tooltip, {\n          title: t('advanced_filter:tooltip.close'),\n          children: /*#__PURE__*/_jsx(Button, {\n            onClick: onCloseAdvanceSearch,\n            startIcon: /*#__PURE__*/_jsx(CloseIcon, {}),\n            variant: \"contained\",\n            style: {\n              marginLeft: 5\n            },\n            children: t('common:button.close')\n          })\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(DialogMain, {\n      open: saveAsFormSelector.open,\n      title: t('advanced_filter:confirmation.save_as_title'),\n      maxWidth: \"sm\",\n      loading: loading.dialog,\n      onOk: onSubmitToSaveAs,\n      okText: t('common:button.save'),\n      onClose: onCloseSaveAsForm,\n      closeText: t('common:button.cancel'),\n      children: /*#__PURE__*/_jsx(TextField, {\n        style: {\n          marginTop: 8\n        },\n        name: \"save_as_name\",\n        label: t('advanced_filter:filter_details.name_input'),\n        autoFocus: true,\n        required: true,\n        error: Boolean(saveAsForm.errors.save_as_name),\n        helperText: (_saveAsForm$errors$sa = saveAsForm.errors.save_as_name) === null || _saveAsForm$errors$sa === void 0 ? void 0 : _saveAsForm$errors$sa.message,\n        inputRef: saveAsForm.register(formValidation.name)\n      })\n    })]\n  });\n}\n\nexport default FilterDetails;","map":null,"metadata":{},"sourceType":"module"}