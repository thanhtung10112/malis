{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect, memo } from 'react';\nimport { Grid, Button } from '@material-ui/core';\nimport { DataTable, AppTitle, AppAutocompleteStyled, DeleteIcon, DataTableCellExpand, DataTableNumberField } from '@/components';\nimport { useSelector } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport useStyles from './styles';\nimport { useTranslation } from 'next-i18next';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport { currencyRateFormat } from '@/utils/constant';\nimport * as columnProperties from '@/utils/columnProperties';\nimport AppNumber from '@/helper/AppNumber';\nimport { jobStore } from '@/store/reducers';\nimport * as yup from 'yup';\n\nfunction TableJobCurrencies() {\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation('currency'),\n      t = _useTranslation.t;\n\n  var jobForm = useFormContext();\n  var watchJobCurrencies = jobForm.watch('job_currencies', []);\n\n  var _useSelector = useSelector(jobStore.selectInitDataForCE),\n      currencies = _useSelector.currencies;\n\n  var jobDetail = useSelector(jobStore.selectDetail);\n\n  var _useState = useState([]),\n      selectedCurrencies = _useState[0],\n      setSelectedCurrencies = _useState[1];\n\n  var _useState2 = useState(null),\n      selectedCurrency = _useState2[0],\n      setSelectedCurrency = _useState2[1];\n\n  useEffect(function () {\n    setSelectedCurrency(null);\n  }, [jobDetail]);\n\n  var onSelectJobCurrency = function onSelectJobCurrency(event, value) {\n    setSelectedCurrency(value);\n    var newJobCurrencies = immer(watchJobCurrencies, function (draft) {\n      draft.push(value);\n    });\n    jobForm.setValue('job_currencies', newJobCurrencies);\n  };\n\n  var onSelectedCurrencies = function onSelectedCurrencies(_ref) {\n    var selectionModel = _ref.selectionModel;\n    setSelectedCurrencies(selectionModel);\n  };\n\n  var onDeleteSelectedCurrencies = function onDeleteSelectedCurrencies() {\n    var newJobCurrencies = watchJobCurrencies.filter(function (currency) {\n      return !selectedCurrencies.some(function (selC) {\n        return selC === currency.id;\n      });\n    });\n    jobForm.setValue('job_currencies', newJobCurrencies);\n    setSelectedCurrencies([]);\n  };\n\n  var onChangeRateCurrency = function onChangeRateCurrency(id, rate) {\n    var newJobCurrencies = immer(watchJobCurrencies, function (draft) {\n      var index = _.findIndex(draft, {\n        id: id\n      });\n\n      draft[index].rate = rate;\n    });\n    jobForm.setValue('job_currencies', newJobCurrencies);\n  };\n\n  var columns = [{\n    field: 'description',\n    headerName: 'Currency',\n    flex: 0.7,\n    sortable: false\n  }, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.numberColumn), columnProperties.editCell('Rate')), {}, {\n    field: 'rate',\n    flex: 0.3,\n    renderCell: function renderCell(params) {\n      var value = AppNumber.format(params.value, currencyRateFormat);\n      return /*#__PURE__*/_jsx(DataTableCellExpand, {\n        value: value,\n        width: params.colDef.width\n      });\n    },\n    renderEditCell: function renderEditCell(params) {\n      return /*#__PURE__*/_jsx(DataTableNumberField, {\n        params: params,\n        onChangeValue: onChangeRateCurrency,\n        decimalScale: currencyRateFormat.precision,\n        fixedDecimalScale: currencyRateFormat.precision,\n        rules: yup.number().nullable().required(t('validation_message.rate_required')).min(currencyRateFormat.min, t('validation_message.rate_range')).max(currencyRateFormat.max, t('validation_message.rate_range'))\n      });\n    }\n  })];\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(AppTitle, {\n        label: \"Currency Rate\"\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: classes.currencyTop,\n        children: [/*#__PURE__*/_jsx(AppAutocompleteStyled, {\n          value: selectedCurrency,\n          width: 280,\n          height: 30,\n          label: \"Currency\",\n          options: currencies,\n          renderOption: function renderOption(option) {\n            return option.description;\n          },\n          className: classes.currencyOption,\n          onChange: onSelectJobCurrency,\n          getOptionDisabled: function getOptionDisabled(option) {\n            return watchJobCurrencies.some(function (currency) {\n              return currency.id === option.id;\n            });\n          }\n        }), /*#__PURE__*/_jsx(Button, {\n          startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n          className: classes.deleteButton,\n          disabled: selectedCurrencies.length <= 0,\n          onClick: onDeleteSelectedCurrencies,\n          children: t('common:button.delete')\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.currencyTable,\n      children: /*#__PURE__*/_jsx(DataTable, {\n        hideFooter: true,\n        disableSelectionOnClick: true,\n        disableColumnMenu: true,\n        checkboxSelection: true,\n        selectionModel: selectedCurrencies,\n        columns: columns,\n        rows: watchJobCurrencies,\n        tableHeight: 110,\n        onSelectionModelChange: onSelectedCurrencies\n      })\n    })]\n  });\n}\n\nexport default /*#__PURE__*/memo(TableJobCurrencies);","map":null,"metadata":{},"sourceType":"module"}