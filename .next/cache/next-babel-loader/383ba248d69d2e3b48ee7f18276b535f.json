{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { takeEvery, put, putResolve } from 'redux-saga/effects';\nimport { select, call, all } from 'typed-redux-saga';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport { drawingStore, commonStore, advancedFilterActions, specificationStore, partStore, tagStore } from '@/store/reducers';\nimport _ from 'lodash';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nimport { fetchSpecificationDetail } from '@/store/saga/specification.saga';\nimport drawingApi from '@/apis/drawing.api';\nexport function* fetchDrawingInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n  const data = yield call(drawingApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  });\n\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {};\n  }\n\n  if (userJob.value === -1 || userJob.value === -2) {\n    data.selected_job = userJob;\n  }\n\n  yield put(commonStore.actions.setUserValueJob(data.selected_job));\n  yield put(drawingStore.actions.setInitDataForList(data));\n}\nexport function* fetchDrawingInitDataForCE(jobId = null) {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n\n  const _yield$call = yield call(drawingApi.getInitDataForCE, {\n    job_id_pk: jobId || userJob.value\n  }),\n        {\n    permissions,\n    user_job\n  } = _yield$call,\n        dataInit = _objectWithoutProperties(_yield$call, [\"permissions\", \"user_job\"]);\n\n  const detailDefaultValue = getDefaultValues(dataInit.parameters, {\n    drawing_purpose: 'DWPU',\n    file_prefix: 'FPRE',\n    file_type: 'FTYP',\n    drawing_format: 'PLFO'\n  }); // if you are in create mode, then set jobId for the assembly form\n\n  if (_.isNull(jobId)) {\n    detailDefaultValue.job_id = userJob.value;\n  }\n\n  if (!_.isNull(detailDefaultValue.drawing_purpose) && _.isNull(jobId)) {\n    const drawingPurpose = _.find(dataInit.parameters.DWPU, {\n      id: detailDefaultValue.drawing_purpose\n    });\n\n    const {\n      exclude_from\n    } = drawingPurpose === null || drawingPurpose === void 0 ? void 0 : drawingPurpose.properties;\n\n    if (_.isString(exclude_from) && _.size(exclude_from) > 0) {\n      const excludeList = {\n        C: 'exclude_from_customer',\n        O: 'exclude_from_other',\n        S: 'exclude_from_supplier'\n      };\n      const excludeFrom = exclude_from.split(';'); // C;O;S => [C, O, S]\n\n      _.forIn(excludeList, (value, key) => {\n        if (excludeFrom.includes(key)) {\n          detailDefaultValue[value] = true;\n        }\n      });\n    }\n  }\n\n  yield put(drawingStore.actions.setInitDataForCE(dataInit));\n  yield put(drawingStore.actions.setDetail(detailDefaultValue));\n}\nexport function* fetchDrawingList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData,\n    userJob,\n    drawingGroup\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    drawingGroup: select(drawingStore.selectDrawingGroupId)\n  });\n\n  if (!userJob.value) {\n    return;\n  }\n\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(drawingApi.getList, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    drawing_group_id: drawingGroup\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(drawingStore.actions.setDataList(data.drawings));\n}\nexport function* fetchDrawingPartList(drawingId) {\n  const {\n    drawing\n  } = yield call(drawingApi.getDetail, drawingId);\n  yield put(drawingStore.actions.setComponentList(drawing.item_list));\n}\nexport function* getDrawingPartList() {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const drawingDetail = yield* select(drawingStore.selectDetail);\n    yield call(fetchDrawingPartList, drawingDetail.id);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\nexport function* getDrawingList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchDrawingInitDataForList);\n    const permissions = yield* select(drawingStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchDrawingList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* openDrawingCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchDrawingInitDataForCE);\n    yield put(drawingStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* changeUserJob({\n  payload\n}) {\n  yield putResolve(commonStore.actions.setUserValueJob(payload));\n  yield call(getDrawingList);\n}\nexport function* createDrawing({\n  payload\n}) {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      message\n    } = yield call(drawingApi.create, payload);\n    const userJob = yield* select(commonStore.selectUserValueJob);\n    yield putResolve(drawingStore.actions.resetDetail({\n      userJob\n    }));\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(drawingStore.actions.setDialogStateTab(0))]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\nexport function* closeDrawingDialog() {\n  try {\n    const userJob = yield* select(commonStore.selectUserValueJob);\n    const entity = yield* select(commonStore.selectEntity);\n    const specDetail = yield* select(specificationStore.selectDetail);\n    yield putResolve(drawingStore.actions.setDialogStateOpen(false));\n\n    if (entity === 'specification') {\n      yield put(commonStore.actions.setLoadingPage(true));\n      const {\n        drawing_id\n      } = yield call(fetchSpecificationDetail, specDetail.id);\n      yield put(specificationStore.actions.setDetail({\n        drawing_id\n      }));\n      yield put(commonStore.actions.setLoadingPage(false));\n    } else if (entity === 'element') {\n      yield put(tagStore.sagaGetList());\n    } else {\n      yield call(getDrawingList);\n    }\n\n    yield put(drawingStore.actions.resetDetail({\n      userJob\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\nexport function* openDrawingUpdateDialog({\n  payload: id\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      drawing\n    } = yield call(drawingApi.getDetail, id);\n    drawing.drawing_id = drawing.drawing_id.split(' ')[1];\n    yield call(fetchDrawingInitDataForCE, drawing.job_id);\n    yield putResolve(drawingStore.actions.setDetail(drawing));\n    yield put(drawingStore.actions.setComponentList(drawing.item_list));\n    yield put(drawingStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* updateDrawing({\n  payload\n}) {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      id,\n      drawing\n    } = payload;\n    const {\n      message\n    } = yield call(drawingApi.update, id, drawing);\n    yield call(closeDrawingDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\nexport function* openRevisionDialog({\n  payload\n}) {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      next_revision\n    } = yield call(drawingApi.getInitDataForRevise, payload);\n    yield putResolve(drawingStore.actions.setRevisionDialogDetail({\n      new_revision: next_revision\n    }));\n    yield put(drawingStore.actions.setRevisionDialogOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\nexport function* saveNewRev({\n  payload\n}) {\n  yield put(drawingStore.actions.setRevisionDialogLoading(true));\n\n  try {\n    const {\n      drawingId,\n      revision\n    } = payload;\n    const {\n      message\n    } = yield call(drawingApi.saveRevision, drawingId, revision);\n    yield put(drawingStore.actions.setRevisionDialogOpen(false));\n    yield call(closeDrawingDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(drawingStore.actions.setRevisionDialogLoading(false));\n}\nexport function* openCreatePartDialog({\n  payload\n}) {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const drawingDetail = yield* select(drawingStore.selectDetail);\n    yield putResolve(commonStore.actions.setUserValueDrawing({\n      description: '',\n      entity_id: drawingDetail.drawing_id,\n      value: drawingDetail.id\n    }));\n    yield put(partStore.sagaOpenCreateDialog(payload));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\n\nfunction* drawingSaga() {\n  yield takeEvery(drawingStore.sagaGetList, getDrawingList);\n  yield takeEvery(drawingStore.sagaOpenCreateDialog, openDrawingCreateDialog);\n  yield takeEvery(drawingStore.sagaChangeUserJob, changeUserJob);\n  yield takeEvery(drawingStore.sagaCreate, createDrawing);\n  yield takeEvery(drawingStore.sagaCloseDialog, closeDrawingDialog);\n  yield takeEvery(drawingStore.sagaOpenUpdateDialog, openDrawingUpdateDialog);\n  yield takeEvery(drawingStore.sagaUpdate, updateDrawing);\n  yield takeEvery(drawingStore.sagaOpenRevDialog, openRevisionDialog);\n  yield takeEvery(drawingStore.sagaSaveNewRev, saveNewRev);\n  yield takeEvery(drawingStore.sagaOpenCreatePartDialog, openCreatePartDialog);\n  yield takeEvery(drawingStore.sagaGetDrawingPartList, getDrawingPartList);\n}\n\nexport default drawingSaga;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/saga/drawing.saga.ts"],"names":["takeEvery","put","putResolve","select","call","all","errorSaga","drawingStore","commonStore","advancedFilterActions","specificationStore","partStore","tagStore","_","getDefaultValues","fetchSpecificationDetail","drawingApi","fetchDrawingInitDataForList","userJob","selectUserValueJob","data","getInitDataForList","job_id_pk","value","isNull","selected_job","actions","setUserValueJob","setInitDataForList","fetchDrawingInitDataForCE","jobId","getInitDataForCE","permissions","user_job","dataInit","detailDefaultValue","parameters","drawing_purpose","file_prefix","file_type","drawing_format","job_id","drawingPurpose","find","DWPU","id","exclude_from","properties","isString","size","excludeList","C","O","S","excludeFrom","split","forIn","key","includes","setInitDataForCE","setDetail","fetchDrawingList","tableState","searchQuery","filterData","drawingGroup","selectTableState","selectSearchQuery","selectFilterData","selectDrawingGroupId","page","per_page","getList","s","drawing_group_id","setTableState","total_items","setDataList","drawings","fetchDrawingPartList","drawingId","drawing","getDetail","setComponentList","item_list","getDrawingPartList","setDialogStateLoading","drawingDetail","selectDetail","error","handleError","getDrawingList","setLoadingPage","selectPermissions","view","openDrawingCreateDialog","setDialogStateOpen","changeUserJob","payload","createDrawing","message","create","resetDetail","setSuccessMessage","setDialogStateTab","closeDrawingDialog","entity","selectEntity","specDetail","drawing_id","sagaGetList","openDrawingUpdateDialog","updateDrawing","update","openRevisionDialog","next_revision","getInitDataForRevise","setRevisionDialogDetail","new_revision","setRevisionDialogOpen","saveNewRev","setRevisionDialogLoading","revision","saveRevision","openCreatePartDialog","setUserValueDrawing","description","entity_id","sagaOpenCreateDialog","drawingSaga","sagaChangeUserJob","sagaCreate","sagaCloseDialog","sagaOpenUpdateDialog","sagaUpdate","sagaOpenRevDialog","sagaSaveNewRev","sagaOpenCreatePartDialog","sagaGetDrawingPartList"],"mappings":"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","sourcesContent":["import { takeEvery, put, putResolve } from 'redux-saga/effects'\nimport { select, call, all } from 'typed-redux-saga'\n\nimport * as errorSaga from '@/store/saga/errorSaga'\n\nimport {\n  drawingStore,\n  commonStore,\n  advancedFilterActions,\n  specificationStore,\n  partStore,\n  tagStore\n} from '@/store/reducers'\n\nimport _ from 'lodash'\nimport { getDefaultValues } from '@/utils/getDefaultValues'\n\nimport { fetchSpecificationDetail } from '@/store/saga/specification.saga'\n\nimport drawingApi from '@/apis/drawing.api'\n\nexport function* fetchDrawingInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob)\n  const data = yield call(drawingApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  })\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {}\n  }\n  if (userJob.value === -1 || userJob.value === -2) {\n    data.selected_job = userJob\n  }\n  yield put(commonStore.actions.setUserValueJob(data.selected_job))\n  yield put(drawingStore.actions.setInitDataForList(data))\n}\n\nexport function* fetchDrawingInitDataForCE(jobId = null) {\n  const userJob = yield* select(commonStore.selectUserValueJob)\n  const { permissions, user_job, ...dataInit } = yield call(drawingApi.getInitDataForCE, {\n    job_id_pk: jobId || userJob.value\n  })\n  const detailDefaultValue = getDefaultValues(dataInit.parameters, {\n    drawing_purpose: 'DWPU',\n    file_prefix: 'FPRE',\n    file_type: 'FTYP',\n    drawing_format: 'PLFO'\n  })\n  // if you are in create mode, then set jobId for the assembly form\n  if (_.isNull(jobId)) {\n    detailDefaultValue.job_id = userJob.value\n  }\n  if (!_.isNull(detailDefaultValue.drawing_purpose) && _.isNull(jobId)) {\n    const drawingPurpose = _.find(dataInit.parameters.DWPU, {\n      id: detailDefaultValue.drawing_purpose\n    })\n    const { exclude_from } = drawingPurpose?.properties\n    if (_.isString(exclude_from) && _.size(exclude_from) > 0) {\n      const excludeList = {\n        C: 'exclude_from_customer',\n        O: 'exclude_from_other',\n        S: 'exclude_from_supplier'\n      }\n      const excludeFrom = exclude_from.split(';') // C;O;S => [C, O, S]\n      _.forIn(excludeList, (value, key) => {\n        if (excludeFrom.includes(key)) {\n          detailDefaultValue[value] = true\n        }\n      })\n    }\n  }\n  yield put(drawingStore.actions.setInitDataForCE(dataInit))\n  yield put(drawingStore.actions.setDetail(detailDefaultValue))\n}\n\nexport function* fetchDrawingList() {\n  const { tableState, searchQuery, filterData, userJob, drawingGroup } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    drawingGroup: select(drawingStore.selectDrawingGroupId)\n  })\n  if (!userJob.value) {\n    return\n  }\n  const { page, per_page } = tableState\n  const data = yield call(drawingApi.getList, {\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    drawing_group_id: drawingGroup,\n    ...filterData\n  })\n  yield put(commonStore.actions.setTableState({ total_items: data.total_items }))\n  yield put(drawingStore.actions.setDataList(data.drawings))\n}\n\nexport function* fetchDrawingPartList(drawingId: number) {\n  const { drawing } = yield call(drawingApi.getDetail, drawingId)\n  yield put(drawingStore.actions.setComponentList(drawing.item_list))\n}\n\nexport function* getDrawingPartList() {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n  try {\n    const drawingDetail = yield* select(drawingStore.selectDetail)\n    yield call(fetchDrawingPartList, drawingDetail.id)\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nexport function* getDrawingList() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchDrawingInitDataForList)\n    const permissions = yield* select(drawingStore.selectPermissions)\n    if (permissions?.view) {\n      yield call(fetchDrawingList)\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nexport function* openDrawingCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchDrawingInitDataForCE)\n    yield put(drawingStore.actions.setDialogStateOpen(true))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nexport function* changeUserJob({ payload }: ReturnType<typeof drawingStore.sagaChangeUserJob>) {\n  yield putResolve(commonStore.actions.setUserValueJob(payload))\n  yield call(getDrawingList)\n}\n\nexport function* createDrawing({ payload }: ReturnType<typeof drawingStore.sagaCreate>) {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n  try {\n    const { message } = yield call(drawingApi.create, payload)\n    const userJob = yield* select(commonStore.selectUserValueJob)\n    yield putResolve(drawingStore.actions.resetDetail({ userJob }))\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(drawingStore.actions.setDialogStateTab(0))])\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nexport function* closeDrawingDialog() {\n  try {\n    const userJob = yield* select(commonStore.selectUserValueJob)\n    const entity = yield* select(commonStore.selectEntity)\n    const specDetail = yield* select(specificationStore.selectDetail)\n    yield putResolve(drawingStore.actions.setDialogStateOpen(false))\n    if (entity === 'specification') {\n      yield put(commonStore.actions.setLoadingPage(true))\n      const { drawing_id } = yield call(fetchSpecificationDetail, specDetail.id)\n      yield put(specificationStore.actions.setDetail({ drawing_id }))\n      yield put(commonStore.actions.setLoadingPage(false))\n    } else if (entity === 'element') {\n      yield put(tagStore.sagaGetList())\n    } else {\n      yield call(getDrawingList)\n    }\n    yield put(drawingStore.actions.resetDetail({ userJob }))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n}\n\nexport function* openDrawingUpdateDialog({ payload: id }: ReturnType<typeof drawingStore.sagaOpenUpdateDialog>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const { drawing } = yield call(drawingApi.getDetail, id)\n    drawing.drawing_id = drawing.drawing_id.split(' ')[1]\n    yield call(fetchDrawingInitDataForCE, drawing.job_id)\n    yield putResolve(drawingStore.actions.setDetail(drawing))\n    yield put(drawingStore.actions.setComponentList(drawing.item_list))\n    yield put(drawingStore.actions.setDialogStateOpen(true))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nexport function* updateDrawing({ payload }: ReturnType<typeof drawingStore.sagaUpdate>) {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n\n  try {\n    const { id, drawing } = payload\n    const { message } = yield call(drawingApi.update, id, drawing)\n    yield call(closeDrawingDialog)\n    yield put(commonStore.actions.setSuccessMessage(message))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nexport function* openRevisionDialog({ payload }: ReturnType<typeof drawingStore.sagaOpenRevDialog>) {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n\n  try {\n    const { next_revision } = yield call(drawingApi.getInitDataForRevise, payload)\n    yield putResolve(\n      drawingStore.actions.setRevisionDialogDetail({\n        new_revision: next_revision\n      })\n    )\n    yield put(drawingStore.actions.setRevisionDialogOpen(true))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nexport function* saveNewRev({ payload }: ReturnType<typeof drawingStore.sagaSaveNewRev>) {\n  yield put(drawingStore.actions.setRevisionDialogLoading(true))\n\n  try {\n    const { drawingId, revision } = payload\n    const { message } = yield call(drawingApi.saveRevision, drawingId, revision)\n    yield put(drawingStore.actions.setRevisionDialogOpen(false))\n    yield call(closeDrawingDialog)\n    yield put(commonStore.actions.setSuccessMessage(message))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n\n  yield put(drawingStore.actions.setRevisionDialogLoading(false))\n}\n\nexport function* openCreatePartDialog({ payload }: ReturnType<typeof drawingStore.sagaOpenCreatePartDialog>) {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n  try {\n    const drawingDetail = yield* select(drawingStore.selectDetail)\n    yield putResolve(\n      commonStore.actions.setUserValueDrawing({\n        description: '',\n        entity_id: drawingDetail.drawing_id,\n        value: drawingDetail.id\n      })\n    )\n    yield put(partStore.sagaOpenCreateDialog(payload))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nfunction* drawingSaga() {\n  yield takeEvery(drawingStore.sagaGetList, getDrawingList)\n  yield takeEvery(drawingStore.sagaOpenCreateDialog, openDrawingCreateDialog)\n  yield takeEvery(drawingStore.sagaChangeUserJob, changeUserJob)\n  yield takeEvery(drawingStore.sagaCreate, createDrawing)\n  yield takeEvery(drawingStore.sagaCloseDialog, closeDrawingDialog)\n  yield takeEvery(drawingStore.sagaOpenUpdateDialog, openDrawingUpdateDialog)\n  yield takeEvery(drawingStore.sagaUpdate, updateDrawing)\n  yield takeEvery(drawingStore.sagaOpenRevDialog, openRevisionDialog)\n  yield takeEvery(drawingStore.sagaSaveNewRev, saveNewRev)\n  yield takeEvery(drawingStore.sagaOpenCreatePartDialog, openCreatePartDialog)\n  yield takeEvery(drawingStore.sagaGetDrawingPartList, getDrawingPartList)\n}\n\nexport default drawingSaga\n"]},"metadata":{},"sourceType":"module"}