{"ast":null,"code":"import { takeEvery, putResolve } from 'redux-saga/effects';\nimport { select, put, call } from 'typed-redux-saga';\nimport { createAction } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nimport _ from 'lodash';\nimport Router from 'next/router';\nimport HttpService from '@/helper/HttpService';\nimport { commonStore, summaryReportActions } from '@/store/reducers';\nimport commonApi from '@/apis/common';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport { plural } from 'pluralize';\n\nconst getApiUpdateMultiple = entity => {\n  const pluralEntity = plural(entity);\n  const api = new HttpService(pluralEntity);\n  return api.updateMultiple;\n};\n\nfunction* updateMultiple({\n  payload\n}) {\n  try {\n    const {\n      entity,\n      action,\n      payloadAction,\n      href\n    } = payload;\n    const api = getApiUpdateMultiple(entity);\n    const editRow = yield* select(commonStore.selectEditRows);\n    yield putResolve(commonStore.actions.setLoadingPage(true));\n    const data = yield call(api, editRow);\n    yield put(commonStore.actions.setSuccessMessage(data.message));\n    yield putResolve(commonStore.actions.setLoadingPage(false));\n\n    if (href) {\n      Router.push(href);\n    } else if (action && _.isFunction(action)) {\n      yield put(action(payloadAction));\n    } else if (entity) {\n      const getListAction = createAction(`${entity}/${actionTypes.GET_LIST}`);\n      yield put(getListAction());\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\n\nfunction* cancelBackgroundJob({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      data\n    } = yield call(commonApi.stopBackgroundJob, payload);\n    yield put(commonStore.actions.setSuccessMessage(data.message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction getExecuteOperationApi(entityParam) {\n  let entity = entityParam;\n\n  if (entity === 'manufacturing_standard' || entity === 'material_standard') {\n    entity = 'equivalence';\n  }\n\n  const pluralEntity = plural(entity);\n  const api = new HttpService(pluralEntity);\n  return api.executeOperation;\n}\n\nfunction* executeOperation({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      entity,\n      operation,\n      operationList\n    } = payload;\n    const apiReq = getExecuteOperationApi(entity);\n    const data = yield call(apiReq, operation, operationList);\n    yield putResolve(commonStore.actions.setLoadingPage(false));\n\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data));\n      yield put(summaryReportActions.setOpen(true));\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message));\n    }\n\n    const getListAction = createAction(`${entity}/${actionTypes.GET_LIST}`);\n    yield putResolve(getListAction());\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\n\nfunction* commonSaga() {\n  yield takeEvery(commonStore.sagaUpdateMultiple, updateMultiple);\n  yield takeEvery(commonStore.sagaCancelBackgroundJob, cancelBackgroundJob);\n  yield takeEvery(commonStore.sagaExecuteOperation, executeOperation);\n}\n\nexport default commonSaga;","map":null,"metadata":{},"sourceType":"module"}