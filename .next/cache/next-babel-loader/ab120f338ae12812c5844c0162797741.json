{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useMemo } from 'react';\nimport { useTranslation } from 'next-i18next';\nimport { useSelector } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport { Grid, Typography, Button } from '@material-ui/core';\nimport { DataTable, DataTableTextField, AppTitle, CreateIcon, DeleteIcon, AppAutocomplete } from '@/components';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport * as columnProperties from '@/utils/columnProperties';\nimport { userStore } from '@/store/reducers';\n\nfunction TabJob() {\n  const {\n    t\n  } = useTranslation('user');\n  const userForm = useFormContext();\n  const watchUserJob = userForm.watch('job_access', []);\n  const {\n    0: selectedJobs,\n    1: setSelectedJobs\n  } = useState([]);\n  const {\n    0: selectedRows,\n    1: setSelectedRows\n  } = useState([]);\n  const {\n    jobs: jobOptions\n  } = useSelector(userStore.selectInitDataForCE);\n  const jobsTabColumns = useMemo(() => [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    field: 'job_raw_id',\n    headerName: 'Job #',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Note')), {}, {\n    field: 'note',\n    flex: 0.4,\n\n    renderEditCell(params) {\n      return /*#__PURE__*/_jsx(DataTableTextField, {\n        params: params,\n        onChangeValue: onChangeJobNote\n      });\n    }\n\n  })], []);\n\n  const onChangeSelectedJobs = (_, value) => {\n    const newValue = value.map(item => _objectSpread(_objectSpread({}, item), {}, {\n      note: ''\n    }));\n    setSelectedJobs(newValue);\n  };\n\n  const onAddSelectedJobs = () => {\n    const {\n      job_access: jobAccess\n    } = userForm.getValues();\n    const newJobAccess = [...jobAccess, ...selectedJobs];\n    userForm.setValue('job_access', newJobAccess);\n    setSelectedJobs([]);\n  };\n\n  const onSelectJobsTable = ({\n    selectionModel\n  }) => {\n    setSelectedRows(selectionModel);\n  };\n\n  const onRemoveSelectedRows = () => {\n    const {\n      job_access: jobAccess\n    } = userForm.getValues();\n    const newJobAccess = jobAccess.filter(job => !selectedRows.includes(job.job_id));\n    userForm.setValue('job_access', newJobAccess);\n    setSelectedRows([]);\n  };\n\n  const onChangeJobNote = (job_id, value) => {\n    const {\n      job_access: jobAccess\n    } = userForm.getValues();\n    const newJobAccess = immer(jobAccess, draft => {\n      const index = _.findIndex(draft, {\n        job_id\n      });\n\n      draft[index].note = value;\n    });\n    userForm.setValue('job_access', newJobAccess);\n  };\n\n  return /*#__PURE__*/_jsxs(Grid, {\n    container: true,\n    alignItems: \"center\",\n    spacing: 2,\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(Typography, {\n        display: \"block\",\n        variant: \"body2\",\n        children: t('form.description.tab_job')\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 9,\n      children: /*#__PURE__*/_jsx(AppAutocomplete, {\n        label: \"Jobs\",\n        value: selectedJobs,\n        multiple: true,\n        limitTags: 4,\n        disableCloseOnSelect: true,\n        options: jobOptions,\n        renderOption: option => option.job_raw_id,\n        getOptionSelected: (option, value) => option.job_id === value.job_id,\n        getOptionDisabled: option => watchUserJob.some(item => item.job_id === option.job_id),\n        onChange: onChangeSelectedJobs\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 3,\n      children: /*#__PURE__*/_jsx(Button, {\n        startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n        variant: \"outlined\",\n        color: \"primary\",\n        fullWidth: true,\n        style: {\n          padding: 0\n        },\n        onClick: onAddSelectedJobs,\n        disabled: selectedJobs.length === 0,\n        children: t('common:button.add')\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 9,\n      children: /*#__PURE__*/_jsx(AppTitle, {\n        label: t('form.label.access_rights')\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 3,\n      children: /*#__PURE__*/_jsx(Button, {\n        startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n        style: {\n          padding: 0\n        },\n        variant: \"outlined\",\n        color: \"primary\",\n        fullWidth: true,\n        onClick: onRemoveSelectedRows,\n        disabled: selectedRows.length <= 0,\n        children: t('common:button.remove')\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(DataTable, {\n        disableSelectionOnClick: true,\n        tableHeight: 355,\n        checkboxSelection: true,\n        rows: watchUserJob,\n        getRowId: params => params.job_id,\n        selectionModel: selectedRows,\n        columns: jobsTabColumns,\n        onSelectionModelChange: onSelectJobsTable,\n        hideFooter: true\n      })\n    })]\n  });\n}\n\nexport default TabJob;","map":null,"metadata":{},"sourceType":"module"}