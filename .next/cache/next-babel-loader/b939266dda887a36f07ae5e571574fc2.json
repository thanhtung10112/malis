{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { actionTypes } from '@/utils/constant';\nimport { createAction, createSlice, createSelector } from '@reduxjs/toolkit';\nexport var name = 'element';\nexport var resetState = createAction(\"\".concat(name, \"/\").concat(actionTypes.RESET_STATE));\nexport var tagDetail = {\n  job_id: null,\n  schematic_id: null,\n  descriptions: [],\n  additional_attributes: {},\n  tech_data: '',\n  fluid: '',\n  tag: '',\n  part_id: null,\n  element_id: null,\n  functions: []\n};\nvar initialState = {\n  initDataForList: {\n    jobs: [],\n    permissions: {\n      element: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  dataList: [],\n  initDataForCE: {\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: ''\n  },\n  dialogState: {\n    open: false,\n    loading: false,\n    tab: 0,\n    historyLogs: []\n  },\n  detail: tagDetail,\n  confirmRef: {\n    open: false,\n    message: ''\n  }\n};\nvar tagSlice = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    setInitDataForList: function setInitDataForList(state, _ref) {\n      var payload = _ref.payload;\n      state.initDataForList = payload;\n    },\n    setInitDataForCE: function setInitDataForCE(state, _ref2) {\n      var payload = _ref2.payload;\n      state.initDataForCE = payload;\n    },\n    setDataList: function setDataList(state, _ref3) {\n      var payload = _ref3.payload;\n      state.dataList = payload;\n    },\n    setDialogState: function setDialogState(state, _ref4) {\n      var payload = _ref4.payload;\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n    setDialogStateOpen: function setDialogStateOpen(state, _ref5) {\n      var payload = _ref5.payload;\n      state.dialogState.open = payload;\n    },\n    setDialogStateLoading: function setDialogStateLoading(state, _ref6) {\n      var payload = _ref6.payload;\n      state.dialogState.loading = payload;\n    },\n    setHistoryLogs: function setHistoryLogs(state, _ref7) {\n      var payload = _ref7.payload;\n      state.dialogState.historyLogs = payload;\n    },\n    setDetail: function setDetail(state, _ref8) {\n      var payload = _ref8.payload;\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n    resetDetail: function resetDetail(state, _ref9) {\n      var payload = _ref9.payload;\n      var userJob = payload.userJob,\n          userDrawing = payload.userDrawing,\n          generateCode = payload.generateCode;\n      var schematicId = userDrawing.value === -1 ? null : userDrawing;\n      var elementId = generateCode || null;\n      state.detail = _objectSpread(_objectSpread({}, initialState.detail), {}, {\n        schematic_id: schematicId,\n        job_id: userJob.value,\n        element_id: elementId\n      });\n    },\n    setDialogStateTab: function setDialogStateTab(state, _ref10) {\n      var payload = _ref10.payload;\n      state.dialogState.tab = payload;\n    },\n    setConfirmRef: function setConfirmRef(state, _ref11) {\n      var payload = _ref11.payload;\n      state.confirmRef.open = payload.open;\n      state.confirmRef.message = payload.message;\n    },\n    setConfirmRefOpen: function setConfirmRefOpen(state, _ref12) {\n      var payload = _ref12.payload;\n      state.confirmRef.open = payload;\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n});\nvar actions = tagSlice.actions; // Saga actions\n\nexport { actions };\nexport var sagaGetList = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_LIST));\nexport var sagaOpenCreateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_CREATE_DIALOG));\nexport var sagaOpenUpdateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_UPDATE_DIALOG));\nexport var sagaCreate = createAction(\"\".concat(name, \"/\").concat(actionTypes.CREATE));\nexport var sagaUpdateMultiple = createAction(\"\".concat(name, \"/\").concat(actionTypes.UPDATE_MULTIPLE));\nexport var sagaChangeUserJob = createAction(\"\".concat(name, \"/\").concat(actionTypes.CHANGE_USER_JOB));\nexport var sagaChangeUserSchematic = createAction(\"\".concat(name, \"/CHANGE_USER_SCHEMATIC\"));\nexport var sagaGetGenerateCode = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_GENERATE_CODE));\nexport var sagaRemove = createAction(\"\".concat(name, \"/\").concat(actionTypes.REMOVE));\nexport var sagaCloseDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.CLOSE_DIALOG));\nexport var sagaGetPart = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_PART));\nexport var sagaChangeUserDrawing = createAction(\"\".concat(name, \"/\").concat(actionTypes.CHANGE_USER_DRAWING)); // Selectors\n\nexport var selectState = function selectState(state) {\n  return state[name];\n};\nexport var selectInitDataForList = createSelector(selectState, function (state) {\n  return state.initDataForList;\n});\nexport var selectInitDataForCE = createSelector(selectState, function (state) {\n  return state.initDataForCE;\n});\nexport var selectPermissions = createSelector(selectState, function (state) {\n  return state.initDataForList.permissions.element;\n});\nexport var selectSpecification = createSelector(selectState, function (state) {\n  return state.initDataForList.permissions.element;\n});\nexport var selectDialogState = createSelector(selectState, function (state) {\n  return state.dialogState;\n});\nexport var selectParameters = createSelector(selectState, function (_ref13) {\n  var initDataForCE = _ref13.initDataForCE;\n  return initDataForCE.parameters;\n});\nexport var selectDetail = createSelector(selectState, function (state) {\n  return state.detail;\n});\nexport var selectDataList = createSelector(selectState, function (state) {\n  return state.dataList;\n});\nexport var selecGetPartRefTag = createSelector(selectState, function (state) {\n  return state.detail;\n});\nexport var selectConfirmRef = createSelector(selectState, function (state) {\n  return state.confirmRef;\n});\nexport default tagSlice;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/reducers/tag.reducer.ts"],"names":["actionTypes","createAction","createSlice","createSelector","name","resetState","RESET_STATE","tagDetail","job_id","schematic_id","descriptions","additional_attributes","tech_data","fluid","tag","part_id","element_id","functions","initialState","initDataForList","jobs","permissions","element","wiki_page","column_tooltips","dataList","initDataForCE","parameters","PLLA","dialogState","open","loading","tab","historyLogs","detail","confirmRef","message","tagSlice","reducers","setInitDataForList","state","payload","setInitDataForCE","setDataList","setDialogState","setDialogStateOpen","setDialogStateLoading","setHistoryLogs","setDetail","resetDetail","userJob","userDrawing","generateCode","schematicId","value","elementId","setDialogStateTab","setConfirmRef","setConfirmRefOpen","extraReducers","type","actions","sagaGetList","GET_LIST","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaCreate","CREATE","sagaUpdateMultiple","UPDATE_MULTIPLE","sagaChangeUserJob","CHANGE_USER_JOB","sagaChangeUserSchematic","sagaGetGenerateCode","GET_GENERATE_CODE","sagaRemove","REMOVE","sagaCloseDialog","CLOSE_DIALOG","sagaGetPart","GET_PART","sagaChangeUserDrawing","CHANGE_USER_DRAWING","selectState","selectInitDataForList","selectInitDataForCE","selectPermissions","selectSpecification","selectDialogState","selectParameters","selectDetail","selectDataList","selecGetPartRefTag","selectConfirmRef"],"mappings":"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","sourcesContent":["import { actionTypes } from '@/utils/constant'\nimport { createAction, createSlice, createSelector, PayloadAction } from '@reduxjs/toolkit'\n\nimport type { Entity, ParameterOption, DataForDropdown, PayloadOperation, HistoryLog } from '@/types/Common'\nimport type { RootReducerType } from './rootReducer'\nimport type { TagInitDataForCE, TagInitDataForList, TagDetail } from '@/types/Tag'\n\nexport const name: Entity = 'element'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const tagDetail = {\n  job_id: null,\n  schematic_id: null,\n  descriptions: [],\n  additional_attributes: {},\n  tech_data: '',\n  fluid: '',\n  tag: '',\n  part_id: null,\n  element_id: null,\n  functions: []\n} as TagDetail\n\nconst initialState = {\n  initDataForList: {\n    jobs: [],\n    permissions: {\n      element: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as TagInitDataForList,\n  dataList: [],\n  initDataForCE: {\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: ''\n  } as TagInitDataForCE,\n  dialogState: {\n    open: false,\n    loading: false,\n    tab: 0,\n    historyLogs: [] as HistoryLog[]\n  },\n  detail: tagDetail,\n  confirmRef: {\n    open: false,\n    message: ''\n  }\n}\n\nconst tagSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setInitDataForList(state, { payload }: PayloadAction<TagInitDataForList>) {\n      state.initDataForList = payload\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<TagInitDataForCE>) {\n      state.initDataForCE = payload\n    },\n    setDataList(state, { payload }) {\n      state.dataList = payload\n    },\n    setDialogState(state, { payload }) {\n      state.dialogState = { ...state.dialogState, ...payload }\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setHistoryLogs(state, { payload }: PayloadAction<HistoryLog[]>) {\n      state.dialogState.historyLogs = payload\n    },\n    setDetail(state, { payload }: PayloadAction<Partial<TagDetail>>) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    resetDetail(\n      state,\n      { payload }: PayloadAction<{ userJob: ParameterOption; userDrawing: DataForDropdown; generateCode?: string }>\n    ) {\n      const { userJob, userDrawing, generateCode } = payload\n      const schematicId = userDrawing.value === -1 ? null : userDrawing\n      const elementId = generateCode || null\n      state.detail = { ...initialState.detail, schematic_id: schematicId, job_id: userJob.value, element_id: elementId }\n    },\n    setDialogStateTab(state, { payload }: PayloadAction<number>) {\n      state.dialogState.tab = payload\n    },\n    setConfirmRef(state, { payload }) {\n      state.confirmRef.open = payload.open\n      state.confirmRef.message = payload.message\n    },\n    setConfirmRefOpen(state, { payload }: PayloadAction<boolean>) {\n      state.confirmRef.open = payload\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\nexport const { actions } = tagSlice\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaCreate = createAction<TagDetail>(`${name}/${actionTypes.CREATE}`)\nexport const sagaUpdateMultiple = createAction<TagDetail[]>(`${name}/${actionTypes.UPDATE_MULTIPLE}`)\nexport const sagaChangeUserJob = createAction<ParameterOption>(`${name}/${actionTypes.CHANGE_USER_JOB}`)\nexport const sagaChangeUserSchematic = createAction<DataForDropdown>(`${name}/CHANGE_USER_SCHEMATIC`)\nexport const sagaGetGenerateCode = createAction<{ formData: TagDetail; schematic: DataForDropdown }>(\n  `${name}/${actionTypes.GET_GENERATE_CODE}`\n)\nexport const sagaRemove = createAction<PayloadOperation[]>(`${name}/${actionTypes.REMOVE}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaGetPart = createAction<{\n  selected_part: number\n  selected_drawing: number\n  current_item: number\n  formData: TagDetail\n}>(`${name}/${actionTypes.GET_PART}`)\nexport const sagaChangeUserDrawing = createAction<DataForDropdown>(`${name}/${actionTypes.CHANGE_USER_DRAWING}`)\n\n// Selectors\nexport const selectState = (state: RootReducerType) => state[name]\n\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\n\nexport const selectInitDataForCE = createSelector(selectState, (state) => state.initDataForCE)\n\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.element)\n\nexport const selectSpecification = createSelector(selectState, (state) => state.initDataForList.permissions.element)\n\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\n\nexport const selectParameters = createSelector(selectState, ({ initDataForCE }) => initDataForCE.parameters)\n\nexport const selectDetail = createSelector(selectState, (state) => state.detail)\n\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\n\nexport const selecGetPartRefTag = createSelector(selectState, (state) => state.detail)\nexport const selectConfirmRef = createSelector(selectState, (state) => state.confirmRef)\n\nexport default tagSlice\n"]},"metadata":{},"sourceType":"module"}