{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\DataTable\\\\Common\\\\MultilingualDescription\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Paper, Button, Tooltip } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { DataTable, DataTableTextField, CopyIcon } from '@/components';\nimport DialogRichTextEditor from './RichTextEditor';\nimport DialogCopyDesc from './DialogCopyDesc';\nimport { useController } from 'react-hook-form';\nimport useStyles from './styles';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport clsx from 'clsx';\nimport striptags from 'striptags';\nimport * as yup from 'yup';\nimport parseHTML from 'html-react-parser';\nimport * as columnProperties from '@/utils/columnProperties';\n\nvar MultilingualDescription = function MultilingualDescription(props) {\n  _s();\n\n  var classes = useStyles();\n\n  var name = props.name,\n      control = props.control,\n      rules = props.rules,\n      editMode = props.editMode,\n      languageList = props.languageList,\n      tableHeight = props.tableHeight,\n      editor = props.editor,\n      copyable = props.copyable,\n      copyDialogProps = props.copyDialogProps,\n      disabled = props.disabled,\n      autocompleteProps = props.autocompleteProps,\n      paperPropsRest = _objectWithoutProperties(props, [\"name\", \"control\", \"rules\", \"editMode\", \"languageList\", \"tableHeight\", \"editor\", \"copyable\", \"copyDialogProps\", \"disabled\", \"autocompleteProps\"]);\n\n  var defaultValueRTE = React.useMemo(function () {\n    return {\n      isOpen: false,\n      content: '',\n      title: '',\n      languageId: null\n    };\n  }, []);\n\n  var _useController = useController({\n    name: name,\n    control: control\n  }),\n      _useController$field = _useController.field,\n      descriptionValues = _useController$field.value,\n      onChange = _useController$field.onChange;\n\n  var _React$useState = React.useState(_objectSpread({}, defaultValueRTE)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      RTEState = _React$useState2[0],\n      setRTEState = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      openCopy = _React$useState4[0],\n      setOpenCopy = _React$useState4[1];\n\n  var getCellValue = function getCellValue(language_id) {\n    var cellItem = _.find(descriptionValues, {\n      language_id: language_id\n    });\n\n    return (cellItem === null || cellItem === void 0 ? void 0 : cellItem.description) || '';\n  };\n\n  var getStylesRowDisabled = function getStylesRowDisabled(params) {\n    var language = _.find(languageList, {\n      id: params.id\n    });\n\n    return clsx(_defineProperty({}, classes.disable, (language === null || language === void 0 ? void 0 : language.status) === false || disabled));\n  };\n\n  var filteredLanguageList = React.useMemo(function () {\n    if (editMode) {\n      return languageList.filter(function (item) {\n        return item.status === true || descriptionValues.some(function (_ref) {\n          var language_id = _ref.language_id;\n          return item.id === language_id && item.status === false;\n        });\n      });\n    } else {\n      return languageList.filter(function (item) {\n        return item.status === true;\n      });\n    }\n  }, [editMode]);\n\n  var onDbClickCell = function onDbClickCell(params, event) {\n    var language = _.find(languageList, {\n      id: params.id\n    });\n\n    if ((language === null || language === void 0 ? void 0 : language.status) === false || disabled) {\n      event.stopPropagation();\n    }\n  };\n\n  var columns = React.useMemo(function () {\n    return [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      field: 'description_raw',\n      width: 130,\n      headerName: 'Language',\n      valueGetter: function valueGetter(params) {\n        return \"\".concat(params.row.parameter_id, \" - \").concat(params.row.description);\n      }\n    }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Description')), {}, {\n      field: 'value_raw',\n      flex: 0.7,\n      headerName: 'Description',\n      hide: editor !== 'text',\n      valueGetter: function valueGetter(params) {\n        var cellValue = getCellValue(params.id);\n        return cellValue;\n      },\n      renderEditCell: function renderEditCell(params) {\n        return /*#__PURE__*/_jsxDEV(DataTableTextField, {\n          params: params,\n          onChangeValue: onChangeDescription,\n          rules: yup.string().max(255, 'Description must be less than 255 characters!')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this);\n      }\n    }), {\n      field: 'value_raw_editor',\n      flex: 0.7,\n      headerName: 'Description',\n      sortable: false,\n      hide: editor === 'text',\n      renderCell: function renderCell(params) {\n        var description = getCellValue(params.id);\n        var pureContent = striptags(description);\n        var htmlContent = parseHTML(_.toString(description));\n\n        if (pureContent) {\n          return /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: htmlContent,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.rteRoot,\n              onDoubleClick: onOpenRTE(params.row),\n              children: pureContent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.rteRoot,\n          onDoubleClick: onOpenRTE(params.row),\n          children: pureContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this);\n      }\n    }];\n  }, [descriptionValues, editor]);\n\n  var onChangeDescription = function onChangeDescription(language_id, description) {\n    var newDescriptionValues = immer(descriptionValues, function (draft) {\n      var existingDescIndex = _.findIndex(descriptionValues, {\n        language_id: language_id\n      });\n\n      if (existingDescIndex === -1) {\n        draft.push({\n          language_id: language_id,\n          description: description\n        });\n      } else {\n        draft[existingDescIndex].description = description;\n      }\n    });\n    onChange(newDescriptionValues);\n  };\n\n  var onOpenRTE = function onOpenRTE(language) {\n    return function () {\n      var currentContent = getCellValue(language.id);\n      setRTEState(function (prevState) {\n        return immer(prevState, function (draft) {\n          draft.content = currentContent;\n          draft.languageId = language.id;\n          draft.title = \"\".concat(language.parameter_id, \" - \").concat(language.description);\n          draft.isOpen = true;\n        });\n      });\n    };\n  };\n\n  var handleCloseRTE = function handleCloseRTE() {\n    setRTEState(_objectSpread({}, defaultValueRTE));\n  };\n\n  var onCloseRTE = function onCloseRTE() {\n    handleCloseRTE();\n  };\n\n  var onConfirmRTE = function onConfirmRTE(language_id, description) {\n    onChangeDescription(language_id, description);\n    handleCloseRTE();\n  };\n\n  var handleOpenCopyDialog = function handleOpenCopyDialog() {\n    if (!disabled) {\n      setOpenCopy(true);\n    }\n  };\n\n  var handleCloseCopyDialog = function handleCloseCopyDialog() {\n    if (!disabled) {\n      setOpenCopy(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(When, {\n      condition: copyable,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        disabled: disabled,\n        startIcon: /*#__PURE__*/_jsxDEV(CopyIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 22\n        }, _this),\n        style: {\n          marginBottom: 4,\n          paddingTop: 0\n        },\n        onClick: handleOpenCopyDialog,\n        children: \"Copy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Paper, _objectSpread(_objectSpread({}, paperPropsRest), {}, {\n      children: [/*#__PURE__*/_jsxDEV(DataTable, {\n        hideFooter: true,\n        disableSelectionOnClick: true,\n        disableColumnMenu: true,\n        tableHeight: tableHeight,\n        rows: filteredLanguageList,\n        columns: columns,\n        onCellDoubleClick: onDbClickCell,\n        getRowClassName: getStylesRowDisabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(DialogRichTextEditor, {\n        isOpen: RTEState.isOpen,\n        title: RTEState.title,\n        content: RTEState.content,\n        languageId: RTEState.languageId,\n        onClose: onCloseRTE,\n        onConfirm: onConfirmRTE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(DialogCopyDesc, _objectSpread(_objectSpread({}, copyDialogProps), {}, {\n        autocompleteProps: autocompleteProps,\n        descriptionValues: descriptionValues,\n        open: openCopy,\n        onClose: handleCloseCopyDialog,\n        onChange: onChange\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, _this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(MultilingualDescription, \"MzgUcqTdBK18rOOjGTFY13Hbqog=\", false, function () {\n  return [useStyles, useController];\n});\n\n_c = MultilingualDescription;\nMultilingualDescription.defaultProps = {\n  editor: 'text',\n  elevation: 1,\n  tableHeight: 300,\n  copyable: false,\n  copyDialogProps: {},\n  disabled: false,\n  autocompleteProps: {}\n};\nexport default MultilingualDescription;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultilingualDescription\");","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/DataTable/Common/MultilingualDescription/index.tsx"],"names":["React","Paper","Button","Tooltip","When","DataTable","DataTableTextField","CopyIcon","DialogRichTextEditor","DialogCopyDesc","useController","useStyles","_","immer","clsx","striptags","yup","parseHTML","columnProperties","MultilingualDescription","props","classes","name","control","rules","editMode","languageList","tableHeight","editor","copyable","copyDialogProps","disabled","autocompleteProps","paperPropsRest","defaultValueRTE","useMemo","isOpen","content","title","languageId","field","descriptionValues","value","onChange","useState","RTEState","setRTEState","openCopy","setOpenCopy","getCellValue","language_id","cellItem","find","description","getStylesRowDisabled","params","language","id","disable","status","filteredLanguageList","filter","item","some","onDbClickCell","event","stopPropagation","columns","defaultProperties","width","headerName","valueGetter","row","parameter_id","editCell","flex","hide","cellValue","renderEditCell","onChangeDescription","string","max","sortable","renderCell","pureContent","htmlContent","toString","rteRoot","onOpenRTE","newDescriptionValues","draft","existingDescIndex","findIndex","push","currentContent","prevState","handleCloseRTE","onCloseRTE","onConfirmRTE","handleOpenCopyDialog","handleCloseCopyDialog","marginBottom","paddingTop","defaultProps","elevation"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Paper, Button, Tooltip } from '@material-ui/core'\nimport { When } from 'react-if'\n\nimport { DataTable, DataTableTextField, CopyIcon } from '@/components'\nimport DialogRichTextEditor from './RichTextEditor'\nimport DialogCopyDesc from './DialogCopyDesc'\n\nimport { useController } from 'react-hook-form'\nimport useStyles from './styles'\n\nimport _ from 'lodash'\nimport immer from 'immer'\nimport clsx from 'clsx'\nimport striptags from 'striptags'\nimport * as yup from 'yup'\nimport parseHTML from 'html-react-parser'\n\nimport * as columnProperties from '@/utils/columnProperties'\n\nimport type { GridColumns } from '@material-ui/data-grid'\nimport type { TableMultilingualDescriptionProps } from './type'\n\nconst MultilingualDescription: React.FC<TableMultilingualDescriptionProps> = (props) => {\n  const classes = useStyles()\n\n  const {\n    name,\n    control,\n    rules,\n    editMode,\n    languageList,\n    tableHeight,\n    editor,\n    copyable,\n    copyDialogProps,\n    disabled,\n    autocompleteProps,\n    ...paperPropsRest\n  } = props\n\n  const defaultValueRTE = React.useMemo(\n    () => ({\n      isOpen: false,\n      content: '',\n      title: '',\n      languageId: null\n    }),\n    []\n  )\n\n  const {\n    field: { value: descriptionValues, onChange }\n  } = useController({\n    name,\n    control\n  })\n\n  const [RTEState, setRTEState] = React.useState({ ...defaultValueRTE })\n  const [openCopy, setOpenCopy] = React.useState(false)\n\n  const getCellValue = (language_id: number) => {\n    const cellItem = _.find(descriptionValues, { language_id })\n    return cellItem?.description || ''\n  }\n\n  const getStylesRowDisabled = (params) => {\n    const language = _.find(languageList, { id: params.id })\n    return clsx({\n      [classes.disable]: language?.status === false || disabled\n    })\n  }\n\n  const filteredLanguageList = React.useMemo(() => {\n    if (editMode) {\n      return languageList.filter(\n        (item) =>\n          item.status === true ||\n          descriptionValues.some(({ language_id }) => item.id === language_id && item.status === false)\n      )\n    } else {\n      return languageList.filter((item) => item.status === true)\n    }\n  }, [editMode])\n\n  const onDbClickCell = (params, event) => {\n    const language = _.find(languageList, { id: params.id })\n    if (language?.status === false || disabled) {\n      event.stopPropagation()\n    }\n  }\n\n  const columns = React.useMemo<GridColumns>(\n    () => [\n      {\n        ...columnProperties.defaultProperties,\n        field: 'description_raw',\n        width: 130,\n        headerName: 'Language',\n        valueGetter(params) {\n          return `${params.row.parameter_id} - ${params.row.description}`\n        }\n      },\n      {\n        ...columnProperties.defaultProperties,\n        ...columnProperties.editCell('Description'),\n        field: 'value_raw',\n        flex: 0.7,\n        headerName: 'Description',\n        hide: editor !== 'text',\n        valueGetter(params) {\n          const cellValue = getCellValue(params.id as number)\n          return cellValue\n        },\n        renderEditCell(params) {\n          return (\n            <DataTableTextField\n              params={params}\n              onChangeValue={onChangeDescription}\n              rules={yup.string().max(255, 'Description must be less than 255 characters!')}\n            />\n          )\n        }\n      },\n      {\n        field: 'value_raw_editor',\n        flex: 0.7,\n        headerName: 'Description',\n        sortable: false,\n        hide: editor === 'text',\n        renderCell(params) {\n          const description = getCellValue(params.id as number)\n          const pureContent = striptags(description)\n          const htmlContent = parseHTML(_.toString(description))\n          if (pureContent) {\n            return (\n              <Tooltip title={htmlContent}>\n                <div className={classes.rteRoot} onDoubleClick={onOpenRTE(params.row)}>\n                  {pureContent}\n                </div>\n              </Tooltip>\n            )\n          }\n          return (\n            <div className={classes.rteRoot} onDoubleClick={onOpenRTE(params.row)}>\n              {pureContent}\n            </div>\n          )\n        }\n      }\n    ],\n    [descriptionValues, editor]\n  )\n\n  const onChangeDescription = (language_id: number, description: string) => {\n    const newDescriptionValues = immer(descriptionValues, (draft) => {\n      const existingDescIndex = _.findIndex(descriptionValues, { language_id })\n      if (existingDescIndex === -1) {\n        draft.push({ language_id, description })\n      } else {\n        draft[existingDescIndex].description = description\n      }\n    })\n    onChange(newDescriptionValues)\n  }\n\n  const onOpenRTE = (language) => () => {\n    const currentContent = getCellValue(language.id)\n    setRTEState((prevState) =>\n      immer(prevState, (draft) => {\n        draft.content = currentContent\n        draft.languageId = language.id\n        draft.title = `${language.parameter_id} - ${language.description}`\n        draft.isOpen = true\n      })\n    )\n  }\n\n  const handleCloseRTE = () => {\n    setRTEState({ ...defaultValueRTE })\n  }\n\n  const onCloseRTE = () => {\n    handleCloseRTE()\n  }\n\n  const onConfirmRTE = (language_id, description) => {\n    onChangeDescription(language_id, description)\n    handleCloseRTE()\n  }\n\n  const handleOpenCopyDialog = () => {\n    if (!disabled) {\n      setOpenCopy(true)\n    }\n  }\n\n  const handleCloseCopyDialog = () => {\n    if (!disabled) {\n      setOpenCopy(false)\n    }\n  }\n\n  return (\n    <>\n      <When condition={copyable}>\n        <Button\n          disabled={disabled}\n          startIcon={<CopyIcon />}\n          style={{ marginBottom: 4, paddingTop: 0 }}\n          onClick={handleOpenCopyDialog}\n        >\n          Copy\n        </Button>\n      </When>\n      <Paper {...paperPropsRest}>\n        <DataTable\n          hideFooter\n          disableSelectionOnClick\n          disableColumnMenu\n          tableHeight={tableHeight}\n          rows={filteredLanguageList}\n          columns={columns}\n          onCellDoubleClick={onDbClickCell}\n          getRowClassName={getStylesRowDisabled}\n        />\n        <DialogRichTextEditor\n          isOpen={RTEState.isOpen}\n          title={RTEState.title}\n          content={RTEState.content}\n          languageId={RTEState.languageId}\n          onClose={onCloseRTE}\n          onConfirm={onConfirmRTE}\n        />\n        <DialogCopyDesc\n          {...(copyDialogProps as any)}\n          autocompleteProps={autocompleteProps}\n          descriptionValues={descriptionValues}\n          open={openCopy}\n          onClose={handleCloseCopyDialog}\n          onChange={onChange}\n        />\n      </Paper>\n    </>\n  )\n}\n\nMultilingualDescription.defaultProps = {\n  editor: 'text',\n  elevation: 1,\n  tableHeight: 300,\n  copyable: false,\n  copyDialogProps: {} as any,\n  disabled: false,\n  autocompleteProps: {}\n}\n\nexport default MultilingualDescription\n"]},"metadata":{},"sourceType":"module"}