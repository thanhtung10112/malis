{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Paper, Button, Tooltip } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { DataTable, DataTableTextField, CopyIcon } from '@/components';\nimport DialogRichTextEditor from './RichTextEditor';\nimport DialogCopyDesc from './DialogCopyDesc';\nimport { useController } from 'react-hook-form';\nimport useStyles from './styles';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport clsx from 'clsx';\nimport striptags from 'striptags';\nimport * as yup from 'yup';\nimport parseHTML from 'html-react-parser';\nimport * as columnProperties from '@/utils/columnProperties';\n\nvar MultilingualDescription = function MultilingualDescription(props) {\n  var classes = useStyles();\n\n  var name = props.name,\n      control = props.control,\n      rules = props.rules,\n      editMode = props.editMode,\n      languageList = props.languageList,\n      tableHeight = props.tableHeight,\n      editor = props.editor,\n      copyable = props.copyable,\n      copyDialogProps = props.copyDialogProps,\n      disabled = props.disabled,\n      autocompleteProps = props.autocompleteProps,\n      paperPropsRest = _objectWithoutProperties(props, [\"name\", \"control\", \"rules\", \"editMode\", \"languageList\", \"tableHeight\", \"editor\", \"copyable\", \"copyDialogProps\", \"disabled\", \"autocompleteProps\"]);\n\n  var defaultValueRTE = React.useMemo(function () {\n    return {\n      isOpen: false,\n      content: '',\n      title: '',\n      languageId: null\n    };\n  }, []);\n\n  var _useController = useController({\n    name: name,\n    control: control\n  }),\n      _useController$field = _useController.field,\n      descriptionValues = _useController$field.value,\n      onChange = _useController$field.onChange;\n\n  var _React$useState = React.useState(_objectSpread({}, defaultValueRTE)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      RTEState = _React$useState2[0],\n      setRTEState = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      openCopy = _React$useState4[0],\n      setOpenCopy = _React$useState4[1];\n\n  var getCellValue = function getCellValue(language_id) {\n    var cellItem = _.find(descriptionValues, {\n      language_id: language_id\n    });\n\n    return (cellItem === null || cellItem === void 0 ? void 0 : cellItem.description) || '';\n  };\n\n  var getStylesRowDisabled = function getStylesRowDisabled(params) {\n    var language = _.find(languageList, {\n      id: params.id\n    });\n\n    return clsx(_defineProperty({}, classes.disable, (language === null || language === void 0 ? void 0 : language.status) === false || disabled));\n  };\n\n  var filteredLanguageList = React.useMemo(function () {\n    if (editMode) {\n      return languageList.filter(function (item) {\n        return item.status === true || descriptionValues.some(function (_ref) {\n          var language_id = _ref.language_id;\n          return item.id === language_id && item.status === false;\n        });\n      });\n    } else {\n      return languageList.filter(function (item) {\n        return item.status === true;\n      });\n    }\n  }, [editMode]);\n\n  var onDbClickCell = function onDbClickCell(params, event) {\n    var language = _.find(languageList, {\n      id: params.id\n    });\n\n    if ((language === null || language === void 0 ? void 0 : language.status) === false || disabled) {\n      event.stopPropagation();\n    }\n  };\n\n  var columns = React.useMemo(function () {\n    return [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      field: 'description_raw',\n      width: 130,\n      headerName: 'Language',\n      valueGetter: function valueGetter(params) {\n        return \"\".concat(params.row.parameter_id, \" - \").concat(params.row.description);\n      }\n    }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Description')), {}, {\n      field: 'value_raw',\n      flex: 0.7,\n      headerName: 'Description',\n      hide: editor !== 'text',\n      valueGetter: function valueGetter(params) {\n        var cellValue = getCellValue(params.id);\n        return cellValue;\n      },\n      renderEditCell: function renderEditCell(params) {\n        return /*#__PURE__*/_jsx(DataTableTextField, {\n          params: params,\n          onChangeValue: onChangeDescription,\n          rules: yup.string().max(255, 'Description must be less than 255 characters!')\n        });\n      }\n    }), {\n      field: 'value_raw_editor',\n      flex: 0.7,\n      headerName: 'Description',\n      sortable: false,\n      hide: editor === 'text',\n      renderCell: function renderCell(params) {\n        var description = getCellValue(params.id);\n        var pureContent = striptags(description);\n        var htmlContent = parseHTML(_.toString(description));\n\n        if (pureContent) {\n          return /*#__PURE__*/_jsx(Tooltip, {\n            title: htmlContent,\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: classes.rteRoot,\n              onDoubleClick: onOpenRTE(params.row),\n              children: pureContent\n            })\n          });\n        }\n\n        return /*#__PURE__*/_jsx(\"div\", {\n          className: classes.rteRoot,\n          onDoubleClick: onOpenRTE(params.row),\n          children: pureContent\n        });\n      }\n    }];\n  }, [descriptionValues, editor]);\n\n  var onChangeDescription = function onChangeDescription(language_id, description) {\n    var newDescriptionValues = immer(descriptionValues, function (draft) {\n      var existingDescIndex = _.findIndex(descriptionValues, {\n        language_id: language_id\n      });\n\n      if (existingDescIndex === -1) {\n        draft.push({\n          language_id: language_id,\n          description: description\n        });\n      } else {\n        draft[existingDescIndex].description = description;\n      }\n    });\n    onChange(newDescriptionValues);\n  };\n\n  var onOpenRTE = function onOpenRTE(language) {\n    return function () {\n      var currentContent = getCellValue(language.id);\n      setRTEState(function (prevState) {\n        return immer(prevState, function (draft) {\n          draft.content = currentContent;\n          draft.languageId = language.id;\n          draft.title = \"\".concat(language.parameter_id, \" - \").concat(language.description);\n          draft.isOpen = true;\n        });\n      });\n    };\n  };\n\n  var handleCloseRTE = function handleCloseRTE() {\n    setRTEState(_objectSpread({}, defaultValueRTE));\n  };\n\n  var onCloseRTE = function onCloseRTE() {\n    handleCloseRTE();\n  };\n\n  var onConfirmRTE = function onConfirmRTE(language_id, description) {\n    onChangeDescription(language_id, description);\n    handleCloseRTE();\n  };\n\n  var handleOpenCopyDialog = function handleOpenCopyDialog() {\n    if (!disabled) {\n      setOpenCopy(true);\n    }\n  };\n\n  var handleCloseCopyDialog = function handleCloseCopyDialog() {\n    if (!disabled) {\n      setOpenCopy(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(When, {\n      condition: copyable,\n      children: /*#__PURE__*/_jsx(Button, {\n        disabled: disabled,\n        startIcon: /*#__PURE__*/_jsx(CopyIcon, {}),\n        style: {\n          marginBottom: 4,\n          paddingTop: 0\n        },\n        onClick: handleOpenCopyDialog,\n        children: \"Copy\"\n      })\n    }), /*#__PURE__*/_jsxs(Paper, _objectSpread(_objectSpread({}, paperPropsRest), {}, {\n      children: [/*#__PURE__*/_jsx(DataTable, {\n        hideFooter: true,\n        disableSelectionOnClick: true,\n        disableColumnMenu: true,\n        tableHeight: tableHeight,\n        rows: filteredLanguageList,\n        columns: columns,\n        onCellDoubleClick: onDbClickCell,\n        getRowClassName: getStylesRowDisabled\n      }), /*#__PURE__*/_jsx(DialogRichTextEditor, {\n        isOpen: RTEState.isOpen,\n        title: RTEState.title,\n        content: RTEState.content,\n        languageId: RTEState.languageId,\n        onClose: onCloseRTE,\n        onConfirm: onConfirmRTE\n      }), /*#__PURE__*/_jsx(DialogCopyDesc, _objectSpread(_objectSpread({}, copyDialogProps), {}, {\n        autocompleteProps: autocompleteProps,\n        descriptionValues: descriptionValues,\n        open: openCopy,\n        onClose: handleCloseCopyDialog,\n        onChange: onChange\n      }))]\n    }))]\n  });\n};\n\nMultilingualDescription.defaultProps = {\n  editor: 'text',\n  elevation: 1,\n  tableHeight: 300,\n  copyable: false,\n  copyDialogProps: {},\n  disabled: false,\n  autocompleteProps: {}\n};\nexport default MultilingualDescription;","map":null,"metadata":{},"sourceType":"module"}