{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, put, putResolve } from 'redux-saga/effects';\nimport { select, call, all } from 'typed-redux-saga';\nimport { itemStore, commonStore, advancedFilterActions, drawingStore, summaryReportActions } from '@/store/reducers';\nimport _ from 'lodash';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport itemApi from '@/apis/item.api';\nimport partApi from '@/apis/part.api';\n/**\n * This function is used to get init data for list of item entity\n */\n\nexport function* fetchItemInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n  const data = yield call(itemApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  }); // when logged in as the fresh user, the API will not send the selected_job attribute\n  // then we will set selected_job as an empty object\n\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {};\n  } // the API will not send the selected_job attribute if you are in the all_job or all_standard mode,\n  // then we will set selected_job = current selected user job\n\n\n  if (userJob.value === -1 || userJob.value === -2) {\n    data.selected_job = userJob;\n  }\n\n  yield put(commonStore.actions.setUserValueJob(data.selected_job));\n  yield put(itemStore.actions.setInitDataForList(data));\n}\n/**\n * this function is used to get item list based on user_job, user_drawing and common search attributes\n */\n\nexport function* fetchItemList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData,\n    userJob,\n    userDrawing\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    userDrawing: select(commonStore.selectUserValueDrawing)\n  });\n\n  if (!userJob.value) {\n    return;\n  }\n\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(itemApi.getList, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    drawing_id: userDrawing.value\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(itemStore.actions.setDataList(data.items));\n}\n/**\n * this function is used to get the list of the item\n * if current user has the view item permission\n */\n\nexport function* getItemList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchItemInitDataForList);\n    const permissions = yield* select(itemStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchItemList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n/**\n * this function is used change the userjob, then set user_drawing = all_drawing\n * and then get list item\n * @param {ParameterOption} userJob option from job_option on the top of the item page\n */\n\nexport function* changeUserJob({\n  payload\n}) {\n  const {\n    optionValue,\n    confirm\n  } = payload;\n\n  if (confirm === 'save') {\n    yield put(commonStore.sagaUpdateMultiple({\n      entity: 'item',\n      action: itemStore.sagaChangeUserJob,\n      payloadAction: {\n        optionValue\n      }\n    }));\n  } else {\n    yield all([put(commonStore.actions.setUserValueJob(optionValue)), put(commonStore.actions.setUserValueDrawing(commonStore.initialState.userValue.drawing))]);\n    yield call(getItemList);\n  }\n}\n/**\n * this function is used change the user drawing\n * if userDrawing = -1 (all_drawing), then set selected_drawing = init data\n * @param {DataForDropdown} userDrawing option from drawing_option on the top of the item page\n */\n\nexport function* changeUserDrawing({\n  payload\n}) {\n  const {\n    optionValue,\n    confirm\n  } = payload;\n\n  if (confirm === 'save') {\n    yield put(commonStore.sagaUpdateMultiple({\n      entity: 'item',\n      action: itemStore.sagaChangeUserDrawing,\n      payloadAction: {\n        optionValue\n      }\n    }));\n  } else {\n    yield putResolve(commonStore.actions.setUserValueDrawing(optionValue));\n    yield call(getItemList);\n  }\n}\n\nfunction* removeItem({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const data = yield call(partApi.executeOperation, 'delete', payload);\n\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data));\n      yield put(summaryReportActions.setOpen(true));\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message));\n    }\n\n    const entity = yield* select(commonStore.selectEntity);\n\n    if (entity === 'drawing') {\n      yield put(drawingStore.sagaGetDrawingPartList());\n    } else {\n      yield call(fetchItemList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* itemSaga() {\n  yield takeEvery(itemStore.sagaGetList, getItemList);\n  yield takeEvery(itemStore.sagaChangeUserJob, changeUserJob);\n  yield takeEvery(itemStore.sagaChangeUserDrawing, changeUserDrawing);\n  yield takeEvery(itemStore.sagaRemove, removeItem);\n}\n\nexport default itemSaga;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/saga/item.saga.ts"],"names":["takeEvery","put","putResolve","select","call","all","itemStore","commonStore","advancedFilterActions","drawingStore","summaryReportActions","_","errorSaga","itemApi","partApi","fetchItemInitDataForList","userJob","selectUserValueJob","data","getInitDataForList","job_id_pk","value","isNull","selected_job","actions","setUserValueJob","setInitDataForList","fetchItemList","tableState","searchQuery","filterData","userDrawing","selectTableState","selectSearchQuery","selectFilterData","selectUserValueDrawing","page","per_page","getList","s","job_id","drawing_id","setTableState","total_items","setDataList","items","getItemList","setLoadingPage","permissions","selectPermissions","view","error","handleError","changeUserJob","payload","optionValue","confirm","sagaUpdateMultiple","entity","action","sagaChangeUserJob","payloadAction","setUserValueDrawing","initialState","userValue","drawing","changeUserDrawing","sagaChangeUserDrawing","removeItem","executeOperation","failed_count","setReportData","setOpen","setSuccessMessage","message","selectEntity","sagaGetDrawingPartList","itemSaga","sagaGetList","sagaRemove"],"mappings":"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","sourcesContent":["import { takeEvery, put, putResolve } from 'redux-saga/effects'\nimport { select, call, all } from 'typed-redux-saga'\n\nimport { itemStore, commonStore, advancedFilterActions, drawingStore, summaryReportActions } from '@/store/reducers'\n\nimport _ from 'lodash'\nimport * as errorSaga from '@/store/saga/errorSaga'\n\nimport itemApi from '@/apis/item.api'\nimport partApi from '@/apis/part.api'\n\n/**\n * This function is used to get init data for list of item entity\n */\nexport function* fetchItemInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob)\n  const data = yield call(itemApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  })\n  // when logged in as the fresh user, the API will not send the selected_job attribute\n  // then we will set selected_job as an empty object\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {}\n  }\n  // the API will not send the selected_job attribute if you are in the all_job or all_standard mode,\n  // then we will set selected_job = current selected user job\n  if (userJob.value === -1 || userJob.value === -2) {\n    data.selected_job = userJob\n  }\n  yield put(commonStore.actions.setUserValueJob(data.selected_job))\n  yield put(itemStore.actions.setInitDataForList(data))\n}\n\n/**\n * this function is used to get item list based on user_job, user_drawing and common search attributes\n */\nexport function* fetchItemList() {\n  const { tableState, searchQuery, filterData, userJob, userDrawing } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    userDrawing: select(commonStore.selectUserValueDrawing)\n  })\n  if (!userJob.value) {\n    return\n  }\n  const { page, per_page } = tableState\n  const data = yield call(itemApi.getList, {\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    drawing_id: userDrawing.value,\n    ...filterData\n  })\n  yield put(commonStore.actions.setTableState({ total_items: data.total_items }))\n  yield put(itemStore.actions.setDataList(data.items))\n}\n\n/**\n * this function is used to get the list of the item\n * if current user has the view item permission\n */\nexport function* getItemList() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchItemInitDataForList)\n    const permissions = yield* select(itemStore.selectPermissions)\n    if (permissions?.view) {\n      yield call(fetchItemList)\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\n/**\n * this function is used change the userjob, then set user_drawing = all_drawing\n * and then get list item\n * @param {ParameterOption} userJob option from job_option on the top of the item page\n */\nexport function* changeUserJob({ payload }: ReturnType<typeof itemStore.sagaChangeUserJob>) {\n  const { optionValue, confirm } = payload\n  if (confirm === 'save') {\n    yield put(\n      commonStore.sagaUpdateMultiple({\n        entity: 'item',\n        action: itemStore.sagaChangeUserJob,\n        payloadAction: { optionValue }\n      })\n    )\n  } else {\n    yield all([\n      put(commonStore.actions.setUserValueJob(optionValue)),\n      put(commonStore.actions.setUserValueDrawing(commonStore.initialState.userValue.drawing))\n    ])\n    yield call(getItemList)\n  }\n}\n\n/**\n * this function is used change the user drawing\n * if userDrawing = -1 (all_drawing), then set selected_drawing = init data\n * @param {DataForDropdown} userDrawing option from drawing_option on the top of the item page\n */\nexport function* changeUserDrawing({ payload }: ReturnType<typeof itemStore.sagaChangeUserDrawing>) {\n  const { optionValue, confirm } = payload\n  if (confirm === 'save') {\n    yield put(\n      commonStore.sagaUpdateMultiple({\n        entity: 'item',\n        action: itemStore.sagaChangeUserDrawing,\n        payloadAction: { optionValue }\n      })\n    )\n  } else {\n    yield putResolve(commonStore.actions.setUserValueDrawing(optionValue))\n    yield call(getItemList)\n  }\n}\n\nfunction* removeItem({ payload }: ReturnType<typeof itemStore.sagaRemove>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const data = yield call(partApi.executeOperation, 'delete', payload)\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data))\n      yield put(summaryReportActions.setOpen(true))\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message))\n    }\n    const entity = yield* select(commonStore.selectEntity)\n    if (entity === 'drawing') {\n      yield put(drawingStore.sagaGetDrawingPartList())\n    } else {\n      yield call(fetchItemList)\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* itemSaga() {\n  yield takeEvery(itemStore.sagaGetList, getItemList)\n  yield takeEvery(itemStore.sagaChangeUserJob, changeUserJob)\n  yield takeEvery(itemStore.sagaChangeUserDrawing, changeUserDrawing)\n  yield takeEvery(itemStore.sagaRemove, removeItem)\n}\n\nexport default itemSaga\n"]},"metadata":{},"sourceType":"module"}