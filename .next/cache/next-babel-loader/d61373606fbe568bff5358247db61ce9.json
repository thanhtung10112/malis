{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\DataTable\\\\Common\\\\MultilingualDescription\\\\DialogCopyDesc.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useCallback, useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Grid, Paper, RadioGroup, FormControlLabel, Radio } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { DialogMain, DataTable, AppAutocompleteAsync } from '@/components';\nimport _ from 'lodash';\nimport { commonStore } from '@/store/reducers';\nimport { defaultProperties } from '@/utils/columnProperties';\nimport HttpService from '@/helper/HttpService';\n\nvar DialogCopyDesc = function DialogCopyDesc(props) {\n  _s();\n\n  var open = props.open,\n      onClose = props.onClose,\n      compName = props.compName,\n      entity = props.entity,\n      descriptionValues = props.descriptionValues,\n      onChange = props.onChange,\n      checkboxesToSelect = props.checkboxesToSelect,\n      autocompleteProps = props.autocompleteProps;\n  var httpService = new HttpService('');\n  var dispatch = useDispatch();\n\n  var _useState = useState([]),\n      selectedRows = _useState[0],\n      setSelectedRows = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      descriptionList = _useState3[0],\n      setDescriptionList = _useState3[1];\n\n  var _useState4 = useState({\n    entity: '',\n    compName: ''\n  }),\n      paramApi = _useState4[0],\n      setParamApi = _useState4[1];\n\n  var _useState5 = useState([]),\n      defaultOptions = _useState5[0],\n      setDefaultOptions = _useState5[1];\n\n  var isContainCheckboxes = checkboxesToSelect.length > 0;\n  useEffect(function () {\n    if (isContainCheckboxes) {\n      var defaultCheckbox = _.find(checkboxesToSelect, {\n        \"default\": true\n      });\n\n      defaultCheckbox && setParamApi({\n        entity: defaultCheckbox.entity,\n        compName: defaultCheckbox.value\n      });\n    } else {\n      setParamApi({\n        entity: entity,\n        compName: compName\n      });\n    }\n  }, [entity, compName, checkboxesToSelect, isContainCheckboxes]);\n\n  var fecthDescs = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n      var data, ids;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n              _context.next = 4;\n              return httpService.get(\"\".concat(paramApi.entity, \"/\").concat(id, \"/descriptions\"));\n\n            case 4:\n              data = _context.sent;\n              ids = data.descriptions.map(function (des) {\n                return des.id;\n              });\n              setDescriptionList(data.descriptions);\n              setSelectedRows(ids);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch(commonStore.actions.setError(_context.t0));\n\n            case 13:\n              setLoading(false);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n\n    return function fecthDescs(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSelect = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event, option) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setSelectedRows([]);\n              _context2.next = 3;\n              return fecthDescs(option.value);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSelect(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleSelectRows = function handleSelectRows(_ref3) {\n    var selectionModel = _ref3.selectionModel;\n    setSelectedRows(selectionModel);\n  };\n\n  var handleCopyDescs = function handleCopyDescs() {\n    var descList = descriptionList.filter(function (desc) {\n      return selectedRows.includes(desc.id);\n    }).map(function (_ref4) {\n      var description = _ref4.description,\n          id = _ref4.id;\n      return {\n        language_id: id,\n        description: description\n      };\n    });\n\n    var mergeDescription = _.uniqBy([].concat(_toConsumableArray(descList), _toConsumableArray(descriptionValues)), 'language_id');\n\n    onChange(mergeDescription);\n    handleCloseDialog();\n  };\n\n  var handleCloseDialog = function handleCloseDialog() {\n    setDescriptionList([]);\n    setSelectedRows([]);\n    onClose();\n  };\n\n  var handleSelectModule = function handleSelectModule(_ref5) {\n    var entity = _ref5.entity,\n        value = _ref5.value;\n    return function () {\n      setParamApi({\n        entity: entity,\n        compName: value\n      });\n      setDefaultOptions([]);\n    };\n  };\n\n  var renderCheckboxesSelect = useCallback(function () {\n    return checkboxesToSelect.map(function (checkbox) {\n      return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: checkbox.value,\n        control: /*#__PURE__*/_jsxDEV(Radio, {\n          color: \"primary\",\n          onChange: handleSelectModule(checkbox)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 20\n        }, _this),\n        label: checkbox.label\n      }, checkbox.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, _this);\n    });\n  }, [checkboxesToSelect, handleSelectModule]);\n  return /*#__PURE__*/_jsxDEV(DialogMain, {\n    open: open,\n    title: \"Copy descriptions\",\n    fullWidth: true,\n    maxWidth: \"sm\",\n    loading: loading,\n    onOk: handleCopyDescs,\n    onClose: handleCloseDialog,\n    okText: \"Save\",\n    okButtonProps: {\n      disabled: selectedRows.length === 0 || loading\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      style: {\n        marginTop: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(When, {\n        condition: isContainCheckboxes,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n            row: true,\n            \"aria-label\": \"position\",\n            name: \"position\",\n            defaultValue: \"top\",\n            value: paramApi.compName,\n            children: renderCheckboxesSelect()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(AppAutocompleteAsync, _objectSpread({\n          disabled: !paramApi.compName,\n          compName: paramApi.compName,\n          onChange: handleSelect,\n          label: \"Copy descriptions from\",\n          defaultOptions: defaultOptions\n        }, autocompleteProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          children: /*#__PURE__*/_jsxDEV(DataTable, {\n            hideFooter: true,\n            tableHeight: 275,\n            rows: descriptionList,\n            checkboxSelection: true,\n            selectionModel: selectedRows,\n            onSelectionModelChange: handleSelectRows,\n            columns: [_objectSpread(_objectSpread({}, defaultProperties), {}, {\n              field: 'language_desc',\n              headerName: 'Language',\n              width: 130\n            }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n              field: 'description',\n              headerName: 'Description',\n              flex: 0.7\n            })]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(DialogCopyDesc, \"dh4pJeZnHlvuCdlkb1RiAjCvDiA=\", false, function () {\n  return [useDispatch];\n});\n\n_c = DialogCopyDesc;\nDialogCopyDesc.defaultProps = {\n  checkboxesToSelect: []\n};\nexport default DialogCopyDesc;\n\nvar _c;\n\n$RefreshReg$(_c, \"DialogCopyDesc\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/DataTable/Common/MultilingualDescription/DialogCopyDesc.tsx"],"names":["useCallback","useState","useEffect","useDispatch","Grid","Paper","RadioGroup","FormControlLabel","Radio","When","DialogMain","DataTable","AppAutocompleteAsync","_","commonStore","defaultProperties","HttpService","DialogCopyDesc","props","open","onClose","compName","entity","descriptionValues","onChange","checkboxesToSelect","autocompleteProps","httpService","dispatch","selectedRows","setSelectedRows","loading","setLoading","descriptionList","setDescriptionList","paramApi","setParamApi","defaultOptions","setDefaultOptions","isContainCheckboxes","length","defaultCheckbox","find","value","fecthDescs","id","get","data","ids","descriptions","map","des","actions","setError","handleSelect","event","option","handleSelectRows","selectionModel","handleCopyDescs","descList","filter","desc","includes","description","language_id","mergeDescription","uniqBy","handleCloseDialog","handleSelectModule","renderCheckboxesSelect","checkbox","label","disabled","marginTop","field","headerName","width","flex","defaultProps"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkCC,gBAAlC,EAAoDC,KAApD,QAAiE,mBAAjE;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,oBAAhC,QAA4D,cAA5D;AAEA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;AA4BA,IAAMC,cAA6C,GAAG,SAAhDA,cAAgD,CAACC,KAAD,EAAW;AAAA;;AAAA,MACvDC,IADuD,GACiDD,KADjD,CACvDC,IADuD;AAAA,MACjDC,OADiD,GACiDF,KADjD,CACjDE,OADiD;AAAA,MACxCC,QADwC,GACiDH,KADjD,CACxCG,QADwC;AAAA,MAC9BC,MAD8B,GACiDJ,KADjD,CAC9BI,MAD8B;AAAA,MACtBC,iBADsB,GACiDL,KADjD,CACtBK,iBADsB;AAAA,MACHC,QADG,GACiDN,KADjD,CACHM,QADG;AAAA,MACOC,kBADP,GACiDP,KADjD,CACOO,kBADP;AAAA,MAC2BC,iBAD3B,GACiDR,KADjD,CAC2BQ,iBAD3B;AAG/D,MAAMC,WAAW,GAAG,IAAIX,WAAJ,CAAgB,EAAhB,CAApB;AAEA,MAAMY,QAAQ,GAAGzB,WAAW,EAA5B;;AAL+D,kBAOvBF,QAAQ,CAAW,EAAX,CAPe;AAAA,MAOxD4B,YAPwD;AAAA,MAO1CC,eAP0C;;AAAA,mBAQjC7B,QAAQ,CAAC,KAAD,CARyB;AAAA,MAQxD8B,OARwD;AAAA,MAQ/CC,UAR+C;;AAAA,mBASjB/B,QAAQ,CAAoB,EAApB,CATS;AAAA,MASxDgC,eATwD;AAAA,MASvCC,kBATuC;;AAAA,mBAU/BjC,QAAQ,CAAC;AAAEqB,IAAAA,MAAM,EAAE,EAAV;AAAcD,IAAAA,QAAQ,EAAE;AAAxB,GAAD,CAVuB;AAAA,MAUxDc,QAVwD;AAAA,MAU9CC,WAV8C;;AAAA,mBAWnBnC,QAAQ,CAAC,EAAD,CAXW;AAAA,MAWxDoC,cAXwD;AAAA,MAWxCC,iBAXwC;;AAa/D,MAAMC,mBAAmB,GAAGd,kBAAkB,CAACe,MAAnB,GAA4B,CAAxD;AAEAtC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIqC,mBAAJ,EAAyB;AACvB,UAAME,eAAe,GAAG5B,CAAC,CAAC6B,IAAF,CAAOjB,kBAAP,EAA2B;AAAE,mBAAS;AAAX,OAA3B,CAAxB;;AACAgB,MAAAA,eAAe,IACbL,WAAW,CAAC;AACVd,QAAAA,MAAM,EAAEmB,eAAe,CAACnB,MADd;AAEVD,QAAAA,QAAQ,EAAEoB,eAAe,CAACE;AAFhB,OAAD,CADb;AAKD,KAPD,MAOO;AACLP,MAAAA,WAAW,CAAC;AAAEd,QAAAA,MAAM,EAANA,MAAF;AAAUD,QAAAA,QAAQ,EAARA;AAAV,OAAD,CAAX;AACD;AACF,GAXQ,EAWN,CAACC,MAAD,EAASD,QAAT,EAAmBI,kBAAnB,EAAuCc,mBAAvC,CAXM,CAAT;;AAaA,MAAMK,UAAU;AAAA,wEAAG,iBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBb,cAAAA,UAAU,CAAC,IAAD,CAAV;AADiB;AAAA;AAAA,qBAGIL,WAAW,CAACmB,GAAZ,WAAmBX,QAAQ,CAACb,MAA5B,cAAsCuB,EAAtC,mBAHJ;;AAAA;AAGTE,cAAAA,IAHS;AAITC,cAAAA,GAJS,GAIHD,IAAI,CAACE,YAAL,CAAkBC,GAAlB,CAAsB,UAACC,GAAD;AAAA,uBAASA,GAAG,CAACN,EAAb;AAAA,eAAtB,CAJG;AAKfX,cAAAA,kBAAkB,CAACa,IAAI,CAACE,YAAN,CAAlB;AACAnB,cAAAA,eAAe,CAACkB,GAAD,CAAf;AANe;AAAA;;AAAA;AAAA;AAAA;AAQfpB,cAAAA,QAAQ,CAACd,WAAW,CAACsC,OAAZ,CAAoBC,QAApB,aAAD,CAAR;;AARe;AAUjBrB,cAAAA,UAAU,CAAC,KAAD,CAAV;;AAViB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVY,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAaA,MAAMU,YAAY;AAAA,yEAAG,kBAAOC,KAAP,EAAcC,MAAd;AAAA;AAAA;AAAA;AAAA;AACnB1B,cAAAA,eAAe,CAAC,EAAD,CAAf;AADmB;AAAA,qBAEbc,UAAU,CAACY,MAAM,CAACb,KAAR,CAFG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZW,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAKA,MAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,QAAwB;AAAA,QAArBC,cAAqB,SAArBA,cAAqB;AAC/C5B,IAAAA,eAAe,CAAC4B,cAAD,CAAf;AACD,GAFD;;AAIA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,QAAMC,QAAQ,GAAG3B,eAAe,CAC7B4B,MADc,CACP,UAACC,IAAD;AAAA,aAAUjC,YAAY,CAACkC,QAAb,CAAsBD,IAAI,CAACjB,EAA3B,CAAV;AAAA,KADO,EAEdK,GAFc,CAEV;AAAA,UAAGc,WAAH,SAAGA,WAAH;AAAA,UAAgBnB,EAAhB,SAAgBA,EAAhB;AAAA,aAA0B;AAAEoB,QAAAA,WAAW,EAAEpB,EAAf;AAAmBmB,QAAAA,WAAW,EAAXA;AAAnB,OAA1B;AAAA,KAFU,CAAjB;;AAGA,QAAME,gBAAgB,GAAGrD,CAAC,CAACsD,MAAF,8BAAaP,QAAb,sBAA0BrC,iBAA1B,IAA8C,aAA9C,CAAzB;;AACAC,IAAAA,QAAQ,CAAC0C,gBAAD,CAAR;AACAE,IAAAA,iBAAiB;AAClB,GAPD;;AASA,MAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BlC,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAJ,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAV,IAAAA,OAAO;AACR,GAJD;;AAMA,MAAMiD,kBAAkB,GACtB,SADIA,kBACJ;AAAA,QAAG/C,MAAH,SAAGA,MAAH;AAAA,QAAWqB,KAAX,SAAWA,KAAX;AAAA,WACA,YAAM;AACJP,MAAAA,WAAW,CAAC;AAAEd,QAAAA,MAAM,EAANA,MAAF;AAAUD,QAAAA,QAAQ,EAAEsB;AAApB,OAAD,CAAX;AACAL,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD,KAJD;AAAA,GADF;;AAOA,MAAMgC,sBAAsB,GAAGtE,WAAW,CACxC;AAAA,WACEyB,kBAAkB,CAACyB,GAAnB,CAAuB,UAACqB,QAAD;AAAA,0BACrB,QAAC,gBAAD;AAEE,QAAA,KAAK,EAAEA,QAAQ,CAAC5B,KAFlB;AAGE,QAAA,OAAO,eAAE,QAAC,KAAD;AAAO,UAAA,KAAK,EAAC,SAAb;AAAuB,UAAA,QAAQ,EAAE0B,kBAAkB,CAACE,QAAD;AAAnD;AAAA;AAAA;AAAA;AAAA,iBAHX;AAIE,QAAA,KAAK,EAAEA,QAAQ,CAACC;AAJlB,SACOD,QAAQ,CAAC5B,KADhB;AAAA;AAAA;AAAA;AAAA,eADqB;AAAA,KAAvB,CADF;AAAA,GADwC,EAUxC,CAAClB,kBAAD,EAAqB4C,kBAArB,CAVwC,CAA1C;AAaA,sBACE,QAAC,UAAD;AACE,IAAA,IAAI,EAAElD,IADR;AAEE,IAAA,KAAK,EAAC,mBAFR;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,QAAQ,EAAC,IAJX;AAKE,IAAA,OAAO,EAAEY,OALX;AAME,IAAA,IAAI,EAAE4B,eANR;AAOE,IAAA,OAAO,EAAES,iBAPX;AAQE,IAAA,MAAM,EAAC,MART;AASE,IAAA,aAAa,EAAE;AAAEK,MAAAA,QAAQ,EAAE5C,YAAY,CAACW,MAAb,KAAwB,CAAxB,IAA6BT;AAAzC,KATjB;AAAA,2BAWE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAA4B,MAAA,KAAK,EAAE;AAAE2C,QAAAA,SAAS,EAAE;AAAb,OAAnC;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,SAAS,EAAEnC,mBAAjB;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,GAAG,MAAf;AAAgB,0BAAW,UAA3B;AAAsC,YAAA,IAAI,EAAC,UAA3C;AAAsD,YAAA,YAAY,EAAC,KAAnE;AAAyE,YAAA,KAAK,EAAEJ,QAAQ,CAACd,QAAzF;AAAA,sBACGiD,sBAAsB;AADzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,eADF,eAQE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAA,+BACE,QAAC,oBAAD;AACE,UAAA,QAAQ,EAAE,CAACnC,QAAQ,CAACd,QADtB;AAEE,UAAA,QAAQ,EAAEc,QAAQ,CAACd,QAFrB;AAGE,UAAA,QAAQ,EAAEiC,YAHZ;AAIE,UAAA,KAAK,EAAC,wBAJR;AAKE,UAAA,cAAc,EAAEjB;AALlB,WAMMX,iBANN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,eARF,eAkBE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAA,+BACE,QAAC,KAAD;AAAA,iCACE,QAAC,SAAD;AACE,YAAA,UAAU,MADZ;AAEE,YAAA,WAAW,EAAE,GAFf;AAGE,YAAA,IAAI,EAAEO,eAHR;AAIE,YAAA,iBAAiB,MAJnB;AAKE,YAAA,cAAc,EAAEJ,YALlB;AAME,YAAA,sBAAsB,EAAE4B,gBAN1B;AAOE,YAAA,OAAO,EAAE,iCAEF1C,iBAFE;AAGL4D,cAAAA,KAAK,EAAE,eAHF;AAILC,cAAAA,UAAU,EAAE,UAJP;AAKLC,cAAAA,KAAK,EAAE;AALF,gDAQF9D,iBARE;AASL4D,cAAAA,KAAK,EAAE,aATF;AAULC,cAAAA,UAAU,EAAE,aAVP;AAWLE,cAAAA,IAAI,EAAE;AAXD;AAPX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,eAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAXF;AAAA;AAAA;AAAA;AAAA,WADF;AA2DD,CAhJD;;GAAM7D,c;UAKad,W;;;KALbc,c;AAkJNA,cAAc,CAAC8D,YAAf,GAA8B;AAC5BtD,EAAAA,kBAAkB,EAAE;AADQ,CAA9B;AAIA,eAAeR,cAAf","sourcesContent":["import { useCallback, useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { Grid, Paper, RadioGroup, FormControlLabel, Radio } from '@material-ui/core'\nimport { When } from 'react-if'\nimport { DialogMain, DataTable, AppAutocompleteAsync } from '@/components'\n\nimport _ from 'lodash'\nimport { commonStore } from '@/store/reducers'\nimport { defaultProperties } from '@/utils/columnProperties'\nimport HttpService from '@/helper/HttpService'\n\nimport type { MultilingualDescription } from '@/types/Common'\n\nexport type DialogCopyDescProps = {\n  open: boolean\n  compName: string\n  onClose(): void\n  entity: string\n  descriptionValues: MultilingualDescription[]\n  onChange(values: MultilingualDescription[]): void\n  checkboxesToSelect?: CheckBoxCopyDesc[]\n  autocompleteProps?: any\n}\n\nexport type CheckBoxCopyDesc = {\n  value: string\n  label: string\n  entity: string\n  default?: boolean\n}\n\nexport type DescriptionCopy = {\n  description: string\n  id: number\n  language_desc: string\n}\n\nconst DialogCopyDesc: React.FC<DialogCopyDescProps> = (props) => {\n  const { open, onClose, compName, entity, descriptionValues, onChange, checkboxesToSelect, autocompleteProps } = props\n\n  const httpService = new HttpService('')\n\n  const dispatch = useDispatch()\n\n  const [selectedRows, setSelectedRows] = useState<number[]>([])\n  const [loading, setLoading] = useState(false)\n  const [descriptionList, setDescriptionList] = useState<DescriptionCopy[]>([])\n  const [paramApi, setParamApi] = useState({ entity: '', compName: '' })\n  const [defaultOptions, setDefaultOptions] = useState([])\n\n  const isContainCheckboxes = checkboxesToSelect.length > 0\n\n  useEffect(() => {\n    if (isContainCheckboxes) {\n      const defaultCheckbox = _.find(checkboxesToSelect, { default: true })\n      defaultCheckbox &&\n        setParamApi({\n          entity: defaultCheckbox.entity,\n          compName: defaultCheckbox.value\n        })\n    } else {\n      setParamApi({ entity, compName })\n    }\n  }, [entity, compName, checkboxesToSelect, isContainCheckboxes])\n\n  const fecthDescs = async (id) => {\n    setLoading(true)\n    try {\n      const data = await httpService.get(`${paramApi.entity}/${id}/descriptions`)\n      const ids = data.descriptions.map((des) => des.id)\n      setDescriptionList(data.descriptions)\n      setSelectedRows(ids)\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error))\n    }\n    setLoading(false)\n  }\n\n  const handleSelect = async (event, option) => {\n    setSelectedRows([])\n    await fecthDescs(option.value)\n  }\n\n  const handleSelectRows = ({ selectionModel }) => {\n    setSelectedRows(selectionModel)\n  }\n\n  const handleCopyDescs = () => {\n    const descList = descriptionList\n      .filter((desc) => selectedRows.includes(desc.id))\n      .map(({ description, id }) => ({ language_id: id, description }))\n    const mergeDescription = _.uniqBy([...descList, ...descriptionValues], 'language_id')\n    onChange(mergeDescription)\n    handleCloseDialog()\n  }\n\n  const handleCloseDialog = () => {\n    setDescriptionList([])\n    setSelectedRows([])\n    onClose()\n  }\n\n  const handleSelectModule =\n    ({ entity, value }) =>\n    () => {\n      setParamApi({ entity, compName: value })\n      setDefaultOptions([])\n    }\n\n  const renderCheckboxesSelect = useCallback(\n    () =>\n      checkboxesToSelect.map((checkbox) => (\n        <FormControlLabel\n          key={checkbox.value}\n          value={checkbox.value}\n          control={<Radio color=\"primary\" onChange={handleSelectModule(checkbox)} />}\n          label={checkbox.label}\n        />\n      )),\n    [checkboxesToSelect, handleSelectModule]\n  )\n\n  return (\n    <DialogMain\n      open={open}\n      title=\"Copy descriptions\"\n      fullWidth\n      maxWidth=\"sm\"\n      loading={loading}\n      onOk={handleCopyDescs}\n      onClose={handleCloseDialog}\n      okText=\"Save\"\n      okButtonProps={{ disabled: selectedRows.length === 0 || loading }}\n    >\n      <Grid container spacing={2} style={{ marginTop: 4 }}>\n        <When condition={isContainCheckboxes}>\n          <Grid item xs={12}>\n            <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\" value={paramApi.compName}>\n              {renderCheckboxesSelect()}\n            </RadioGroup>\n          </Grid>\n        </When>\n        <Grid item xs={12}>\n          <AppAutocompleteAsync\n            disabled={!paramApi.compName}\n            compName={paramApi.compName}\n            onChange={handleSelect}\n            label=\"Copy descriptions from\"\n            defaultOptions={defaultOptions}\n            {...autocompleteProps}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Paper>\n            <DataTable\n              hideFooter\n              tableHeight={275}\n              rows={descriptionList}\n              checkboxSelection\n              selectionModel={selectedRows}\n              onSelectionModelChange={handleSelectRows}\n              columns={[\n                {\n                  ...defaultProperties,\n                  field: 'language_desc',\n                  headerName: 'Language',\n                  width: 130\n                },\n                {\n                  ...defaultProperties,\n                  field: 'description',\n                  headerName: 'Description',\n                  flex: 0.7\n                }\n              ]}\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n    </DialogMain>\n  )\n}\n\nDialogCopyDesc.defaultProps = {\n  checkboxesToSelect: []\n}\n\nexport default DialogCopyDesc\n"]},"metadata":{},"sourceType":"module"}