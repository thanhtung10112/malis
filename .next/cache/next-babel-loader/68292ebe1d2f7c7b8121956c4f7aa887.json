{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { takeEvery, put, putResolve } from 'redux-saga/effects';\nimport { select, call, all } from 'typed-redux-saga';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport { drawingStore, commonStore, advancedFilterActions, specificationStore, partStore, tagStore } from '@/store/reducers';\nimport _ from 'lodash';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nimport { fetchSpecificationDetail } from '@/store/saga/specification.saga';\nimport drawingApi from '@/apis/drawing.api';\nexport function* fetchDrawingInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n  const data = yield call(drawingApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  });\n\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {};\n  }\n\n  if (userJob.value === -1 || userJob.value === -2) {\n    data.selected_job = userJob;\n  }\n\n  yield put(commonStore.actions.setUserValueJob(data.selected_job));\n  yield put(drawingStore.actions.setInitDataForList(data));\n}\nexport function* fetchDrawingInitDataForCE(jobId = null) {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n\n  const _yield$call = yield call(drawingApi.getInitDataForCE, {\n    job_id_pk: jobId || userJob.value\n  }),\n        {\n    permissions,\n    user_job\n  } = _yield$call,\n        dataInit = _objectWithoutProperties(_yield$call, [\"permissions\", \"user_job\"]);\n\n  const detailDefaultValue = getDefaultValues(dataInit.parameters, {\n    drawing_purpose: 'DWPU',\n    file_prefix: 'FPRE',\n    file_type: 'FTYP',\n    drawing_format: 'PLFO'\n  }); // if you are in create mode, then set jobId for the assembly form\n\n  if (_.isNull(jobId)) {\n    detailDefaultValue.job_id = userJob.value;\n  }\n\n  if (!_.isNull(detailDefaultValue.drawing_purpose) && _.isNull(jobId)) {\n    const drawingPurpose = _.find(dataInit.parameters.DWPU, {\n      id: detailDefaultValue.drawing_purpose\n    });\n\n    const {\n      exclude_from\n    } = drawingPurpose === null || drawingPurpose === void 0 ? void 0 : drawingPurpose.properties;\n\n    if (_.isString(exclude_from) && _.size(exclude_from) > 0) {\n      const excludeList = {\n        C: 'exclude_from_customer',\n        O: 'exclude_from_other',\n        S: 'exclude_from_supplier'\n      };\n      const excludeFrom = exclude_from.split(';'); // C;O;S => [C, O, S]\n\n      _.forIn(excludeList, (value, key) => {\n        if (excludeFrom.includes(key)) {\n          detailDefaultValue[value] = true;\n        }\n      });\n    }\n  }\n\n  yield put(drawingStore.actions.setInitDataForCE(dataInit));\n  yield put(drawingStore.actions.setDetail(detailDefaultValue));\n}\nexport function* fetchDrawingList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData,\n    userJob,\n    drawingGroup\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    drawingGroup: select(drawingStore.selectDrawingGroupId)\n  });\n\n  if (!userJob.value) {\n    return;\n  }\n\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(drawingApi.getList, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    drawing_group_id: drawingGroup\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(drawingStore.actions.setDataList(data.drawings));\n}\nexport function* fetchDrawingPartList(drawingId) {\n  const {\n    drawing\n  } = yield call(drawingApi.getDetail, drawingId);\n  yield put(drawingStore.actions.setComponentList(drawing.item_list));\n}\nexport function* getDrawingPartList() {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const drawingDetail = yield* select(drawingStore.selectDetail);\n    yield call(fetchDrawingPartList, drawingDetail.id);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\nexport function* getDrawingList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchDrawingInitDataForList);\n    const permissions = yield* select(drawingStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchDrawingList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* openDrawingCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchDrawingInitDataForCE);\n    yield put(drawingStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* changeUserJob({\n  payload\n}) {\n  yield putResolve(commonStore.actions.setUserValueJob(payload));\n  yield call(getDrawingList);\n}\nexport function* createDrawing({\n  payload\n}) {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      message\n    } = yield call(drawingApi.create, payload);\n    const userJob = yield* select(commonStore.selectUserValueJob);\n    yield putResolve(drawingStore.actions.resetDetail({\n      userJob\n    }));\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(drawingStore.actions.setDialogStateTab(0))]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\nexport function* closeDrawingDialog() {\n  try {\n    const userJob = yield* select(commonStore.selectUserValueJob);\n    const entity = yield* select(commonStore.selectEntity);\n    const specDetail = yield* select(specificationStore.selectDetail);\n    yield putResolve(drawingStore.actions.setDialogStateOpen(false));\n\n    if (entity === 'specification') {\n      yield put(commonStore.actions.setLoadingPage(true));\n      const {\n        drawing_id\n      } = yield call(fetchSpecificationDetail, specDetail.id);\n      yield put(specificationStore.actions.setDetail({\n        drawing_id\n      }));\n      yield put(commonStore.actions.setLoadingPage(false));\n    } else if (entity === 'element') {\n      yield put(tagStore.sagaGetList());\n    } else {\n      yield call(getDrawingList);\n    }\n\n    yield put(drawingStore.actions.resetDetail({\n      userJob\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\nexport function* openDrawingUpdateDialog({\n  payload: id\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      drawing\n    } = yield call(drawingApi.getDetail, id);\n    drawing.drawing_id = drawing.drawing_id.split(' ')[1];\n    yield call(fetchDrawingInitDataForCE, drawing.job_id);\n    yield putResolve(drawingStore.actions.setDetail(drawing));\n    yield put(drawingStore.actions.setComponentList(drawing.item_list));\n    yield put(drawingStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* updateDrawing({\n  payload\n}) {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      id,\n      drawing\n    } = payload;\n    const {\n      message\n    } = yield call(drawingApi.update, id, drawing);\n    yield call(closeDrawingDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\nexport function* openRevisionDialog({\n  payload\n}) {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      next_revision\n    } = yield call(drawingApi.getInitDataForRevise, payload);\n    yield putResolve(drawingStore.actions.setRevisionDialogDetail({\n      new_revision: next_revision\n    }));\n    yield put(drawingStore.actions.setRevisionDialogOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\nexport function* saveNewRev({\n  payload\n}) {\n  yield put(drawingStore.actions.setRevisionDialogLoading(true));\n\n  try {\n    const {\n      drawingId,\n      revision\n    } = payload;\n    const {\n      message\n    } = yield call(drawingApi.saveRevision, drawingId, revision);\n    yield put(drawingStore.actions.setRevisionDialogOpen(false));\n    yield call(closeDrawingDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(drawingStore.actions.setRevisionDialogLoading(false));\n}\nexport function* openCreatePartDialog({\n  payload\n}) {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const drawingDetail = yield* select(drawingStore.selectDetail);\n    yield putResolve(commonStore.actions.setUserValueDrawing({\n      description: '',\n      entity_id: drawingDetail.drawing_id,\n      value: drawingDetail.id\n    }));\n    yield put(partStore.sagaOpenCreateDialog(payload));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\n\nfunction* drawingSaga() {\n  yield takeEvery(drawingStore.sagaGetList, getDrawingList);\n  yield takeEvery(drawingStore.sagaOpenCreateDialog, openDrawingCreateDialog);\n  yield takeEvery(drawingStore.sagaChangeUserJob, changeUserJob);\n  yield takeEvery(drawingStore.sagaCreate, createDrawing);\n  yield takeEvery(drawingStore.sagaCloseDialog, closeDrawingDialog);\n  yield takeEvery(drawingStore.sagaOpenUpdateDialog, openDrawingUpdateDialog);\n  yield takeEvery(drawingStore.sagaUpdate, updateDrawing);\n  yield takeEvery(drawingStore.sagaOpenRevDialog, openRevisionDialog);\n  yield takeEvery(drawingStore.sagaSaveNewRev, saveNewRev);\n  yield takeEvery(drawingStore.sagaOpenCreatePartDialog, openCreatePartDialog);\n  yield takeEvery(drawingStore.sagaGetDrawingPartList, getDrawingPartList);\n}\n\nexport default drawingSaga;","map":null,"metadata":{},"sourceType":"module"}