{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useMemo, useEffect } from 'react';\nimport { useTranslation } from 'next-i18next';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { Tabs, Tab } from '@material-ui/core';\nimport { MalisPanel, DialogMain, BtnHelp } from '@/components';\nimport TabGeneral from '../TabGeneral';\nimport { budgetActions } from '@/store/reducers';\nimport getValidationSchema from '../validationSchema';\nimport _ from 'lodash';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as constant from '@/utils/constant';\nimport AppNumber from '@/helper/AppNumber';\n\nfunction BudgetAddEditDialog() {\n  const {\n    t\n  } = useTranslation('budget');\n  const {\n    0: tab,\n    1: setTab\n  } = useState(0);\n  const dispatch = useDispatch();\n  const dialogState = useSelector(budgetActions.selectDialogState);\n  const budgetDetail = useSelector(budgetActions.selectBudgetDetail);\n  const permissions = useSelector(budgetActions.selectPermissions);\n  const userPuco = useSelector(budgetActions.selectUserPuco);\n  const {\n    wiki_page\n  } = useSelector(budgetActions.selectInitDataForCE);\n  const validationSchema = useMemo(() => getValidationSchema(t), []);\n  const budgetForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  });\n  useEffect(() => {\n    budgetForm.reset(budgetDetail);\n  }, [budgetDetail]);\n  useEffect(() => {\n    if (_.isNumber(userPuco.value)) {\n      dispatch(budgetActions.setBudgetDetail({\n        puco: userPuco.value\n      }));\n    } else {\n      dispatch(budgetActions.setBudgetDetail({\n        puco: null\n      }));\n    }\n  }, [userPuco]);\n\n  const onChangeTab = (_, tab) => {\n    setTab(tab);\n  };\n\n  const onSubmitForm = budgetForm.handleSubmit(data => {\n    const payload = _.omit(data, [...constant.removalProperties, 'currency']);\n\n    payload.amount = AppNumber.convertToNumber(payload.amount, constant.budgetAmountFormat);\n\n    if (dialogState.isEdit) {\n      const newPayload = _.omit(payload, ['budget_id', 'job_id']);\n\n      newPayload.budget_id_pk = data.id;\n      dispatch(budgetActions.update(newPayload));\n    } else {\n      dispatch(budgetActions.create(payload));\n    }\n  });\n\n  const onClose = () => {\n    setTab(0);\n    budgetForm.clearErrors();\n    dispatch(budgetActions.closeDialog());\n  };\n\n  return /*#__PURE__*/_jsxs(DialogMain, {\n    open: dialogState.isOpen,\n    loading: dialogState.isLoading,\n    onOk: onSubmitForm,\n    onClose: onClose,\n    okText: dialogState.isEdit ? t('common:button.update') : t('common:button.create'),\n    okButtonProps: {\n      disabled: dialogState.isLoading || !(permissions === null || permissions === void 0 ? void 0 : permissions.edit) && dialogState.isEdit\n    },\n    title: /*#__PURE__*/_jsx(BtnHelp, {\n      title: dialogState.isEdit ? t('form.title.update') : t('form.title.create'),\n      href: wiki_page\n    }),\n    children: [/*#__PURE__*/_jsxs(Tabs, {\n      value: tab,\n      onChange: onChangeTab,\n      children: [/*#__PURE__*/_jsx(Tab, {\n        label: t('common:tab.general')\n      }), /*#__PURE__*/_jsx(Tab, {\n        label: t('common:tab.history'),\n        disabled: true\n      })]\n    }), /*#__PURE__*/_jsx(FormProvider, _objectSpread(_objectSpread({}, budgetForm), {}, {\n      children: /*#__PURE__*/_jsx(MalisPanel, {\n        value: tab,\n        index: 0,\n        children: /*#__PURE__*/_jsx(TabGeneral, {})\n      })\n    }))]\n  });\n}\n\nexport default BudgetAddEditDialog;","map":null,"metadata":{},"sourceType":"module"}