{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { Grid, FormControl, Tooltip, TextField } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { FormControllerAutocomplete, SectionTimezone, FormControllerTextField, FormControllerNumberField } from '@/components';\nimport useStyles from './styles';\nimport { useSelector } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport { useTranslation } from 'next-i18next';\nimport { budgetActions } from '@/store/reducers';\nimport _ from 'lodash';\nimport parseHTML from 'html-react-parser';\n\nfunction TabGeneral() {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation('budget');\n  const budgetForm = useFormContext();\n  const watchPuco = budgetForm.watch('puco', null);\n  const dialogState = useSelector(budgetActions.selectDialogState);\n  const userJob = useSelector(budgetActions.selectUserJob);\n  const initDataForCreateEdit = useSelector(budgetActions.selectInitDataCreateEdit);\n  const tooltipForCode = React.useMemo(() => parseHTML(t('tooltip.code')), []);\n  React.useEffect(() => {\n    if (watchPuco) {\n      var _findPuco$properties;\n\n      const findPuco = _.find(initDataForCreateEdit.puco_list, {\n        value: watchPuco\n      });\n\n      budgetForm.setValue('currency', (findPuco === null || findPuco === void 0 ? void 0 : (_findPuco$properties = findPuco.properties) === null || _findPuco$properties === void 0 ? void 0 : _findPuco$properties.currency) || '');\n    }\n  }, [watchPuco]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      className: classes.wrapDialog,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(TextField, {\n          name: \"job_id\",\n          label: t('form.label.job'),\n          required: true,\n          disabled: true,\n          value: (userJob === null || userJob === void 0 ? void 0 : userJob.description) || ''\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(FormControl, {\n          fullWidth: true,\n          children: /*#__PURE__*/_jsx(Tooltip, {\n            title: tooltipForCode,\n            children: /*#__PURE__*/_jsx(FormControllerTextField, {\n              label: t('form.label.code'),\n              name: \"budget_id\",\n              required: true,\n              control: budgetForm.control,\n              transformValue: value => value.toUpperCase(),\n              disabled: dialogState.isEdit,\n              InputProps: {\n                readOnly: dialogState.isEdit,\n                className: dialogState.isEdit ? 'Mui-disabled' : undefined\n              }\n            })\n          })\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n          disableClearable: true,\n          required: true,\n          label: t('form.label.puco'),\n          name: \"puco\",\n          primaryKeyOption: \"value\",\n          options: initDataForCreateEdit.puco_list,\n          control: budgetForm.control,\n          renderOption: option => option.description\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(FormControllerTextField, {\n          disabled: true,\n          label: t('form.label.currency'),\n          name: \"currency\",\n          control: budgetForm.control\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(FormControllerNumberField, {\n          label: t('form.label.amount'),\n          name: \"amount\",\n          required: true,\n          control: budgetForm.control\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(FormControllerTextField, {\n          label: t('form.label.description'),\n          name: \"description\",\n          multiline: true,\n          rows: 10,\n          control: budgetForm.control\n        })\n      }), /*#__PURE__*/_jsx(When, {\n        condition: dialogState.isEdit,\n        children: /*#__PURE__*/_jsx(SectionTimezone, {\n          value: budgetForm.getValues()\n        })\n      })]\n    })\n  });\n}\n\nexport default TabGeneral;","map":null,"metadata":{},"sourceType":"module"}