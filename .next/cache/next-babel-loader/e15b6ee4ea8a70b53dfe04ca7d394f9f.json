{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\App\\\\Autocomplete\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useMemo } from 'react';\nimport { TextField, makeStyles, Checkbox } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { FormControllerErrorMessage } from '@/components/index';\nimport _ from 'lodash';\nvar useStyles = makeStyles({\n  buttonGroup: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: '0 !important'\n  },\n  chipRoot: {\n    height: 18,\n    fontSize: 13\n  },\n  chipIcon: {\n    width: 14,\n    heigt: 14\n  }\n});\n\nvar AppAutocomplete = function AppAutocomplete(props) {\n  _s();\n\n  var error = props.error,\n      helperText = props.helperText,\n      label = props.label,\n      required = props.required,\n      textFieldProps = props.textFieldProps,\n      primaryKeyOption = props.primaryKeyOption,\n      options = props.options,\n      value = props.value,\n      getOptionSelected = props.getOptionSelected,\n      renderOption = props.renderOption,\n      multiple = props.multiple,\n      autocompleteProps = _objectWithoutProperties(props, [\"error\", \"helperText\", \"label\", \"required\", \"textFieldProps\", \"primaryKeyOption\", \"options\", \"value\", \"getOptionSelected\", \"renderOption\", \"multiple\"]);\n\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      isFocusing = _useState[0],\n      setIsFocusing = _useState[1];\n\n  var openTooltip = useMemo(function () {\n    return isFocusing && error;\n  }, [error, isFocusing]);\n  var formatValue = useMemo(function () {\n    try {\n      if (_.isInteger(value) || _.isString(value)) {\n        return _.find(options, function (item) {\n          return item[primaryKeyOption] === value;\n        });\n      }\n\n      return value;\n    } catch (error) {\n      return _.toString(value);\n    }\n  }, [options, value]);\n  var filteredOptions = useMemo(function () {\n    if (_.every(options, function (op) {\n      return _.has(op, 'status');\n    })) {\n      return _.filter(options, {\n        status: true\n      });\n    }\n\n    return options;\n  }, [options]);\n\n  var getOptionSelectedState = function getOptionSelectedState(option, value) {\n    try {\n      if (_.isInteger(option) || _.isString(option)) {\n        return option[primaryKeyOption] === value;\n      }\n\n      return option[primaryKeyOption] === value[primaryKeyOption];\n    } catch (_unused) {\n      return false;\n    }\n  };\n\n  var renderOptionMultiple = function renderOptionMultiple(option, _ref) {\n    var selected = _ref.selected;\n    var label = renderOption(option, null);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: selected,\n        style: {\n          padding: 0,\n          paddingRight: 8\n        },\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true);\n  };\n\n  var getRenderOption = function getRenderOption() {\n    if (multiple) {\n      return renderOptionMultiple;\n    }\n\n    return renderOption;\n  };\n\n  var getOptionSelectedProps = getOptionSelected || getOptionSelectedState;\n\n  var onHoverField = function onHoverField() {\n    setIsFocusing(true);\n  };\n\n  var onLeavingField = function onLeavingField() {\n    setIsFocusing(false);\n  };\n\n  var renderInput = function renderInput(params) {\n    return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread(_objectSpread({}, params), {}, {\n      error: error,\n      label: label,\n      required: required\n    }, textFieldProps), {}, {\n      InputProps: _objectSpread(_objectSpread({}, params.InputProps), textFieldProps.InputProps)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormControllerErrorMessage, {\n    title: helperText,\n    open: openTooltip,\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, _objectSpread({\n      value: formatValue,\n      onMouseOver: onHoverField,\n      onMouseLeave: onLeavingField,\n      ChipProps: {\n        classes: {\n          root: classes.chipRoot,\n          deleteIcon: classes.chipIcon\n        }\n      },\n      getOptionSelected: getOptionSelectedProps // filterOptions={filterOptions}\n      ,\n      getOptionLabel: renderOption,\n      multiple: multiple,\n      renderInput: renderInput,\n      renderOption: getRenderOption(),\n      options: filteredOptions\n    }, autocompleteProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(AppAutocomplete, \"7bIULmQwJhhdgKHMgVhvJY0Jl8Q=\", false, function () {\n  return [useStyles];\n});\n\n_c = AppAutocomplete;\nAppAutocomplete.defaultProps = {\n  primaryKeyOption: 'id',\n  textFieldProps: {},\n  disableClearable: true,\n  renderOption: function renderOption(option) {\n    return option.description;\n  }\n};\nexport default AppAutocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppAutocomplete\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/App/Autocomplete/index.tsx"],"names":["useState","useMemo","TextField","makeStyles","Checkbox","Autocomplete","FormControllerErrorMessage","_","useStyles","buttonGroup","display","alignItems","justifyContent","padding","chipRoot","height","fontSize","chipIcon","width","heigt","AppAutocomplete","props","error","helperText","label","required","textFieldProps","primaryKeyOption","options","value","getOptionSelected","renderOption","multiple","autocompleteProps","classes","isFocusing","setIsFocusing","openTooltip","formatValue","isInteger","isString","find","item","toString","filteredOptions","every","op","has","filter","status","getOptionSelectedState","option","renderOptionMultiple","selected","paddingRight","getRenderOption","getOptionSelectedProps","onHoverField","onLeavingField","renderInput","params","InputProps","root","deleteIcon","defaultProps","disableClearable","description"],"mappings":"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","sourcesContent":["import { useState, useMemo } from 'react'\n\nimport { TextField, makeStyles, Checkbox } from '@material-ui/core'\nimport { Autocomplete, AutocompleteRenderInputParams } from '@material-ui/lab'\nimport { FormControllerErrorMessage } from '@/components/index'\n\nimport _ from 'lodash'\n\nimport type { AppAutocompleteProps } from './type'\n\nconst useStyles = makeStyles({\n  buttonGroup: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: '0 !important'\n  },\n  chipRoot: {\n    height: 18,\n    fontSize: 13\n  },\n  chipIcon: {\n    width: 14,\n    heigt: 14\n  }\n})\n\nconst AppAutocomplete: React.FC<AppAutocompleteProps<any>> = (props) => {\n  const {\n    error,\n    helperText,\n    label,\n    required,\n    textFieldProps,\n    primaryKeyOption,\n    options,\n    value,\n    getOptionSelected,\n    renderOption,\n    multiple,\n    ...autocompleteProps\n  } = props\n\n  const classes = useStyles()\n\n  const [isFocusing, setIsFocusing] = useState(false)\n\n  const openTooltip = useMemo(() => isFocusing && error, [error, isFocusing])\n\n  const formatValue = useMemo(() => {\n    try {\n      if (_.isInteger(value) || _.isString(value)) {\n        return _.find(options, (item) => item[primaryKeyOption] === value)\n      }\n      return value\n    } catch (error) {\n      return _.toString(value)\n    }\n  }, [options, value])\n\n  const filteredOptions = useMemo(() => {\n    if (_.every(options, (op) => _.has(op, 'status'))) {\n      return _.filter(options, { status: true })\n    }\n    return options\n  }, [options])\n\n  const getOptionSelectedState = (option, value) => {\n    try {\n      if (_.isInteger(option) || _.isString(option)) {\n        return option[primaryKeyOption] === value\n      }\n      return option[primaryKeyOption] === value[primaryKeyOption]\n    } catch {\n      return false\n    }\n  }\n\n  const renderOptionMultiple = (option, { selected }) => {\n    const label = renderOption(option, null)\n    return (\n      <>\n        <Checkbox checked={selected} style={{ padding: 0, paddingRight: 8 }} color=\"primary\" />\n        <span>{label}</span>\n      </>\n    )\n  }\n\n  const getRenderOption = () => {\n    if (multiple) {\n      return renderOptionMultiple\n    }\n    return renderOption\n  }\n\n  const getOptionSelectedProps = getOptionSelected || getOptionSelectedState\n\n  const onHoverField = () => {\n    setIsFocusing(true)\n  }\n\n  const onLeavingField = () => {\n    setIsFocusing(false)\n  }\n\n  const renderInput = (params: AutocompleteRenderInputParams) => (\n    <TextField\n      {...params}\n      error={error}\n      label={label}\n      required={required}\n      {...textFieldProps}\n      InputProps={{\n        ...params.InputProps,\n        ...textFieldProps.InputProps\n      }}\n    />\n  )\n\n  return (\n    <FormControllerErrorMessage title={helperText} open={openTooltip}>\n      <Autocomplete\n        value={formatValue}\n        onMouseOver={onHoverField}\n        onMouseLeave={onLeavingField}\n        ChipProps={{\n          classes: {\n            root: classes.chipRoot,\n            deleteIcon: classes.chipIcon\n          }\n        }}\n        getOptionSelected={getOptionSelectedProps}\n        // filterOptions={filterOptions}\n        getOptionLabel={renderOption as any}\n        multiple={multiple}\n        renderInput={renderInput}\n        renderOption={getRenderOption()}\n        options={filteredOptions}\n        {...autocompleteProps}\n      />\n    </FormControllerErrorMessage>\n  )\n}\n\nAppAutocomplete.defaultProps = {\n  primaryKeyOption: 'id',\n  textFieldProps: {},\n  disableClearable: true,\n  renderOption(option) {\n    return option.description\n  }\n}\n\nexport default AppAutocomplete\n"]},"metadata":{},"sourceType":"module"}