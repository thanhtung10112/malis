{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(updateMultiple),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(cancelBackgroundJob),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(executeOperation),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(commonSaga);\n\nimport { takeEvery, putResolve } from 'redux-saga/effects';\nimport { select, put, call } from 'typed-redux-saga';\nimport { createAction } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nimport _ from 'lodash';\nimport Router from 'next/router';\nimport HttpService from '@/helper/HttpService';\nimport { commonStore, summaryReportActions } from '@/store/reducers';\nimport commonApi from '@/apis/common';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport { plural } from 'pluralize';\n\nvar getApiUpdateMultiple = function getApiUpdateMultiple(entity) {\n  var pluralEntity = plural(entity);\n  var api = new HttpService(pluralEntity);\n  return api.updateMultiple;\n};\n\nfunction updateMultiple(_ref) {\n  var payload, entity, action, payloadAction, href, api, editRow, data, getListAction;\n  return _regeneratorRuntime.wrap(function updateMultiple$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          entity = payload.entity, action = payload.action, payloadAction = payload.payloadAction, href = payload.href;\n          api = getApiUpdateMultiple(entity);\n          return _context.delegateYield(select(commonStore.selectEditRows), \"t0\", 5);\n\n        case 5:\n          editRow = _context.t0;\n          _context.next = 8;\n          return putResolve(commonStore.actions.setLoadingPage(true));\n\n        case 8:\n          _context.next = 10;\n          return call(api, editRow);\n\n        case 10:\n          data = _context.sent;\n          _context.next = 13;\n          return put(commonStore.actions.setSuccessMessage(data.message));\n\n        case 13:\n          _context.next = 15;\n          return putResolve(commonStore.actions.setLoadingPage(false));\n\n        case 15:\n          if (!href) {\n            _context.next = 19;\n            break;\n          }\n\n          Router.push(href);\n          _context.next = 28;\n          break;\n\n        case 19:\n          if (!(action && _.isFunction(action))) {\n            _context.next = 24;\n            break;\n          }\n\n          _context.next = 22;\n          return put(action(payloadAction));\n\n        case 22:\n          _context.next = 28;\n          break;\n\n        case 24:\n          if (!entity) {\n            _context.next = 28;\n            break;\n          }\n\n          getListAction = createAction(\"\".concat(entity, \"/\").concat(actionTypes.GET_LIST));\n          _context.next = 28;\n          return put(getListAction());\n\n        case 28:\n          _context.next = 34;\n          break;\n\n        case 30:\n          _context.prev = 30;\n          _context.t1 = _context[\"catch\"](1);\n          _context.next = 34;\n          return errorSaga.handleError(_context.t1);\n\n        case 34:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 30]]);\n}\n\nfunction cancelBackgroundJob(_ref2) {\n  var payload, _yield$call, data;\n\n  return _regeneratorRuntime.wrap(function cancelBackgroundJob$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context2.next = 3;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 3:\n          _context2.prev = 3;\n          _context2.next = 6;\n          return call(commonApi.stopBackgroundJob, payload);\n\n        case 6:\n          _yield$call = _context2.sent;\n          data = _yield$call.data;\n          _context2.next = 10;\n          return put(commonStore.actions.setSuccessMessage(data.message));\n\n        case 10:\n          _context2.next = 16;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](3);\n          _context2.next = 16;\n          return errorSaga.handleError(_context2.t0);\n\n        case 16:\n          _context2.next = 18;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[3, 12]]);\n}\n\nfunction getExecuteOperationApi(entityParam) {\n  var entity = entityParam;\n\n  if (entity === 'manufacturing_standard' || entity === 'material_standard') {\n    entity = 'equivalence';\n  }\n\n  var pluralEntity = plural(entity);\n  var api = new HttpService(pluralEntity);\n  return api.executeOperation;\n}\n\nfunction executeOperation(_ref3) {\n  var payload, entity, operation, operationList, apiReq, data, getListAction;\n  return _regeneratorRuntime.wrap(function executeOperation$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          payload = _ref3.payload;\n          _context3.next = 3;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 3:\n          _context3.prev = 3;\n          entity = payload.entity, operation = payload.operation, operationList = payload.operationList;\n          apiReq = getExecuteOperationApi(entity);\n          _context3.next = 8;\n          return call(apiReq, operation, operationList);\n\n        case 8:\n          data = _context3.sent;\n          _context3.next = 11;\n          return putResolve(commonStore.actions.setLoadingPage(false));\n\n        case 11:\n          if (!(data.failed_count > 0)) {\n            _context3.next = 18;\n            break;\n          }\n\n          _context3.next = 14;\n          return put(summaryReportActions.setReportData(data));\n\n        case 14:\n          _context3.next = 16;\n          return put(summaryReportActions.setOpen(true));\n\n        case 16:\n          _context3.next = 20;\n          break;\n\n        case 18:\n          _context3.next = 20;\n          return put(commonStore.actions.setSuccessMessage(data.message));\n\n        case 20:\n          getListAction = createAction(\"\".concat(entity, \"/\").concat(actionTypes.GET_LIST));\n          _context3.next = 23;\n          return putResolve(getListAction());\n\n        case 23:\n          _context3.next = 29;\n          break;\n\n        case 25:\n          _context3.prev = 25;\n          _context3.t0 = _context3[\"catch\"](3);\n          _context3.next = 29;\n          return errorSaga.handleError(_context3.t0);\n\n        case 29:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[3, 25]]);\n}\n\nfunction commonSaga() {\n  return _regeneratorRuntime.wrap(function commonSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(commonStore.sagaUpdateMultiple, updateMultiple);\n\n        case 2:\n          _context4.next = 4;\n          return takeEvery(commonStore.sagaCancelBackgroundJob, cancelBackgroundJob);\n\n        case 4:\n          _context4.next = 6;\n          return takeEvery(commonStore.sagaExecuteOperation, executeOperation);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default commonSaga;","map":null,"metadata":{},"sourceType":"module"}