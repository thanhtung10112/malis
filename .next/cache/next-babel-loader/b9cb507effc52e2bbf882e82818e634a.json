{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { AppNumberField } from '@/components';\nimport { useController } from 'react-hook-form';\nimport _ from 'lodash';\n\nvar FormControllerNumberField = function FormControllerNumberField(props) {\n  var control = props.control,\n      name = props.name,\n      defaultValue = props.defaultValue,\n      rules = props.rules,\n      isNumericString = props.isNumericString,\n      numberFieldProps = _objectWithoutProperties(props, [\"control\", \"name\", \"defaultValue\", \"rules\", \"isNumericString\"]);\n\n  var _useController = useController({\n    name: name,\n    rules: rules,\n    defaultValue: defaultValue,\n    control: control\n  }),\n      _useController$field = _useController.field,\n      onChangeController = _useController$field.onChange,\n      value = _useController$field.value,\n      inputProps = _objectWithoutProperties(_useController$field, [\"onChange\", \"value\"]),\n      invalid = _useController.meta.invalid;\n\n  var handleChangeValue = function handleChangeValue(params) {\n    var value = isNumericString ? params.value : params.floatValue;\n    onChangeController(value);\n  };\n\n  return /*#__PURE__*/_jsx(AppNumberField, _objectSpread(_objectSpread(_objectSpread({}, inputProps), numberFieldProps), {}, {\n    isNumericString: isNumericString,\n    name: name,\n    onChange: handleChangeValue,\n    error: Boolean(invalid),\n    helperText: invalid === null || invalid === void 0 ? void 0 : invalid.message,\n    value: _.toString(value)\n  }));\n};\n\nexport default FormControllerNumberField;","map":null,"metadata":{},"sourceType":"module"}