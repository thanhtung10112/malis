{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\MakeAList\\\\TablePresetList\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Button, Typography, Tooltip, Checkbox } from '@material-ui/core';\nimport { AddCircle as AddCircleIcon, Close as CloseIcon } from '@material-ui/icons';\nimport { AppAutocompleteStyled, DataTable, DataTableCellExpand } from '@/components/index';\nimport { Unless } from 'react-if';\nimport useStyles from './styles';\nimport useStylesLayout from '@/styles/page/layout';\nimport { useTranslation } from 'next-i18next';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport clsx from 'clsx';\nimport { makeAListActions } from '@/store/reducers';\nimport * as columnProperties from '@/utils/columnProperties';\n\nfunction TablePresetList(_ref) {\n  _s();\n\n  var setActiveTab = _ref.setActiveTab;\n  var classes = useStyles();\n  var classesLayout = useStylesLayout();\n\n  var _useTranslation = useTranslation(['make_a_list']),\n      t = _useTranslation.t;\n\n  var makeAListForm = useFormContext();\n  var refDataGrid = React.useRef(null);\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      idSelected = _React$useState2[0],\n      setIdSelected = _React$useState2[1];\n\n  var dispatch = useDispatch();\n  var filterType = useSelector(makeAListActions.selectFilterType);\n  var presetList = useSelector(makeAListActions.selectPresetList);\n  var loadingTable = useSelector(makeAListActions.selectLoadingTable);\n  var malPermissions = useSelector(makeAListActions.selectPermissions);\n  var presetDefault = useSelector(makeAListActions.selectPresetDefault);\n  var presetDetail = useSelector(makeAListActions.selectPresetDetail);\n\n  var getColumnPresetList = function getColumnPresetList() {\n    var onwColumns = [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      field: 'name',\n      headerName: 'Name',\n      flex: 0.6\n    }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      headerName: 'Shared',\n      field: 'is_shared',\n      renderCell: function renderCell(params) {\n        if (!refDataGrid.current) {\n          refDataGrid.current = params.api;\n        }\n\n        var message = params.value ? t('make_a_list:tooltip.unshare_checkbox') : t('make_a_list:tooltip.share_checkbox');\n        return /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: message,\n          children: /*#__PURE__*/_jsxDEV(Checkbox, {\n            color: \"primary\",\n            checked: params.value,\n            onChange: onSharePreset(params.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this);\n      }\n    })];\n    var sharedColumns = [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      field: 'name',\n      headerName: 'Name',\n      flex: 0.6,\n      renderCell: function renderCell(params) {\n        if (!refDataGrid.current) {\n          refDataGrid.current = params.api;\n        }\n\n        return /*#__PURE__*/_jsxDEV(DataTableCellExpand, {\n          value: params.value,\n          width: params.colDef.width\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 18\n        }, this);\n      }\n    }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      field: 'created_by',\n      headerName: t('advanced_filter:list.owner')\n    })];\n\n    if (filterType === 'own') {\n      return onwColumns;\n    }\n\n    return sharedColumns;\n  };\n\n  var getOptionFilterList = function getOptionFilterList() {\n    var defaultOptions = [{\n      name: 'Owner',\n      value: 'own'\n    }, {\n      name: 'Shared',\n      value: 'shared'\n    }];\n\n    if (malPermissions.update_system_default_presets) {\n      defaultOptions.push({\n        name: 'System',\n        value: 'system'\n      });\n    }\n\n    return defaultOptions;\n  };\n\n  var filterOptions = React.useMemo(getOptionFilterList, [malPermissions.update_system_default_presets]);\n  var columnsMyPreset = React.useMemo(getColumnPresetList, [filterType]);\n  React.useEffect(function () {\n    setIdSelected(presetDetail.id);\n  }, [presetDetail]);\n\n  var onChangeFilterType = function onChangeFilterType(_, _ref2) {\n    var value = _ref2.value;\n    dispatch(makeAListActions.changeFilterType(value));\n  };\n\n  var onSelectRowPresetDetail = function onSelectRowPresetDetail(params) {\n    setActiveTab(0);\n    makeAListForm.clearErrors();\n    onSelectPresetDetail(params.id)();\n  };\n\n  var onSelectPresetDetail = function onSelectPresetDetail(id) {\n    return function () {\n      var _refDataGrid$current;\n\n      (_refDataGrid$current = refDataGrid.current) === null || _refDataGrid$current === void 0 ? void 0 : _refDataGrid$current.setSelectionModel([]);\n      dispatch(makeAListActions.setIsEditMode(true));\n      dispatch(makeAListActions.getDetail(id));\n    };\n  };\n\n  var onClearUserDefault = function onClearUserDefault() {\n    var _refDataGrid$current2;\n\n    (_refDataGrid$current2 = refDataGrid.current) === null || _refDataGrid$current2 === void 0 ? void 0 : _refDataGrid$current2.setSelectionModel([]);\n    dispatch(makeAListActions.clearDefault());\n  };\n\n  var onSharePreset = function onSharePreset(id) {\n    return function (event, shared) {\n      dispatch(makeAListActions.share({\n        id: id,\n        shared: shared\n      }));\n    };\n  };\n\n  var onCreateFilter = function onCreateFilter() {\n    var _refDataGrid$current3;\n\n    (_refDataGrid$current3 = refDataGrid.current) === null || _refDataGrid$current3 === void 0 ? void 0 : _refDataGrid$current3.setSelectionModel([]);\n    dispatch(makeAListActions.resetPresetDetail());\n    dispatch(makeAListActions.setIsEditMode(false));\n    setActiveTab(0);\n    makeAListForm.clearErrors();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.filterListTopSection,\n      children: [/*#__PURE__*/_jsxDEV(AppAutocompleteStyled, {\n        label: \"Preset List\",\n        options: filterOptions,\n        renderOption: function renderOption(option) {\n          return option.name;\n        },\n        defaultValue: filterOptions[0],\n        onChange: onChangeFilterType,\n        primaryKeyOption: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(AddCircleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 22\n        }, this),\n        className: clsx(classesLayout.buttonControl, 'new', classes.btnCreatePreset),\n        style: {\n          background: '#0A65FF',\n          color: 'white'\n        },\n        onClick: onCreateFilter,\n        children: \"New preset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      component: \"div\",\n      className: classes.wrapLabelFilter,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"span\",\n        variant: \"body1\",\n        children: \"Default Preset:\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        component: \"span\",\n        variant: \"body1\",\n        className: classes.defaultFilterLink,\n        noWrap: true,\n        onClick: onSelectPresetDetail(presetDefault.id),\n        children: presetDefault.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Unless, {\n        condition: presetDefault.is_system_default,\n        children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n          onClick: onClearUserDefault\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      loading: loadingTable,\n      tableHeight: 570,\n      disableColumnMenu: true,\n      columns: columnsMyPreset,\n      rows: presetList,\n      hideFooter: true,\n      onRowClick: onSelectRowPresetDetail,\n      getRowClassName: function getRowClassName(params) {\n        return clsx(_defineProperty({}, classes.presetSelected, params.id === idSelected));\n      },\n      onCellClick: function onCellClick(params, event) {\n        if (params.field === 'is_shared') {\n          event.stopPropagation();\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TablePresetList, \"ufCzgTlRP3pA3jdB6FAWGx3mshA=\", false, function () {\n  return [useStyles, useStylesLayout, useTranslation, useFormContext, useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = TablePresetList;\nexport default TablePresetList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TablePresetList\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/MakeAList/TablePresetList/index.tsx"],"names":["React","Button","Typography","Tooltip","Checkbox","AddCircle","AddCircleIcon","Close","CloseIcon","AppAutocompleteStyled","DataTable","DataTableCellExpand","Unless","useStyles","useStylesLayout","useTranslation","useSelector","useDispatch","useFormContext","clsx","makeAListActions","columnProperties","TablePresetList","setActiveTab","classes","classesLayout","t","makeAListForm","refDataGrid","useRef","useState","idSelected","setIdSelected","dispatch","filterType","selectFilterType","presetList","selectPresetList","loadingTable","selectLoadingTable","malPermissions","selectPermissions","presetDefault","selectPresetDefault","presetDetail","selectPresetDetail","getColumnPresetList","onwColumns","defaultProperties","field","headerName","flex","renderCell","params","current","api","message","value","onSharePreset","id","sharedColumns","colDef","width","getOptionFilterList","defaultOptions","name","update_system_default_presets","push","filterOptions","useMemo","columnsMyPreset","useEffect","onChangeFilterType","_","changeFilterType","onSelectRowPresetDetail","clearErrors","onSelectPresetDetail","setSelectionModel","setIsEditMode","getDetail","onClearUserDefault","clearDefault","event","shared","share","onCreateFilter","resetPresetDetail","filterListTopSection","option","buttonControl","btnCreatePreset","background","color","wrapLabelFilter","defaultFilterLink","is_system_default","presetSelected","stopPropagation"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Button, Typography, Tooltip, Checkbox } from '@material-ui/core'\n\nimport { AddCircle as AddCircleIcon, Close as CloseIcon } from '@material-ui/icons'\n\nimport { AppAutocompleteStyled, DataTable, DataTableCellExpand } from '@/components/index'\n\nimport { Unless } from 'react-if'\n\nimport useStyles from './styles'\nimport useStylesLayout from '@/styles/page/layout'\nimport { useTranslation } from 'next-i18next'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useFormContext } from 'react-hook-form'\n\nimport clsx from 'clsx'\nimport { makeAListActions } from '@/store/reducers'\n\nimport * as columnProperties from '@/utils/columnProperties'\n\nimport type { GridColumns, GridApi } from '@material-ui/data-grid'\n\nfunction TablePresetList({ setActiveTab }) {\n  const classes = useStyles()\n  const classesLayout = useStylesLayout()\n  const { t } = useTranslation(['make_a_list'])\n  const makeAListForm = useFormContext()\n\n  const refDataGrid = React.useRef<GridApi>(null as any)\n\n  const [idSelected, setIdSelected] = React.useState<number>(null)\n\n  const dispatch = useDispatch()\n  const filterType = useSelector(makeAListActions.selectFilterType)\n  const presetList = useSelector(makeAListActions.selectPresetList)\n  const loadingTable = useSelector(makeAListActions.selectLoadingTable)\n  const malPermissions = useSelector(makeAListActions.selectPermissions)\n  const presetDefault = useSelector(makeAListActions.selectPresetDefault)\n  const presetDetail = useSelector(makeAListActions.selectPresetDetail)\n\n  const getColumnPresetList = () => {\n    const onwColumns: GridColumns = [\n      {\n        ...columnProperties.defaultProperties,\n        field: 'name',\n        headerName: 'Name',\n        flex: 0.6\n      },\n      {\n        ...columnProperties.defaultProperties,\n        headerName: 'Shared',\n        field: 'is_shared',\n        renderCell(params) {\n          if (!refDataGrid.current) {\n            refDataGrid.current = params.api\n          }\n          const message = params.value\n            ? t('make_a_list:tooltip.unshare_checkbox')\n            : t('make_a_list:tooltip.share_checkbox')\n          return (\n            <Tooltip title={message}>\n              <Checkbox\n                color=\"primary\"\n                checked={params.value as boolean}\n                onChange={onSharePreset(params.id as number)}\n              />\n            </Tooltip>\n          )\n        }\n      }\n    ]\n    const sharedColumns: GridColumns = [\n      {\n        ...columnProperties.defaultProperties,\n        field: 'name',\n        headerName: 'Name',\n        flex: 0.6,\n        renderCell(params) {\n          if (!refDataGrid.current) {\n            refDataGrid.current = params.api\n          }\n          return <DataTableCellExpand value={params.value} width={params.colDef.width} />\n        }\n      },\n      {\n        ...columnProperties.defaultProperties,\n        field: 'created_by',\n        headerName: t('advanced_filter:list.owner')\n      }\n    ]\n    if (filterType === 'own') {\n      return onwColumns\n    }\n    return sharedColumns\n  }\n\n  const getOptionFilterList = () => {\n    const defaultOptions = [\n      {\n        name: 'Owner',\n        value: 'own'\n      },\n      {\n        name: 'Shared',\n        value: 'shared'\n      }\n    ]\n    if (malPermissions.update_system_default_presets) {\n      defaultOptions.push({\n        name: 'System',\n        value: 'system'\n      })\n    }\n    return defaultOptions\n  }\n\n  const filterOptions = React.useMemo(getOptionFilterList, [malPermissions.update_system_default_presets])\n  const columnsMyPreset = React.useMemo(getColumnPresetList, [filterType])\n\n  React.useEffect(() => {\n    setIdSelected(presetDetail.id)\n  }, [presetDetail])\n\n  const onChangeFilterType = (_, { value }) => {\n    dispatch(makeAListActions.changeFilterType(value))\n  }\n\n  const onSelectRowPresetDetail = (params) => {\n    setActiveTab(0)\n    makeAListForm.clearErrors()\n    onSelectPresetDetail(params.id)()\n  }\n\n  const onSelectPresetDetail = (id) => () => {\n    refDataGrid.current?.setSelectionModel([])\n    dispatch(makeAListActions.setIsEditMode(true))\n    dispatch(makeAListActions.getDetail(id))\n  }\n\n  const onClearUserDefault = () => {\n    refDataGrid.current?.setSelectionModel([])\n    dispatch(makeAListActions.clearDefault())\n  }\n\n  const onSharePreset = (id: number) => (event, shared: boolean) => {\n    dispatch(makeAListActions.share({ id, shared }))\n  }\n\n  const onCreateFilter = () => {\n    refDataGrid.current?.setSelectionModel([])\n    dispatch(makeAListActions.resetPresetDetail())\n    dispatch(makeAListActions.setIsEditMode(false))\n    setActiveTab(0)\n    makeAListForm.clearErrors()\n  }\n\n  return (\n    <>\n      <div className={classes.filterListTopSection}>\n        <AppAutocompleteStyled\n          label=\"Preset List\"\n          options={filterOptions}\n          renderOption={(option) => option.name}\n          defaultValue={filterOptions[0]}\n          onChange={onChangeFilterType}\n          primaryKeyOption=\"value\"\n        />\n        <Button\n          variant=\"contained\"\n          startIcon={<AddCircleIcon />}\n          className={clsx(classesLayout.buttonControl, 'new', classes.btnCreatePreset)}\n          style={{ background: '#0A65FF', color: 'white' }}\n          onClick={onCreateFilter}\n        >\n          New preset\n        </Button>\n      </div>\n\n      <Typography component=\"div\" className={classes.wrapLabelFilter}>\n        <Typography component=\"span\" variant=\"body1\">\n          Default Preset:&nbsp;\n        </Typography>\n        <Typography\n          component=\"span\"\n          variant=\"body1\"\n          className={classes.defaultFilterLink}\n          noWrap\n          onClick={onSelectPresetDetail(presetDefault.id)}\n        >\n          {presetDefault.name}\n        </Typography>\n        <Unless condition={presetDefault.is_system_default}>\n          <CloseIcon onClick={onClearUserDefault} />\n        </Unless>\n      </Typography>\n\n      <DataTable\n        loading={loadingTable}\n        tableHeight={570}\n        disableColumnMenu\n        columns={columnsMyPreset}\n        rows={presetList}\n        hideFooter\n        onRowClick={onSelectRowPresetDetail}\n        getRowClassName={(params) => clsx({ [classes.presetSelected]: params.id === idSelected })}\n        onCellClick={(params, event) => {\n          if (params.field === 'is_shared') {\n            event.stopPropagation()\n          }\n        }}\n      />\n    </>\n  )\n}\n\nexport default TablePresetList\n"]},"metadata":{},"sourceType":"module"}