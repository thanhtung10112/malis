{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\FormController\\\\TextField\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useController } from 'react-hook-form';\nimport { AppTextField } from '@/components/index';\nimport _ from 'lodash';\n\nvar FormControlledTextField = function FormControlledTextField(props) {\n  _s();\n\n  var control = props.control,\n      name = props.name,\n      defaultValue = props.defaultValue,\n      rules = props.rules,\n      transformValue = props.transformValue,\n      limitText = props.limitText,\n      textFieldProps = _objectWithoutProperties(props, [\"control\", \"name\", \"defaultValue\", \"rules\", \"transformValue\", \"limitText\"]);\n\n  var _useController = useController({\n    name: name,\n    rules: rules,\n    defaultValue: defaultValue,\n    control: control\n  }),\n      _useController$field = _useController.field,\n      onChangeController = _useController$field.onChange,\n      value = _useController$field.value,\n      inputProps = _objectWithoutProperties(_useController$field, [\"onChange\", \"value\"]),\n      invalid = _useController.meta.invalid;\n\n  var onChangeValue = function onChangeValue(event) {\n    var value = event.target.value;\n    var transformVal = transformValue(value);\n\n    if (limitText && _.size(value) > limitText) {\n      return;\n    }\n\n    onChangeController(transformVal);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppTextField, _objectSpread(_objectSpread(_objectSpread({}, inputProps), textFieldProps), {}, {\n    name: name,\n    onChange: onChangeValue,\n    error: Boolean(invalid),\n    helperText: invalid === null || invalid === void 0 ? void 0 : invalid.message,\n    value: _.toString(value)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(FormControlledTextField, \"64c6S+0zwTE4X3Hidu5g7SrAU5A=\", false, function () {\n  return [useController];\n});\n\n_c = FormControlledTextField;\nFormControlledTextField.defaultProps = {\n  rules: {},\n  transformValue: function transformValue(value) {\n    return value;\n  },\n  limitText: null\n};\nexport default FormControlledTextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormControlledTextField\");","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/FormController/TextField/index.tsx"],"names":["React","useController","AppTextField","_","FormControlledTextField","props","control","name","defaultValue","rules","transformValue","limitText","textFieldProps","field","onChangeController","onChange","value","inputProps","invalid","meta","onChangeValue","event","target","transformVal","size","Boolean","message","toString","defaultProps"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,SAASC,YAAT,QAA6B,oBAA7B;AAGA,OAAOC,CAAP,MAAc,QAAd;;AAEA,IAAMC,uBAA2D,GAAG,SAA9DA,uBAA8D,CAACC,KAAD,EAAW;AAAA;;AAAA,MACrEC,OADqE,GACgBD,KADhB,CACrEC,OADqE;AAAA,MAC5DC,IAD4D,GACgBF,KADhB,CAC5DE,IAD4D;AAAA,MACtDC,YADsD,GACgBH,KADhB,CACtDG,YADsD;AAAA,MACxCC,KADwC,GACgBJ,KADhB,CACxCI,KADwC;AAAA,MACjCC,cADiC,GACgBL,KADhB,CACjCK,cADiC;AAAA,MACjBC,SADiB,GACgBN,KADhB,CACjBM,SADiB;AAAA,MACHC,cADG,4BACgBP,KADhB;;AAAA,uBAMzEJ,aAAa,CAAC;AAChBM,IAAAA,IAAI,EAAJA,IADgB;AAEhBE,IAAAA,KAAK,EAALA,KAFgB;AAGhBD,IAAAA,YAAY,EAAZA,YAHgB;AAIhBF,IAAAA,OAAO,EAAPA;AAJgB,GAAD,CAN4D;AAAA,4CAI3EO,KAJ2E;AAAA,MAIxDC,kBAJwD,wBAIlEC,QAJkE;AAAA,MAIpCC,KAJoC,wBAIpCA,KAJoC;AAAA,MAI1BC,UAJ0B;AAAA,MAKnEC,OALmE,kBAK3EC,IAL2E,CAKnED,OALmE;;AAa7E,MAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA,QACvBL,KADuB,GACbK,KAAK,CAACC,MADO,CACvBN,KADuB;AAE/B,QAAMO,YAAY,GAAGb,cAAc,CAACM,KAAD,CAAnC;;AACA,QAAIL,SAAS,IAAIR,CAAC,CAACqB,IAAF,CAAOR,KAAP,IAAgBL,SAAjC,EAA4C;AAC1C;AACD;;AACDG,IAAAA,kBAAkB,CAACS,YAAD,CAAlB;AACD,GAPD;;AASA,sBACE,QAAC,YAAD,gDACMN,UADN,GAEOL,cAFP;AAGE,IAAA,IAAI,EAAEL,IAHR;AAIE,IAAA,QAAQ,EAAEa,aAJZ;AAKE,IAAA,KAAK,EAAEK,OAAO,CAACP,OAAD,CALhB;AAME,IAAA,UAAU,EAAGA,OAAH,aAAGA,OAAH,uBAAGA,OAAD,CAAkBQ,OANhC;AAOE,IAAA,KAAK,EAAEvB,CAAC,CAACwB,QAAF,CAAWX,KAAX;AAPT;AAAA;AAAA;AAAA;AAAA,WADF;AAWD,CAjCD;;GAAMZ,uB;UAMAH,a;;;KANAG,uB;AAmCNA,uBAAuB,CAACwB,YAAxB,GAAuC;AACrCnB,EAAAA,KAAK,EAAE,EAD8B;AAErCC,EAAAA,cAAc,EAAE,wBAACM,KAAD;AAAA,WAAWA,KAAX;AAAA,GAFqB;AAGrCL,EAAAA,SAAS,EAAE;AAH0B,CAAvC;AAMA,eAAeP,uBAAf","sourcesContent":["import React from 'react'\nimport { useController } from 'react-hook-form'\n\nimport { AppTextField } from '@/components/index'\n\nimport { ControlledTextFieldProps } from './type'\nimport _ from 'lodash'\n\nconst FormControlledTextField: React.FC<ControlledTextFieldProps> = (props) => {\n  const { control, name, defaultValue, rules, transformValue, limitText, ...textFieldProps } = props\n\n  const {\n    field: { onChange: onChangeController, value, ...inputProps },\n    meta: { invalid }\n  } = useController({\n    name,\n    rules,\n    defaultValue,\n    control\n  })\n\n  const onChangeValue = (event) => {\n    const { value } = event.target\n    const transformVal = transformValue(value)\n    if (limitText && _.size(value) > limitText) {\n      return\n    }\n    onChangeController(transformVal)\n  }\n\n  return (\n    <AppTextField\n      {...inputProps}\n      {...(textFieldProps as any)}\n      name={name}\n      onChange={onChangeValue}\n      error={Boolean(invalid)}\n      helperText={(invalid as any)?.message}\n      value={_.toString(value)}\n    />\n  )\n}\n\nFormControlledTextField.defaultProps = {\n  rules: {},\n  transformValue: (value) => value,\n  limitText: null\n}\n\nexport default FormControlledTextField\n"]},"metadata":{},"sourceType":"module"}