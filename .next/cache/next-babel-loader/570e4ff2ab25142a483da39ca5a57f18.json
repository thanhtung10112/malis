{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Paper, Checkbox, Tooltip } from '@material-ui/core';\nimport { DataTable, DataTableTextField, DataTableAutocomplete } from '@/components';\nimport { Switch, Case, If, Then, Else } from 'react-if';\nimport { useController } from 'react-hook-form';\nimport useStyles from './styles';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport * as yup from 'yup';\nimport clsx from 'clsx';\nimport * as columnProperties from '@/utils/columnProperties';\n\nvar TableExtendedProperties = function TableExtendedProperties(props) {\n  var classes = useStyles();\n  var propertiesList = props.propertiesList,\n      name = props.name,\n      control = props.control,\n      tableHeight = props.tableHeight,\n      editMode = props.editMode,\n      parameterName = props.parameterName;\n\n  var _useController = useController({\n    name: name,\n    control: control\n  }),\n      _useController$field = _useController.field,\n      propertiesValue = _useController$field.value,\n      onChange = _useController$field.onChange;\n\n  var getStylesRowDisabled = function getStylesRowDisabled(params) {\n    var language = _.find(propertiesList, {\n      id: params.id\n    });\n\n    return clsx(_defineProperty({}, classes.disable, (language === null || language === void 0 ? void 0 : language.status) === false));\n  };\n\n  var onChangeValue = function onChangeValue(id, value) {\n    var newPropertiesValue = immer(propertiesValue, function (draft) {\n      var _$find = _.find(propertiesList, {\n        id: id\n      }),\n          parameter_id = _$find.parameter_id;\n\n      if (value === '' || value === false) {\n        delete draft[parameter_id];\n      } else {\n        draft[parameter_id] = value;\n      }\n    });\n    onChange(newPropertiesValue);\n  };\n\n  var handleChangeValueDropdown = function handleChangeValueDropdown(id) {\n    return function (event, optionValue, reason) {\n      var newPropertiesValue = immer(propertiesValue, function (draft) {\n        var _$find2 = _.find(propertiesList, {\n          id: id\n        }),\n            parameter_id = _$find2.parameter_id;\n\n        if (reason === 'clear') {\n          delete draft[parameter_id];\n        } else {\n          draft[parameter_id] = optionValue.properties.value;\n        }\n      });\n      onChange(newPropertiesValue);\n    };\n  };\n\n  var filteredProperties = React.useMemo(function () {\n    var types = ['boolean', 'string', 'dropdown'];\n    var propertiesWithTypes = propertiesList.filter(function (property) {\n      return types.includes(property.properties.type);\n    });\n\n    if (editMode) {\n      var filterList = propertiesWithTypes.filter(function (property) {\n        return property.status === true || _.has(propertiesValue, property.parameter_id);\n      });\n      return filterList;\n    } else {\n      return propertiesWithTypes.filter(function (property) {\n        return property.status === true;\n      });\n    }\n  }, [propertiesList, propertiesValue]);\n\n  var getValueDropdown = function getValueDropdown(value, list) {\n    if (list.length === 0) {\n      return value;\n    }\n\n    var optionValue = _.find(list, function (item) {\n      var _item$properties;\n\n      return ((_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.value) === value;\n    });\n\n    return (optionValue === null || optionValue === void 0 ? void 0 : optionValue.description) || value;\n  };\n\n  var renderDropdownField = function renderDropdownField(params) {\n    var properties = params.row.properties;\n    var value = '';\n\n    if (params.value) {\n      value = _.find(properties.valid_value_list, function (option) {\n        var _option$properties;\n\n        return ((_option$properties = option.properties) === null || _option$properties === void 0 ? void 0 : _option$properties.value) === params.value;\n      });\n    }\n\n    return /*#__PURE__*/_jsx(DataTableAutocomplete, {\n      value: value,\n      params: params,\n      options: (properties === null || properties === void 0 ? void 0 : properties.valid_value_list) || [],\n      onChange: handleChangeValueDropdown(params.id)\n    });\n  };\n\n  return /*#__PURE__*/_jsx(Paper, {\n    elevation: 1,\n    children: /*#__PURE__*/_jsx(DataTable, {\n      tableHeight: tableHeight,\n      disableColumnMenu: true,\n      disableSelectionOnClick: true,\n      rows: filteredProperties,\n      hideFooter: true,\n      getRowClassName: getStylesRowDisabled,\n      onCellDoubleClick: function onCellDoubleClick(params, event) {\n        var _params$row = params.row,\n            properties = _params$row.properties,\n            status = _params$row.status;\n\n        if (properties.type === 'boolean' || !status) {\n          event.stopPropagation();\n        }\n      },\n      columns: [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n        field: 'description',\n        headerName: 'Properties',\n        width: 180\n      }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Value')), {}, {\n        field: 'value',\n        flex: 0.6,\n        valueGetter: function valueGetter(params) {\n          var parameter_id = params.row.parameter_id;\n          return propertiesValue[parameter_id] || '';\n        },\n        renderEditCell: function renderEditCell(params) {\n          var properties = params.row.properties;\n          return /*#__PURE__*/_jsxs(Switch, {\n            children: [/*#__PURE__*/_jsx(Case, {\n              condition: properties.type === 'string',\n              children: /*#__PURE__*/_jsx(DataTableTextField, {\n                rules: yup.string().matches(properties.regex, {\n                  message: \"Key's value is invalid! please refer to the \\\"code of \".concat(parameterName, \" parameter\\\" regex.\"),\n                  excludeEmptyString: true\n                }),\n                params: params,\n                onChangeValue: onChangeValue,\n                placeholder: properties.placeholder\n              })\n            }), /*#__PURE__*/_jsx(Case, {\n              condition: properties.type === 'dropdown',\n              children: renderDropdownField(params)\n            })]\n          });\n        },\n        renderCell: function renderCell(params) {\n          var _params$row2 = params.row,\n              properties = _params$row2.properties,\n              parameter_id = _params$row2.parameter_id,\n              status = _params$row2.status,\n              id = _params$row2.id;\n          var value = propertiesValue[parameter_id];\n          return /*#__PURE__*/_jsxs(Switch, {\n            children: [/*#__PURE__*/_jsx(Case, {\n              condition: properties.type === 'boolean',\n              children: /*#__PURE__*/_jsx(Tooltip, {\n                title: properties.placeholder,\n                children: /*#__PURE__*/_jsx(Checkbox, {\n                  color: \"primary\",\n                  className: classes.checkbox,\n                  disabled: !status,\n                  checked: Boolean(value),\n                  onChange: function onChange(event, checked) {\n                    return onChangeValue(id, checked);\n                  }\n                })\n              })\n            }), /*#__PURE__*/_jsx(Case, {\n              condition: properties.type === 'string',\n              children: /*#__PURE__*/_jsxs(If, {\n                condition: Boolean(value),\n                children: [/*#__PURE__*/_jsx(Then, {\n                  children: /*#__PURE__*/_jsx(\"div\", {\n                    className: classes.textValue,\n                    children: value\n                  })\n                }), /*#__PURE__*/_jsx(Else, {\n                  children: /*#__PURE__*/_jsx(\"div\", {\n                    className: classes.placeholder,\n                    children: properties.placeholder\n                  })\n                })]\n              })\n            }), /*#__PURE__*/_jsx(Case, {\n              condition: properties.type === 'dropdown',\n              children: /*#__PURE__*/_jsxs(If, {\n                condition: Boolean(value),\n                children: [/*#__PURE__*/_jsx(Then, {\n                  children: /*#__PURE__*/_jsx(\"div\", {\n                    className: classes.textValue,\n                    children: getValueDropdown(value, properties.valid_value_list || [])\n                  })\n                }), /*#__PURE__*/_jsx(Else, {\n                  children: /*#__PURE__*/_jsx(\"div\", {\n                    className: classes.placeholder,\n                    children: properties.placeholder\n                  })\n                })]\n              })\n            })]\n          });\n        }\n      })]\n    })\n  });\n};\n\nTableExtendedProperties.defaultProps = {\n  tableHeight: 360,\n  editMode: false\n};\nexport default TableExtendedProperties;","map":null,"metadata":{},"sourceType":"module"}