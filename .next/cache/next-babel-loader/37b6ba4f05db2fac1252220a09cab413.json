{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, createSlice, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nimport { StatusCode } from '@/utils/StatusCode';\nexport var name = 'common';\nexport var resetState = createAction(\"\".concat(name, \"/\").concat(actionTypes.RESET_STATE));\nexport var initialState = {\n  searchQuery: '',\n  entity: '',\n  loading: {\n    table: false,\n    page: false\n  },\n  tableState: {\n    page: 1,\n    per_page: 100,\n    total_items: 0\n  },\n  messageState: {\n    message: '',\n    status: 'success',\n    display: false\n  },\n  editRows: [],\n  currentLanguage: {\n    value: null,\n    // primary key\n    description: '',\n    properties: {},\n    is_default: false,\n    parameter_id: '',\n    id: null,\n    // primary key\n    status: false\n  },\n  selectedRows: [],\n  userValue: {\n    drawing: {\n      description: '',\n      entity_id: 'All',\n      value: -1\n    },\n    job: {\n      description: '',\n      value: null\n    }\n  },\n  error: {\n    message: '',\n    statusCode: null,\n    open: false\n  }\n};\nvar commonSlice = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    setSearchQuery: function setSearchQuery(state, _ref) {\n      var payload = _ref.payload;\n      state.searchQuery = payload;\n    },\n    setEntity: function setEntity(state, _ref2) {\n      var payload = _ref2.payload;\n      state.entity = payload;\n    },\n    setLoadingTable: function setLoadingTable(state, _ref3) {\n      var payload = _ref3.payload;\n      state.loading.table = payload;\n    },\n    setLoadingPage: function setLoadingPage(state, _ref4) {\n      var payload = _ref4.payload;\n      state.loading.page = payload;\n    },\n    setTableState: function setTableState(state, _ref5) {\n      var payload = _ref5.payload;\n      state.tableState = _objectSpread(_objectSpread({}, state.tableState), payload);\n    },\n    setErrorMessage: function setErrorMessage(state, action) {\n      state.messageState.message = action.payload;\n      state.messageState.status = 'error';\n      state.messageState.display = true;\n    },\n    setSuccessMessage: function setSuccessMessage(state, action) {\n      state.messageState.message = action.payload;\n      state.messageState.status = 'success';\n      state.messageState.display = true;\n    },\n    setDisplayMessage: function setDisplayMessage(state, action) {\n      state.messageState.display = action.payload;\n    },\n    setEditRows: function setEditRows(state, _ref6) {\n      var payload = _ref6.payload;\n      state.editRows = payload;\n    },\n    setUserValueDrawing: function setUserValueDrawing(state, _ref7) {\n      var payload = _ref7.payload;\n      state.userValue.drawing = payload;\n    },\n    setUserValueJob: function setUserValueJob(state, _ref8) {\n      var payload = _ref8.payload;\n      state.userValue.job = payload;\n    },\n    resetUserValue: function resetUserValue(state) {\n      state.userValue = initialState.userValue;\n    },\n    setSelectedRows: function setSelectedRows(state, _ref9) {\n      var payload = _ref9.payload;\n      state.selectedRows = payload;\n    },\n    resetMessageState: function resetMessageState(state) {\n      state.messageState = initialState.messageState;\n    },\n    setCurrentLanguage: function setCurrentLanguage(state, _ref10) {\n      var payload = _ref10.payload;\n      state.currentLanguage = payload;\n    },\n    setError: function setError(state, _ref11) {\n      var payload = _ref11.payload;\n      var message = payload.message,\n          status = payload.status;\n\n      if (status === StatusCode.BAD_REQUEST && message !== 'Bad request') {\n        state.messageState.message = message;\n        state.messageState.status = 'error';\n        state.messageState.display = true;\n        return;\n      }\n\n      state.error = {\n        message: message,\n        statusCode: status || 'unknow',\n        open: true\n      };\n    },\n    setOpenErrorDialog: function setOpenErrorDialog(state, _ref12) {\n      var payload = _ref12.payload;\n      state.error.open = payload;\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n}); // Selectors\n\nexport var selectState = function selectState(state) {\n  return state[name];\n};\nexport var selectSearchQuery = createSelector(selectState, function (state) {\n  return state.searchQuery;\n});\nexport var selectEntity = createSelector(selectState, function (state) {\n  return state.entity;\n});\nexport var selectLoading = createSelector(selectState, function (state) {\n  return state.loading;\n});\nexport var selectTableState = createSelector(selectState, function (state) {\n  return state.tableState;\n});\nexport var selectMessageState = createSelector(selectState, function (state) {\n  return state.messageState;\n});\nexport var selectUserValueDrawing = createSelector(selectState, function (state) {\n  return state.userValue.drawing;\n});\nexport var selectUserValueJob = createSelector(selectState, function (state) {\n  return state.userValue.job;\n});\nexport var selectEditRows = createSelector(selectState, function (state) {\n  return state.editRows;\n});\nexport var selectSelectedRows = createSelector(selectState, function (state) {\n  return state.selectedRows;\n});\nexport var selectCurrentLanguage = createSelector(selectState, function (state) {\n  return state.currentLanguage;\n});\nexport var selectError = createSelector(selectState, function (state) {\n  return state.error;\n});\nvar actions = commonSlice.actions; // Saga actions\n\nexport { actions };\nexport var sagaExecuteOperation = createAction(\"\".concat(name, \"/\").concat(actionTypes.EXECUTE_OPERATION));\nexport var sagaGetHistoryLogs = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_HISTORY));\nexport var sagaUpdateMultiple = createAction(\"\".concat(name, \"/\").concat(actionTypes.UPDATE_MULTIPLE));\nexport var sagaCancelBackgroundJob = createAction(\"\".concat(name, \"/CANCEL_BACKGROUND_JOB\"));\nexport default commonSlice;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/reducers/common.reducer.ts"],"names":["createAction","createSlice","createSelector","actionTypes","StatusCode","name","resetState","RESET_STATE","initialState","searchQuery","entity","loading","table","page","tableState","per_page","total_items","messageState","message","status","display","editRows","currentLanguage","value","description","properties","is_default","parameter_id","id","selectedRows","userValue","drawing","entity_id","job","error","statusCode","open","commonSlice","reducers","setSearchQuery","state","payload","setEntity","setLoadingTable","setLoadingPage","setTableState","setErrorMessage","action","setSuccessMessage","setDisplayMessage","setEditRows","setUserValueDrawing","setUserValueJob","resetUserValue","setSelectedRows","resetMessageState","setCurrentLanguage","setError","BAD_REQUEST","setOpenErrorDialog","extraReducers","type","selectState","selectSearchQuery","selectEntity","selectLoading","selectTableState","selectMessageState","selectUserValueDrawing","selectUserValueJob","selectEditRows","selectSelectedRows","selectCurrentLanguage","selectError","actions","sagaExecuteOperation","EXECUTE_OPERATION","sagaGetHistoryLogs","GET_HISTORY","sagaUpdateMultiple","UPDATE_MULTIPLE","sagaCancelBackgroundJob"],"mappings":"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","sourcesContent":["import { createAction, createSlice, PayloadAction, createSelector } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\n\nimport type { Color } from '@material-ui/lab/Alert'\nimport type { RootReducerType } from './rootReducer'\nimport type { DataForDropdown, Entity, ListData, ParameterOption, ErrorLog, PayloadOperation } from '@/types/Common'\nimport { StatusCode } from '@/utils/StatusCode'\n\nexport const name = 'common'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const initialState = {\n  searchQuery: '',\n  entity: '' as Entity,\n  loading: {\n    table: false,\n    page: false\n  },\n  tableState: {\n    page: 1,\n    per_page: 100,\n    total_items: 0\n  } as ListData,\n  messageState: {\n    message: '',\n    status: 'success' as Color,\n    display: false\n  },\n  editRows: [] as any[],\n  currentLanguage: {\n    value: null, // primary key\n    description: '',\n    properties: {},\n    is_default: false,\n    parameter_id: '',\n    id: null, // primary key\n    status: false\n  } as ParameterOption,\n  selectedRows: [] as number[],\n  userValue: {\n    drawing: {\n      description: '',\n      entity_id: 'All',\n      value: -1\n    } as DataForDropdown,\n    job: {\n      description: '',\n      value: null\n    } as ParameterOption\n  },\n  error: {\n    message: '',\n    statusCode: null,\n    open: false\n  } as ErrorLog\n}\n\nconst commonSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setSearchQuery(state, { payload }: PayloadAction<string>) {\n      state.searchQuery = payload\n    },\n    setEntity(state, { payload }: PayloadAction<Entity>) {\n      state.entity = payload\n    },\n    setLoadingTable(state, { payload }: PayloadAction<boolean>) {\n      state.loading.table = payload\n    },\n    setLoadingPage(state, { payload }: PayloadAction<boolean>) {\n      state.loading.page = payload\n    },\n    setTableState(state, { payload }: PayloadAction<Partial<ListData>>) {\n      state.tableState = {\n        ...state.tableState,\n        ...payload\n      }\n    },\n    setErrorMessage(state, action: PayloadAction<string>) {\n      state.messageState.message = action.payload\n      state.messageState.status = 'error'\n      state.messageState.display = true\n    },\n    setSuccessMessage(state, action: PayloadAction<string>) {\n      state.messageState.message = action.payload\n      state.messageState.status = 'success'\n      state.messageState.display = true\n    },\n    setDisplayMessage(state, action: PayloadAction<boolean>) {\n      state.messageState.display = action.payload\n    },\n    setEditRows(state, { payload }: PayloadAction<any[]>) {\n      state.editRows = payload\n    },\n    setUserValueDrawing(state, { payload }: PayloadAction<DataForDropdown>) {\n      state.userValue.drawing = payload\n    },\n    setUserValueJob(state, { payload }: PayloadAction<ParameterOption>) {\n      state.userValue.job = payload\n    },\n    resetUserValue(state) {\n      state.userValue = initialState.userValue\n    },\n    setSelectedRows(state, { payload }: PayloadAction<number[]>) {\n      state.selectedRows = payload\n    },\n    resetMessageState(state) {\n      state.messageState = initialState.messageState\n    },\n    setCurrentLanguage(state, { payload }: PayloadAction<ParameterOption>) {\n      state.currentLanguage = payload\n    },\n    setError(state, { payload }: PayloadAction<{ message: string; status: number }>) {\n      const { message, status } = payload\n      if (status === StatusCode.BAD_REQUEST && message !== 'Bad request') {\n        state.messageState.message = message\n        state.messageState.status = 'error'\n        state.messageState.display = true\n        return\n      }\n      state.error = {\n        message,\n        statusCode: status || 'unknow',\n        open: true\n      }\n    },\n    setOpenErrorDialog(state, { payload }: PayloadAction<boolean>) {\n      state.error.open = payload\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\n// Selectors\nexport const selectState = (state: RootReducerType) => state[name]\nexport const selectSearchQuery = createSelector(selectState, (state) => state.searchQuery)\nexport const selectEntity = createSelector(selectState, (state) => state.entity)\nexport const selectLoading = createSelector(selectState, (state) => state.loading)\nexport const selectTableState = createSelector(selectState, (state) => state.tableState)\nexport const selectMessageState = createSelector(selectState, (state) => state.messageState)\n\nexport const selectUserValueDrawing = createSelector(selectState, (state) => state.userValue.drawing)\nexport const selectUserValueJob = createSelector(selectState, (state) => state.userValue.job)\n\nexport const selectEditRows = createSelector(selectState, (state) => state.editRows)\n\nexport const selectSelectedRows = createSelector(selectState, (state) => state.selectedRows)\n\nexport const selectCurrentLanguage = createSelector(selectState, (state) => state.currentLanguage)\nexport const selectError = createSelector(selectState, (state) => state.error)\n\nexport const { actions } = commonSlice\n\n// Saga actions\nexport const sagaExecuteOperation = createAction<{\n  entity: Entity\n  operation: string\n  operationList: number[] | PayloadOperation[]\n}>(`${name}/${actionTypes.EXECUTE_OPERATION}`)\nexport const sagaGetHistoryLogs = createAction<{ entityId: number; entity: Entity }>(\n  `${name}/${actionTypes.GET_HISTORY}`\n)\nexport const sagaUpdateMultiple = createAction<any>(`${name}/${actionTypes.UPDATE_MULTIPLE}`)\nexport const sagaCancelBackgroundJob = createAction<string>(`${name}/CANCEL_BACKGROUND_JOB`)\n\nexport default commonSlice\n"]},"metadata":{},"sourceType":"module"}