{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\DataTable\\\\Common\\\\MultilingualDescription\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Paper, Button, Tooltip } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { DataTable, DataTableTextField, CopyIcon } from '@/components';\nimport DialogRichTextEditor from './RichTextEditor';\nimport DialogCopyDesc from './DialogCopyDesc';\nimport { useController } from 'react-hook-form';\nimport useStyles from './styles';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport clsx from 'clsx';\nimport striptags from 'striptags';\nimport * as yup from 'yup';\nimport parseHTML from 'html-react-parser';\nimport * as columnProperties from '@/utils/columnProperties';\n\nconst MultilingualDescription = props => {\n  const classes = useStyles();\n\n  const {\n    name,\n    control,\n    rules,\n    editMode,\n    languageList,\n    tableHeight,\n    editor,\n    copyable,\n    copyDialogProps,\n    disabled,\n    autocompleteProps\n  } = props,\n        paperPropsRest = _objectWithoutProperties(props, [\"name\", \"control\", \"rules\", \"editMode\", \"languageList\", \"tableHeight\", \"editor\", \"copyable\", \"copyDialogProps\", \"disabled\", \"autocompleteProps\"]);\n\n  const defaultValueRTE = React.useMemo(() => ({\n    isOpen: false,\n    content: '',\n    title: '',\n    languageId: null\n  }), []);\n  const {\n    field: {\n      value: descriptionValues,\n      onChange\n    }\n  } = useController({\n    name,\n    control\n  });\n  const [RTEState, setRTEState] = React.useState(_objectSpread({}, defaultValueRTE));\n  const [openCopy, setOpenCopy] = React.useState(false);\n\n  const getCellValue = language_id => {\n    const cellItem = _.find(descriptionValues, {\n      language_id\n    });\n\n    return (cellItem === null || cellItem === void 0 ? void 0 : cellItem.description) || (cellItem === null || cellItem === void 0 ? void 0 : cellItem.functions) || '';\n  };\n\n  const getStylesRowDisabled = params => {\n    const language = _.find(languageList, {\n      id: params.id\n    });\n\n    return clsx({\n      [classes.disable]: (language === null || language === void 0 ? void 0 : language.status) === false || disabled\n    });\n  };\n\n  const filteredLanguageList = React.useMemo(() => {\n    if (editMode) {\n      return languageList.filter(item => item.status === true || descriptionValues.some(({\n        language_id\n      }) => item.id === language_id && item.status === false));\n    } else {\n      return languageList.filter(item => item.status === true);\n    }\n  }, [editMode]);\n\n  const onDbClickCell = (params, event) => {\n    const language = _.find(languageList, {\n      id: params.id\n    });\n\n    if ((language === null || language === void 0 ? void 0 : language.status) === false || disabled) {\n      event.stopPropagation();\n    }\n  };\n\n  const columns = React.useMemo(() => [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    field: 'description_raw',\n    width: 130,\n    headerName: 'Language',\n\n    valueGetter(params) {\n      return `${params.row.parameter_id} - ${params.row.description}`;\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Description')), {}, {\n    field: 'value_raw',\n    flex: 0.7,\n    headerName: 'Description',\n    hide: editor !== 'text',\n\n    valueGetter(params) {\n      const cellValue = getCellValue(params.id);\n      return cellValue;\n    },\n\n    renderEditCell(params) {\n      return /*#__PURE__*/_jsxDEV(DataTableTextField, {\n        params: params,\n        onChangeValue: onChangeDescription,\n        rules: yup.string().max(255, 'Description must be less than 255 characters!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this);\n    }\n\n  }), {\n    field: 'value_raw_editor',\n    flex: 0.7,\n    headerName: 'Description',\n    sortable: false,\n    hide: editor === 'text',\n\n    renderCell(params) {\n      const description = getCellValue(params.id);\n      const pureContent = striptags(description);\n      const htmlContent = parseHTML(_.toString(description));\n\n      if (pureContent) {\n        return /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: htmlContent,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.rteRoot,\n            onDoubleClick: onOpenRTE(params.row),\n            children: pureContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.rteRoot,\n        onDoubleClick: onOpenRTE(params.row),\n        children: pureContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this);\n    }\n\n  }], [descriptionValues, editor]);\n\n  const onChangeDescription = (language_id, description) => {\n    const newDescriptionValues = immer(descriptionValues, draft => {\n      const existingDescIndex = _.findIndex(descriptionValues, {\n        language_id\n      });\n\n      if (existingDescIndex === -1) {\n        draft.push({\n          language_id,\n          description\n        });\n      } else {\n        draft[existingDescIndex].description = description;\n      }\n    });\n    onChange(newDescriptionValues);\n  };\n\n  const onOpenRTE = language => () => {\n    const currentContent = getCellValue(language.id);\n    setRTEState(prevState => immer(prevState, draft => {\n      draft.content = currentContent;\n      draft.languageId = language.id;\n      draft.title = `${language.parameter_id} - ${language.description}`;\n      draft.isOpen = true;\n    }));\n  };\n\n  const handleCloseRTE = () => {\n    setRTEState(_objectSpread({}, defaultValueRTE));\n  };\n\n  const onCloseRTE = () => {\n    handleCloseRTE();\n  };\n\n  const onConfirmRTE = (language_id, description) => {\n    onChangeDescription(language_id, description);\n    handleCloseRTE();\n  };\n\n  const handleOpenCopyDialog = () => {\n    if (!disabled) {\n      setOpenCopy(true);\n    }\n  };\n\n  const handleCloseCopyDialog = () => {\n    if (!disabled) {\n      setOpenCopy(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(When, {\n      condition: copyable,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        disabled: disabled,\n        startIcon: /*#__PURE__*/_jsxDEV(CopyIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 22\n        }, this),\n        style: {\n          marginBottom: 4,\n          paddingTop: 0\n        },\n        onClick: handleOpenCopyDialog,\n        children: \"Copy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, _objectSpread(_objectSpread({}, paperPropsRest), {}, {\n      children: [/*#__PURE__*/_jsxDEV(DataTable, {\n        hideFooter: true,\n        disableSelectionOnClick: true,\n        disableColumnMenu: true,\n        tableHeight: tableHeight,\n        rows: filteredLanguageList,\n        columns: columns,\n        onCellDoubleClick: onDbClickCell,\n        getRowClassName: getStylesRowDisabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogRichTextEditor, {\n        isOpen: RTEState.isOpen,\n        title: RTEState.title,\n        content: RTEState.content,\n        languageId: RTEState.languageId,\n        onClose: onCloseRTE,\n        onConfirm: onConfirmRTE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogCopyDesc, _objectSpread(_objectSpread({}, copyDialogProps), {}, {\n        autocompleteProps: autocompleteProps,\n        descriptionValues: descriptionValues,\n        open: openCopy,\n        onClose: handleCloseCopyDialog,\n        onChange: onChange\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nMultilingualDescription.defaultProps = {\n  editor: 'text',\n  elevation: 1,\n  tableHeight: 300,\n  copyable: false,\n  copyDialogProps: {},\n  disabled: false,\n  autocompleteProps: {}\n};\nexport default MultilingualDescription;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/DataTable/Common/MultilingualDescription/index.tsx"],"names":["React","Paper","Button","Tooltip","When","DataTable","DataTableTextField","CopyIcon","DialogRichTextEditor","DialogCopyDesc","useController","useStyles","_","immer","clsx","striptags","yup","parseHTML","columnProperties","MultilingualDescription","props","classes","name","control","rules","editMode","languageList","tableHeight","editor","copyable","copyDialogProps","disabled","autocompleteProps","paperPropsRest","defaultValueRTE","useMemo","isOpen","content","title","languageId","field","value","descriptionValues","onChange","RTEState","setRTEState","useState","openCopy","setOpenCopy","getCellValue","language_id","cellItem","find","description","functions","getStylesRowDisabled","params","language","id","disable","status","filteredLanguageList","filter","item","some","onDbClickCell","event","stopPropagation","columns","defaultProperties","width","headerName","valueGetter","row","parameter_id","editCell","flex","hide","cellValue","renderEditCell","onChangeDescription","string","max","sortable","renderCell","pureContent","htmlContent","toString","rteRoot","onOpenRTE","newDescriptionValues","draft","existingDescIndex","findIndex","push","currentContent","prevState","handleCloseRTE","onCloseRTE","onConfirmRTE","handleOpenCopyDialog","handleCloseCopyDialog","marginBottom","paddingTop","defaultProps","elevation"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Paper, Button, Tooltip } from '@material-ui/core'\nimport { When } from 'react-if'\n\nimport { DataTable, DataTableTextField, CopyIcon } from '@/components'\nimport DialogRichTextEditor from './RichTextEditor'\nimport DialogCopyDesc from './DialogCopyDesc'\n\nimport { useController } from 'react-hook-form'\nimport useStyles from './styles'\n\nimport _ from 'lodash'\nimport immer from 'immer'\nimport clsx from 'clsx'\nimport striptags from 'striptags'\nimport * as yup from 'yup'\nimport parseHTML from 'html-react-parser'\n\nimport * as columnProperties from '@/utils/columnProperties'\n\nimport type { GridColumns } from '@material-ui/data-grid'\nimport type { TableMultilingualDescriptionProps } from './type'\n\nconst MultilingualDescription: React.FC<TableMultilingualDescriptionProps> = (props) => {\n  const classes = useStyles()\n\n  const {\n    name,\n    control,\n    rules,\n    editMode,\n    languageList,\n    tableHeight,\n    editor,\n    copyable,\n    copyDialogProps,\n    disabled,\n    autocompleteProps,\n    ...paperPropsRest\n  } = props\n\n  const defaultValueRTE = React.useMemo(\n    () => ({\n      isOpen: false,\n      content: '',\n      title: '',\n      languageId: null\n    }),\n    []\n  )\n\n  const {\n    field: { value: descriptionValues, onChange }\n  } = useController({\n    name,\n    control\n  })\n\n  const [RTEState, setRTEState] = React.useState({ ...defaultValueRTE })\n  const [openCopy, setOpenCopy] = React.useState(false)\n\n  const getCellValue = (language_id: number) => {\n    const cellItem = _.find(descriptionValues, { language_id })\n    return cellItem?.description || cellItem?.functions || ''\n  }\n\n  const getStylesRowDisabled = (params) => {\n    const language = _.find(languageList, { id: params.id })\n    return clsx({\n      [classes.disable]: language?.status === false || disabled\n    })\n  }\n\n  const filteredLanguageList = React.useMemo(() => {\n    if (editMode) {\n      return languageList.filter(\n        (item) =>\n          item.status === true ||\n          descriptionValues.some(({ language_id }) => item.id === language_id && item.status === false)\n      )\n    } else {\n      return languageList.filter((item) => item.status === true)\n    }\n  }, [editMode])\n\n  const onDbClickCell = (params, event) => {\n    const language = _.find(languageList, { id: params.id })\n    if (language?.status === false || disabled) {\n      event.stopPropagation()\n    }\n  }\n\n  const columns = React.useMemo<GridColumns>(\n    () => [\n      {\n        ...columnProperties.defaultProperties,\n        field: 'description_raw',\n        width: 130,\n        headerName: 'Language',\n        valueGetter(params) {\n          return `${params.row.parameter_id} - ${params.row.description}`\n        }\n      },\n      {\n        ...columnProperties.defaultProperties,\n        ...columnProperties.editCell('Description'),\n        field: 'value_raw',\n        flex: 0.7,\n        headerName: 'Description',\n        hide: editor !== 'text',\n        valueGetter(params) {\n          const cellValue = getCellValue(params.id as number)\n          return cellValue\n        },\n        renderEditCell(params) {\n          return (\n            <DataTableTextField\n              params={params}\n              onChangeValue={onChangeDescription}\n              rules={yup.string().max(255, 'Description must be less than 255 characters!')}\n            />\n          )\n        }\n      },\n      {\n        field: 'value_raw_editor',\n        flex: 0.7,\n        headerName: 'Description',\n        sortable: false,\n        hide: editor === 'text',\n        renderCell(params) {\n          const description = getCellValue(params.id as number)\n          const pureContent = striptags(description)\n          const htmlContent = parseHTML(_.toString(description))\n          if (pureContent) {\n            return (\n              <Tooltip title={htmlContent}>\n                <div className={classes.rteRoot} onDoubleClick={onOpenRTE(params.row)}>\n                  {pureContent}\n                </div>\n              </Tooltip>\n            )\n          }\n          return (\n            <div className={classes.rteRoot} onDoubleClick={onOpenRTE(params.row)}>\n              {pureContent}\n            </div>\n          )\n        }\n      }\n    ],\n    [descriptionValues, editor]\n  )\n\n  const onChangeDescription = (language_id: number, description: string) => {\n    const newDescriptionValues = immer(descriptionValues, (draft) => {\n      const existingDescIndex = _.findIndex(descriptionValues, { language_id })\n      if (existingDescIndex === -1) {\n        draft.push({ language_id, description })\n      } else {\n        draft[existingDescIndex].description = description\n      }\n    })\n    onChange(newDescriptionValues)\n  }\n\n  const onOpenRTE = (language) => () => {\n    const currentContent = getCellValue(language.id)\n    setRTEState((prevState) =>\n      immer(prevState, (draft) => {\n        draft.content = currentContent\n        draft.languageId = language.id\n        draft.title = `${language.parameter_id} - ${language.description}`\n        draft.isOpen = true\n      })\n    )\n  }\n\n  const handleCloseRTE = () => {\n    setRTEState({ ...defaultValueRTE })\n  }\n\n  const onCloseRTE = () => {\n    handleCloseRTE()\n  }\n\n  const onConfirmRTE = (language_id, description) => {\n    onChangeDescription(language_id, description)\n    handleCloseRTE()\n  }\n\n  const handleOpenCopyDialog = () => {\n    if (!disabled) {\n      setOpenCopy(true)\n    }\n  }\n\n  const handleCloseCopyDialog = () => {\n    if (!disabled) {\n      setOpenCopy(false)\n    }\n  }\n\n  return (\n    <>\n      <When condition={copyable}>\n        <Button\n          disabled={disabled}\n          startIcon={<CopyIcon />}\n          style={{ marginBottom: 4, paddingTop: 0 }}\n          onClick={handleOpenCopyDialog}\n        >\n          Copy\n        </Button>\n      </When>\n      <Paper {...paperPropsRest}>\n        <DataTable\n          hideFooter\n          disableSelectionOnClick\n          disableColumnMenu\n          tableHeight={tableHeight}\n          rows={filteredLanguageList}\n          columns={columns}\n          onCellDoubleClick={onDbClickCell}\n          getRowClassName={getStylesRowDisabled}\n        />\n        <DialogRichTextEditor\n          isOpen={RTEState.isOpen}\n          title={RTEState.title}\n          content={RTEState.content}\n          languageId={RTEState.languageId}\n          onClose={onCloseRTE}\n          onConfirm={onConfirmRTE}\n        />\n        <DialogCopyDesc\n          {...(copyDialogProps as any)}\n          autocompleteProps={autocompleteProps}\n          descriptionValues={descriptionValues}\n          open={openCopy}\n          onClose={handleCloseCopyDialog}\n          onChange={onChange}\n        />\n      </Paper>\n    </>\n  )\n}\n\nMultilingualDescription.defaultProps = {\n  editor: 'text',\n  elevation: 1,\n  tableHeight: 300,\n  copyable: false,\n  copyDialogProps: {} as any,\n  disabled: false,\n  autocompleteProps: {}\n}\n\nexport default MultilingualDescription\n"]},"metadata":{},"sourceType":"module"}