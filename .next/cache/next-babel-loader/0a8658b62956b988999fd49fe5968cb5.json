{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Drawing\\\\TabTags.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport useStyles from './styles';\nimport useGetData from '@/hooks/useGetData';\nimport { useDispatch, useSelector } from 'react-redux'; // import { useTranslation } from 'next-i18next'\n\nimport { Paper, Link } from '@material-ui/core';\nimport { DataTable, CreateIcon, DeleteIcon, AppButton, DialogTag } from '@/components';\nimport immer from 'immer'; // import _ from 'lodash'\n\nimport { commonStore, drawingStore } from '@/store/reducers';\nimport { defaultTagInitDataForCE, defaultTagDetail } from '@/utils/defaultValues';\nimport { defaultProperties } from '@/utils/columnProperties'; // import getMessageConfirm from '@/utils/getMessageConfirm'\n\nconst TabTags = () => {\n  const classes = useStyles();\n  const {\n    getInitDataForCE,\n    getGeneratedCode,\n    getDetail\n  } = useGetData('elements');\n  const {\n    getDetail: getDrawingDetail\n  } = useGetData('drawings'); // const { confirm } = useConfirm()\n  // const { t } = useTranslation('element')\n\n  const {\n    0: openDialog,\n    1: setOpenDialog\n  } = useState(false);\n  const {\n    0: initDataForCE,\n    1: setInitDataForCE\n  } = useState(defaultTagInitDataForCE);\n  const {\n    0: tagDetail,\n    1: setTagDetail\n  } = useState(defaultTagDetail);\n  const {\n    0: selectedRows,\n    1: setSelectedRows\n  } = useState([]);\n  const drawingForm = useFormContext();\n  const watchTagsList = drawingForm.watch('tag_list', []) || [];\n  const watchId = drawingForm.watch('id', null);\n  const watchDrawing_id = drawingForm.watch('drawing_id', '');\n  const dispatch = useDispatch();\n  const userJob = useSelector(commonStore.selectUserValueJob);\n  const userDrawing = useSelector(commonStore.selectUserValueDrawing);\n  useEffect(() => {\n    const schematicValue = userDrawing.value > 0 ? userDrawing : null;\n    setTagDetail(currentState => immer(currentState, draft => {\n      draft.schematic_id = schematicValue;\n    }));\n  }, [userDrawing]);\n  useEffect(() => {\n    setTagDetail(currentState => immer(currentState, draft => {\n      draft.job_id = userJob.value;\n    }));\n  }, [userJob]);\n\n  const handleSelectRows = ({\n    selectionModel\n  }) => {\n    setSelectedRows(selectionModel);\n  };\n\n  const resetDetail = () => {\n    setTagDetail(currentState => immer(defaultTagDetail, draft => {\n      draft.schematic_id = currentState.schematic_id;\n      draft.job_id = currentState.job_id;\n    }));\n  };\n\n  const handleCloseDialog = async () => {\n    setOpenDialog(false);\n    dispatch(drawingStore.actions.setDialogStateLoading(true));\n\n    try {\n      const {\n        tags_list\n      } = await getDrawingDetail(watchId);\n      drawingForm.setValue('tags_list', tags_list);\n      resetDetail();\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    dispatch(drawingStore.actions.setDialogStateLoading(false));\n  };\n\n  const updateUserDrawing = () => {\n    dispatch(commonStore.actions.setUserValueDrawing({\n      entity_id: watchDrawing_id,\n      description: '',\n      value: watchId\n    }));\n  };\n\n  const handleOpenTagCreateDialog = async () => {\n    updateUserDrawing();\n    dispatch(commonStore.actions.setLoadingPage(true));\n\n    try {\n      const resInitDataForCE = await getInitDataForCE();\n      const generatedCode = await getGeneratedCode({\n        drawing_id: watchId\n      });\n      setInitDataForCE(resInitDataForCE);\n      setTagDetail(currentState => immer(currentState, draft => {\n        draft.element_id = generatedCode;\n      }));\n      setOpenDialog(true);\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    dispatch(commonStore.actions.setLoadingPage(false));\n  };\n\n  const handleOpenTagUpdateDialog = id => async event => {\n    event.preventDefault();\n    updateUserDrawing();\n    dispatch(commonStore.actions.setLoadingPage(true));\n\n    try {\n      const resInitDataForCE = await getInitDataForCE();\n      const resDetail = await getDetail(id);\n      setInitDataForCE(resInitDataForCE);\n      setTagDetail(immer(resDetail, draft => {\n        draft.schematic_id = resDetail.related_schematic;\n        draft.part_id = resDetail.related_part;\n      }));\n      setOpenDialog(true);\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    dispatch(commonStore.actions.setLoadingPage(false));\n  }; // const handleRemoveTags = async () => {\n  //   const description = getMessageConfirm(t, 'element', selectedRows, 'delete')\n  //   const result = await confirm({ description })\n  //   if (result === 'OK') {\n  //     const tags: PayloadOperation[] = _.map(selectedRows, (partId) => {\n  //       const { element_id, id } = _.find(watchTagsList, { id: partId })\n  //       return { entity_id: element_id, id }\n  //     })\n  //     // dispatch(tagStore.sagaRemove(tags))\n  //   }\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttonGroupRoot,\n      children: [/*#__PURE__*/_jsxDEV(AppButton, {\n        startIcon: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 31\n        }, this),\n        onClick: handleOpenTagCreateDialog,\n        children: \"New\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AppButton, {\n        startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 31\n        }, this),\n        disabled: selectedRows.length === 0,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 1,\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        rows: watchTagsList,\n        checkboxSelection: true,\n        selectionModel: selectedRows,\n        onSelectionModelChange: handleSelectRows,\n        onCellClick: (params, event) => {\n          if (['element_id'].includes(params.field)) {\n            event.stopPropagation();\n          }\n        },\n        columns: [_objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'element_id',\n          headerName: 'Element #',\n          flex: 0.15,\n\n          renderCell(params) {\n            const {\n              value,\n              id\n            } = params;\n            return /*#__PURE__*/_jsxDEV(Link, {\n              href: \"#\",\n              onClick: handleOpenTagUpdateDialog(id),\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 19\n            }, this);\n          }\n\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'tag',\n          headerName: 'Tag #',\n          flex: 0.15\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'related_part',\n          headerName: 'Part',\n          valueGetter: params => params.value.entity_id,\n          flex: 0.15\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'description',\n          headerName: 'Description',\n          flex: 0.6\n        })],\n        hideFooter: true,\n        tableHeight: 385\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogTag, {\n      open: openDialog,\n      initData: initDataForCE,\n      detail: tagDetail,\n      onClose: handleCloseDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default TabTags;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Drawing/TabTags.tsx"],"names":["useState","useEffect","useFormContext","useStyles","useGetData","useDispatch","useSelector","Paper","Link","DataTable","CreateIcon","DeleteIcon","AppButton","DialogTag","immer","commonStore","drawingStore","defaultTagInitDataForCE","defaultTagDetail","defaultProperties","TabTags","classes","getInitDataForCE","getGeneratedCode","getDetail","getDrawingDetail","openDialog","setOpenDialog","initDataForCE","setInitDataForCE","tagDetail","setTagDetail","selectedRows","setSelectedRows","drawingForm","watchTagsList","watch","watchId","watchDrawing_id","dispatch","userJob","selectUserValueJob","userDrawing","selectUserValueDrawing","schematicValue","value","currentState","draft","schematic_id","job_id","handleSelectRows","selectionModel","resetDetail","handleCloseDialog","actions","setDialogStateLoading","tags_list","setValue","error","console","updateUserDrawing","setUserValueDrawing","entity_id","description","handleOpenTagCreateDialog","setLoadingPage","resInitDataForCE","generatedCode","drawing_id","element_id","handleOpenTagUpdateDialog","id","event","preventDefault","resDetail","related_schematic","part_id","related_part","buttonGroupRoot","length","params","includes","field","stopPropagation","headerName","flex","renderCell","valueGetter"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useFormContext } from 'react-hook-form'\nimport useStyles from './styles'\nimport useGetData from '@/hooks/useGetData'\nimport { useDispatch, useSelector } from 'react-redux'\n// import { useTranslation } from 'next-i18next'\n\nimport { Paper, Link } from '@material-ui/core'\nimport { DataTable, CreateIcon, DeleteIcon, AppButton, DialogTag } from '@/components'\n\nimport immer from 'immer'\n// import _ from 'lodash'\nimport { commonStore, drawingStore } from '@/store/reducers'\nimport { defaultTagInitDataForCE, defaultTagDetail } from '@/utils/defaultValues'\nimport { defaultProperties } from '@/utils/columnProperties'\n// import getMessageConfirm from '@/utils/getMessageConfirm'\n\nimport type { DrawingDetail } from '@/types/Drawing'\nimport type { DataForDropdown } from '@/types/Common'\n\nconst TabTags: React.FC = () => {\n  const classes = useStyles()\n  const { getInitDataForCE, getGeneratedCode, getDetail } = useGetData('elements')\n  const { getDetail: getDrawingDetail } = useGetData('drawings')\n  // const { confirm } = useConfirm()\n  // const { t } = useTranslation('element')\n\n  const [openDialog, setOpenDialog] = useState(false)\n  const [initDataForCE, setInitDataForCE] = useState(defaultTagInitDataForCE)\n  const [tagDetail, setTagDetail] = useState(defaultTagDetail)\n  const [selectedRows, setSelectedRows] = useState<number[]>([])\n\n  const drawingForm = useFormContext<DrawingDetail>()\n  const watchTagsList = drawingForm.watch('tag_list', []) || []\n  const watchId = drawingForm.watch('id', null)\n  const watchDrawing_id = drawingForm.watch('drawing_id', '')\n\n  const dispatch = useDispatch()\n  const userJob = useSelector(commonStore.selectUserValueJob)\n  const userDrawing = useSelector(commonStore.selectUserValueDrawing)\n\n  useEffect(() => {\n    const schematicValue = userDrawing.value > 0 ? userDrawing : null\n    setTagDetail((currentState) =>\n      immer(currentState, (draft) => {\n        draft.schematic_id = schematicValue\n      })\n    )\n  }, [userDrawing])\n\n  useEffect(() => {\n    setTagDetail((currentState) =>\n      immer(currentState, (draft) => {\n        draft.job_id = userJob.value\n      })\n    )\n  }, [userJob])\n\n  const handleSelectRows = ({ selectionModel }) => {\n    setSelectedRows(selectionModel)\n  }\n\n  const resetDetail = () => {\n    setTagDetail((currentState) =>\n      immer(defaultTagDetail, (draft) => {\n        draft.schematic_id = currentState.schematic_id\n        draft.job_id = currentState.job_id\n      })\n    )\n  }\n\n  const handleCloseDialog = async () => {\n    setOpenDialog(false)\n    dispatch(drawingStore.actions.setDialogStateLoading(true))\n    try {\n      const { tags_list } = await getDrawingDetail(watchId)\n      drawingForm.setValue('tags_list', tags_list)\n      resetDetail()\n    } catch (error) {\n      console.error('error', '>>>', error)\n    }\n    dispatch(drawingStore.actions.setDialogStateLoading(false))\n  }\n\n  const updateUserDrawing = () => {\n    dispatch(\n      commonStore.actions.setUserValueDrawing({\n        entity_id: watchDrawing_id,\n        description: '',\n        value: watchId\n      })\n    )\n  }\n\n  const handleOpenTagCreateDialog = async () => {\n    updateUserDrawing()\n    dispatch(commonStore.actions.setLoadingPage(true))\n    try {\n      const resInitDataForCE = await getInitDataForCE()\n      const generatedCode = await getGeneratedCode({ drawing_id: watchId })\n      setInitDataForCE(resInitDataForCE)\n      setTagDetail((currentState) =>\n        immer(currentState, (draft) => {\n          draft.element_id = generatedCode\n        })\n      )\n      setOpenDialog(true)\n    } catch (error) {\n      console.error('error', '>>>', error)\n    }\n    dispatch(commonStore.actions.setLoadingPage(false))\n  }\n\n  const handleOpenTagUpdateDialog = (id: number) => async (event) => {\n    event.preventDefault()\n    updateUserDrawing()\n    dispatch(commonStore.actions.setLoadingPage(true))\n    try {\n      const resInitDataForCE = await getInitDataForCE()\n      const resDetail = await getDetail(id)\n      setInitDataForCE(resInitDataForCE)\n      setTagDetail(\n        immer(resDetail, (draft) => {\n          draft.schematic_id = resDetail.related_schematic\n          draft.part_id = resDetail.related_part\n        }) as any\n      )\n      setOpenDialog(true)\n    } catch (error) {\n      console.error('error', '>>>', error)\n    }\n    dispatch(commonStore.actions.setLoadingPage(false))\n  }\n\n  // const handleRemoveTags = async () => {\n  //   const description = getMessageConfirm(t, 'element', selectedRows, 'delete')\n  //   const result = await confirm({ description })\n  //   if (result === 'OK') {\n  //     const tags: PayloadOperation[] = _.map(selectedRows, (partId) => {\n  //       const { element_id, id } = _.find(watchTagsList, { id: partId })\n  //       return { entity_id: element_id, id }\n  //     })\n  //     // dispatch(tagStore.sagaRemove(tags))\n  //   }\n  // }\n\n  return (\n    <>\n      <div className={classes.buttonGroupRoot}>\n        <AppButton startIcon={<CreateIcon />} onClick={handleOpenTagCreateDialog}>\n          New\n        </AppButton>\n        <AppButton startIcon={<DeleteIcon />} disabled={selectedRows.length === 0}>\n          Remove\n        </AppButton>\n      </div>\n      <Paper elevation={1}>\n        <DataTable\n          rows={watchTagsList}\n          checkboxSelection\n          selectionModel={selectedRows}\n          onSelectionModelChange={handleSelectRows}\n          onCellClick={(params, event) => {\n            if (['element_id'].includes(params.field)) {\n              event.stopPropagation()\n            }\n          }}\n          columns={[\n            {\n              ...defaultProperties,\n              field: 'element_id',\n              headerName: 'Element #',\n              flex: 0.15,\n              renderCell(params) {\n                const { value, id } = params\n                return (\n                  <Link href=\"#\" onClick={handleOpenTagUpdateDialog(id as number)}>\n                    {value}\n                  </Link>\n                )\n              }\n            },\n            {\n              ...defaultProperties,\n              field: 'tag',\n              headerName: 'Tag #',\n              flex: 0.15\n            },\n            {\n              ...defaultProperties,\n              field: 'related_part',\n              headerName: 'Part',\n              valueGetter: (params) => (params.value as DataForDropdown).entity_id,\n              flex: 0.15\n            },\n            {\n              ...defaultProperties,\n              field: 'description',\n              headerName: 'Description',\n              flex: 0.6\n            }\n          ]}\n          hideFooter\n          tableHeight={385}\n        />\n      </Paper>\n      <DialogTag open={openDialog} initData={initDataForCE} detail={tagDetail} onClose={handleCloseDialog} />\n    </>\n  )\n}\n\nexport default TabTags\n"]},"metadata":{},"sourceType":"module"}