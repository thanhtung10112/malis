{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createAction, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport const name = 'specification';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nexport const specificationDetail = {\n  job_id: null,\n  drawing_id: null,\n  descriptions: [],\n  spec_id: null,\n  additional_attributes: {}\n};\nconst initialState = {\n  initDataForList: {\n    jobs: [],\n    permissions: {\n      specification: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  dataList: [],\n  dialogState: {\n    open: false,\n    loading: false,\n    tab: 0,\n    historyLogs: []\n  },\n  initDataForCE: {\n    parameters: {\n      PLLA: [],\n      SSAT: []\n    },\n    wiki_page: ''\n  },\n  detail: specificationDetail\n};\nconst specificationSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      state.dialogState.historyLogs = payload;\n    },\n\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    resetDetail(state, {\n      payload\n    }) {\n      const {\n        userJob\n      } = payload;\n      state.detail = _objectSpread(_objectSpread({}, initialState.detail), {}, {\n        job_id: userJob.value\n      });\n    },\n\n    setDialogStateTab(state, {\n      payload\n    }) {\n      state.dialogState.tab = payload;\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n});\nexport const {\n  actions\n} = specificationSlice; // Saga actions\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`);\nexport const sagaChangeUserJob = createAction(`${name}/${actionTypes.CHANGE_USER_JOB}`);\nexport const sagaChangeUserDrawing = createAction(`${name}/${actionTypes.CHANGE_USER_DRAWING}`);\nexport const sagaGenerateCode = createAction(`${name}/${actionTypes.GET_GENERATE_CODE}`);\nexport const sagaRemove = createAction(`${name}/${actionTypes.REMOVE}`);\nexport const sagaUpdate = createAction(`${name}/${actionTypes.UPDATE}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaOpenDrawingDialog = createAction(`${name}/OPEN_DRAWING_DIALOG`); // Selectors\n\nexport const selectState = state => state[name];\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport const selectInitDataForCE = createSelector(selectState, state => state.initDataForCE);\nexport const selectPermissions = createSelector(selectState, state => state.initDataForList.permissions.specification);\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectParameters = createSelector(selectState, ({\n  initDataForCE\n}) => initDataForCE.parameters);\nexport const selectDetail = createSelector(selectState, state => state.detail);\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport default specificationSlice;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/reducers/specification.reducer.ts"],"names":["createAction","createSelector","createSlice","actionTypes","name","resetState","RESET_STATE","specificationDetail","job_id","drawing_id","descriptions","spec_id","additional_attributes","initialState","initDataForList","jobs","permissions","specification","wiki_page","column_tooltips","dataList","dialogState","open","loading","tab","historyLogs","initDataForCE","parameters","PLLA","SSAT","detail","specificationSlice","reducers","setInitDataForList","state","payload","setInitDataForCE","setDataList","setHistoryLogs","setDialogState","setDialogStateOpen","setDialogStateLoading","setDetail","resetDetail","userJob","value","setDialogStateTab","extraReducers","type","actions","sagaGetList","GET_LIST","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaCloseDialog","CLOSE_DIALOG","sagaChangeUserJob","CHANGE_USER_JOB","sagaChangeUserDrawing","CHANGE_USER_DRAWING","sagaGenerateCode","GET_GENERATE_CODE","sagaRemove","REMOVE","sagaUpdate","UPDATE","sagaCreate","CREATE","sagaOpenDrawingDialog","selectState","selectInitDataForList","selectInitDataForCE","selectPermissions","selectDialogState","selectParameters","selectDetail","selectDataList"],"mappings":"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","sourcesContent":["import { createAction, createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\n\nimport type { RootReducerType } from './rootReducer'\nimport type { DataForDropdown, Entity, ParameterOption, PayloadOperation, HistoryLog } from '@/types/Common'\nimport type {\n  SpecificationInitDataForCE,\n  SpecificationInitDataForList,\n  SpecificationDetail\n} from '@/types/Specification'\n\nexport const name: Entity = 'specification'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const specificationDetail = {\n  job_id: null,\n  drawing_id: null,\n  descriptions: [],\n  spec_id: null,\n  additional_attributes: {}\n} as SpecificationDetail\n\nconst initialState = {\n  initDataForList: {\n    jobs: [],\n    permissions: {\n      specification: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as SpecificationInitDataForList,\n  dataList: [],\n  dialogState: {\n    open: false,\n    loading: false,\n    tab: 0,\n    historyLogs: [] as HistoryLog[]\n  },\n  initDataForCE: {\n    parameters: {\n      PLLA: [],\n      SSAT: []\n    },\n    wiki_page: ''\n  } as SpecificationInitDataForCE,\n  detail: specificationDetail\n}\n\nconst specificationSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setInitDataForList(state, { payload }: PayloadAction<SpecificationInitDataForList>) {\n      state.initDataForList = payload\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<SpecificationInitDataForCE>) {\n      state.initDataForCE = payload\n    },\n    setDataList(state, { payload }) {\n      state.dataList = payload\n    },\n    setHistoryLogs(state, { payload }: PayloadAction<HistoryLog[]>) {\n      state.dialogState.historyLogs = payload\n    },\n    setDialogState(state, { payload }) {\n      state.dialogState = { ...state.dialogState, ...payload }\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setDetail(state, { payload }) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    resetDetail(state, { payload }: PayloadAction<{ userJob: ParameterOption }>) {\n      const { userJob } = payload\n      state.detail = { ...initialState.detail, job_id: userJob.value }\n    },\n    setDialogStateTab(state, { payload }: PayloadAction<number>) {\n      state.dialogState.tab = payload\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\nexport const { actions } = specificationSlice\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaChangeUserJob = createAction<ParameterOption>(`${name}/${actionTypes.CHANGE_USER_JOB}`)\nexport const sagaChangeUserDrawing = createAction<DataForDropdown>(`${name}/${actionTypes.CHANGE_USER_DRAWING}`)\nexport const sagaGenerateCode = createAction<{ formData: SpecificationDetail; drawing: DataForDropdown }>(\n  `${name}/${actionTypes.GET_GENERATE_CODE}`\n)\nexport const sagaRemove = createAction<PayloadOperation[]>(`${name}/${actionTypes.REMOVE}`)\nexport const sagaUpdate = createAction<{ id: number; formData: SpecificationDetail }>(`${name}/${actionTypes.UPDATE}`)\nexport const sagaCreate = createAction<SpecificationDetail>(`${name}/${actionTypes.CREATE}`)\nexport const sagaOpenDrawingDialog = createAction<SpecificationDetail>(`${name}/OPEN_DRAWING_DIALOG`)\n\n// Selectors\nexport const selectState = (state: RootReducerType) => state[name]\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\nexport const selectInitDataForCE = createSelector(selectState, (state) => state.initDataForCE)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.specification)\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\nexport const selectParameters = createSelector(selectState, ({ initDataForCE }) => initDataForCE.parameters)\nexport const selectDetail = createSelector(selectState, (state) => state.detail)\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\n\nexport default specificationSlice\n"]},"metadata":{},"sourceType":"module"}