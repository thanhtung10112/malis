{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Budget\\\\Import\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Grid, TextField, Typography } from '@material-ui/core';\nimport { DialogMain, FormControllerAutocomplete, FormControllerRadio, DialogSSEProcess } from '@/components';\nimport useStyles from './styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'next-i18next';\nimport FileSaver from 'file-saver';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport _ from 'lodash';\nimport { budgetActions } from '@/store/reducers';\nimport getValidationSchema from './validationSchema';\n\nfunction BudgetAddEditDialog() {\n  _s();\n\n  var _budgetForm$errors, _budgetForm$errors2, _budgetForm$errors2$i;\n\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation('budget'),\n      t = _useTranslation.t;\n\n  var refInputFile = React.useRef({});\n  var validationSchema = React.useMemo(function () {\n    return getValidationSchema(t);\n  }, []);\n  var fileTypeOptions = React.useMemo(function () {\n    return [{\n      id: 0,\n      description: t('form.label.file_type_text')\n    }, {\n      id: 1,\n      description: t('form.label.file_type_excel')\n    }];\n  }, []);\n  var budgetForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema),\n    defaultValues: {\n      file_type: 1,\n      mode: 0,\n      importFile: null\n    }\n  });\n  var watchFileType = budgetForm.watch('file_type', 0);\n  var dispatch = useDispatch();\n  var importDialogState = useSelector(budgetActions.selectImportDialogState);\n  var resultImportState = useSelector(budgetActions.selectImportResultDialog);\n  var userJob = useSelector(budgetActions.selectUserJob);\n  var importProcess = useSelector(budgetActions.selectImportDialogProcess);\n  React.useEffect(function () {\n    if (!_.isNil(refInputFile.current)) {\n      refInputFile.current.value = '';\n    }\n\n    budgetForm.setValue('importFile', null);\n  }, [watchFileType]);\n\n  var onClose = function onClose() {\n    dispatch(budgetActions.setImportOpen(false));\n    budgetForm.reset();\n  };\n\n  var handleUploadFile = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var files;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              files = event.target.files;\n              budgetForm.setValue('importFile', files[0]);\n              _context.next = 4;\n              return budgetForm.trigger('importFile');\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleUploadFile(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSuccess = function handleSuccess(operationId, data) {\n    dispatch(budgetActions.setImportOpen(false));\n    dispatch(budgetActions.setImportResult({\n      result: data.operation_result.report,\n      success: data.operation_result.success,\n      isOpen: true\n    }));\n  };\n\n  var createOperationData = function createOperationData(data) {\n    var operationData = {\n      job_id_pk: userJob.value,\n      file_type: data.file_type === 0 ? 'text' : 'excel',\n      mode: data.mode === 0 ? 'test' : 'write'\n    };\n    return operationData;\n  };\n\n  var onImportWriteMode = function onImportWriteMode() {\n    var data = budgetForm.getValues();\n    data.mode = 1;\n    var operationData = createOperationData(data);\n    dispatch(budgetActions.importCostCode({\n      operationData: operationData,\n      file: data.importFile,\n      mode: data.mode\n    }));\n  };\n\n  var onSendReportMail = function onSendReportMail() {\n    var data = budgetForm.getValues();\n    var importInfo = {\n      title: t('form.title.report'),\n      content: resultImportState.result\n    };\n    var formData = new FormData();\n    formData.append('import', data.importFile);\n    formData.append('import_info', JSON.stringify(importInfo));\n    dispatch(budgetActions.sendReportMail(formData));\n  };\n\n  var onSubmitForm = budgetForm.handleSubmit(function (data) {\n    var operationData = {\n      job_id_pk: userJob.value,\n      file_type: data.file_type === 0 ? 'text' : 'excel',\n      mode: data.mode === 0 ? 'test' : 'write'\n    };\n    dispatch(budgetActions.importCostCode({\n      operationData: operationData,\n      file: data.importFile,\n      mode: data.mode\n    }));\n  });\n\n  var onCloseImportResult = function onCloseImportResult() {\n    dispatch(budgetActions.setImportResult({\n      isOpen: false\n    }));\n    dispatch(budgetActions.getList());\n    onClose();\n  };\n\n  var onDownloadImportResult = function onDownloadImportResult() {\n    var result = resultImportState.result;\n    var fileText = new Blob([result], {\n      type: 'text/plain;charset=utf-8'\n    });\n    FileSaver.saveAs(fileText, 'result_import_cost_codes.txt');\n  };\n\n  var renderExtraButtons = function renderExtraButtons() {\n    var extraButtons = [{\n      label: t('button.import_write_mode'),\n      onClick: onImportWriteMode,\n      hide: importDialogState.mode === 1 || !resultImportState.success // if mode = write or result import = failed\n\n    }, {\n      label: t('button.report'),\n      onClick: onSendReportMail // disabled: true\n\n    }, {\n      label: t('button.download'),\n      onClick: onDownloadImportResult\n    }, {\n      label: t('common:button.close'),\n      onClick: onCloseImportResult\n    }];\n    return extraButtons;\n  };\n\n  var handleCloseImportProcess = function handleCloseImportProcess() {\n    dispatch(budgetActions.setOpenImportProcess(false));\n  };\n\n  var handleOpenRemindData = function handleOpenRemindData() {\n    dispatch(budgetActions.getRemindData());\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DialogMain, {\n      open: importDialogState.isOpen,\n      title: t('form.title.import'),\n      loading: importDialogState.isLoading,\n      okText: t('button.import'),\n      onOk: onSubmitForm,\n      onClose: onClose,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        className: classes.wrapDialog,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            display: \"block\",\n            variant: \"body2\",\n            children: [t('import_description'), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.moreInfo,\n              onClick: handleOpenRemindData,\n              children: /*#__PURE__*/_jsxDEV(\"u\", {\n                children: t('import_description_learn_more')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControllerAutocomplete, {\n            name: \"file_type\",\n            label: t('form.label.file_type'),\n            required: true,\n            options: fileTypeOptions,\n            control: budgetForm.control,\n            disableClearable: true,\n            renderOption: function renderOption(option) {\n              return option.description;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            error: (_budgetForm$errors = budgetForm.errors) === null || _budgetForm$errors === void 0 ? void 0 : _budgetForm$errors.importFile,\n            helperText: (_budgetForm$errors2 = budgetForm.errors) === null || _budgetForm$errors2 === void 0 ? void 0 : (_budgetForm$errors2$i = _budgetForm$errors2.importFile) === null || _budgetForm$errors2$i === void 0 ? void 0 : _budgetForm$errors2$i.message,\n            inputRef: refInputFile,\n            type: \"file\",\n            required: true,\n            onChange: handleUploadFile,\n            inputProps: {\n              style: {\n                height: 23\n              },\n              accept: watchFileType === 0 ? 'text/plain' : ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'].join(',')\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          style: {\n            paddingTop: 0\n          },\n          children: /*#__PURE__*/_jsxDEV(FormControllerRadio, {\n            label: t('form.label.mode'),\n            name: \"mode\",\n            control: budgetForm.control,\n            options: [{\n              label: t('form.label.mode_test'),\n              value: 0\n            }, {\n              label: t('form.label.mode_write'),\n              value: 1\n            }]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogMain, {\n      open: resultImportState.isOpen,\n      title: resultImportState.success ? 'Completed' : 'Failed',\n      type: resultImportState.success ? 'success' : 'error',\n      fullWidth: true,\n      maxWidth: \"sm\",\n      loading: importDialogState.isLoading,\n      extraButtons: renderExtraButtons(),\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        value: resultImportState.result,\n        multiline: true,\n        rows: 20,\n        style: {\n          marginTop: 12\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogSSEProcess, {\n      open: importProcess.openDialogProcess,\n      operationId: importProcess.operation_id,\n      onClose: handleCloseImportProcess,\n      onSuccess: handleSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(BudgetAddEditDialog, \"oTXFwvQNxnxdoimFfWX/cH0UeTY=\", false, function () {\n  return [useStyles, useTranslation, useForm, useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = BudgetAddEditDialog;\nexport default BudgetAddEditDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"BudgetAddEditDialog\");","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Budget/Import/index.tsx"],"names":["React","Grid","TextField","Typography","DialogMain","FormControllerAutocomplete","FormControllerRadio","DialogSSEProcess","useStyles","useDispatch","useSelector","useForm","useTranslation","FileSaver","yupResolver","_","budgetActions","getValidationSchema","BudgetAddEditDialog","classes","t","refInputFile","useRef","validationSchema","useMemo","fileTypeOptions","id","description","budgetForm","shouldUnregister","resolver","defaultValues","file_type","mode","importFile","watchFileType","watch","dispatch","importDialogState","selectImportDialogState","resultImportState","selectImportResultDialog","userJob","selectUserJob","importProcess","selectImportDialogProcess","useEffect","isNil","current","value","setValue","onClose","setImportOpen","reset","handleUploadFile","event","files","target","trigger","handleSuccess","operationId","data","setImportResult","result","operation_result","report","success","isOpen","createOperationData","operationData","job_id_pk","onImportWriteMode","getValues","importCostCode","file","onSendReportMail","importInfo","title","content","formData","FormData","append","JSON","stringify","sendReportMail","onSubmitForm","handleSubmit","onCloseImportResult","getList","onDownloadImportResult","fileText","Blob","type","saveAs","renderExtraButtons","extraButtons","label","onClick","hide","handleCloseImportProcess","setOpenImportProcess","handleOpenRemindData","getRemindData","isLoading","wrapDialog","moreInfo","control","option","errors","message","style","height","accept","join","paddingTop","marginTop","openDialogProcess","operation_id"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Grid, TextField, Typography } from '@material-ui/core'\n\nimport { DialogMain, FormControllerAutocomplete, FormControllerRadio, DialogSSEProcess } from '@/components'\n\nimport useStyles from './styles'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useForm } from 'react-hook-form'\nimport { useTranslation } from 'next-i18next'\n\nimport FileSaver from 'file-saver'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport _ from 'lodash'\n\nimport { budgetActions } from '@/store/reducers'\nimport getValidationSchema from './validationSchema'\nimport { ExtraButton } from '@/components/Dialog/Main/type'\n\nfunction BudgetAddEditDialog() {\n  const classes = useStyles()\n  const { t } = useTranslation('budget')\n  const refInputFile = React.useRef<any>({})\n  const validationSchema = React.useMemo(() => getValidationSchema(t), [])\n\n  const fileTypeOptions = React.useMemo(\n    () => [\n      { id: 0, description: t('form.label.file_type_text') },\n      { id: 1, description: t('form.label.file_type_excel') }\n    ],\n    []\n  )\n\n  const budgetForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema),\n    defaultValues: {\n      file_type: 1,\n      mode: 0,\n      importFile: null\n    }\n  })\n\n  const watchFileType = budgetForm.watch('file_type', 0)\n\n  const dispatch = useDispatch()\n  const importDialogState = useSelector(budgetActions.selectImportDialogState)\n  const resultImportState = useSelector(budgetActions.selectImportResultDialog)\n  const userJob = useSelector(budgetActions.selectUserJob)\n  const importProcess = useSelector(budgetActions.selectImportDialogProcess)\n\n  React.useEffect(() => {\n    if (!_.isNil(refInputFile.current)) {\n      refInputFile.current.value = ''\n    }\n    budgetForm.setValue('importFile', null)\n  }, [watchFileType])\n\n  const onClose = () => {\n    dispatch(budgetActions.setImportOpen(false))\n    budgetForm.reset()\n  }\n\n  const handleUploadFile = async (event) => {\n    const { files } = event.target\n    budgetForm.setValue('importFile', files[0])\n    await budgetForm.trigger('importFile')\n  }\n\n  const handleSuccess = (operationId, data) => {\n    dispatch(budgetActions.setImportOpen(false))\n    dispatch(\n      budgetActions.setImportResult({\n        result: data.operation_result.report,\n        success: data.operation_result.success,\n        isOpen: true\n      })\n    )\n  }\n\n  const createOperationData = (data) => {\n    const operationData = {\n      job_id_pk: userJob.value,\n      file_type: data.file_type === 0 ? 'text' : 'excel',\n      mode: data.mode === 0 ? 'test' : 'write'\n    } as any\n    return operationData\n  }\n\n  const onImportWriteMode = () => {\n    const data = budgetForm.getValues()\n    data.mode = 1\n    const operationData = createOperationData(data)\n    dispatch(\n      budgetActions.importCostCode({\n        operationData,\n        file: data.importFile,\n        mode: data.mode\n      })\n    )\n  }\n\n  const onSendReportMail = () => {\n    const data = budgetForm.getValues()\n    const importInfo = {\n      title: t('form.title.report'),\n      content: resultImportState.result\n    }\n\n    const formData = new FormData()\n    formData.append('import', data.importFile)\n    formData.append('import_info', JSON.stringify(importInfo))\n\n    dispatch(budgetActions.sendReportMail(formData))\n  }\n\n  const onSubmitForm = budgetForm.handleSubmit((data) => {\n    const operationData = {\n      job_id_pk: userJob.value,\n      file_type: data.file_type === 0 ? 'text' : 'excel',\n      mode: data.mode === 0 ? 'test' : 'write'\n    } as any\n    dispatch(\n      budgetActions.importCostCode({\n        operationData,\n        file: data.importFile,\n        mode: data.mode\n      })\n    )\n  })\n\n  const onCloseImportResult = () => {\n    dispatch(budgetActions.setImportResult({ isOpen: false }))\n    dispatch(budgetActions.getList())\n    onClose()\n  }\n\n  const onDownloadImportResult = () => {\n    const { result } = resultImportState\n    const fileText = new Blob([result], { type: 'text/plain;charset=utf-8' })\n    FileSaver.saveAs(fileText, 'result_import_cost_codes.txt')\n  }\n\n  const renderExtraButtons = () => {\n    const extraButtons: ExtraButton[] = [\n      {\n        label: t('button.import_write_mode'),\n        onClick: onImportWriteMode,\n        hide: importDialogState.mode === 1 || !resultImportState.success // if mode = write or result import = failed\n      },\n      {\n        label: t('button.report'),\n        onClick: onSendReportMail\n        // disabled: true\n      },\n      {\n        label: t('button.download'),\n        onClick: onDownloadImportResult\n      },\n      {\n        label: t('common:button.close'),\n        onClick: onCloseImportResult\n      }\n    ]\n    return extraButtons\n  }\n\n  const handleCloseImportProcess = () => {\n    dispatch(budgetActions.setOpenImportProcess(false))\n  }\n\n  const handleOpenRemindData = () => {\n    dispatch(budgetActions.getRemindData())\n  }\n\n  return (\n    <>\n      <DialogMain\n        open={importDialogState.isOpen}\n        title={t('form.title.import')}\n        loading={importDialogState.isLoading}\n        okText={t('button.import')}\n        onOk={onSubmitForm}\n        onClose={onClose}\n      >\n        <Grid container spacing={3} className={classes.wrapDialog}>\n          <Grid item xs={12}>\n            <Typography display=\"block\" variant=\"body2\">\n              {t('import_description')}\n              <span className={classes.moreInfo} onClick={handleOpenRemindData}>\n                <u>{t('import_description_learn_more')}</u>\n              </span>\n            </Typography>\n          </Grid>\n\n          <Grid item xs={12}>\n            <FormControllerAutocomplete\n              name=\"file_type\"\n              label={t('form.label.file_type')}\n              required\n              options={fileTypeOptions}\n              control={budgetForm.control}\n              disableClearable\n              renderOption={(option) => option.description}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <TextField\n              error={budgetForm.errors?.importFile}\n              helperText={budgetForm.errors?.importFile?.message}\n              inputRef={refInputFile}\n              type=\"file\"\n              required\n              onChange={handleUploadFile}\n              inputProps={{\n                style: { height: 23 },\n                accept:\n                  watchFileType === 0\n                    ? 'text/plain'\n                    : [\n                        'application/vnd.ms-excel',\n                        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n                      ].join(',')\n              }}\n            />\n          </Grid>\n\n          <Grid item xs={12} style={{ paddingTop: 0 }}>\n            <FormControllerRadio\n              label={t('form.label.mode')}\n              name=\"mode\"\n              control={budgetForm.control}\n              options={[\n                { label: t('form.label.mode_test'), value: 0 },\n                { label: t('form.label.mode_write'), value: 1 }\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </DialogMain>\n      <DialogMain\n        open={resultImportState.isOpen}\n        title={resultImportState.success ? 'Completed' : 'Failed'}\n        type={resultImportState.success ? 'success' : 'error'}\n        fullWidth\n        maxWidth=\"sm\"\n        loading={importDialogState.isLoading}\n        extraButtons={renderExtraButtons()}\n      >\n        <TextField value={resultImportState.result} multiline rows={20} style={{ marginTop: 12 }} />\n      </DialogMain>\n      <DialogSSEProcess\n        open={importProcess.openDialogProcess}\n        operationId={importProcess.operation_id}\n        onClose={handleCloseImportProcess}\n        onSuccess={handleSuccess}\n      />\n    </>\n  )\n}\n\nexport default BudgetAddEditDialog\n"]},"metadata":{},"sourceType":"module"}