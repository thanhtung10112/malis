{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport jsCurrency from 'currency.js';\nimport _ from 'lodash';\n\nclass AppNumber {\n  static buildOptions(options) {\n    return _objectSpread(_objectSpread({}, this._defaultOptions), options);\n  }\n\n  static format(value, options = {}) {\n    return jsCurrency(value, this.buildOptions(options)).format();\n  }\n\n  static convertToInstance(value, options = {}) {\n    return jsCurrency(value, options);\n  }\n\n  static convertToNumber(value, options = {}) {\n    return this.convertToInstance(value, options).value;\n  }\n\n  static isNumber(value) {\n    if (_.size(value) === 0) {\n      return false;\n    }\n\n    const formatValue = _.toNumber(value);\n\n    return !_.isNaN(formatValue) && _.isNumber(formatValue);\n  }\n\n  static isNumberFormat(value) {\n    const originValue = this.convertToNumber(value);\n    return this.isNumber(originValue);\n  }\n\n  static isPositiveNumber(value) {\n    const formatValue = this.convertToNumber(value);\n    return formatValue > -1;\n  }\n\n  static isNegativeNumber(value) {\n    return !this.isPositiveNumber(value);\n  }\n\n}\n\n_defineProperty(AppNumber, \"_defaultOptions\", {\n  separator: ' ',\n  decimal: '.',\n  symbol: ''\n});\n\nexport default AppNumber;","map":null,"metadata":{},"sourceType":"module"}