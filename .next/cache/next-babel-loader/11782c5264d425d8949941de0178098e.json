{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\App\\\\AutocompleteAsync\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Typography, Tooltip } from '@material-ui/core';\nimport { AppAutocomplete } from '@/components';\nimport _ from 'lodash';\nimport striptags from 'striptags';\nimport parseHTML from 'html-react-parser';\nimport isHTML from '@/utils/isHTML';\nimport HttpService from '@/helper/HttpService';\nimport { commonStore } from '@/store/reducers';\n\nconst AppAutocompleteAsync = props => {\n  const {\n    compName,\n    additionalData,\n    onChange,\n    defaultOptions\n  } = props,\n        autoCompleteProps = _objectWithoutProperties(props, [\"compName\", \"additionalData\", \"onChange\", \"defaultOptions\"]);\n\n  const httpService = new HttpService('');\n  const {\n    0: dataOptions,\n    1: setDataOptions\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: valueInput,\n    1: setValueInput\n  } = useState('');\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setDataOptions(defaultOptions);\n  }, [defaultOptions]);\n\n  const getOptionLabel = ({\n    description,\n    entity_id\n  }) => description ? `${entity_id} - ${description}` : entity_id;\n\n  const renderOption = ({\n    description,\n    entity_id\n  }) => {\n    if (!description) {\n      return entity_id;\n    }\n\n    if (isHTML(description)) {\n      const htmlContent = parseHTML(_.toString(description));\n      const pureContent = striptags(description);\n      return /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: htmlContent,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          noWrap: true,\n          children: `${entity_id} - ${pureContent}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      noWrap: true,\n      children: `${entity_id} - ${description}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  };\n\n  const handleInputDropdown = (event, value, reason) => {\n    if (reason === 'input') {\n      setValueInput(value);\n      setDataOptions([]);\n    }\n  };\n\n  const handleKeypress = async event => {\n    if (event.which === 13) {\n      setLoading(true);\n\n      try {\n        const data = await httpService.get('data_for_dd', {\n          comp_name: compName,\n          additional_data: JSON.stringify(additionalData),\n          s: valueInput\n        });\n        setDataOptions(data.data_for_dd);\n      } catch (error) {\n        dispatch(commonStore.actions.setError(error));\n      }\n\n      setLoading(false);\n    }\n  };\n\n  const handleSelectOption = (event, option, reason, details) => {\n    onChange(event, option, reason, details);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppAutocomplete, _objectSpread({\n    loading: loading,\n    options: dataOptions,\n    onInputChange: handleInputDropdown,\n    renderOption: renderOption,\n    getOptionLabel: getOptionLabel,\n    onChange: handleSelectOption,\n    onKeyPress: handleKeypress\n  }, autoCompleteProps), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\nAppAutocompleteAsync.defaultProps = {\n  additionalData: {},\n  defaultOptions: [],\n  disableClearable: true,\n  primaryKeyOption: 'value'\n};\nexport default AppAutocompleteAsync;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/App/AutocompleteAsync/index.tsx"],"names":["useState","useEffect","useDispatch","Typography","Tooltip","AppAutocomplete","_","striptags","parseHTML","isHTML","HttpService","commonStore","AppAutocompleteAsync","props","compName","additionalData","onChange","defaultOptions","autoCompleteProps","httpService","dataOptions","setDataOptions","loading","setLoading","valueInput","setValueInput","dispatch","getOptionLabel","description","entity_id","renderOption","htmlContent","toString","pureContent","handleInputDropdown","event","value","reason","handleKeypress","which","data","get","comp_name","additional_data","JSON","stringify","s","data_for_dd","error","actions","setError","handleSelectOption","option","details","defaultProps","disableClearable","primaryKeyOption"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { Typography, Tooltip } from '@material-ui/core'\nimport { AppAutocomplete } from '@/components'\n\nimport _ from 'lodash'\nimport striptags from 'striptags'\nimport parseHTML from 'html-react-parser'\nimport isHTML from '@/utils/isHTML'\nimport HttpService from '@/helper/HttpService'\nimport { commonStore } from '@/store/reducers'\n\nimport type { DataForDropdown } from '@/types/Common'\nimport type { AppAutocompleteAsyncProps } from './type'\n\nconst AppAutocompleteAsync: React.FC<AppAutocompleteAsyncProps> = (props) => {\n  const { compName, additionalData, onChange, defaultOptions, ...autoCompleteProps } = props\n\n  const httpService = new HttpService('')\n\n  const [dataOptions, setDataOptions] = useState<DataForDropdown[]>([])\n  const [loading, setLoading] = useState(false)\n  const [valueInput, setValueInput] = useState('')\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    setDataOptions(defaultOptions)\n  }, [defaultOptions])\n\n  const getOptionLabel = ({ description, entity_id }) => (description ? `${entity_id} - ${description}` : entity_id)\n\n  const renderOption = ({ description, entity_id }) => {\n    if (!description) {\n      return entity_id\n    }\n    if (isHTML(description)) {\n      const htmlContent = parseHTML(_.toString(description))\n      const pureContent = striptags(description)\n      return (\n        <Tooltip title={htmlContent}>\n          <Typography noWrap>{`${entity_id} - ${pureContent}`}</Typography>\n        </Tooltip>\n      )\n    }\n    return <Typography noWrap>{`${entity_id} - ${description}`}</Typography>\n  }\n\n  const handleInputDropdown = (event, value, reason) => {\n    if (reason === 'input') {\n      setValueInput(value)\n      setDataOptions([])\n    }\n  }\n\n  const handleKeypress = async (event) => {\n    if (event.which === 13) {\n      setLoading(true)\n      try {\n        const data: any = await httpService.get('data_for_dd', {\n          comp_name: compName,\n          additional_data: JSON.stringify(additionalData),\n          s: valueInput\n        })\n        setDataOptions(data.data_for_dd)\n      } catch (error) {\n        dispatch(commonStore.actions.setError(error))\n      }\n      setLoading(false)\n    }\n  }\n\n  const handleSelectOption = (event, option, reason, details) => {\n    onChange(event, option, reason, details)\n  }\n\n  return (\n    <AppAutocomplete\n      loading={loading}\n      options={dataOptions}\n      onInputChange={handleInputDropdown}\n      renderOption={renderOption}\n      getOptionLabel={getOptionLabel}\n      onChange={handleSelectOption}\n      onKeyPress={handleKeypress}\n      {...autoCompleteProps}\n    />\n  )\n}\n\nAppAutocompleteAsync.defaultProps = {\n  additionalData: {},\n  defaultOptions: [],\n  disableClearable: true,\n  primaryKeyOption: 'value'\n}\n\nexport default AppAutocompleteAsync\n"]},"metadata":{},"sourceType":"module"}