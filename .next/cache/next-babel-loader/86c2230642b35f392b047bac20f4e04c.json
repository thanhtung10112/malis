{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { call, put, takeEvery, select, takeLatest, all } from 'redux-saga/effects';\nimport _ from 'lodash';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport { makeAListActions, exportProcessDialogActions, commonStore } from '@/store/reducers';\nimport { removalProperties } from '@/utils/constant';\nimport malApi from '@/apis/makeAList.api';\nimport { StatusCode } from '@/utils/StatusCode';\n\nfunction* getEntityFromStore() {\n  const entity = yield select(commonStore.selectEntity);\n  return entity;\n}\n\nfunction* fetchPresetList(filterType = '') {\n  let type = filterType;\n\n  if (!type) {\n    type = yield select(state => state.makeAList.filterType);\n  }\n\n  const entity = yield getEntityFromStore();\n  const {\n    make_a_list_preset_list\n  } = yield call(malApi.getList, {\n    entity,\n    type\n  });\n  yield put(makeAListActions.setPresetList(make_a_list_preset_list));\n}\n\nfunction* fetchPresetDetail(id) {\n  const {\n    make_a_list_preset\n  } = yield call(malApi.getDetail, id);\n  const filterType = yield select(makeAListActions.selectFilterType);\n\n  if (filterType === 'shared') {\n    make_a_list_preset.is_user_default = false;\n  }\n\n  yield put(makeAListActions.setPresetDetail(make_a_list_preset));\n}\n\nfunction* fetchInitDataForCreateUpdate() {\n  const entity = yield getEntityFromStore();\n  const data = yield call(malApi.getInitDataForCE, entity);\n  yield put(makeAListActions.setInitData(data));\n}\n\nfunction* fetchInitDataForList(isSetPresetDetail) {\n  const entity = yield getEntityFromStore();\n  const {\n    current_default_preset,\n    system_default_preset,\n    permissions: {\n      make_a_list\n    }\n  } = yield call(malApi.getInitDataForList, entity);\n  yield all([put(makeAListActions.setPresetDefault(current_default_preset)), put(makeAListActions.setSystemPreset(system_default_preset)), put(makeAListActions.setPermissions(make_a_list))]);\n  isSetPresetDetail && (yield put(makeAListActions.setPresetDetail(current_default_preset)));\n}\n\nfunction* changeFilterType({\n  payload: filterType\n}) {\n  yield put(makeAListActions.setLoadingTable(true));\n\n  try {\n    yield call(fetchPresetList, filterType);\n    yield put(makeAListActions.setFilterType(filterType));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(makeAListActions.setLoadingTable(false));\n}\n\nfunction* open() {\n  yield put(commonStore.actions.setLoadingPage(true));\n  const entity = yield getEntityFromStore();\n\n  try {\n    const {\n      success\n    } = yield call(malApi.checkPermissions, entity);\n\n    if (success) {\n      yield all([call(fetchPresetList), call(fetchInitDataForList, true), call(fetchInitDataForCreateUpdate)]);\n      yield put(makeAListActions.setOpen(true));\n    }\n  } catch (error) {\n    const {\n      data\n    } = error.response;\n    const {\n      message,\n      success\n    } = data;\n\n    if (!success) {\n      yield put(commonStore.actions.setErrorMessage(message));\n      yield put({\n        type: `${entity}/setPermissions`,\n        payload: {\n          make_a_list: false\n        }\n      });\n    }\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* create({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      id,\n      created_at,\n      created_by,\n      updated_at,\n      updated_by,\n      is_system_default\n    } = payload,\n          presetDetail = _objectWithoutProperties(payload, [\"id\", \"created_at\", \"created_by\", \"updated_at\", \"updated_by\", \"is_system_default\"]);\n\n    const data = yield call(malApi.create, presetDetail);\n    yield all([call(fetchPresetDetail, data.id), call(fetchPresetList), call(fetchInitDataForList, false), put(commonStore.actions.setSuccessMessage(data.message)), put(makeAListActions.setIsEditMode(true)), put(makeAListActions.setMalForm({\n      clearError: true,\n      error: ''\n    }))]);\n  } catch (error) {\n    const {\n      response: {\n        data,\n        status\n      }\n    } = error;\n\n    if (status === StatusCode.BAD_REQUEST) {\n      const error = data.message;\n      yield put(makeAListActions.setMalForm({\n        error\n      }));\n    } else {\n      yield errorSaga.handleError(error);\n    }\n  }\n\n  yield put(makeAListActions.setMalForm({\n    clearError: false,\n    error: ''\n  }));\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* update({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const presetDetail = _.omit(payload, [...removalProperties, 'is_system_default', 'is_shared']);\n\n    const {\n      message\n    } = yield call(malApi.update, payload.id, presetDetail);\n    yield all([call(fetchPresetList), call(fetchInitDataForList, false), put(commonStore.actions.setSuccessMessage(message)), put(makeAListActions.setMalForm({\n      clearError: true,\n      error: ''\n    }))]);\n  } catch (error) {\n    const {\n      response: {\n        data,\n        status\n      }\n    } = error;\n\n    if (status === StatusCode.BAD_REQUEST) {\n      const error = data.message;\n      yield put(makeAListActions.setMalForm({\n        error\n      }));\n    } else {\n      yield errorSaga.handleError(error);\n    }\n  }\n\n  yield put(makeAListActions.setMalForm({\n    clearError: false,\n    error: ''\n  }));\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* getList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchPresetList);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* getDetail({\n  payload: id\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchPresetDetail, id);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* share({\n  payload\n}) {\n  yield put(makeAListActions.setLoadingTable(true));\n\n  try {\n    const {\n      id,\n      shared\n    } = payload;\n    const {\n      message\n    } = yield call(malApi.share, id, shared);\n    yield call(fetchPresetList);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(makeAListActions.setLoadingTable(false));\n}\n\nfunction* remove() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      id\n    } = yield select(makeAListActions.selectPresetDetail);\n    const {\n      message\n    } = yield call(malApi.remove, id);\n    yield all([call(fetchPresetList), call(fetchInitDataForList, true)]);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* clearDefault() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const entity = yield getEntityFromStore();\n    const {\n      message\n    } = yield call(malApi.clearDefault, entity);\n    yield call(fetchInitDataForList, true);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* startMakeAListExport(exportEvent) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const exportDetails = exportEvent.payload;\n    const entity = yield getEntityFromStore();\n    const requestData = {\n      entity: entity,\n      destination: exportDetails.destination,\n      columns_displayed: exportDetails.displayedColumns,\n      where_conditions: exportDetails.whereCondtions,\n      sort_conditions: exportDetails.sortConditions,\n      distinct: exportDetails.distinct,\n      ignore_case: exportDetails.ignoreCase\n    };\n    const data = yield call(malApi.startMakeAListExport, requestData);\n\n    if (data.success) {\n      if (data.result_path) {\n        const domain = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:5000/';\n        const redirectUrl = `${domain}${data.result_path}`;\n        window.open(redirectUrl);\n      } else {\n        yield put(exportProcessDialogActions.setOperationId(data.operation_id));\n        yield put(exportProcessDialogActions.setCeleryId(data.celery_id));\n        yield put(exportProcessDialogActions.setOpen(true));\n      }\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* stopMakeAListExport(operationData) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const requestData = operationData.payload;\n    const data = yield call(malApi.stopMakeAListExport, requestData);\n\n    if (data.success) {\n      put(commonStore.actions.setSuccessMessage(data.message));\n      put(exportProcessDialogActions.setOpen(false));\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* saveAs({\n  payload\n}) {\n  yield put(makeAListActions.setLoadingDialog(true));\n\n  try {\n    const {\n      id,\n      created_at,\n      created_by,\n      updated_at,\n      updated_by,\n      is_system_default\n    } = payload,\n          presetDetail = _objectWithoutProperties(payload, [\"id\", \"created_at\", \"created_by\", \"updated_at\", \"updated_by\", \"is_system_default\"]);\n\n    const data = yield call(malApi.create, presetDetail);\n    yield all([call(fetchPresetDetail, data.id), call(fetchPresetList), call(fetchInitDataForList, false), put(commonStore.actions.setSuccessMessage(data.message)), put(makeAListActions.setIsEditMode(true)), put(makeAListActions.setSaveAsForm({\n      open: false,\n      clearError: true,\n      error: ''\n    }))]);\n  } catch (error) {\n    const {\n      response: {\n        data,\n        status\n      }\n    } = error;\n\n    if (status === StatusCode.BAD_REQUEST) {\n      const error = data.message;\n      yield put(makeAListActions.setSaveAsForm({\n        error\n      }));\n    } else {\n      yield errorSaga.handleError(error);\n    }\n  }\n\n  yield put(makeAListActions.setSaveAsForm({\n    clearError: false,\n    error: ''\n  }));\n  yield put(makeAListActions.setLoadingDialog(false));\n}\n\nfunction* makeAListSaga() {\n  yield takeEvery(makeAListActions.create, create);\n  yield takeEvery(makeAListActions.getList, getList);\n  yield takeEvery(makeAListActions.getDetail, getDetail);\n  yield takeEvery(makeAListActions.share, share);\n  yield takeEvery(makeAListActions.update, update);\n  yield takeLatest(makeAListActions.remove, remove);\n  yield takeLatest(makeAListActions.open, open);\n  yield takeLatest(makeAListActions.clearDefault, clearDefault);\n  yield takeLatest(makeAListActions.exportMakeAList, startMakeAListExport);\n  yield takeLatest(makeAListActions.changeFilterType, changeFilterType);\n  yield takeLatest(makeAListActions.saveAs, saveAs);\n  yield takeLatest(makeAListActions.stopMakeAList, stopMakeAListExport);\n}\n\nexport default makeAListSaga;","map":null,"metadata":{},"sourceType":"module"}