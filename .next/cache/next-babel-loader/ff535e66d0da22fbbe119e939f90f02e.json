{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useMemo } from 'react';\nimport { useTranslation } from 'next-i18next';\nimport { useSelector } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport { Grid, Typography, Button } from '@material-ui/core';\nimport { DataTable, DataTableTextField, AppTitle, CreateIcon, DeleteIcon, AppAutocomplete } from '@/components';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport * as columnProperties from '@/utils/columnProperties';\nimport { userStore } from '@/store/reducers';\n\nfunction TabJob() {\n  var _useTranslation = useTranslation('user'),\n      t = _useTranslation.t;\n\n  var userForm = useFormContext();\n  var watchUserJob = userForm.watch('job_access', []);\n\n  var _useState = useState([]),\n      selectedJobs = _useState[0],\n      setSelectedJobs = _useState[1];\n\n  var _useState2 = useState([]),\n      selectedRows = _useState2[0],\n      setSelectedRows = _useState2[1];\n\n  var _useSelector = useSelector(userStore.selectInitDataForCE),\n      jobOptions = _useSelector.jobs;\n\n  var jobsTabColumns = useMemo(function () {\n    return [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      field: 'job_raw_id',\n      headerName: 'Job #',\n      flex: 0.1\n    }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Note')), {}, {\n      field: 'note',\n      flex: 0.4,\n      renderEditCell: function renderEditCell(params) {\n        return /*#__PURE__*/_jsx(DataTableTextField, {\n          params: params,\n          onChangeValue: onChangeJobNote\n        });\n      }\n    })];\n  }, []);\n\n  var onChangeSelectedJobs = function onChangeSelectedJobs(_, value) {\n    var newValue = value.map(function (item) {\n      return _objectSpread(_objectSpread({}, item), {}, {\n        note: ''\n      });\n    });\n    setSelectedJobs(newValue);\n  };\n\n  var onAddSelectedJobs = function onAddSelectedJobs() {\n    var _userForm$getValues = userForm.getValues(),\n        jobAccess = _userForm$getValues.job_access;\n\n    var newJobAccess = [].concat(_toConsumableArray(jobAccess), _toConsumableArray(selectedJobs));\n    userForm.setValue('job_access', newJobAccess);\n    setSelectedJobs([]);\n  };\n\n  var onSelectJobsTable = function onSelectJobsTable(_ref) {\n    var selectionModel = _ref.selectionModel;\n    setSelectedRows(selectionModel);\n  };\n\n  var onRemoveSelectedRows = function onRemoveSelectedRows() {\n    var _userForm$getValues2 = userForm.getValues(),\n        jobAccess = _userForm$getValues2.job_access;\n\n    var newJobAccess = jobAccess.filter(function (job) {\n      return !selectedRows.includes(job.job_id);\n    });\n    userForm.setValue('job_access', newJobAccess);\n    setSelectedRows([]);\n  };\n\n  var onChangeJobNote = function onChangeJobNote(job_id, value) {\n    var _userForm$getValues3 = userForm.getValues(),\n        jobAccess = _userForm$getValues3.job_access;\n\n    var newJobAccess = immer(jobAccess, function (draft) {\n      var index = _.findIndex(draft, {\n        job_id: job_id\n      });\n\n      draft[index].note = value;\n    });\n    userForm.setValue('job_access', newJobAccess);\n  };\n\n  return /*#__PURE__*/_jsxs(Grid, {\n    container: true,\n    alignItems: \"center\",\n    spacing: 2,\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(Typography, {\n        display: \"block\",\n        variant: \"body2\",\n        children: t('form.description.tab_job')\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 9,\n      children: /*#__PURE__*/_jsx(AppAutocomplete, {\n        label: \"Jobs\",\n        value: selectedJobs,\n        multiple: true,\n        limitTags: 4,\n        disableCloseOnSelect: true,\n        options: jobOptions,\n        renderOption: function renderOption(option) {\n          return option.job_raw_id;\n        },\n        getOptionSelected: function getOptionSelected(option, value) {\n          return option.job_id === value.job_id;\n        },\n        getOptionDisabled: function getOptionDisabled(option) {\n          return watchUserJob.some(function (item) {\n            return item.job_id === option.job_id;\n          });\n        },\n        onChange: onChangeSelectedJobs\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 3,\n      children: /*#__PURE__*/_jsx(Button, {\n        startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n        variant: \"outlined\",\n        color: \"primary\",\n        fullWidth: true,\n        style: {\n          padding: 0\n        },\n        onClick: onAddSelectedJobs,\n        disabled: selectedJobs.length === 0,\n        children: t('common:button.add')\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 9,\n      children: /*#__PURE__*/_jsx(AppTitle, {\n        label: t('form.label.access_rights')\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 3,\n      children: /*#__PURE__*/_jsx(Button, {\n        startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n        style: {\n          padding: 0\n        },\n        variant: \"outlined\",\n        color: \"primary\",\n        fullWidth: true,\n        onClick: onRemoveSelectedRows,\n        disabled: selectedRows.length <= 0,\n        children: t('common:button.remove')\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(DataTable, {\n        disableSelectionOnClick: true,\n        tableHeight: 355,\n        checkboxSelection: true,\n        rows: watchUserJob,\n        getRowId: function getRowId(params) {\n          return params.job_id;\n        },\n        selectionModel: selectedRows,\n        columns: jobsTabColumns,\n        onSelectionModelChange: onSelectJobsTable,\n        hideFooter: true\n      })\n    })]\n  });\n}\n\nexport default TabJob;","map":null,"metadata":{},"sourceType":"module"}