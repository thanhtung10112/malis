{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { takeLatest, call, put, putResolve, takeEvery } from 'redux-saga/effects';\nimport { select, all } from 'typed-redux-saga';\nimport { createAction } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { partStore, commonStore, drawingStore } from '@/store/reducers';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport { StatusCode } from '@/utils/StatusCode';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nimport { actionTypes } from '@/utils/constant';\nimport { isAssemblyByDpn } from '@/utils/isAssembly';\nimport itemApi from '@/apis/item.api';\nimport assemblyApi from '@/apis/assembly.api';\nimport partRefApi from '@/apis/part.api';\nimport equivalenceApi from '@/apis/equivalence.api';\nimport manufacturerApi from '@/apis/manufacturer.api';\nimport drawingApi from '@/apis/drawing.api';\n\nconst getPartApi = entity => entity === 'item' ? itemApi : assemblyApi;\n\nfunction* fetchGenerateCode(entity, drawing) {\n  const partApi = getPartApi(entity);\n  const {\n    generated_code\n  } = yield call(partApi.getGenerateCode, drawing.value);\n  return generated_code;\n}\n\nfunction* openPartCreateDialog({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const partApi = getPartApi(payload);\n    const {\n      userJob,\n      userDrawing\n    } = yield* all({\n      userJob: select(commonStore.selectUserValueJob),\n      userDrawing: select(commonStore.selectUserValueDrawing)\n    });\n    const initDetail = payload === 'item' ? partStore.itemDetail : partStore.assemblyDetail;\n\n    const _yield$call = yield call(partApi.getInitDataForCE, {\n      job_id_pk: userJob.value\n    }),\n          {\n      permissions,\n      wiki_page\n    } = _yield$call,\n          initData = _objectWithoutProperties(_yield$call, [\"permissions\", \"wiki_page\"]);\n\n    const defaultValues = getDefaultValues(initData.parameters, {\n      unit: 'UNIT'\n    }, initDetail);\n    defaultValues.drawing_id = userDrawing.value < 0 ? null : userDrawing;\n    defaultValues.job_id = userJob.value;\n\n    if (defaultValues.drawing_id) {\n      defaultValues.dpn = yield call(fetchGenerateCode, payload, defaultValues.drawing_id);\n    }\n\n    yield putResolve(partStore.actions.setInitData(initData));\n    yield put(partStore.actions.addPart({\n      detail: defaultValues,\n      wiki_page,\n      permissions: permissions[payload]\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* changePartDrawing({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const {\n      formData,\n      drawing,\n      entity\n    } = payload;\n    const partApi = getPartApi(entity);\n    const {\n      generated_code\n    } = yield call(partApi.getGenerateCode, drawing.value);\n    yield put(partStore.actions.updateCurrentPart(_objectSpread(_objectSpread({}, formData), {}, {\n      dpn: generated_code,\n      drawing_id: drawing\n    })));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* getPartRefItem({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const {\n      selected_part\n    } = payload;\n\n    if (_.isNull(selected_part)) {\n      yield put(partStore.actions.updateCurrentPart({\n        reference_to: null\n      }));\n    } else {\n      const {\n        part,\n        message\n      } = yield call(partRefApi.getReferencedPart, payload);\n\n      const item = _.pick(part, ['descriptions', 'manufacturer_equiv', 'manufacturers', 'mass', 'material_equiv', 'unit', 'manufacturer_equiv_standards', 'material_equiv_standards']);\n\n      item.reference_to = {\n        description: '',\n        entity_id: part.dpn,\n        value: part.id\n      };\n      item.manufacturer_equiv = part.manufacturer_equiv_object;\n      item.material_equiv = part.material_equiv_object;\n      yield putResolve(partStore.actions.updateCurrentPart(item));\n\n      if (selected_part !== part.id) {\n        yield put(partStore.actions.setConfirmRef({\n          open: true,\n          message\n        }));\n      } else {\n        yield put(commonStore.actions.setSuccessMessage(message));\n      }\n    }\n  } catch (error) {\n    const {\n      response\n    } = error;\n\n    if (_.isNil(response)) {\n      yield errorSaga.handleError(error);\n    } else {\n      const {\n        status,\n        data\n      } = response;\n\n      if (status === StatusCode.BAD_REQUEST) {\n        yield put(partStore.actions.setConfirmRef({\n          open: true,\n          message: data.message\n        }));\n      }\n    }\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* createPart({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const {\n      entity,\n      formData\n    } = payload;\n    const partApi = getPartApi(entity);\n    const {\n      message\n    } = yield call(partApi.create, formData);\n    const {\n      userJob,\n      userDrawing\n    } = yield* all({\n      userJob: select(commonStore.selectUserValueJob),\n      userDrawing: select(commonStore.selectUserValueDrawing)\n    });\n    let generateCode = '';\n\n    if (userDrawing.value >= 0) {\n      generateCode = yield call(fetchGenerateCode, entity, userDrawing);\n    }\n\n    yield putResolve(partStore.actions.resetCurrentPart({\n      userJob,\n      userDrawing,\n      generateCode\n    }));\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(partStore.actions.setPartTab(0))]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nconst getPartDpn = (entity, dpn) => {\n  // const type = entity === 'item' ? 'H' : 'G'\n  const regexItem = /H\\S+/g;\n  const regexAssembly = /G\\S+/g;\n  const regex = entity === 'item' ? regexItem : regexAssembly;\n  const match = dpn.match(regex);\n\n  if (_.isArray(match)) {\n    return match[0];\n  }\n\n  return '';\n};\n\nfunction* fetchPartDetail(entity, id) {\n  const partApi = getPartApi(entity);\n  const data = yield call(partApi.getDetail, id);\n  const partDetail = data[entity];\n  partDetail.dpn = getPartDpn(entity, partDetail.dpn);\n  partDetail.drawing_id = partDetail.related_drawing;\n  partDetail.items = (partDetail.components || []).map(({\n    id,\n    quantity\n  }) => ({\n    item_id: id,\n    quantity\n  }));\n\n  if (entity === 'item') {\n    partDetail.manufacturer_equiv = partDetail.manufacturer_equiv_object;\n    partDetail.material_equiv = partDetail.material_equiv_object;\n  }\n\n  return partDetail;\n}\n\nfunction* openPartUpdateDialog({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      id,\n      entity\n    } = payload;\n    const partApi = getPartApi(entity);\n    const partDetail = yield call(fetchPartDetail, entity, id);\n\n    const _yield$call2 = yield call(partApi.getInitDataForCE, {\n      job_id_pk: partDetail.job_id\n    }),\n          {\n      permissions,\n      wiki_page\n    } = _yield$call2,\n          initData = _objectWithoutProperties(_yield$call2, [\"permissions\", \"wiki_page\"]);\n\n    yield putResolve(partStore.actions.setInitData(initData));\n    yield put(partStore.actions.addPart({\n      detail: partDetail,\n      wiki_page,\n      permissions: permissions[entity]\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* updatePart({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const {\n      entity,\n      formData,\n      id\n    } = payload;\n    const partApi = getPartApi(entity);\n    const {\n      message\n    } = yield call(partApi.update, id, formData);\n    yield call(closePartDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* closePartDialog() {\n  try {\n    yield putResolve(partStore.actions.removePart());\n    const partList = yield* select(partStore.selectPartList);\n    const entity = yield* select(commonStore.selectEntity);\n\n    if (partList.length > 0) {\n      const {\n        detail\n      } = _.last(partList);\n\n      const partEntity = detail.is_assembly ? 'assembly' : 'item';\n      const partDetail = yield call(fetchPartDetail, partEntity, detail.id);\n      yield put(partStore.actions.updateCurrentPart(partDetail));\n\n      if (isAssemblyByDpn(detail.dpn)) {\n        yield call(getDrawingItems, {\n          type: '',\n          payload: partDetail.related_drawing.value\n        });\n      }\n\n      return;\n    }\n\n    if (entity === 'drawing') {\n      yield put(drawingStore.sagaGetDrawingPartList());\n    } else {\n      const getListAction = createAction(`${entity}/${actionTypes.GET_LIST}`);\n      yield put(getListAction());\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\n\nfunction* itemSelectEquiv({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const {\n      type,\n      equiv\n    } = payload;\n    const {\n      standards\n    } = yield call(equivalenceApi.getEquivalenceStandards, equiv.value);\n    const equivKey = type === 'manufacturing_standard' ? 'manufacturer_equiv' : 'material_equiv';\n    const standardKey = `${equivKey}_standards`;\n    yield put(partStore.actions.updateCurrentPart({\n      [equivKey]: equiv,\n      [standardKey]: standards\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* openManuDialog({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    yield put(partStore.actions.updateCurrentPart(payload));\n\n    const _yield$call3 = yield call(manufacturerApi.getInitDataForCE),\n          {\n      next_code\n    } = _yield$call3,\n          initData = _objectWithoutProperties(_yield$call3, [\"next_code\"]);\n\n    yield all([putResolve(partStore.actions.setManuDetail({\n      manufacturer_id: next_code\n    })), putResolve(partStore.actions.setManuInitData(initData))]);\n    yield put(partStore.actions.setManuDialogOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* createManu({\n  payload\n}) {\n  yield put(partStore.actions.setManuDialogLoading(true));\n\n  try {\n    const {\n      message,\n      id\n    } = yield call(manufacturerApi.create, payload);\n    const {\n      next_code\n    } = yield call(manufacturerApi.getInitDataForCE);\n    const {\n      name\n    } = payload;\n    yield putResolve(partStore.actions.setManuDetail(_objectSpread(_objectSpread({}, partStore.initialState.manufacturer.detail), {}, {\n      manufacturer_id: next_code\n    })));\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(partStore.actions.addManufacturer({\n      manufacturer_id: id,\n      reference: '',\n      description: name\n    }))]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setManuDialogLoading(false));\n}\n\nfunction* closeManuDialog() {\n  yield putResolve(partStore.actions.setManuDialogOpen(false));\n  yield put(partStore.actions.setManuDetail({\n    manufacturer_id: null,\n    name: ''\n  }));\n}\n\nfunction* getManuId({\n  payload\n}) {\n  yield put(partStore.actions.setManuDialogLoading(true));\n\n  try {\n    const {\n      generated_code\n    } = yield call(manufacturerApi.getNextCode, payload.manufacturer_id);\n    yield put(partStore.actions.setManuDetail(_objectSpread(_objectSpread({}, payload), {}, {\n      manufacturer_id: generated_code\n    })));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setManuDialogLoading(false));\n}\n\nfunction* getItemCopy({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const data = yield call(partRefApi.getDetail, payload.value); // get the allowed attributes\n\n    const part = _.pick(data.part, ['descriptions', 'manufacturer_equiv', 'manufacturers', 'mass', 'material_equiv', 'unit', 'manufacturer_equiv_standards', 'material_equiv_standards']);\n\n    part.manufacturer_equiv = data.part.manufacturer_equiv_object;\n    part.material_equiv = data.part.material_equiv_object;\n    yield put(partStore.actions.updateCurrentPart(part));\n    yield put(commonStore.actions.setSuccessMessage(data.message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* getDrawingItems({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const {\n      items\n    } = yield call(drawingApi.getItemList, payload);\n    yield put(partStore.actions.setDrawingItems(items));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* partSaga() {\n  yield takeLatest(partStore.sagaOpenCreateDialog, openPartCreateDialog);\n  yield takeLatest(partStore.sagaChangeDrawing, changePartDrawing);\n  yield takeLatest(partStore.sagaGetPartRefItem, getPartRefItem);\n  yield takeLatest(partStore.sagaCreate, createPart);\n  yield takeLatest(partStore.sagaOpenUpdateDialog, openPartUpdateDialog);\n  yield takeLatest(partStore.sagaUpdate, updatePart);\n  yield takeEvery(partStore.sagaCloseDialog, closePartDialog);\n  yield takeLatest(partStore.sagaSelectEquiv, itemSelectEquiv);\n  yield takeLatest(partStore.sagaOpenManuDialog, openManuDialog);\n  yield takeEvery(partStore.sagaCreateManu, createManu);\n  yield takeEvery(partStore.sagaCloseManuDialog, closeManuDialog);\n  yield takeLatest(partStore.sagaGetManuId, getManuId);\n  yield takeLatest(partStore.sagaGetItemCopy, getItemCopy);\n  yield takeLatest(partStore.sagaGetDrawingItems, getDrawingItems);\n}\n\nexport default partSaga;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/saga/part.saga.ts"],"names":["takeLatest","call","put","putResolve","takeEvery","select","all","createAction","_","partStore","commonStore","drawingStore","errorSaga","StatusCode","getDefaultValues","actionTypes","isAssemblyByDpn","itemApi","assemblyApi","partRefApi","equivalenceApi","manufacturerApi","drawingApi","getPartApi","entity","fetchGenerateCode","drawing","partApi","generated_code","getGenerateCode","value","openPartCreateDialog","payload","actions","setLoadingPage","userJob","userDrawing","selectUserValueJob","selectUserValueDrawing","initDetail","itemDetail","assemblyDetail","getInitDataForCE","job_id_pk","permissions","wiki_page","initData","defaultValues","parameters","unit","drawing_id","job_id","dpn","setInitData","addPart","detail","error","handleError","changePartDrawing","setPartLoading","formData","updateCurrentPart","getPartRefItem","selected_part","isNull","reference_to","part","message","getReferencedPart","item","pick","description","entity_id","id","manufacturer_equiv","manufacturer_equiv_object","material_equiv","material_equiv_object","setConfirmRef","open","setSuccessMessage","response","isNil","status","data","BAD_REQUEST","createPart","create","generateCode","resetCurrentPart","setPartTab","getPartDpn","regexItem","regexAssembly","regex","match","isArray","fetchPartDetail","getDetail","partDetail","related_drawing","items","components","map","quantity","item_id","openPartUpdateDialog","updatePart","update","closePartDialog","removePart","partList","selectPartList","selectEntity","length","last","partEntity","is_assembly","getDrawingItems","type","sagaGetDrawingPartList","getListAction","GET_LIST","itemSelectEquiv","equiv","standards","getEquivalenceStandards","equivKey","standardKey","openManuDialog","next_code","setManuDetail","manufacturer_id","setManuInitData","setManuDialogOpen","createManu","setManuDialogLoading","name","initialState","manufacturer","addManufacturer","reference","closeManuDialog","getManuId","getNextCode","getItemCopy","getItemList","setDrawingItems","partSaga","sagaOpenCreateDialog","sagaChangeDrawing","sagaGetPartRefItem","sagaCreate","sagaOpenUpdateDialog","sagaUpdate","sagaCloseDialog","sagaSelectEquiv","sagaOpenManuDialog","sagaCreateManu","sagaCloseManuDialog","sagaGetManuId","sagaGetItemCopy","sagaGetDrawingItems"],"mappings":"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","sourcesContent":["import { takeLatest, call, put, putResolve, takeEvery } from 'redux-saga/effects'\nimport { select, all } from 'typed-redux-saga'\nimport { createAction } from '@reduxjs/toolkit'\nimport _ from 'lodash'\n\nimport { partStore, commonStore, drawingStore } from '@/store/reducers'\nimport * as errorSaga from '@/store/saga/errorSaga'\nimport { StatusCode } from '@/utils/StatusCode'\nimport { getDefaultValues } from '@/utils/getDefaultValues'\nimport { actionTypes } from '@/utils/constant'\nimport { isAssemblyByDpn } from '@/utils/isAssembly'\n\nimport itemApi from '@/apis/item.api'\nimport assemblyApi from '@/apis/assembly.api'\nimport partRefApi from '@/apis/part.api'\nimport equivalenceApi from '@/apis/equivalence.api'\nimport manufacturerApi from '@/apis/manufacturer.api'\nimport drawingApi from '@/apis/drawing.api'\n\nimport type { DataForDropdown } from '@/types/Common'\nimport type { PartEntity } from '@/types/Part'\n\nconst getPartApi = (entity: PartEntity) => (entity === 'item' ? itemApi : assemblyApi)\n\nfunction* fetchGenerateCode(entity: PartEntity, drawing: DataForDropdown) {\n  const partApi = getPartApi(entity)\n  const { generated_code } = yield call(partApi.getGenerateCode, drawing.value)\n  return generated_code\n}\n\nfunction* openPartCreateDialog({ payload }: ReturnType<typeof partStore.sagaOpenCreateDialog>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const partApi = getPartApi(payload)\n    const { userJob, userDrawing } = yield* all({\n      userJob: select(commonStore.selectUserValueJob),\n      userDrawing: select(commonStore.selectUserValueDrawing)\n    })\n    const initDetail = payload === 'item' ? partStore.itemDetail : partStore.assemblyDetail\n    const { permissions, wiki_page, ...initData } = yield call(partApi.getInitDataForCE, {\n      job_id_pk: userJob.value\n    })\n    const defaultValues = getDefaultValues(initData.parameters, { unit: 'UNIT' }, initDetail)\n    defaultValues.drawing_id = userDrawing.value < 0 ? null : userDrawing\n    defaultValues.job_id = userJob.value\n    if (defaultValues.drawing_id) {\n      defaultValues.dpn = yield call(fetchGenerateCode, payload, defaultValues.drawing_id)\n    }\n    yield putResolve(partStore.actions.setInitData(initData))\n    yield put(partStore.actions.addPart({ detail: defaultValues, wiki_page, permissions: permissions[payload] }))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* changePartDrawing({ payload }: ReturnType<typeof partStore.sagaChangeDrawing>) {\n  yield put(partStore.actions.setPartLoading(true))\n  try {\n    const { formData, drawing, entity } = payload\n    const partApi = getPartApi(entity)\n    const { generated_code } = yield call(partApi.getGenerateCode, drawing.value)\n    yield put(partStore.actions.updateCurrentPart({ ...formData, dpn: generated_code, drawing_id: drawing }))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(partStore.actions.setPartLoading(false))\n}\n\nfunction* getPartRefItem({ payload }: ReturnType<typeof partStore.sagaGetPartRefItem>) {\n  yield put(partStore.actions.setPartLoading(true))\n  try {\n    const { selected_part } = payload\n    if (_.isNull(selected_part)) {\n      yield put(partStore.actions.updateCurrentPart({ reference_to: null }))\n    } else {\n      const { part, message } = yield call(partRefApi.getReferencedPart, payload)\n      const item = _.pick(part, [\n        'descriptions',\n        'manufacturer_equiv',\n        'manufacturers',\n        'mass',\n        'material_equiv',\n        'unit',\n        'manufacturer_equiv_standards',\n        'material_equiv_standards'\n      ]) as any\n      item.reference_to = {\n        description: '',\n        entity_id: part.dpn,\n        value: part.id\n      }\n      item.manufacturer_equiv = part.manufacturer_equiv_object\n      item.material_equiv = part.material_equiv_object\n      yield putResolve(partStore.actions.updateCurrentPart(item))\n      if (selected_part !== part.id) {\n        yield put(partStore.actions.setConfirmRef({ open: true, message }))\n      } else {\n        yield put(commonStore.actions.setSuccessMessage(message))\n      }\n    }\n  } catch (error) {\n    const { response } = error\n    if (_.isNil(response)) {\n      yield errorSaga.handleError(error)\n    } else {\n      const { status, data } = response\n      if (status === StatusCode.BAD_REQUEST) {\n        yield put(partStore.actions.setConfirmRef({ open: true, message: data.message }))\n      }\n    }\n  }\n  yield put(partStore.actions.setPartLoading(false))\n}\n\nfunction* createPart({ payload }: ReturnType<typeof partStore.sagaCreate>) {\n  yield put(partStore.actions.setPartLoading(true))\n  try {\n    const { entity, formData } = payload\n    const partApi = getPartApi(entity)\n    const { message } = yield call(partApi.create, formData)\n    const { userJob, userDrawing } = yield* all({\n      userJob: select(commonStore.selectUserValueJob),\n      userDrawing: select(commonStore.selectUserValueDrawing)\n    })\n    let generateCode = ''\n    if (userDrawing.value >= 0) {\n      generateCode = yield call(fetchGenerateCode, entity, userDrawing)\n    }\n    yield putResolve(partStore.actions.resetCurrentPart({ userJob, userDrawing, generateCode }))\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(partStore.actions.setPartTab(0))])\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(partStore.actions.setPartLoading(false))\n}\n\nconst getPartDpn = (entity: PartEntity, dpn: string) => {\n  // const type = entity === 'item' ? 'H' : 'G'\n  const regexItem = /H\\S+/g\n  const regexAssembly = /G\\S+/g\n  const regex = entity === 'item' ? regexItem : regexAssembly\n  const match = dpn.match(regex)\n  if (_.isArray(match)) {\n    return match[0]\n  }\n  return ''\n}\n\nfunction* fetchPartDetail(entity: PartEntity, id: number) {\n  const partApi = getPartApi(entity)\n  const data = yield call(partApi.getDetail, id)\n  const partDetail = data[entity]\n  partDetail.dpn = getPartDpn(entity, partDetail.dpn)\n  partDetail.drawing_id = partDetail.related_drawing\n  partDetail.items = (partDetail.components || []).map(({ id, quantity }) => ({\n    item_id: id,\n    quantity\n  }))\n\n  if (entity === 'item') {\n    partDetail.manufacturer_equiv = partDetail.manufacturer_equiv_object\n    partDetail.material_equiv = partDetail.material_equiv_object\n  }\n  return partDetail\n}\n\nfunction* openPartUpdateDialog({ payload }: ReturnType<typeof partStore.sagaOpenUpdateDialog>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const { id, entity } = payload\n    const partApi = getPartApi(entity)\n    const partDetail = yield call(fetchPartDetail, entity, id)\n    const { permissions, wiki_page, ...initData } = yield call(partApi.getInitDataForCE, {\n      job_id_pk: partDetail.job_id\n    })\n    yield putResolve(partStore.actions.setInitData(initData))\n    yield put(partStore.actions.addPart({ detail: partDetail, wiki_page, permissions: permissions[entity] }))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* updatePart({ payload }: ReturnType<typeof partStore.sagaUpdate>) {\n  yield put(partStore.actions.setPartLoading(true))\n  try {\n    const { entity, formData, id } = payload\n    const partApi = getPartApi(entity)\n    const { message } = yield call(partApi.update, id, formData)\n    yield call(closePartDialog)\n    yield put(commonStore.actions.setSuccessMessage(message))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n\n  yield put(partStore.actions.setPartLoading(false))\n}\n\nfunction* closePartDialog() {\n  try {\n    yield putResolve(partStore.actions.removePart())\n    const partList = yield* select(partStore.selectPartList)\n    const entity = yield* select(commonStore.selectEntity)\n    if (partList.length > 0) {\n      const { detail } = _.last(partList)\n      const partEntity = (detail as any).is_assembly ? 'assembly' : 'item'\n      const partDetail = yield call(fetchPartDetail, partEntity, detail.id)\n      yield put(partStore.actions.updateCurrentPart(partDetail))\n      if (isAssemblyByDpn(detail.dpn)) {\n        yield call(getDrawingItems, { type: '', payload: partDetail.related_drawing.value })\n      }\n      return\n    }\n    if (entity === 'drawing') {\n      yield put(drawingStore.sagaGetDrawingPartList())\n    } else {\n      const getListAction = createAction(`${entity}/${actionTypes.GET_LIST}`)\n      yield put(getListAction())\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n}\n\nfunction* itemSelectEquiv({ payload }: ReturnType<typeof partStore.sagaSelectEquiv>) {\n  yield put(partStore.actions.setPartLoading(true))\n  try {\n    const { type, equiv } = payload\n    const { standards } = yield call(equivalenceApi.getEquivalenceStandards, equiv.value)\n    const equivKey = type === 'manufacturing_standard' ? 'manufacturer_equiv' : 'material_equiv'\n    const standardKey = `${equivKey}_standards`\n    yield put(\n      partStore.actions.updateCurrentPart({\n        [equivKey]: equiv,\n        [standardKey]: standards\n      })\n    )\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(partStore.actions.setPartLoading(false))\n}\n\nfunction* openManuDialog({ payload }: ReturnType<typeof partStore.sagaOpenManuDialog>) {\n  yield put(partStore.actions.setPartLoading(true))\n  try {\n    yield put(partStore.actions.updateCurrentPart(payload))\n    const { next_code, ...initData } = yield call(manufacturerApi.getInitDataForCE)\n    yield all([\n      putResolve(partStore.actions.setManuDetail({ manufacturer_id: next_code })),\n      putResolve(partStore.actions.setManuInitData(initData))\n    ])\n    yield put(partStore.actions.setManuDialogOpen(true))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(partStore.actions.setPartLoading(false))\n}\n\nfunction* createManu({ payload }: ReturnType<typeof partStore.sagaCreateManu>) {\n  yield put(partStore.actions.setManuDialogLoading(true))\n  try {\n    const { message, id } = yield call(manufacturerApi.create, payload)\n    const { next_code } = yield call(manufacturerApi.getInitDataForCE)\n    const { name } = payload\n    yield putResolve(\n      partStore.actions.setManuDetail({ ...partStore.initialState.manufacturer.detail, manufacturer_id: next_code })\n    )\n    yield all([\n      put(commonStore.actions.setSuccessMessage(message)),\n      put(partStore.actions.addManufacturer({ manufacturer_id: id, reference: '', description: name }))\n    ])\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(partStore.actions.setManuDialogLoading(false))\n}\n\nfunction* closeManuDialog() {\n  yield putResolve(partStore.actions.setManuDialogOpen(false))\n  yield put(partStore.actions.setManuDetail({ manufacturer_id: null, name: '' }))\n}\n\nfunction* getManuId({ payload }: ReturnType<typeof partStore.sagaGetManuId>) {\n  yield put(partStore.actions.setManuDialogLoading(true))\n  try {\n    const { generated_code } = yield call(manufacturerApi.getNextCode, payload.manufacturer_id)\n    yield put(partStore.actions.setManuDetail({ ...payload, manufacturer_id: generated_code }))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(partStore.actions.setManuDialogLoading(false))\n}\n\nfunction* getItemCopy({ payload }: ReturnType<typeof partStore.sagaGetItemCopy>) {\n  yield put(partStore.actions.setPartLoading(true))\n  try {\n    const data = yield call(partRefApi.getDetail, payload.value)\n    // get the allowed attributes\n    const part = _.pick(data.part, [\n      'descriptions',\n      'manufacturer_equiv',\n      'manufacturers',\n      'mass',\n      'material_equiv',\n      'unit',\n      'manufacturer_equiv_standards',\n      'material_equiv_standards'\n    ])\n    part.manufacturer_equiv = data.part.manufacturer_equiv_object\n    part.material_equiv = data.part.material_equiv_object\n    yield put(partStore.actions.updateCurrentPart(part))\n    yield put(commonStore.actions.setSuccessMessage(data.message))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n\n  yield put(partStore.actions.setPartLoading(false))\n}\n\nfunction* getDrawingItems({ payload }: ReturnType<typeof partStore.sagaGetDrawingItems>) {\n  yield put(partStore.actions.setPartLoading(true))\n  try {\n    const { items } = yield call(drawingApi.getItemList, payload)\n    yield put(partStore.actions.setDrawingItems(items))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(partStore.actions.setPartLoading(false))\n}\n\nfunction* partSaga() {\n  yield takeLatest(partStore.sagaOpenCreateDialog, openPartCreateDialog)\n  yield takeLatest(partStore.sagaChangeDrawing, changePartDrawing)\n  yield takeLatest(partStore.sagaGetPartRefItem, getPartRefItem)\n  yield takeLatest(partStore.sagaCreate, createPart)\n  yield takeLatest(partStore.sagaOpenUpdateDialog, openPartUpdateDialog)\n  yield takeLatest(partStore.sagaUpdate, updatePart)\n  yield takeEvery(partStore.sagaCloseDialog, closePartDialog)\n  yield takeLatest(partStore.sagaSelectEquiv, itemSelectEquiv)\n  yield takeLatest(partStore.sagaOpenManuDialog, openManuDialog)\n  yield takeEvery(partStore.sagaCreateManu, createManu)\n  yield takeEvery(partStore.sagaCloseManuDialog, closeManuDialog)\n  yield takeLatest(partStore.sagaGetManuId, getManuId)\n  yield takeLatest(partStore.sagaGetItemCopy, getItemCopy)\n  yield takeLatest(partStore.sagaGetDrawingItems, getDrawingItems)\n}\n\nexport default partSaga\n"]},"metadata":{},"sourceType":"module"}