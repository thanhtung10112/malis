{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport { useTranslation } from 'next-i18next';\nimport useStyles from '@/styles/page/layout';\nimport NextLink from 'next/link';\nimport { DialogParameterTypeCreateEdit, useConfirm, EnableIcon, DisableIcon, EditIcon, CreateIcon, DeleteIcon, AppLayout } from '@/components';\nimport { commonStore, parameterTypeStore } from '@/store/reducers';\nimport * as columnProperties from '@/utils/columnProperties';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\n\nfunction ParameterTypes() {\n  const {\n    t\n  } = useTranslation('parameter_type');\n  const {\n    confirm\n  } = useConfirm();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const breadcrumbData = [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'System Management',\n    href: '/users'\n  }, {\n    label: 'Parameters Management',\n    href: '/parameter_types'\n  }];\n  const permissions = useSelector(parameterTypeStore.selectPermissions);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const {\n    wiki_page,\n    column_tooltips\n  } = useSelector(parameterTypeStore.selectInitDataForList);\n\n  const handleOpenCreateDialog = () => {\n    dispatch(parameterTypeStore.extraActions.openCreateDialog());\n  };\n\n  const handleOpenUpdateDialog = id => async () => {\n    dispatch(parameterTypeStore.extraActions.openUpdateDialog(id));\n  };\n\n  const executeOperation = operation => async () => {\n    const description = getMessageConfirm(t, 'parameter_type', selectedRows, operation);\n    const result = await confirm({\n      description\n    });\n\n    if (result === 'OK') {\n      dispatch(parameterTypeStore.extraActions.executeOperation({\n        operation,\n        parameter_types: selectedRows\n      }));\n    }\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    description: column_tooltips.edit,\n    field: 'id',\n    headerName: 'Edit',\n    renderCell: param => {\n      return /*#__PURE__*/_jsx(EditIcon, {\n        onClick: handleOpenUpdateDialog(param.value)\n      });\n    }\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.type_id,\n    field: 'type_id',\n    headerName: 'Type',\n    width: 100,\n    renderCell: params => /*#__PURE__*/_jsx(NextLink, {\n      href: `/parameter_types/${params.row.id}`,\n      children: /*#__PURE__*/_jsx(\"a\", {\n        className: classes.link,\n        children: params.value\n      })\n    })\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.description,\n    field: 'description',\n    headerName: 'Description',\n    flex: 0.6\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.rightColumn), {}, {\n    description: column_tooltips.nbr_default,\n    field: 'nbr_default',\n    headerName: 'Max default',\n    flex: 0.15\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.is_multilingual,\n    field: 'is_multilingual',\n    headerName: 'Multilingual',\n    flex: 0.15,\n\n    renderCell(param) {\n      return param.value ? /*#__PURE__*/_jsx(EnableIcon, {}) : /*#__PURE__*/_jsx(DisableIcon, {});\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.status,\n    field: 'status',\n    headerName: 'Status',\n    flex: 0.15,\n\n    renderCell(param) {\n      return param.value ? /*#__PURE__*/_jsx(EnableIcon, {}) : /*#__PURE__*/_jsx(DisableIcon, {});\n    }\n\n  })];\n  const buttons = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create),\n    onClick: handleOpenCreateDialog\n  }, {\n    label: t('common:button.delete'),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.delete) || selectedRows.length === 0,\n    onClick: executeOperation('delete'),\n    startIcon: /*#__PURE__*/_jsx(DeleteIcon, {})\n  }, {\n    label: t('common:button.enable'),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable) || selectedRows.length === 0,\n    onClick: executeOperation('enable'),\n    startIcon: /*#__PURE__*/_jsx(EnableIcon, {})\n  }, {\n    label: t('common:button.disable'),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable) || selectedRows.length === 0,\n    onClick: executeOperation('disable'),\n    startIcon: /*#__PURE__*/_jsx(DisableIcon, {})\n  }];\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: \"parameter_type\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: wiki_page,\n    buttons: buttons,\n    permissions: permissions,\n    Dialogs: /*#__PURE__*/_jsx(DialogParameterTypeCreateEdit, {}),\n    tableProps: {\n      columns: columns\n    }\n  });\n}\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'parameter_type', 'advanced_filter']);\nexport default ParameterTypes;","map":null,"metadata":{},"sourceType":"module"}