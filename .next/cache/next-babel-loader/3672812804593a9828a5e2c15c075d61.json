{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice, createSelector, createAction } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nexport var name = 'drawing';\nexport var resetState = createAction(\"\".concat(name, \"/\").concat(actionTypes.RESET_STATE));\nexport var initialState = {\n  drawingGroupId: -1,\n  dataList: [],\n  detail: {\n    job_id: null,\n    drawing_id: '',\n    revision: 'A',\n    drawing_format: null,\n    drawing_purpose: null,\n    file_prefix: null,\n    file_type: null,\n    associated_documents: [],\n    customer_id: '',\n    additional_attributes: {},\n    descriptions: [],\n    exclude_from_customer: false,\n    exclude_from_other: false,\n    exclude_from_supplier: false,\n    item_list: [],\n    is_detail_drawing: false,\n    is_drawing: false,\n    is_other_document: false,\n    is_schematic: false,\n    is_specification: false\n  },\n  dialogState: {\n    open: false,\n    loading: false,\n    tab: 0,\n    historyLogs: []\n  },\n  initDataForList: {\n    drawing_groups: [{\n      description: 'All',\n      group_id: null,\n      children: []\n    }],\n    jobs: [],\n    permissions: {\n      drawing: null\n    },\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  initDataForCE: {\n    parameters: {\n      DWAT: [],\n      DWPU: [],\n      // drawing purpose\n      FPRE: [],\n      // file name prefix\n      FTYP: [],\n      // file type\n      PLFO: [],\n      // format\n      PLLA: [],\n      // descriptions\n      PLAT: [] // extended properties\n\n    },\n    wiki_page: ''\n  },\n  revisionDialog: {\n    open: false,\n    loading: false,\n    detail: {\n      new_revision: '',\n      reason: '',\n      description: ''\n    }\n  },\n  componentList: []\n};\nvar drawing = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    setDataList: function setDataList(state, _ref) {\n      var payload = _ref.payload;\n      state.dataList = payload;\n    },\n    setDialogState: function setDialogState(state, _ref2) {\n      var payload = _ref2.payload;\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n    setDialogStateOpen: function setDialogStateOpen(state, _ref3) {\n      var payload = _ref3.payload;\n      state.dialogState.open = payload;\n    },\n    setDialogStateLoading: function setDialogStateLoading(state, _ref4) {\n      var payload = _ref4.payload;\n      state.dialogState.loading = payload;\n    },\n    setDialogStateTab: function setDialogStateTab(state, _ref5) {\n      var payload = _ref5.payload;\n      state.dialogState.tab = payload;\n    },\n    setInitDataForList: function setInitDataForList(state, _ref6) {\n      var payload = _ref6.payload;\n      state.initDataForList = payload;\n    },\n    setPermissions: function setPermissions(state, _ref7) {\n      var payload = _ref7.payload;\n      state.initDataForList.permissions.drawing = payload;\n    },\n    setInitDataForCE: function setInitDataForCE(state, _ref8) {\n      var payload = _ref8.payload;\n      state.initDataForCE = payload;\n    },\n    setHistoryLogs: function setHistoryLogs(state, _ref9) {\n      var payload = _ref9.payload;\n      state.dialogState.historyLogs = payload;\n    },\n    setDetail: function setDetail(state, _ref10) {\n      var payload = _ref10.payload;\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n    setDrawingGroupId: function setDrawingGroupId(state, _ref11) {\n      var payload = _ref11.payload;\n      state.drawingGroupId = payload;\n    },\n    resetDetail: function resetDetail(state, _ref12) {\n      var userJob = _ref12.payload.userJob;\n      var detailDefaultValue = getDefaultValues(state.initDataForCE.parameters, {\n        drawing_purpose: 'DWPU',\n        file_prefix: 'FPRE',\n        file_type: 'FTYP',\n        drawing_format: 'PLFO'\n      }, initialState.detail);\n      detailDefaultValue.job_id = userJob.value > -1 ? userJob.value : null;\n      state.componentList = initialState.componentList;\n      state.detail = _objectSpread({}, detailDefaultValue);\n      state.dialogState.tab = 0;\n    },\n    setRevisionDialogOpen: function setRevisionDialogOpen(state, _ref13) {\n      var payload = _ref13.payload;\n      state.revisionDialog.open = payload;\n    },\n    setRevisionDialogLoading: function setRevisionDialogLoading(state, _ref14) {\n      var payload = _ref14.payload;\n      state.revisionDialog.loading = payload;\n    },\n    setRevisionDialogDetail: function setRevisionDialogDetail(state, _ref15) {\n      var payload = _ref15.payload;\n      state.revisionDialog.detail = _objectSpread(_objectSpread({}, state.revisionDialog.detail), payload);\n    },\n    resetRevisionDialogDetail: function resetRevisionDialogDetail(state) {\n      state.revisionDialog.detail = _objectSpread({}, initialState.revisionDialog.detail);\n    },\n    setComponentList: function setComponentList(state, _ref16) {\n      var payload = _ref16.payload;\n      state.componentList = payload;\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n}); // Actions\n\nvar actions = drawing.actions; // Saga actions\n\nexport { actions };\nexport var sagaGetList = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_LIST));\nexport var sagaOpenCreateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_CREATE_DIALOG));\nexport var sagaOpenUpdateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_UPDATE_DIALOG));\nexport var sagaOpenCreatePartDialog = createAction(\"\".concat(name, \"/OPEN_CREATE_PART_DIALOG\"));\nexport var sagaChangeUserJob = createAction(\"\".concat(name, \"/\").concat(actionTypes.CHANGE_USER_JOB));\nexport var sagaCloseDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.CLOSE_DIALOG));\nexport var sagaCreate = createAction(\"\".concat(name, \"/\").concat(actionTypes.CREATE));\nexport var sagaUpdate = createAction(\"\".concat(name, \"/\").concat(actionTypes.UPDATE));\nexport var sagaOpenRevDialog = createAction(\"\".concat(name, \"/OPEN_REV_DIALOG\"));\nexport var sagaSaveNewRev = createAction(\"\".concat(name, \"/SAVE_NEW_REV\"));\nexport var sagaGetDrawingPartList = createAction(\"\".concat(name, \"/GET_DRAWING_PART_LIST\")); // Selectors\n\nvar selectState = function selectState(state) {\n  return state[name];\n};\n\nexport var selectDialogState = createSelector(selectState, function (state) {\n  return state.dialogState;\n});\nexport var selectDataList = createSelector(selectState, function (state) {\n  return state.dataList;\n});\nexport var selectPermissions = createSelector(selectState, function (state) {\n  return state.initDataForList.permissions.drawing;\n});\nexport var selectDrawingGroups = createSelector(selectState, function (_ref17) {\n  var initDataForList = _ref17.initDataForList;\n  var drawing_groups = initDataForList.drawing_groups;\n  return drawing_groups[0];\n});\nexport var selectDetail = createSelector(selectState, function (_ref18) {\n  var detail = _ref18.detail;\n  return detail;\n});\nexport var selectInitDataForList = createSelector(selectState, function (state) {\n  return state.initDataForList;\n});\nexport var selectInitDataForCE = createSelector(selectState, function (_ref19) {\n  var initDataForCE = _ref19.initDataForCE;\n  return initDataForCE;\n});\nexport var selectParameters = createSelector(selectState, function (_ref20) {\n  var initDataForCE = _ref20.initDataForCE;\n  return initDataForCE.parameters;\n});\nexport var selectDrawingGroupId = createSelector(selectState, function (_ref21) {\n  var drawingGroupId = _ref21.drawingGroupId;\n  return drawingGroupId;\n});\nexport var selectRevisionDialog = createSelector(selectState, function (state) {\n  return state.revisionDialog;\n});\nexport var selectComponentList = createSelector(selectState, function (state) {\n  return state.componentList;\n});\nexport default drawing;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/reducers/drawing.reducer.ts"],"names":["createSlice","createSelector","createAction","actionTypes","getDefaultValues","name","resetState","RESET_STATE","initialState","drawingGroupId","dataList","detail","job_id","drawing_id","revision","drawing_format","drawing_purpose","file_prefix","file_type","associated_documents","customer_id","additional_attributes","descriptions","exclude_from_customer","exclude_from_other","exclude_from_supplier","item_list","is_detail_drawing","is_drawing","is_other_document","is_schematic","is_specification","dialogState","open","loading","tab","historyLogs","initDataForList","drawing_groups","description","group_id","children","jobs","permissions","drawing","parameters","PLLA","wiki_page","column_tooltips","initDataForCE","DWAT","DWPU","FPRE","FTYP","PLFO","PLAT","revisionDialog","new_revision","reason","componentList","reducers","setDataList","state","payload","setDialogState","setDialogStateOpen","setDialogStateLoading","setDialogStateTab","setInitDataForList","setPermissions","setInitDataForCE","setHistoryLogs","setDetail","setDrawingGroupId","resetDetail","userJob","detailDefaultValue","value","setRevisionDialogOpen","setRevisionDialogLoading","setRevisionDialogDetail","resetRevisionDialogDetail","setComponentList","extraReducers","type","actions","sagaGetList","GET_LIST","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaOpenCreatePartDialog","sagaChangeUserJob","CHANGE_USER_JOB","sagaCloseDialog","CLOSE_DIALOG","sagaCreate","CREATE","sagaUpdate","UPDATE","sagaOpenRevDialog","sagaSaveNewRev","sagaGetDrawingPartList","selectState","selectDialogState","selectDataList","selectPermissions","selectDrawingGroups","selectDetail","selectInitDataForList","selectInitDataForCE","selectParameters","selectDrawingGroupId","selectRevisionDialog","selectComponentList"],"mappings":"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","sourcesContent":["import { createSlice, createSelector, PayloadAction, createAction } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\nimport { getDefaultValues } from '@/utils/getDefaultValues'\n\nimport type { RootReducerType } from './rootReducer'\nimport type { Entity, HistoryLog, ParameterOption } from '@/types/Common'\nimport type {\n  DrawingInitDataForCE,\n  DrawingInitDataForList,\n  DrawingItem,\n  DrawingPermissions,\n  DrawingDetail,\n  RevisionDetail\n} from '@/types/Drawing'\nimport type { PartEntity } from '@/types/Part'\n\nexport const name: Entity = 'drawing'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const initialState = {\n  drawingGroupId: -1,\n  dataList: [] as DrawingItem[],\n  detail: {\n    job_id: null,\n    drawing_id: '',\n    revision: 'A',\n    drawing_format: null,\n    drawing_purpose: null,\n    file_prefix: null,\n    file_type: null,\n    associated_documents: [],\n    customer_id: '',\n    additional_attributes: {},\n    descriptions: [],\n    exclude_from_customer: false,\n    exclude_from_other: false,\n    exclude_from_supplier: false,\n    item_list: [],\n    is_detail_drawing: false,\n    is_drawing: false,\n    is_other_document: false,\n    is_schematic: false,\n    is_specification: false\n  } as DrawingDetail,\n  dialogState: {\n    open: false,\n    loading: false,\n    tab: 0,\n    historyLogs: [] as HistoryLog[]\n  },\n  initDataForList: {\n    drawing_groups: [{ description: 'All', group_id: null, children: [] }],\n    jobs: [],\n    permissions: {\n      drawing: null\n    },\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as DrawingInitDataForList,\n  initDataForCE: {\n    parameters: {\n      DWAT: [],\n      DWPU: [], // drawing purpose\n      FPRE: [], // file name prefix\n      FTYP: [], // file type\n      PLFO: [], // format\n      PLLA: [], // descriptions\n      PLAT: [] // extended properties\n    },\n    wiki_page: ''\n  } as DrawingInitDataForCE,\n  revisionDialog: {\n    open: false,\n    loading: false,\n    detail: {\n      new_revision: '',\n      reason: '',\n      description: ''\n    } as RevisionDetail\n  },\n  componentList: []\n}\n\nconst drawing = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, { payload }: PayloadAction<DrawingItem[]>) {\n      state.dataList = payload\n    },\n    setDialogState(state, { payload }: PayloadAction<Partial<typeof initialState.dialogState>>) {\n      state.dialogState = {\n        ...state.dialogState,\n        ...payload\n      }\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setDialogStateTab(state, { payload }: PayloadAction<number>) {\n      state.dialogState.tab = payload\n    },\n    setInitDataForList(state, { payload }: PayloadAction<DrawingInitDataForList>) {\n      state.initDataForList = payload\n    },\n    setPermissions(state, { payload }: PayloadAction<DrawingPermissions>) {\n      state.initDataForList.permissions.drawing = payload\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<DrawingInitDataForCE>) {\n      state.initDataForCE = payload\n    },\n    setHistoryLogs(state, { payload }: PayloadAction<HistoryLog[]>) {\n      state.dialogState.historyLogs = payload\n    },\n    setDetail(state, { payload }: PayloadAction<Partial<DrawingDetail>>) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    setDrawingGroupId(state, { payload }: PayloadAction<number>) {\n      state.drawingGroupId = payload\n    },\n    resetDetail(state, { payload: { userJob } }) {\n      const detailDefaultValue = getDefaultValues(\n        state.initDataForCE.parameters,\n        {\n          drawing_purpose: 'DWPU',\n          file_prefix: 'FPRE',\n          file_type: 'FTYP',\n          drawing_format: 'PLFO'\n        },\n        initialState.detail\n      )\n      detailDefaultValue.job_id = userJob.value > -1 ? userJob.value : null\n      state.componentList = initialState.componentList\n      state.detail = { ...detailDefaultValue }\n      state.dialogState.tab = 0\n    },\n    setRevisionDialogOpen(state, { payload }: PayloadAction<boolean>) {\n      state.revisionDialog.open = payload\n    },\n    setRevisionDialogLoading(state, { payload }: PayloadAction<boolean>) {\n      state.revisionDialog.loading = payload\n    },\n    setRevisionDialogDetail(state, { payload }: PayloadAction<Partial<RevisionDetail>>) {\n      state.revisionDialog.detail = {\n        ...state.revisionDialog.detail,\n        ...payload\n      }\n    },\n    resetRevisionDialogDetail(state) {\n      state.revisionDialog.detail = { ...initialState.revisionDialog.detail }\n    },\n    setComponentList(state, { payload }) {\n      state.componentList = payload\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n// Actions\nexport const { actions } = drawing\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaOpenCreatePartDialog = createAction<PartEntity>(`${name}/OPEN_CREATE_PART_DIALOG`)\nexport const sagaChangeUserJob = createAction<ParameterOption>(`${name}/${actionTypes.CHANGE_USER_JOB}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaCreate = createAction<DrawingDetail>(`${name}/${actionTypes.CREATE}`)\nexport const sagaUpdate = createAction<{ id: number; drawing: DrawingDetail }>(`${name}/${actionTypes.UPDATE}`)\nexport const sagaOpenRevDialog = createAction<string>(`${name}/OPEN_REV_DIALOG`)\nexport const sagaSaveNewRev = createAction<{ revision: RevisionDetail; drawingId: number }>(`${name}/SAVE_NEW_REV`)\nexport const sagaGetDrawingPartList = createAction(`${name}/GET_DRAWING_PART_LIST`)\n\n// Selectors\nconst selectState = (state: RootReducerType) => state[name]\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.drawing)\nexport const selectDrawingGroups = createSelector(selectState, ({ initDataForList }) => {\n  const { drawing_groups } = initDataForList\n  return drawing_groups[0]\n})\n\nexport const selectDetail = createSelector(selectState, ({ detail }) => detail)\n\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\n\nexport const selectInitDataForCE = createSelector(selectState, ({ initDataForCE }) => initDataForCE)\n\nexport const selectParameters = createSelector(selectState, ({ initDataForCE }) => initDataForCE.parameters)\n\nexport const selectDrawingGroupId = createSelector(selectState, ({ drawingGroupId }) => drawingGroupId)\n\nexport const selectRevisionDialog = createSelector(selectState, (state) => state.revisionDialog)\n\nexport const selectComponentList = createSelector(selectState, (state) => state.componentList)\n\nexport default drawing\n"]},"metadata":{},"sourceType":"module"}