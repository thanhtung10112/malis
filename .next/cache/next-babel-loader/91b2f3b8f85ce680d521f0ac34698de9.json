{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport const name = 'group';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nconst initialState = {\n  dataList: [],\n  detail: {\n    description: '',\n    group_id: '',\n    name: ''\n  },\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: []\n  },\n  initDataForList: {\n    permissions: {\n      group: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  groupPermissions: {\n    groups: [],\n    permissions: []\n  },\n  initDataForCE: {\n    wiki_page: ''\n  }\n};\nconst groupSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, action) {\n      state.dataList = action.payload;\n    },\n\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      state.dialogState.historyLogs = payload;\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    setGroupPermissions(state, action) {\n      state.groupPermissions.groups = action.payload.groups;\n      state.groupPermissions.permissions = action.payload.permissions;\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    resetDetail(state) {\n      state.detail = _objectSpread({}, initialState.detail);\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n});\nexport const {\n  actions\n} = groupSlice; // Saga actions\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`);\nexport const sagaUpdate = createAction(`${name}/${actionTypes.UPDATE}`); // Permissions saga actions\n\nexport const sagaGetGroupPermissions = createAction(`${name}/GET_PERMISSIONS`);\nexport const sagaUpdateGroupPermissions = createAction(`${name}/UPDATE_PERMISSIONS`); // Selector\n\nexport const selectState = state => state[name];\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport const selectPermissions = createSelector(selectState, state => state.initDataForList.permissions.group);\nexport const selectDetail = createSelector(selectState, state => state.detail);\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectGroupPermissions = createSelector(selectState, group => group.groupPermissions);\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport const selectInitDataForCE = createSelector(selectState, state => state.initDataForCE);\nexport default groupSlice;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/reducers/group.reducer.ts"],"names":["createSlice","createAction","createSelector","actionTypes","name","resetState","RESET_STATE","initialState","dataList","detail","description","group_id","dialogState","open","loading","historyLogs","initDataForList","permissions","group","wiki_page","column_tooltips","groupPermissions","groups","initDataForCE","groupSlice","reducers","setDataList","state","action","payload","setDialogState","setHistoryLogs","setDialogStateOpen","setDialogStateLoading","setDetail","setGroupPermissions","setInitDataForList","resetDetail","setInitDataForCE","extraReducers","type","actions","sagaGetList","GET_LIST","sagaCreate","CREATE","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaCloseDialog","CLOSE_DIALOG","sagaUpdate","UPDATE","sagaGetGroupPermissions","sagaUpdateGroupPermissions","selectState","selectDataList","selectPermissions","selectDetail","selectDialogState","selectGroupPermissions","selectInitDataForList","selectInitDataForCE"],"mappings":"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","sourcesContent":["import { createSlice, createAction, PayloadAction, createSelector } from '@reduxjs/toolkit'\n\nimport { actionTypes } from '@/utils/constant'\n\nimport type { RootReducerType } from './rootReducer'\nimport type { Entity, HistoryLog } from '@/types/Common'\nimport type { GroupDetail, GroupInitDataForList, GroupInitDataForCE } from '@/types/Group'\n\nexport const name: Entity = 'group'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nconst initialState = {\n  dataList: [] as GroupDetail[],\n  detail: {\n    description: '',\n    group_id: '',\n    name: ''\n  } as GroupDetail,\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: [] as HistoryLog[]\n  },\n  initDataForList: {\n    permissions: {\n      group: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as GroupInitDataForList,\n  groupPermissions: {\n    groups: [],\n    permissions: []\n  },\n  initDataForCE: {\n    wiki_page: ''\n  } as GroupInitDataForCE\n}\n\nconst groupSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, action: PayloadAction<GroupDetail[]>) {\n      state.dataList = action.payload\n    },\n    setDialogState(state, { payload }: PayloadAction<Partial<typeof initialState.dialogState>>) {\n      state.dialogState = {\n        ...state.dialogState,\n        ...payload\n      }\n    },\n    setHistoryLogs(state, { payload }: PayloadAction<HistoryLog[]>) {\n      state.dialogState.historyLogs = payload\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setDetail(state, { payload }: PayloadAction<Partial<GroupDetail>>) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    setGroupPermissions(state, action: any) {\n      state.groupPermissions.groups = action.payload.groups\n      state.groupPermissions.permissions = action.payload.permissions\n    },\n    setInitDataForList(state, { payload }: PayloadAction<GroupInitDataForList>) {\n      state.initDataForList = payload\n    },\n    resetDetail(state) {\n      state.detail = { ...initialState.detail }\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<GroupInitDataForCE>) {\n      state.initDataForCE = payload\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\nexport const { actions } = groupSlice\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaCreate = createAction<GroupDetail>(`${name}/${actionTypes.CREATE}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaUpdate = createAction<{ id: number; formData: GroupDetail }>(`${name}/${actionTypes.UPDATE}`)\n\n// Permissions saga actions\nexport const sagaGetGroupPermissions = createAction(`${name}/GET_PERMISSIONS`)\nexport const sagaUpdateGroupPermissions = createAction<any>(`${name}/UPDATE_PERMISSIONS`)\n\n// Selector\nexport const selectState = (state: RootReducerType) => state[name]\n\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.group)\nexport const selectDetail = createSelector(selectState, (state) => state.detail)\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\n\nexport const selectGroupPermissions = createSelector(selectState, (group) => group.groupPermissions)\n\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\n\nexport const selectInitDataForCE = createSelector(selectState, (state) => state.initDataForCE)\nexport default groupSlice\n"]},"metadata":{},"sourceType":"module"}