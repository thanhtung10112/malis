{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { serverSideTranslations } from 'next-i18next/serverSideTranslations';\nimport nookies from 'nookies';\nimport axios from 'axios';\nimport { StatusCode } from '@/utils/StatusCode';\n\nconst useAuthMiddleware = (locales = []) => async context => {\n  const cookies = nookies.get(context);\n\n  try {\n    await axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}health_check/protected`, {\n      headers: {\n        Authorization: `Bearer ${cookies.token}`\n      }\n    });\n  } catch (error) {\n    var _error$response;\n\n    if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === StatusCode.UNAUTHORIZED) {\n      nookies.destroy(context, 'token');\n      nookies.destroy(context, 'redirect_to');\n      nookies.destroy(context, 'current_job_id');\n      return {\n        redirect: {\n          destination: '/login'\n        }\n      };\n    }\n  }\n\n  if (context.resolvedUrl === '/' && cookies.redirect_to) {\n    return {\n      redirect: {\n        destination: cookies.redirect_to\n      }\n    };\n  }\n\n  return {\n    props: _objectSpread({}, await serverSideTranslations(context.locale, locales))\n  };\n};\n\nexport default useAuthMiddleware;","map":null,"metadata":{},"sourceType":"module"}