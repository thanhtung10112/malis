{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useFormContext } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Grid } from '@material-ui/core';\nimport { TableMultilingualDescription, AppAutocompleteAsync, FormControllerAutocomplete, FormControllerTextField, SectionTimezone, AppAutocomplete, DropdownIcon } from '@/components';\nimport { Unless } from 'react-if';\nimport _ from 'lodash';\nimport AppNumber from '@/helper/AppNumber';\nimport { partStore, commonStore } from '@/store/reducers';\n\nvar TabGeneral = function TabGeneral() {\n  var _assemblyForm$errors$, _assemblyForm$errors$2;\n\n  var assemblyForm = useFormContext();\n  var formAssemblyData = assemblyForm.getValues();\n  var watchId = assemblyForm.watch('id', null);\n  var watchDrawingId = assemblyForm.watch('drawing_id', null);\n\n  var isCreating = _.isNil(watchId);\n\n  var dispatch = useDispatch();\n  var parameters = useSelector(partStore.selectParameters);\n  var entity = useSelector(commonStore.selectEntity);\n  var userJob = useSelector(commonStore.selectUserValueJob);\n\n  var handleChangeDrawingId = function handleChangeDrawingId(event, optionValue) {\n    var formData = assemblyForm.getValues();\n    dispatch(partStore.sagaChangeDrawing({\n      formData: formData,\n      drawing: optionValue,\n      entity: 'assembly'\n    }));\n  };\n\n  var handleBlur = function handleBlur(event) {\n    var value = event.target.value;\n\n    if (AppNumber.isNumber(value) && AppNumber.isPositiveNumber(value)) {\n      var formatValue = 'G' + value.padStart(3, '0');\n      assemblyForm.setValue('dpn', formatValue);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(AppAutocomplete, {\n            helperText: (_assemblyForm$errors$ = assemblyForm.errors.job_id) === null || _assemblyForm$errors$ === void 0 ? void 0 : _assemblyForm$errors$.message,\n            error: Boolean(assemblyForm.errors.job_id),\n            value: userJob,\n            popupIcon: null,\n            disabled: true,\n            label: \"Job\",\n            required: true,\n            primaryKeyOption: \"value\",\n            options: [],\n            renderOption: function renderOption(option) {\n              return option.description;\n            }\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(AppAutocompleteAsync, {\n            popupIcon: entity === 'drawing' ? null : /*#__PURE__*/_jsx(DropdownIcon, {}),\n            helperText: (_assemblyForm$errors$2 = assemblyForm.errors.drawing_id) === null || _assemblyForm$errors$2 === void 0 ? void 0 : _assemblyForm$errors$2.message,\n            error: Boolean(assemblyForm.errors.drawing_id),\n            disabled: !isCreating || entity === 'drawing',\n            value: watchDrawingId,\n            compName: \"drawing_list\",\n            additionalData: {\n              limit_to_job: userJob.value\n            },\n            required: true,\n            label: \"Drawing #\",\n            onChange: handleChangeDrawingId\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerTextField, {\n            disabled: !isCreating,\n            control: assemblyForm.control,\n            label: \"Assembly #\",\n            required: true,\n            name: \"dpn\",\n            onBlur: handleBlur\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n            control: assemblyForm.control,\n            label: \"Unit\",\n            name: \"unit\",\n            options: parameters.UNIT,\n            primaryKeyOption: \"value\",\n            required: true\n          })\n        }), /*#__PURE__*/_jsx(Unless, {\n          condition: isCreating,\n          children: /*#__PURE__*/_jsx(SectionTimezone, {\n            value: formAssemblyData\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsx(TableMultilingualDescription, {\n        languageList: parameters.PLLA,\n        editMode: !isCreating,\n        name: \"descriptions\",\n        tableHeight: 280,\n        control: assemblyForm.control,\n        copyable: true,\n        copyDialogProps: {\n          checkboxesToSelect: [{\n            label: 'Drawing',\n            value: 'drawing_list',\n            entity: 'drawings'\n          }, {\n            label: 'Item/Assembly',\n            value: 'part_list',\n            entity: 'parts',\n            \"default\": true\n          }]\n        }\n      })\n    })]\n  });\n};\n\nexport default TabGeneral;","map":null,"metadata":{},"sourceType":"module"}