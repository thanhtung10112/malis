{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { takeLatest, call, put, putResolve, takeEvery } from 'redux-saga/effects';\nimport { select, all } from 'typed-redux-saga';\nimport { createAction } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { partStore, commonStore, drawingStore } from '@/store/reducers';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport { StatusCode } from '@/utils/StatusCode';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nimport { actionTypes } from '@/utils/constant';\nimport { isAssemblyByDpn } from '@/utils/isAssembly';\nimport itemApi from '@/apis/item.api';\nimport assemblyApi from '@/apis/assembly.api';\nimport partRefApi from '@/apis/part.api';\nimport equivalenceApi from '@/apis/equivalence.api';\nimport manufacturerApi from '@/apis/manufacturer.api';\nimport drawingApi from '@/apis/drawing.api';\n\nconst getPartApi = entity => entity === 'item' ? itemApi : assemblyApi;\n\nfunction* fetchGenerateCode(entity, drawing) {\n  const partApi = getPartApi(entity);\n  const {\n    generated_code\n  } = yield call(partApi.getGenerateCode, drawing.value);\n  return generated_code;\n}\n\nfunction* openPartCreateDialog({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const partApi = getPartApi(payload);\n    const {\n      userJob,\n      userDrawing\n    } = yield* all({\n      userJob: select(commonStore.selectUserValueJob),\n      userDrawing: select(commonStore.selectUserValueDrawing)\n    });\n    const initDetail = payload === 'item' ? partStore.itemDetail : partStore.assemblyDetail;\n\n    const _yield$call = yield call(partApi.getInitDataForCE, {\n      job_id_pk: userJob.value\n    }),\n          {\n      permissions,\n      wiki_page\n    } = _yield$call,\n          initData = _objectWithoutProperties(_yield$call, [\"permissions\", \"wiki_page\"]);\n\n    const defaultValues = getDefaultValues(initData.parameters, {\n      unit: 'UNIT'\n    }, initDetail);\n    defaultValues.drawing_id = userDrawing.value < 0 ? null : userDrawing;\n    defaultValues.job_id = userJob.value;\n\n    if (defaultValues.drawing_id) {\n      defaultValues.dpn = yield call(fetchGenerateCode, payload, defaultValues.drawing_id);\n    }\n\n    yield putResolve(partStore.actions.setInitData(initData));\n    yield put(partStore.actions.addPart({\n      detail: defaultValues,\n      wiki_page,\n      permissions: permissions[payload]\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* changePartDrawing({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const {\n      formData,\n      drawing,\n      entity\n    } = payload;\n    const partApi = getPartApi(entity);\n    const {\n      generated_code\n    } = yield call(partApi.getGenerateCode, drawing.value);\n    yield put(partStore.actions.updateCurrentPart(_objectSpread(_objectSpread({}, formData), {}, {\n      dpn: generated_code,\n      drawing_id: drawing\n    })));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* getPartRefItem({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const {\n      selected_part\n    } = payload;\n\n    if (_.isNull(selected_part)) {\n      yield put(partStore.actions.updateCurrentPart({\n        reference_to: null\n      }));\n    } else {\n      const {\n        part,\n        message\n      } = yield call(partRefApi.getReferencedPart, payload);\n\n      const item = _.pick(part, ['descriptions', 'manufacturer_equiv', 'manufacturers', 'mass', 'material_equiv', 'unit', 'manufacturer_equiv_standards', 'material_equiv_standards']);\n\n      item.reference_to = {\n        description: '',\n        entity_id: part.dpn,\n        value: part.id\n      };\n      item.manufacturer_equiv = part.manufacturer_equiv_object;\n      item.material_equiv = part.material_equiv_object;\n      yield putResolve(partStore.actions.updateCurrentPart(item));\n\n      if (selected_part !== part.id) {\n        yield put(partStore.actions.setConfirmRef({\n          open: true,\n          message\n        }));\n      } else {\n        yield put(commonStore.actions.setSuccessMessage(message));\n      }\n    }\n  } catch (error) {\n    const {\n      response\n    } = error;\n\n    if (_.isNil(response)) {\n      yield errorSaga.handleError(error);\n    } else {\n      const {\n        status,\n        data\n      } = response;\n\n      if (status === StatusCode.BAD_REQUEST) {\n        yield put(partStore.actions.setConfirmRef({\n          open: true,\n          message: data.message\n        }));\n      }\n    }\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* createPart({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const {\n      entity,\n      formData\n    } = payload;\n    const partApi = getPartApi(entity);\n    const {\n      message\n    } = yield call(partApi.create, formData);\n    const {\n      userJob,\n      userDrawing\n    } = yield* all({\n      userJob: select(commonStore.selectUserValueJob),\n      userDrawing: select(commonStore.selectUserValueDrawing)\n    });\n    let generateCode = '';\n\n    if (userDrawing.value >= 0) {\n      generateCode = yield call(fetchGenerateCode, entity, userDrawing);\n    }\n\n    yield putResolve(partStore.actions.resetCurrentPart({\n      userJob,\n      userDrawing,\n      generateCode\n    }));\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(partStore.actions.setPartTab(0))]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nconst getPartDpn = (entity, dpn) => {\n  // const type = entity === 'item' ? 'H' : 'G'\n  const regexItem = /H\\S+/g;\n  const regexAssembly = /G\\S+/g;\n  const regex = entity === 'item' ? regexItem : regexAssembly;\n  const match = dpn.match(regex);\n\n  if (_.isArray(match)) {\n    return match[0];\n  }\n\n  return '';\n};\n\nfunction* fetchPartDetail(entity, id) {\n  const partApi = getPartApi(entity);\n  const data = yield call(partApi.getDetail, id);\n  const partDetail = data[entity];\n  partDetail.dpn = getPartDpn(entity, partDetail.dpn);\n  partDetail.drawing_id = partDetail.related_drawing;\n  partDetail.items = (partDetail.components || []).map(({\n    id,\n    quantity\n  }) => ({\n    item_id: id,\n    quantity\n  }));\n\n  if (entity === 'item') {\n    partDetail.manufacturer_equiv = partDetail.manufacturer_equiv_object;\n    partDetail.material_equiv = partDetail.material_equiv_object;\n  }\n\n  return partDetail;\n}\n\nfunction* openPartUpdateDialog({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      id,\n      entity\n    } = payload;\n    const partApi = getPartApi(entity);\n    const partDetail = yield call(fetchPartDetail, entity, id);\n\n    const _yield$call2 = yield call(partApi.getInitDataForCE, {\n      job_id_pk: partDetail.job_id\n    }),\n          {\n      permissions,\n      wiki_page\n    } = _yield$call2,\n          initData = _objectWithoutProperties(_yield$call2, [\"permissions\", \"wiki_page\"]);\n\n    yield putResolve(partStore.actions.setInitData(initData));\n    yield put(partStore.actions.addPart({\n      detail: partDetail,\n      wiki_page,\n      permissions: permissions[entity]\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* updatePart({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const {\n      entity,\n      formData,\n      id\n    } = payload;\n    const partApi = getPartApi(entity);\n    const {\n      message\n    } = yield call(partApi.update, id, formData);\n    yield call(closePartDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* closePartDialog() {\n  try {\n    yield putResolve(partStore.actions.removePart());\n    const partList = yield* select(partStore.selectPartList);\n    const entity = yield* select(commonStore.selectEntity);\n\n    if (partList.length > 0) {\n      const {\n        detail\n      } = _.last(partList);\n\n      const partEntity = detail.is_assembly ? 'assembly' : 'item';\n      const partDetail = yield call(fetchPartDetail, partEntity, detail.id);\n      yield put(partStore.actions.updateCurrentPart(partDetail));\n\n      if (isAssemblyByDpn(detail.dpn)) {\n        yield call(getDrawingItems, {\n          type: '',\n          payload: partDetail.related_drawing.value\n        });\n      }\n\n      return;\n    }\n\n    if (entity === 'drawing') {\n      yield put(drawingStore.sagaGetDrawingPartList());\n    } else {\n      const getListAction = createAction(`${entity}/${actionTypes.GET_LIST}`);\n      yield put(getListAction());\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\n\nfunction* itemSelectEquiv({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const {\n      type,\n      equiv\n    } = payload;\n    const {\n      standards\n    } = yield call(equivalenceApi.getEquivalenceStandards, equiv.value);\n    const equivKey = type === 'manufacturing_standard' ? 'manufacturer_equiv' : 'material_equiv';\n    const standardKey = `${equivKey}_standards`;\n    yield put(partStore.actions.updateCurrentPart({\n      [equivKey]: equiv,\n      [standardKey]: standards\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* openManuDialog({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    yield put(partStore.actions.updateCurrentPart(payload));\n\n    const _yield$call3 = yield call(manufacturerApi.getInitDataForCE),\n          {\n      next_code\n    } = _yield$call3,\n          initData = _objectWithoutProperties(_yield$call3, [\"next_code\"]);\n\n    yield all([putResolve(partStore.actions.setManuDetail({\n      manufacturer_id: next_code\n    })), putResolve(partStore.actions.setManuInitData(initData))]);\n    yield put(partStore.actions.setManuDialogOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* createManu({\n  payload\n}) {\n  yield put(partStore.actions.setManuDialogLoading(true));\n\n  try {\n    const {\n      message,\n      id\n    } = yield call(manufacturerApi.create, payload);\n    const {\n      next_code\n    } = yield call(manufacturerApi.getInitDataForCE);\n    const {\n      name\n    } = payload;\n    yield putResolve(partStore.actions.setManuDetail(_objectSpread(_objectSpread({}, partStore.initialState.manufacturer.detail), {}, {\n      manufacturer_id: next_code\n    })));\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(partStore.actions.addManufacturer({\n      manufacturer_id: id,\n      reference: '',\n      description: name\n    }))]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setManuDialogLoading(false));\n}\n\nfunction* closeManuDialog() {\n  yield putResolve(partStore.actions.setManuDialogOpen(false));\n  yield put(partStore.actions.setManuDetail({\n    manufacturer_id: null,\n    name: ''\n  }));\n}\n\nfunction* getManuId({\n  payload\n}) {\n  yield put(partStore.actions.setManuDialogLoading(true));\n\n  try {\n    const {\n      generated_code\n    } = yield call(manufacturerApi.getNextCode, payload.manufacturer_id);\n    yield put(partStore.actions.setManuDetail(_objectSpread(_objectSpread({}, payload), {}, {\n      manufacturer_id: generated_code\n    })));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setManuDialogLoading(false));\n}\n\nfunction* getItemCopy({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const data = yield call(partRefApi.getDetail, payload.value); // get the allowed attributes\n\n    const part = _.pick(data.part, ['descriptions', 'manufacturer_equiv', 'manufacturers', 'mass', 'material_equiv', 'unit', 'manufacturer_equiv_standards', 'material_equiv_standards']);\n\n    part.manufacturer_equiv = data.part.manufacturer_equiv_object;\n    part.material_equiv = data.part.material_equiv_object;\n    yield put(partStore.actions.updateCurrentPart(part));\n    yield put(commonStore.actions.setSuccessMessage(data.message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* getDrawingItems({\n  payload\n}) {\n  yield put(partStore.actions.setPartLoading(true));\n\n  try {\n    const {\n      items\n    } = yield call(drawingApi.getItemList, payload);\n    yield put(partStore.actions.setDrawingItems(items));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(partStore.actions.setPartLoading(false));\n}\n\nfunction* partSaga() {\n  yield takeLatest(partStore.sagaOpenCreateDialog, openPartCreateDialog);\n  yield takeLatest(partStore.sagaChangeDrawing, changePartDrawing);\n  yield takeLatest(partStore.sagaGetPartRefItem, getPartRefItem);\n  yield takeLatest(partStore.sagaCreate, createPart);\n  yield takeLatest(partStore.sagaOpenUpdateDialog, openPartUpdateDialog);\n  yield takeLatest(partStore.sagaUpdate, updatePart);\n  yield takeEvery(partStore.sagaCloseDialog, closePartDialog);\n  yield takeLatest(partStore.sagaSelectEquiv, itemSelectEquiv);\n  yield takeLatest(partStore.sagaOpenManuDialog, openManuDialog);\n  yield takeEvery(partStore.sagaCreateManu, createManu);\n  yield takeEvery(partStore.sagaCloseManuDialog, closeManuDialog);\n  yield takeLatest(partStore.sagaGetManuId, getManuId);\n  yield takeLatest(partStore.sagaGetItemCopy, getItemCopy);\n  yield takeLatest(partStore.sagaGetDrawingItems, getDrawingItems);\n}\n\nexport default partSaga;","map":null,"metadata":{},"sourceType":"module"}