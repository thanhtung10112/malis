{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchItemInitDataForList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchItemList),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(getItemList),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(changeUserJob),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(changeUserDrawing),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(removeItem),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(itemSaga);\n\nimport { takeEvery, put, putResolve } from 'redux-saga/effects';\nimport { select, call, all } from 'typed-redux-saga';\nimport { itemStore, commonStore, advancedFilterActions, drawingStore, summaryReportActions } from '@/store/reducers';\nimport _ from 'lodash';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport itemApi from '@/apis/item.api';\nimport partApi from '@/apis/part.api';\n/**\n * This function is used to get init data for list of item entity\n */\n\nexport function fetchItemInitDataForList() {\n  var userJob, data;\n  return _regeneratorRuntime.wrap(function fetchItemInitDataForList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.delegateYield(select(commonStore.selectUserValueJob), \"t0\", 1);\n\n        case 1:\n          userJob = _context.t0;\n          _context.next = 4;\n          return call(itemApi.getInitDataForList, {\n            job_id_pk: userJob.value\n          });\n\n        case 4:\n          data = _context.sent;\n\n          // when logged in as the fresh user, the API will not send the selected_job attribute\n          // then we will set selected_job as an empty object\n          if (_.isNull(data.selected_job)) {\n            data.selected_job = {};\n          } // the API will not send the selected_job attribute if you are in the all_job or all_standard mode,\n          // then we will set selected_job = current selected user job\n\n\n          if (userJob.value === -1 || userJob.value === -2) {\n            data.selected_job = userJob;\n          }\n\n          _context.next = 9;\n          return put(commonStore.actions.setUserValueJob(data.selected_job));\n\n        case 9:\n          _context.next = 11;\n          return put(itemStore.actions.setInitDataForList(data));\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n/**\n * this function is used to get item list based on user_job, user_drawing and common search attributes\n */\n\nexport function fetchItemList() {\n  var _yield$all, tableState, searchQuery, filterData, userJob, userDrawing, page, per_page, data;\n\n  return _regeneratorRuntime.wrap(function fetchItemList$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.delegateYield(all({\n            tableState: select(commonStore.selectTableState),\n            searchQuery: select(commonStore.selectSearchQuery),\n            filterData: select(advancedFilterActions.selectFilterData),\n            userJob: select(commonStore.selectUserValueJob),\n            userDrawing: select(commonStore.selectUserValueDrawing)\n          }), \"t0\", 1);\n\n        case 1:\n          _yield$all = _context2.t0;\n          tableState = _yield$all.tableState;\n          searchQuery = _yield$all.searchQuery;\n          filterData = _yield$all.filterData;\n          userJob = _yield$all.userJob;\n          userDrawing = _yield$all.userDrawing;\n\n          if (userJob.value) {\n            _context2.next = 9;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 9:\n          page = tableState.page, per_page = tableState.per_page;\n          _context2.next = 12;\n          return call(itemApi.getList, _objectSpread({\n            per_page: per_page,\n            page: page,\n            s: searchQuery,\n            job_id: userJob.value,\n            drawing_id: userDrawing.value\n          }, filterData));\n\n        case 12:\n          data = _context2.sent;\n          _context2.next = 15;\n          return put(commonStore.actions.setTableState({\n            total_items: data.total_items\n          }));\n\n        case 15:\n          _context2.next = 17;\n          return put(itemStore.actions.setDataList(data.items));\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n/**\n * this function is used to get the list of the item\n * if current user has the view item permission\n */\n\nexport function getItemList() {\n  var permissions;\n  return _regeneratorRuntime.wrap(function getItemList$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 2:\n          _context3.prev = 2;\n          _context3.next = 5;\n          return call(fetchItemInitDataForList);\n\n        case 5:\n          return _context3.delegateYield(select(itemStore.selectPermissions), \"t0\", 6);\n\n        case 6:\n          permissions = _context3.t0;\n\n          if (!(permissions === null || permissions === void 0 ? void 0 : permissions.view)) {\n            _context3.next = 10;\n            break;\n          }\n\n          _context3.next = 10;\n          return call(fetchItemList);\n\n        case 10:\n          _context3.next = 16;\n          break;\n\n        case 12:\n          _context3.prev = 12;\n          _context3.t1 = _context3[\"catch\"](2);\n          _context3.next = 16;\n          return errorSaga.handleError(_context3.t1);\n\n        case 16:\n          _context3.next = 18;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 18:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[2, 12]]);\n}\n/**\n * this function is used change the userjob, then set user_drawing = all_drawing\n * and then get list item\n * @param {ParameterOption} userJob option from job_option on the top of the item page\n */\n\nexport function changeUserJob(_ref) {\n  var payload, optionValue, confirm;\n  return _regeneratorRuntime.wrap(function changeUserJob$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          payload = _ref.payload;\n          optionValue = payload.optionValue, confirm = payload.confirm;\n\n          if (!(confirm === 'save')) {\n            _context4.next = 7;\n            break;\n          }\n\n          _context4.next = 5;\n          return put(commonStore.sagaUpdateMultiple({\n            entity: 'item',\n            action: itemStore.sagaChangeUserJob,\n            payloadAction: {\n              optionValue: optionValue\n            }\n          }));\n\n        case 5:\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.next = 9;\n          return all([put(commonStore.actions.setUserValueJob(optionValue)), put(commonStore.actions.setUserValueDrawing(commonStore.initialState.userValue.drawing))]);\n\n        case 9:\n          _context4.next = 11;\n          return call(getItemList);\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n/**\n * this function is used change the user drawing\n * if userDrawing = -1 (all_drawing), then set selected_drawing = init data\n * @param {DataForDropdown} userDrawing option from drawing_option on the top of the item page\n */\n\nexport function changeUserDrawing(_ref2) {\n  var payload, optionValue, confirm;\n  return _regeneratorRuntime.wrap(function changeUserDrawing$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          payload = _ref2.payload;\n          optionValue = payload.optionValue, confirm = payload.confirm;\n\n          if (!(confirm === 'save')) {\n            _context5.next = 7;\n            break;\n          }\n\n          _context5.next = 5;\n          return put(commonStore.sagaUpdateMultiple({\n            entity: 'item',\n            action: itemStore.sagaChangeUserDrawing,\n            payloadAction: {\n              optionValue: optionValue\n            }\n          }));\n\n        case 5:\n          _context5.next = 11;\n          break;\n\n        case 7:\n          _context5.next = 9;\n          return putResolve(commonStore.actions.setUserValueDrawing(optionValue));\n\n        case 9:\n          _context5.next = 11;\n          return call(getItemList);\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction removeItem(_ref3) {\n  var payload, data, entity;\n  return _regeneratorRuntime.wrap(function removeItem$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          payload = _ref3.payload;\n          _context6.next = 3;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 3:\n          _context6.prev = 3;\n          _context6.next = 6;\n          return call(partApi.executeOperation, 'delete', payload);\n\n        case 6:\n          data = _context6.sent;\n\n          if (!(data.failed_count > 0)) {\n            _context6.next = 14;\n            break;\n          }\n\n          _context6.next = 10;\n          return put(summaryReportActions.setReportData(data));\n\n        case 10:\n          _context6.next = 12;\n          return put(summaryReportActions.setOpen(true));\n\n        case 12:\n          _context6.next = 16;\n          break;\n\n        case 14:\n          _context6.next = 16;\n          return put(commonStore.actions.setSuccessMessage(data.message));\n\n        case 16:\n          return _context6.delegateYield(select(commonStore.selectEntity), \"t0\", 17);\n\n        case 17:\n          entity = _context6.t0;\n\n          if (!(entity === 'drawing')) {\n            _context6.next = 23;\n            break;\n          }\n\n          _context6.next = 21;\n          return put(drawingStore.sagaGetDrawingPartList());\n\n        case 21:\n          _context6.next = 25;\n          break;\n\n        case 23:\n          _context6.next = 25;\n          return call(fetchItemList);\n\n        case 25:\n          _context6.next = 31;\n          break;\n\n        case 27:\n          _context6.prev = 27;\n          _context6.t1 = _context6[\"catch\"](3);\n          _context6.next = 31;\n          return errorSaga.handleError(_context6.t1);\n\n        case 31:\n          _context6.next = 33;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 33:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[3, 27]]);\n}\n\nfunction itemSaga() {\n  return _regeneratorRuntime.wrap(function itemSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(itemStore.sagaGetList, getItemList);\n\n        case 2:\n          _context7.next = 4;\n          return takeEvery(itemStore.sagaChangeUserJob, changeUserJob);\n\n        case 4:\n          _context7.next = 6;\n          return takeEvery(itemStore.sagaChangeUserDrawing, changeUserDrawing);\n\n        case 6:\n          _context7.next = 8;\n          return takeEvery(itemStore.sagaRemove, removeItem);\n\n        case 8:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nexport default itemSaga;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/saga/item.saga.ts"],"names":["fetchItemInitDataForList","fetchItemList","getItemList","changeUserJob","changeUserDrawing","removeItem","itemSaga","takeEvery","put","putResolve","select","call","all","itemStore","commonStore","advancedFilterActions","drawingStore","summaryReportActions","_","errorSaga","itemApi","partApi","selectUserValueJob","userJob","getInitDataForList","job_id_pk","value","data","isNull","selected_job","actions","setUserValueJob","setInitDataForList","tableState","selectTableState","searchQuery","selectSearchQuery","filterData","selectFilterData","userDrawing","selectUserValueDrawing","page","per_page","getList","s","job_id","drawing_id","setTableState","total_items","setDataList","items","setLoadingPage","selectPermissions","permissions","view","handleError","payload","optionValue","confirm","sagaUpdateMultiple","entity","action","sagaChangeUserJob","payloadAction","setUserValueDrawing","initialState","userValue","drawing","sagaChangeUserDrawing","executeOperation","failed_count","setReportData","setOpen","setSuccessMessage","message","selectEntity","sagaGetDrawingPartList","sagaGetList","sagaRemove"],"mappings":"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","sourcesContent":["import { takeEvery, put, putResolve } from 'redux-saga/effects'\nimport { select, call, all } from 'typed-redux-saga'\n\nimport { itemStore, commonStore, advancedFilterActions, drawingStore, summaryReportActions } from '@/store/reducers'\n\nimport _ from 'lodash'\nimport * as errorSaga from '@/store/saga/errorSaga'\n\nimport itemApi from '@/apis/item.api'\nimport partApi from '@/apis/part.api'\n\n/**\n * This function is used to get init data for list of item entity\n */\nexport function* fetchItemInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob)\n  const data = yield call(itemApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  })\n  // when logged in as the fresh user, the API will not send the selected_job attribute\n  // then we will set selected_job as an empty object\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {}\n  }\n  // the API will not send the selected_job attribute if you are in the all_job or all_standard mode,\n  // then we will set selected_job = current selected user job\n  if (userJob.value === -1 || userJob.value === -2) {\n    data.selected_job = userJob\n  }\n  yield put(commonStore.actions.setUserValueJob(data.selected_job))\n  yield put(itemStore.actions.setInitDataForList(data))\n}\n\n/**\n * this function is used to get item list based on user_job, user_drawing and common search attributes\n */\nexport function* fetchItemList() {\n  const { tableState, searchQuery, filterData, userJob, userDrawing } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    userDrawing: select(commonStore.selectUserValueDrawing)\n  })\n  if (!userJob.value) {\n    return\n  }\n  const { page, per_page } = tableState\n  const data = yield call(itemApi.getList, {\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    drawing_id: userDrawing.value,\n    ...filterData\n  })\n  yield put(commonStore.actions.setTableState({ total_items: data.total_items }))\n  yield put(itemStore.actions.setDataList(data.items))\n}\n\n/**\n * this function is used to get the list of the item\n * if current user has the view item permission\n */\nexport function* getItemList() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchItemInitDataForList)\n    const permissions = yield* select(itemStore.selectPermissions)\n    if (permissions?.view) {\n      yield call(fetchItemList)\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\n/**\n * this function is used change the userjob, then set user_drawing = all_drawing\n * and then get list item\n * @param {ParameterOption} userJob option from job_option on the top of the item page\n */\nexport function* changeUserJob({ payload }: ReturnType<typeof itemStore.sagaChangeUserJob>) {\n  const { optionValue, confirm } = payload\n  if (confirm === 'save') {\n    yield put(\n      commonStore.sagaUpdateMultiple({\n        entity: 'item',\n        action: itemStore.sagaChangeUserJob,\n        payloadAction: { optionValue }\n      })\n    )\n  } else {\n    yield all([\n      put(commonStore.actions.setUserValueJob(optionValue)),\n      put(commonStore.actions.setUserValueDrawing(commonStore.initialState.userValue.drawing))\n    ])\n    yield call(getItemList)\n  }\n}\n\n/**\n * this function is used change the user drawing\n * if userDrawing = -1 (all_drawing), then set selected_drawing = init data\n * @param {DataForDropdown} userDrawing option from drawing_option on the top of the item page\n */\nexport function* changeUserDrawing({ payload }: ReturnType<typeof itemStore.sagaChangeUserDrawing>) {\n  const { optionValue, confirm } = payload\n  if (confirm === 'save') {\n    yield put(\n      commonStore.sagaUpdateMultiple({\n        entity: 'item',\n        action: itemStore.sagaChangeUserDrawing,\n        payloadAction: { optionValue }\n      })\n    )\n  } else {\n    yield putResolve(commonStore.actions.setUserValueDrawing(optionValue))\n    yield call(getItemList)\n  }\n}\n\nfunction* removeItem({ payload }: ReturnType<typeof itemStore.sagaRemove>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const data = yield call(partApi.executeOperation, 'delete', payload)\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data))\n      yield put(summaryReportActions.setOpen(true))\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message))\n    }\n    const entity = yield* select(commonStore.selectEntity)\n    if (entity === 'drawing') {\n      yield put(drawingStore.sagaGetDrawingPartList())\n    } else {\n      yield call(fetchItemList)\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* itemSaga() {\n  yield takeEvery(itemStore.sagaGetList, getItemList)\n  yield takeEvery(itemStore.sagaChangeUserJob, changeUserJob)\n  yield takeEvery(itemStore.sagaChangeUserDrawing, changeUserDrawing)\n  yield takeEvery(itemStore.sagaRemove, removeItem)\n}\n\nexport default itemSaga\n"]},"metadata":{},"sourceType":"module"}