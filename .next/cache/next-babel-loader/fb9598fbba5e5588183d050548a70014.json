{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport { DialogManufacturerCreateEdit, AppLayout, CreateIcon, EnableIcon, DisableIcon, DeleteIcon, EditIcon, useConfirm, confirmConstant } from '@/components';\nimport { commonStore, manufacturerStore } from '@/store/reducers';\nimport * as columnProperties from '@/utils/columnProperties';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\n\nfunction Manufacturers() {\n  const {\n    t\n  } = useTranslation('manufacturer');\n  const {\n    confirm\n  } = useConfirm();\n  const breadcrumbData = [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Drawings',\n    href: '/drawings'\n  }, {\n    label: 'Manufacturers Management',\n    href: '/manufacturers'\n  }];\n  const dispatch = useDispatch();\n  const permissions = useSelector(manufacturerStore.selectPermissions);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const dialogState = useSelector(manufacturerStore.selectDialogState);\n  const {\n    wiki_page,\n    column_tooltips\n  } = useSelector(manufacturerStore.selectInitDataForList);\n  const manuDetail = useSelector(manufacturerStore.selectDetail);\n  const {\n    wiki_page: wikiPageDialog\n  } = useSelector(manufacturerStore.selectInitDataForCE);\n  const isEmptySelectedRows = useMemo(() => selectedRows.length <= 0, [selectedRows]);\n\n  const handleOpenUpdateDialog = id => () => {\n    dispatch(manufacturerStore.sagaOpenUpdateDialog(id));\n  };\n\n  const handleOpenCreateDialog = () => {\n    dispatch(manufacturerStore.sagaOpenCreateDialog());\n  };\n\n  const handleExecuteOperation = operation => async () => {\n    const description = getMessageConfirm(t, 'manufacturer', selectedRows, operation);\n    const result = await confirm({\n      description\n    });\n\n    if (result === confirmConstant.actionTypes.OK) {\n      dispatch(commonStore.sagaExecuteOperation({\n        entity: 'manufacturer',\n        operation,\n        operationList: selectedRows\n      }));\n    }\n  };\n\n  const handleSubmit = (id, formData) => {\n    if (id) {\n      dispatch(manufacturerStore.sagaUpdate({\n        formData,\n        id\n      }));\n    } else {\n      dispatch(manufacturerStore.sagaCreate(formData));\n    }\n  };\n\n  const handleClose = () => {\n    dispatch(manufacturerStore.sagaCloseDialog());\n  };\n\n  const handleGetNextCode = currentData => {\n    dispatch(manufacturerStore.sagaGenerateCode(currentData));\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    description: column_tooltips.edit,\n    field: 'id',\n    headerName: 'Edit',\n    renderCell: param => {\n      return /*#__PURE__*/_jsx(EditIcon, {\n        onClick: handleOpenUpdateDialog(param.value)\n      });\n    }\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.manufacturer_id,\n    field: 'manufacturer_id',\n    headerName: 'Manufacturer #',\n    flex: 0.4\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.name,\n    field: 'name',\n    headerName: 'Name',\n    flex: 0.4\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.status,\n    field: 'status',\n    headerName: 'Status',\n    renderCell: param => param.value ? /*#__PURE__*/_jsx(EnableIcon, {}) : /*#__PURE__*/_jsx(DisableIcon, {})\n  })];\n  const buttons = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n    onClick: handleOpenCreateDialog,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create)\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.delete),\n    onClick: handleExecuteOperation('delete')\n  }, {\n    label: t('common:button.enable'),\n    startIcon: /*#__PURE__*/_jsx(EnableIcon, {}),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable),\n    onClick: handleExecuteOperation('enable')\n  }, {\n    label: t('common:button.disable'),\n    startIcon: /*#__PURE__*/_jsx(DisableIcon, {}),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable),\n    onClick: handleExecuteOperation('disable')\n  }];\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: \"manufacturer\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: wiki_page,\n    buttons: buttons,\n    permissions: permissions,\n    tableProps: {\n      columns: columns\n    },\n    Dialogs: /*#__PURE__*/_jsx(DialogManufacturerCreateEdit, _objectSpread(_objectSpread({}, dialogState), {}, {\n      permissions: permissions,\n      wikiPage: wikiPageDialog,\n      detail: manuDetail,\n      onSubmit: handleSubmit,\n      onClose: handleClose,\n      onGetNextCode: handleGetNextCode\n    }))\n  });\n}\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'manufacturer', 'make_a_list', 'advanced_filter']);\nexport default Manufacturers;","map":null,"metadata":{},"sourceType":"module"}