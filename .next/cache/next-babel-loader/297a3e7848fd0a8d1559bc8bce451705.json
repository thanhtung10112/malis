{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { takeEvery, put, call, putResolve, takeLatest } from 'redux-saga/effects';\nimport { select, all } from 'typed-redux-saga';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport { tagStore, commonStore, advancedFilterActions, summaryReportActions } from '@/store/reducers';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport { StatusCode } from '@/utils/StatusCode';\nimport tagApi from '@/apis/tag.api';\nimport partRefApi from '@/apis/part.api';\n\nfunction* fetchTagDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n  const data = yield call(tagApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  });\n\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {};\n  }\n\n  yield put(commonStore.actions.setUserValueJob(data.selected_job));\n  yield put(tagStore.actions.setInitDataForList(data));\n}\n\nfunction* fetchTagInitDataForCE(jobId = null) {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n\n  const _yield$call = yield call(tagApi.getInitDataForCE, {\n    job_id_pk: jobId || userJob.value\n  }),\n        {\n    permissions,\n    selected_job\n  } = _yield$call,\n        dataInit = _objectWithoutProperties(_yield$call, [\"permissions\", \"selected_job\"]);\n\n  yield put(tagStore.actions.setInitDataForCE(dataInit));\n  yield put(tagStore.actions.setDetail({\n    job_id: selected_job.value\n  }));\n}\n\nfunction* fetchTagList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData,\n    userJob,\n    userDrawing\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    userDrawing: select(commonStore.selectUserValueDrawing)\n  });\n\n  if (!userJob.value) {\n    return;\n  }\n\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(tagApi.getList, _objectSpread(_objectSpread({\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value\n  }, filterData), {}, {\n    drawing_id: userDrawing.value\n  }));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(tagStore.actions.setDataList(data.elements));\n}\n\nfunction* fetchGenerateCode(drawing) {\n  const {\n    generated_code\n  } = yield call(tagApi.getGenerateCode, drawing.value);\n  return generated_code;\n}\n\nexport function* fetchTagDetail(elementId) {\n  const {\n    element\n  } = yield call(tagApi.getDetail, elementId);\n  element.schematic_id = element.related_schematic;\n  element.part_id = element.related_part;\n  return element;\n}\n\nfunction* createTag({\n  payload\n}) {\n  yield put(tagStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      message\n    } = yield call(tagApi.create, payload);\n    const {\n      userJob,\n      userDrawing\n    } = yield* all({\n      userJob: select(commonStore.selectUserValueJob),\n      userDrawing: select(commonStore.selectUserValueDrawing)\n    });\n    let generateCode = '';\n\n    if (userDrawing.value >= 0) {\n      generateCode = yield call(fetchGenerateCode, userDrawing);\n    }\n\n    yield putResolve(tagStore.actions.resetDetail({\n      userJob,\n      userDrawing,\n      generateCode\n    }));\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(tagStore.actions.setDialogStateTab(0))]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(tagStore.actions.setDialogStateLoading(false));\n}\n\nfunction* getTagGenerateCode({\n  payload\n}) {\n  yield put(tagStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      schematic,\n      formData\n    } = payload;\n    const {\n      generated_code\n    } = yield call(tagApi.getGenerateCode, schematic.value);\n    yield put(tagStore.actions.setDetail(_objectSpread(_objectSpread({}, formData), {}, {\n      schematic_id: schematic,\n      element_id: generated_code\n    })));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(tagStore.actions.setDialogStateLoading(false));\n}\n\nfunction* openTagCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchTagInitDataForCE);\n    const userDrawing = yield* select(commonStore.selectUserValueDrawing);\n\n    if (userDrawing.value >= 0) {\n      const generateCode = yield call(fetchGenerateCode, userDrawing);\n      yield put(tagStore.actions.setDetail({\n        schematic_id: userDrawing,\n        element_id: generateCode\n      }));\n    }\n\n    yield put(tagStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* closeTagDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      userDrawing,\n      userJob\n    } = yield* all({\n      userDrawing: select(commonStore.selectUserValueDrawing),\n      userJob: select(commonStore.selectUserValueJob)\n    });\n    yield put(tagStore.actions.setDialogStateOpen(false));\n    yield call(getTagList);\n    yield put(tagStore.actions.resetDetail({\n      userDrawing,\n      userJob\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* getTagList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchTagDataForList);\n    const permissions = yield* select(tagStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchTagList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* removeTag({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const data = yield call(tagApi.executeOperation, 'delete', payload);\n\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data));\n      yield put(summaryReportActions.setOpen(true));\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message));\n    }\n\n    yield call(fetchTagList);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* changeUserJob({\n  payload\n}) {\n  yield put(commonStore.actions.setUserValueJob(payload));\n  yield call(getTagList);\n}\n\nfunction* openTagUpdateDialog({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const element = yield call(fetchTagDetail, payload);\n    yield call(fetchTagInitDataForCE, element.job_id);\n    yield putResolve(tagStore.actions.setDetail(element));\n    yield put(tagStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* updateTags({\n  payload\n}) {\n  yield put(tagStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      message\n    } = yield call(tagApi.updateMultiple, payload);\n    yield call(closeTagDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(tagStore.actions.setDialogStateLoading(false));\n}\n\nfunction* getPart({\n  payload\n}) {\n  yield put(tagStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      formData\n    } = payload,\n          reqPayload = _objectWithoutProperties(payload, [\"formData\"]);\n\n    const {\n      selected_part\n    } = reqPayload;\n\n    if (_.isNull(selected_part)) {\n      yield put(tagStore.actions.setDetail({\n        part_id: null\n      }));\n    } else {\n      const {\n        part,\n        message\n      } = yield call(partRefApi.getReferencedPart, reqPayload);\n      const {\n        descriptions\n      } = part;\n      const newFormData = immer(formData, draft => {\n        draft.descriptions = descriptions;\n        draft.part_id = {\n          description: '',\n          entity_id: part.dpn,\n          value: part.id\n        };\n      });\n      yield put(tagStore.actions.setDetail(newFormData));\n\n      if (selected_part !== part.id) {\n        yield put(tagStore.actions.setConfirmRef({\n          open: true,\n          message\n        }));\n      } else {\n        yield put(commonStore.actions.setSuccessMessage(message));\n      }\n    }\n  } catch (error) {\n    const {\n      response\n    } = error;\n\n    if (_.isNil(response)) {\n      yield errorSaga.handleError(error);\n    } else {\n      const {\n        status,\n        data\n      } = response;\n\n      if (status === StatusCode.BAD_REQUEST) {\n        yield put(tagStore.actions.setConfirmRef({\n          open: true,\n          message: data.message\n        }));\n      }\n    }\n  }\n\n  yield put(tagStore.actions.setDialogStateLoading(false));\n}\n\nfunction* changeUserDrawing({\n  payload\n}) {\n  yield putResolve(commonStore.actions.setUserValueDrawing(payload));\n  yield call(getTagList);\n}\n\nfunction* tagSaga() {\n  yield takeEvery(tagStore.sagaGetList, getTagList);\n  yield takeEvery(tagStore.sagaCreate, createTag);\n  yield takeEvery(tagStore.sagaGetGenerateCode, getTagGenerateCode);\n  yield takeEvery(tagStore.sagaOpenCreateDialog, openTagCreateDialog);\n  yield takeEvery(tagStore.sagaCloseDialog, closeTagDialog);\n  yield takeEvery(tagStore.sagaRemove, removeTag);\n  yield takeEvery(tagStore.sagaChangeUserJob, changeUserJob);\n  yield takeEvery(tagStore.sagaOpenUpdateDialog, openTagUpdateDialog);\n  yield takeEvery(tagStore.sagaUpdateMultiple, updateTags);\n  yield takeLatest(tagStore.sagaGetPart, getPart);\n  yield takeEvery(tagStore.sagaChangeUserDrawing, changeUserDrawing);\n}\n\nexport default tagSaga;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/saga/tag.saga.ts"],"names":["takeEvery","put","call","putResolve","takeLatest","select","all","_","immer","tagStore","commonStore","advancedFilterActions","summaryReportActions","errorSaga","StatusCode","tagApi","partRefApi","fetchTagDataForList","userJob","selectUserValueJob","data","getInitDataForList","job_id_pk","value","isNull","selected_job","actions","setUserValueJob","setInitDataForList","fetchTagInitDataForCE","jobId","getInitDataForCE","permissions","dataInit","setInitDataForCE","setDetail","job_id","fetchTagList","tableState","searchQuery","filterData","userDrawing","selectTableState","selectSearchQuery","selectFilterData","selectUserValueDrawing","page","per_page","getList","s","drawing_id","setTableState","total_items","setDataList","elements","fetchGenerateCode","drawing","generated_code","getGenerateCode","fetchTagDetail","elementId","element","getDetail","schematic_id","related_schematic","part_id","related_part","createTag","payload","setDialogStateLoading","message","create","generateCode","resetDetail","setSuccessMessage","setDialogStateTab","error","handleError","getTagGenerateCode","schematic","formData","element_id","openTagCreateDialog","setLoadingPage","setDialogStateOpen","closeTagDialog","getTagList","selectPermissions","view","removeTag","executeOperation","failed_count","setReportData","setOpen","changeUserJob","openTagUpdateDialog","updateTags","updateMultiple","getPart","reqPayload","selected_part","part","getReferencedPart","descriptions","newFormData","draft","description","entity_id","dpn","id","setConfirmRef","open","response","isNil","status","BAD_REQUEST","changeUserDrawing","setUserValueDrawing","tagSaga","sagaGetList","sagaCreate","sagaGetGenerateCode","sagaOpenCreateDialog","sagaCloseDialog","sagaRemove","sagaChangeUserJob","sagaOpenUpdateDialog","sagaUpdateMultiple","sagaGetPart","sagaChangeUserDrawing"],"mappings":"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","sourcesContent":["import { takeEvery, put, call, putResolve, takeLatest } from 'redux-saga/effects'\nimport { select, all } from 'typed-redux-saga'\nimport _ from 'lodash'\nimport immer from 'immer'\n\nimport { tagStore, commonStore, advancedFilterActions, summaryReportActions } from '@/store/reducers'\nimport * as errorSaga from '@/store/saga/errorSaga'\nimport { StatusCode } from '@/utils/StatusCode'\n\nimport tagApi from '@/apis/tag.api'\nimport partRefApi from '@/apis/part.api'\n\nimport type { DataForDropdown } from '@/types/Common'\n\nfunction* fetchTagDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob)\n  const data = yield call(tagApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  })\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {}\n  }\n  yield put(commonStore.actions.setUserValueJob(data.selected_job))\n  yield put(tagStore.actions.setInitDataForList(data))\n}\n\nfunction* fetchTagInitDataForCE(jobId = null) {\n  const userJob = yield* select(commonStore.selectUserValueJob)\n  const { permissions, selected_job, ...dataInit } = yield call(tagApi.getInitDataForCE, {\n    job_id_pk: jobId || userJob.value\n  })\n  yield put(tagStore.actions.setInitDataForCE(dataInit))\n  yield put(tagStore.actions.setDetail({ job_id: selected_job.value }))\n}\n\nfunction* fetchTagList() {\n  const { tableState, searchQuery, filterData, userJob, userDrawing } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    userDrawing: select(commonStore.selectUserValueDrawing)\n  })\n  if (!userJob.value) {\n    return\n  }\n  const { page, per_page } = tableState\n  const data = yield call(tagApi.getList, {\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    ...filterData,\n    drawing_id: userDrawing.value\n  })\n  yield put(commonStore.actions.setTableState({ total_items: data.total_items }))\n  yield put(tagStore.actions.setDataList(data.elements))\n}\n\nfunction* fetchGenerateCode(drawing: DataForDropdown) {\n  const { generated_code } = yield call(tagApi.getGenerateCode, drawing.value)\n  return generated_code\n}\n\nexport function* fetchTagDetail(elementId: number) {\n  const { element } = yield call(tagApi.getDetail, elementId)\n  element.schematic_id = element.related_schematic\n  element.part_id = element.related_part\n  return element\n}\n\nfunction* createTag({ payload }: ReturnType<typeof tagStore.sagaCreate>) {\n  yield put(tagStore.actions.setDialogStateLoading(true))\n  try {\n    const { message } = yield call(tagApi.create, payload)\n    const { userJob, userDrawing } = yield* all({\n      userJob: select(commonStore.selectUserValueJob),\n      userDrawing: select(commonStore.selectUserValueDrawing)\n    })\n    let generateCode = ''\n    if (userDrawing.value >= 0) {\n      generateCode = yield call(fetchGenerateCode, userDrawing)\n    }\n    yield putResolve(tagStore.actions.resetDetail({ userJob, userDrawing, generateCode }))\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(tagStore.actions.setDialogStateTab(0))])\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(tagStore.actions.setDialogStateLoading(false))\n}\n\nfunction* getTagGenerateCode({ payload }: ReturnType<typeof tagStore.sagaGetGenerateCode>) {\n  yield put(tagStore.actions.setDialogStateLoading(true))\n\n  try {\n    const { schematic, formData } = payload\n    const { generated_code } = yield call(tagApi.getGenerateCode, schematic.value)\n\n    yield put(\n      tagStore.actions.setDetail({\n        ...formData,\n        schematic_id: schematic,\n        element_id: generated_code\n      })\n    )\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n\n  yield put(tagStore.actions.setDialogStateLoading(false))\n}\n\nfunction* openTagCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true))\n\n  try {\n    yield call(fetchTagInitDataForCE)\n    const userDrawing = yield* select(commonStore.selectUserValueDrawing)\n    if (userDrawing.value >= 0) {\n      const generateCode = yield call(fetchGenerateCode, userDrawing)\n      yield put(tagStore.actions.setDetail({ schematic_id: userDrawing, element_id: generateCode }))\n    }\n    yield put(tagStore.actions.setDialogStateOpen(true))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* closeTagDialog() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const { userDrawing, userJob } = yield* all({\n      userDrawing: select(commonStore.selectUserValueDrawing),\n      userJob: select(commonStore.selectUserValueJob)\n    })\n    yield put(tagStore.actions.setDialogStateOpen(false))\n    yield call(getTagList)\n    yield put(tagStore.actions.resetDetail({ userDrawing, userJob }))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* getTagList() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchTagDataForList)\n    const permissions = yield* select(tagStore.selectPermissions)\n    if (permissions?.view) {\n      yield call(fetchTagList)\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* removeTag({ payload }) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const data = yield call(tagApi.executeOperation, 'delete', payload)\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data))\n      yield put(summaryReportActions.setOpen(true))\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message))\n    }\n    yield call(fetchTagList)\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* changeUserJob({ payload }: ReturnType<typeof tagStore.sagaChangeUserJob>) {\n  yield put(commonStore.actions.setUserValueJob(payload))\n  yield call(getTagList)\n}\n\nfunction* openTagUpdateDialog({ payload }: ReturnType<typeof tagStore.sagaOpenUpdateDialog>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const element = yield call(fetchTagDetail, payload)\n    yield call(fetchTagInitDataForCE, element.job_id)\n    yield putResolve(tagStore.actions.setDetail(element))\n    yield put(tagStore.actions.setDialogStateOpen(true))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* updateTags({ payload }: ReturnType<typeof tagStore.sagaUpdateMultiple>) {\n  yield put(tagStore.actions.setDialogStateLoading(true))\n  try {\n    const { message } = yield call(tagApi.updateMultiple, payload)\n    yield call(closeTagDialog)\n    yield put(commonStore.actions.setSuccessMessage(message))\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(tagStore.actions.setDialogStateLoading(false))\n}\n\nfunction* getPart({ payload }: ReturnType<typeof tagStore.sagaGetPart>) {\n  yield put(tagStore.actions.setDialogStateLoading(true))\n  try {\n    const { formData, ...reqPayload } = payload\n    const { selected_part } = reqPayload\n    if (_.isNull(selected_part)) {\n      yield put(tagStore.actions.setDetail({ part_id: null }))\n    } else {\n      const { part, message } = yield call(partRefApi.getReferencedPart, reqPayload)\n      const { descriptions } = part\n      const newFormData = immer(formData, (draft) => {\n        draft.descriptions = descriptions\n        draft.part_id = {\n          description: '',\n          entity_id: part.dpn,\n          value: part.id\n        }\n      })\n      yield put(tagStore.actions.setDetail(newFormData))\n      if (selected_part !== part.id) {\n        yield put(tagStore.actions.setConfirmRef({ open: true, message }))\n      } else {\n        yield put(commonStore.actions.setSuccessMessage(message))\n      }\n    }\n  } catch (error) {\n    const { response } = error\n    if (_.isNil(response)) {\n      yield errorSaga.handleError(error)\n    } else {\n      const { status, data } = response\n      if (status === StatusCode.BAD_REQUEST) {\n        yield put(tagStore.actions.setConfirmRef({ open: true, message: data.message }))\n      }\n    }\n  }\n  yield put(tagStore.actions.setDialogStateLoading(false))\n}\n\nfunction* changeUserDrawing({ payload }: ReturnType<typeof tagStore.sagaChangeUserDrawing>) {\n  yield putResolve(commonStore.actions.setUserValueDrawing(payload))\n  yield call(getTagList)\n}\n\nfunction* tagSaga() {\n  yield takeEvery(tagStore.sagaGetList, getTagList)\n  yield takeEvery(tagStore.sagaCreate, createTag)\n  yield takeEvery(tagStore.sagaGetGenerateCode, getTagGenerateCode)\n  yield takeEvery(tagStore.sagaOpenCreateDialog, openTagCreateDialog)\n  yield takeEvery(tagStore.sagaCloseDialog, closeTagDialog)\n  yield takeEvery(tagStore.sagaRemove, removeTag)\n  yield takeEvery(tagStore.sagaChangeUserJob, changeUserJob)\n  yield takeEvery(tagStore.sagaOpenUpdateDialog, openTagUpdateDialog)\n  yield takeEvery(tagStore.sagaUpdateMultiple, updateTags)\n  yield takeLatest(tagStore.sagaGetPart, getPart)\n  yield takeEvery(tagStore.sagaChangeUserDrawing, changeUserDrawing)\n}\n\nexport default tagSaga\n"]},"metadata":{},"sourceType":"module"}