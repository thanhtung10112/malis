{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nimport NextHead from 'next/head';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport { AppBreadcrumb, FormControllerAutocomplete, DialogMain, AppAutocomplete } from '@/components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport _ from 'lodash';\nimport { authStore } from '@/store/reducers';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nconst useStyles = makeStyles({\n  dialog: {\n    position: 'relative !important',\n    height: 'calc(100vh - 90px) !important'\n  }\n});\n\nconst SettingPage = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    initData,\n    detail: settingDetail\n  } = useSelector(authStore.selectSettings);\n  const settingForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(yup.object({\n      home_page: yup.number().nullable().required('Home page is required!'),\n      default_language: yup.number().nullable().required('Default language is required!')\n    }))\n  });\n  const watchTimezone = settingForm.watch('time_zone', '');\n\n  const getTimezone = () => {\n    const {\n      time_zone\n    } = settingForm.getValues();\n\n    if (_.size(time_zone) === 0) {\n      return null;\n    }\n\n    return _.find(initData.timezones, {\n      value: watchTimezone\n    });\n  };\n\n  useEffect(() => {\n    dispatch(authStore.sagaGetSettings());\n  }, []);\n  useEffect(() => {\n    settingForm.reset(settingDetail);\n  }, [settingDetail]);\n  const handleSaveSettings = settingForm.handleSubmit(formData => {\n    const payload = _.pick(formData, ['home_page', 'default_language', 'time_zone']);\n\n    dispatch(authStore.sagaSaveSettings(payload));\n  });\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(NextHead, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"Settings Management\"\n      })\n    }), /*#__PURE__*/_jsx(AppBreadcrumb, {\n      items: [{\n        label: 'Home',\n        href: '/'\n      }, {\n        label: 'User Settings',\n        href: '/settings'\n      }]\n    }), /*#__PURE__*/_jsx(DialogMain, {\n      open: true,\n      title: \"Settings\",\n      hideBackdrop: true,\n      height: 350,\n      draggable: false,\n      PaperProps: {\n        elevation: 2\n      },\n      hideCloseButton: true,\n      okText: \"Save\",\n      onOk: handleSaveSettings,\n      className: classes.dialog,\n      children: /*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 2,\n        style: {\n          marginTop: 8\n        },\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n            disableClearable: true,\n            name: \"home_page\",\n            control: settingForm.control,\n            options: initData.parameters.PAGES,\n            label: \"Set default home-screen\",\n            renderOption: option => option.description,\n            primaryKeyOption: \"value\"\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n            disableClearable: true,\n            name: \"default_language\",\n            control: settingForm.control,\n            options: initData.parameters.PLLA,\n            label: \"Default Language\",\n            renderOption: option => option.description,\n            primaryKeyOption: \"value\"\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(AppAutocomplete, {\n            disableClearable: true,\n            disabled: true,\n            options: initData.timezones,\n            label: \"Time Zone\",\n            renderOption: option => option.description,\n            primaryKeyOption: \"value\",\n            value: getTimezone()\n          })\n        })]\n      })\n    })]\n  });\n};\n\nexport const getServerSideProps = useAuthMiddleware();\nexport default SettingPage;","map":null,"metadata":{},"sourceType":"module"}