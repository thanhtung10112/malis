{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { Grid, Link, Box } from '@material-ui/core';\nimport { Unless } from 'react-if';\nimport { TableMultilingualDescription, FormControllerAutocomplete, FormControllerTextField, SectionTimezone, DialogMain, AppAutocomplete, FormControllerCheckbox } from '@/components';\nimport { useSelector } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport useStyles from './styles';\nimport _ from 'lodash';\nimport { drawingStore, commonStore } from '@/store/reducers';\n\nfunction TabGeneral() {\n  const classes = useStyles();\n  const drawingForm = useFormContext();\n  const [openLink, setOpenLink] = React.useState(false);\n  const drawingDetail = useSelector(drawingStore.selectDetail);\n  const parameters = useSelector(drawingStore.selectParameters);\n  const userJob = useSelector(commonStore.selectUserValueJob);\n\n  const isCreating = _.isNil(drawingDetail.id);\n\n  const handleChangePurpose = optionValue => {\n    const {\n      DWPU\n    } = parameters;\n\n    const option = _.find(DWPU, {\n      id: optionValue.value\n    });\n\n    const {\n      exclude_from\n    } = option.properties;\n    const excludeList = {\n      C: 'exclude_from_customer',\n      O: 'exclude_from_other',\n      S: 'exclude_from_supplier'\n    };\n    const excludeFrom = exclude_from ? exclude_from.split(';') : []; // C;O;S => [C, O, S]\n\n    _.forIn(excludeList, (value, key) => {\n      if (excludeFrom.includes(key)) {\n        drawingForm.setValue(value, true);\n      } else {\n        drawingForm.setValue(value, false);\n      }\n    });\n  };\n\n  const handleOpenInfoLink = event => {\n    event.preventDefault();\n    setOpenLink(true);\n  };\n\n  const handleCloseInfoLink = () => {\n    setOpenLink(false);\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(AppAutocomplete, {\n              value: userJob,\n              popupIcon: null,\n              disabled: true,\n              label: \"Job\",\n              required: true,\n              primaryKeyOption: \"value\",\n              options: [],\n              renderOption: option => option.description\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(FormControllerTextField, {\n              control: drawingForm.control,\n              required: true,\n              label: \"Drawing #\",\n              name: \"drawing_id\",\n              disabled: !isCreating\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(FormControllerTextField, {\n              label: \"Customer ID\",\n              control: drawingForm.control,\n              name: \"customer_id\"\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(FormControllerTextField, {\n              control: drawingForm.control,\n              name: \"revision\",\n              label: \"Revision\",\n              required: true,\n              transformValue: value => value.toUpperCase(),\n              disabled: !isCreating\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n              primaryKeyOption: \"value\",\n              name: \"drawing_format\",\n              control: drawingForm.control,\n              options: parameters.PLFO,\n              renderOption: option => option.description,\n              label: \"Format\",\n              required: true\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n              disableClearable: false,\n              primaryKeyOption: \"value\",\n              name: \"file_type\",\n              control: drawingForm.control,\n              options: parameters.FTYP,\n              label: \"File Type\",\n              renderOption: option => option.description\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n              primaryKeyOption: \"value\",\n              name: \"drawing_purpose\",\n              control: drawingForm.control,\n              options: parameters.DWPU,\n              label: \"Purpose\",\n              required: true,\n              renderOption: option => option.description,\n              onChange: handleChangePurpose\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n              primaryKeyOption: \"value\",\n              name: \"file_prefix\",\n              control: drawingForm.control,\n              options: parameters.FPRE,\n              label: \"File Prefix\",\n              renderOption: option => option.description\n            })\n          }), /*#__PURE__*/_jsxs(Grid, {\n            item: true,\n            xs: 12,\n            style: {\n              paddingBottom: 0\n            },\n            children: [/*#__PURE__*/_jsxs(Box, {\n              display: \"flex\",\n              children: [/*#__PURE__*/_jsx(FormControllerCheckbox, {\n                control: drawingForm.control,\n                name: \"is_drawing\",\n                label: \"Is Drawing\"\n              }), /*#__PURE__*/_jsx(FormControllerCheckbox, {\n                control: drawingForm.control,\n                name: \"is_schematic\",\n                label: \"Is Schematic\"\n              }), /*#__PURE__*/_jsx(FormControllerCheckbox, {\n                control: drawingForm.control,\n                name: \"is_specification\",\n                label: \"Is Specification\"\n              }), /*#__PURE__*/_jsx(FormControllerCheckbox, {\n                control: drawingForm.control,\n                name: \"is_other_document\",\n                label: \"Is Other Document\"\n              })]\n            }), /*#__PURE__*/_jsx(Box, {\n              marginTop: 1,\n              children: /*#__PURE__*/_jsx(FormControllerCheckbox, {\n                control: drawingForm.control,\n                name: \"is_detail_drawing\",\n                label: \"Is Details Document\"\n              })\n            }), /*#__PURE__*/_jsxs(Unless, {\n              condition: isCreating,\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                className: classes.buttonsGeneral,\n                children: [/*#__PURE__*/_jsx(Link, {\n                  children: \"View Contract Items\"\n                }), /*#__PURE__*/_jsxs(Box, {\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  children: [/*#__PURE__*/_jsx(Link, {\n                    target: \"_blank\",\n                    href: drawingDetail.url,\n                    children: \"Actual drawing\"\n                  }), /*#__PURE__*/_jsx(Link, {\n                    style: {\n                      marginLeft: 4\n                    },\n                    onClick: handleOpenInfoLink,\n                    children: \"[i]\"\n                  })]\n                })]\n              }), /*#__PURE__*/_jsx(SectionTimezone, {\n                value: drawingDetail,\n                style: {\n                  padding: 0\n                }\n              })]\n            })]\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsx(TableMultilingualDescription, {\n          tableHeight: 400,\n          name: \"descriptions\",\n          control: drawingForm.control,\n          editMode: !isCreating,\n          languageList: parameters.PLLA,\n          copyable: true,\n          copyDialogProps: {\n            compName: 'drawing_list',\n            entity: 'drawings'\n          }\n        })\n      })]\n    }), /*#__PURE__*/_jsx(DialogMain, {\n      open: openLink,\n      title: \"Infomation\",\n      description: drawingDetail.windows_path,\n      onClose: handleCloseInfoLink\n    })]\n  });\n}\n\nexport default TabGeneral;","map":null,"metadata":{},"sourceType":"module"}