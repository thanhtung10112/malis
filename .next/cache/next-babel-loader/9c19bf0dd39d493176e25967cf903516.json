{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { actionTypes } from '@/utils/constant';\nimport createExtraActions from '@/utils/createExtraActions';\nexport const name = 'parameter_type';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nexport const initialState = {\n  dataList: [],\n  detail: {\n    type_id: '',\n    category: 1,\n    is_multilingual: false,\n    description: '',\n    attributes: '',\n    nbr_default: 0\n  },\n  dialogState: {\n    open: false,\n    editMode: false,\n    loading: false,\n    historyLogs: []\n  },\n  initDataForList: {\n    permissions: {\n      application_parameter_type: null,\n      developer_parameter_type: null,\n      simple_parameter_type: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  initDataForCE: {\n    categories: [],\n    wiki_page: ''\n  }\n};\nconst parameterTypeSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      state.dialogState.historyLogs = payload;\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateEditMode(state, {\n      payload\n    }) {\n      state.dialogState.editMode = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setPermissions(state, {\n      payload\n    }) {\n      state.initDataForList.permissions = payload;\n    },\n\n    resetDetail(state) {\n      state.detail = _objectSpread({}, initialState.detail);\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n});\nexport const {\n  actions\n} = parameterTypeSlice;\nexport const extraActions = createExtraActions(name, {\n  getList: actionTypes.GET_LIST,\n  create: actionTypes.CREATE,\n  update: actionTypes.UPDATE,\n  openUpdateDialog: actionTypes.OPEN_UPDATE_DIALOG,\n  openCreateDialog: actionTypes.OPEN_CREATE_DIALOG,\n  executeOperation: actionTypes.EXECUTE_OPERATION,\n  closeDialog: actionTypes.CLOSE_DIALOG\n});\n\nconst selectState = state => state[name];\n\nexport const selectDialogState = createSelector(selectState, ({\n  dialogState\n}) => dialogState);\nexport const selectDataList = createSelector(selectState, ({\n  dataList\n}) => dataList);\nexport const selectDetail = createSelector(selectState, ({\n  detail\n}) => detail);\nexport const selectInitDataForList = createSelector(selectState, ({\n  initDataForList\n}) => initDataForList);\nexport const selectInitDataForCE = createSelector(selectState, ({\n  initDataForCE\n}) => initDataForCE);\nexport const selectPermissions = createSelector(selectState, ({\n  initDataForList\n}) => {\n  const {\n    permissions\n  } = initDataForList;\n\n  if (_.isNull(permissions.application_parameter_type)) {\n    return null;\n  }\n\n  const getPermissionBaseOnName = name => permissions.application_parameter_type[name] || permissions.developer_parameter_type[name] || permissions.simple_parameter_type[name];\n\n  return {\n    view: getPermissionBaseOnName('view'),\n    create: getPermissionBaseOnName('create'),\n    disable_enable: getPermissionBaseOnName('disable_enable'),\n    delete: getPermissionBaseOnName('delete')\n  };\n});\nexport const selectEditPermission = createSelector(selectState, ({\n  initDataForList,\n  detail\n}) => {\n  const {\n    permissions\n  } = initDataForList;\n  const {\n    category\n  } = detail;\n\n  if (_.isNull(permissions.application_parameter_type)) {\n    return false;\n  }\n\n  return category === 1 && permissions.simple_parameter_type.edit || category === 2 && permissions.application_parameter_type.edit || category === 3 && permissions.developer_parameter_type.edit;\n});\nexport default parameterTypeSlice;","map":null,"metadata":{},"sourceType":"module"}