{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\pages\\\\materials.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '@/styles/page/layout';\nimport { useTranslation } from 'next-i18next';\nimport { AppLayout, EditIcon, CreateIcon, DialogMaterialCE, AppAutocompleteStyled, DeleteIcon, SaveIcon, MakeAListIcon } from '@/components';\nimport { materialStore, commonStore } from '@/store/reducers';\nimport { defaultProperties, iconColumn } from '@/utils/columnProperties'; // import { DataGrid } from '@material-ui/data-grid'\n\nvar SpecificationsPage = function SpecificationsPage() {\n  _s();\n\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation('material'),\n      t = _useTranslation.t;\n\n  var breadcrumbData = useMemo(function () {\n    return [{\n      label: 'Home',\n      href: '/'\n    }, {\n      label: 'Drawings',\n      href: '/drawings'\n    }, {\n      label: 'Material List',\n      href: '/materials'\n    }];\n  }, []);\n  var dispatch = useDispatch();\n  var permissions = useSelector(materialStore.selectPermissions);\n  var userJob = useSelector(commonStore.selectUserValueJob); // const materialSum = useSelector(materialStore.selectMaterialSum)\n\n  useEffect(function () {\n    return function () {\n      return dispatch(commonStore.actions.resetUserValue());\n    };\n  }, []);\n\n  var handleOpenCreateDialog = function handleOpenCreateDialog() {\n    dispatch(materialStore.actions.setDialogStateOpen(true));\n  };\n\n  var handleChangeUserJob = function handleChangeUserJob(event, optionValue) {\n    console.warn('optionValue', '>>>', optionValue);\n  };\n\n  var columns = [_objectSpread(_objectSpread(_objectSpread({}, defaultProperties), iconColumn), {}, {\n    field: 'id',\n    headerName: 'Edit',\n    renderCell: function renderCell() {\n      return /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 16\n      }, this);\n    }\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'part_id',\n    headerName: 'Part #',\n    flex: 0.2\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'description',\n    headerName: 'Description',\n    flex: 0.3\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'MASS',\n    headerName: 'U.MASS(Kg)',\n    flex: 0.1\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'INST',\n    headerName: 'INST',\n    flex: 0.1\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'SPAR',\n    headerName: 'SPAR',\n    flex: 0.1\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'COM',\n    headerName: 'COM',\n    flex: 0.1\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'REP',\n    headerName: 'REP',\n    flex: 0.1\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'EREC',\n    headerName: 'EREC',\n    flex: 0.1\n  })];\n  var buttonsPage = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 18\n    }, _this),\n    onClick: handleOpenCreateDialog\n  }, {\n    label: t('common:button.save'),\n    startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 18\n    }, _this)\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 18\n    }, _this)\n  }, {\n    label: t('common:button.make_a_list'),\n    startIcon: /*#__PURE__*/_jsxDEV(MakeAListIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 18\n    }, _this)\n  }];\n\n  var Options = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AppAutocompleteStyled, {\n      className: classes.controlAutocomplete,\n      width: 250,\n      label: \"Jobs\",\n      options: [],\n      value: userJob,\n      renderOption: function renderOption(option) {\n        return option.description;\n      },\n      primaryKeyOption: \"value\",\n      onChange: handleChangeUserJob\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n\n  var Dialogs = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DialogMaterialCE, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false); // const bottomSection = (\n  //   <div style={{ height: 35, width: '100%' }}>\n  //     <DataGrid\n  //       disableSelectionOnClick\n  //       disableColumnMenu\n  //       checkboxSelection\n  //       hideFooter\n  //       columns={columns}\n  //       headerHeight={0}\n  //       rowHeight={35}\n  //       getRowClassName={() => classes.totalBudgetRow}\n  //       rows={[materialSum]}\n  //       onCellDoubleClick={(_, event) => {\n  //         event.stopPropagation()\n  //       }}\n  //     />\n  //   </div>\n  // )\n\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    entity: \"materials\",\n    breadcrumbs: breadcrumbData,\n    searchProps: {\n      width: 320\n    },\n    buttons: buttonsPage,\n    permissions: permissions,\n    tableProps: {\n      columns: columns\n    },\n    Dialogs: Dialogs,\n    Options: Options // bottomSection={bottomSection}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(SpecificationsPage, \"PEEt9iJwUBeKe1WOis0oS7OquAY=\", false, function () {\n  return [useStyles, useTranslation, useDispatch, useSelector, useSelector];\n});\n\n_c = SpecificationsPage;\nexport var __N_SSP = true;\nexport default SpecificationsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpecificationsPage\");","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/pages/materials.tsx"],"names":["useEffect","useMemo","useDispatch","useSelector","useStyles","useTranslation","AppLayout","EditIcon","CreateIcon","DialogMaterialCE","AppAutocompleteStyled","DeleteIcon","SaveIcon","MakeAListIcon","materialStore","commonStore","defaultProperties","iconColumn","SpecificationsPage","classes","t","breadcrumbData","label","href","dispatch","permissions","selectPermissions","userJob","selectUserValueJob","actions","resetUserValue","handleOpenCreateDialog","setDialogStateOpen","handleChangeUserJob","event","optionValue","console","warn","columns","field","headerName","renderCell","flex","buttonsPage","startIcon","onClick","Options","controlAutocomplete","option","description","Dialogs","width"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useStyles from '@/styles/page/layout'\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware'\nimport { useTranslation } from 'next-i18next'\n\nimport {\n  AppLayout,\n  EditIcon,\n  CreateIcon,\n  DialogMaterialCE,\n  AppAutocompleteStyled,\n  DeleteIcon,\n  SaveIcon,\n  MakeAListIcon\n} from '@/components'\n\nimport { materialStore, commonStore } from '@/store/reducers'\nimport { defaultProperties, iconColumn } from '@/utils/columnProperties'\n// import { DataGrid } from '@material-ui/data-grid'\n\nimport type { GridColumns } from '@material-ui/data-grid'\nimport type { ParameterOption } from '@/types/Common'\n\nconst SpecificationsPage = () => {\n  const classes = useStyles()\n  const { t } = useTranslation('material')\n\n  const breadcrumbData = useMemo(\n    () => [\n      { label: 'Home', href: '/' },\n      { label: 'Drawings', href: '/drawings' },\n      { label: 'Material List', href: '/materials' }\n    ],\n    []\n  )\n\n  const dispatch = useDispatch()\n  const permissions = useSelector(materialStore.selectPermissions)\n  const userJob = useSelector(commonStore.selectUserValueJob)\n  // const materialSum = useSelector(materialStore.selectMaterialSum)\n\n  useEffect(() => {\n    return () => dispatch(commonStore.actions.resetUserValue())\n  }, [])\n\n  const handleOpenCreateDialog = () => {\n    dispatch(materialStore.actions.setDialogStateOpen(true))\n  }\n\n  const handleChangeUserJob = (event, optionValue: ParameterOption) => {\n    console.warn('optionValue', '>>>', optionValue)\n  }\n\n  const columns: GridColumns = [\n    {\n      ...defaultProperties,\n      ...iconColumn,\n      field: 'id',\n      headerName: 'Edit',\n      renderCell() {\n        return <EditIcon />\n      }\n    },\n    {\n      ...defaultProperties,\n      field: 'part_id',\n      headerName: 'Part #',\n      flex: 0.2\n    },\n    {\n      ...defaultProperties,\n      field: 'description',\n      headerName: 'Description',\n      flex: 0.3\n    },\n    {\n      ...defaultProperties,\n      field: 'MASS',\n      headerName: 'U.MASS(Kg)',\n      flex: 0.1\n    },\n    {\n      ...defaultProperties,\n      field: 'INST',\n      headerName: 'INST',\n      flex: 0.1\n    },\n    {\n      ...defaultProperties,\n      field: 'SPAR',\n      headerName: 'SPAR',\n      flex: 0.1\n    },\n    {\n      ...defaultProperties,\n      field: 'COM',\n      headerName: 'COM',\n      flex: 0.1\n    },\n    {\n      ...defaultProperties,\n      field: 'REP',\n      headerName: 'REP',\n      flex: 0.1\n    },\n    {\n      ...defaultProperties,\n      field: 'EREC',\n      headerName: 'EREC',\n      flex: 0.1\n    }\n  ]\n\n  const buttonsPage = [\n    {\n      label: t('common:button.new'),\n      startIcon: <CreateIcon />,\n      onClick: handleOpenCreateDialog\n    },\n    {\n      label: t('common:button.save'),\n      startIcon: <SaveIcon />\n    },\n    {\n      label: t('common:button.delete'),\n      startIcon: <DeleteIcon />\n    },\n    {\n      label: t('common:button.make_a_list'),\n      startIcon: <MakeAListIcon />\n    }\n  ]\n\n  const Options = (\n    <>\n      <AppAutocompleteStyled\n        className={classes.controlAutocomplete}\n        width={250}\n        label=\"Jobs\"\n        options={[]}\n        value={userJob}\n        renderOption={(option) => option.description}\n        primaryKeyOption=\"value\"\n        onChange={handleChangeUserJob}\n      />\n    </>\n  )\n\n  const Dialogs = (\n    <>\n      <DialogMaterialCE />\n    </>\n  )\n\n  // const bottomSection = (\n  //   <div style={{ height: 35, width: '100%' }}>\n  //     <DataGrid\n  //       disableSelectionOnClick\n  //       disableColumnMenu\n  //       checkboxSelection\n  //       hideFooter\n  //       columns={columns}\n  //       headerHeight={0}\n  //       rowHeight={35}\n  //       getRowClassName={() => classes.totalBudgetRow}\n  //       rows={[materialSum]}\n  //       onCellDoubleClick={(_, event) => {\n  //         event.stopPropagation()\n  //       }}\n  //     />\n  //   </div>\n  // )\n\n  return (\n    <AppLayout\n      entity=\"materials\"\n      breadcrumbs={breadcrumbData}\n      searchProps={{\n        width: 320\n      }}\n      buttons={buttonsPage}\n      permissions={permissions}\n      tableProps={{\n        columns\n      }}\n      Dialogs={Dialogs}\n      Options={Options}\n      // bottomSection={bottomSection}\n    />\n  )\n}\n\nexport const getServerSideProps = useAuthMiddleware([\n  'common',\n  'materials',\n  'make_a_list',\n  'advanced_filter',\n  'drawing'\n])\n\nexport default SpecificationsPage\n"]},"metadata":{},"sourceType":"module"}