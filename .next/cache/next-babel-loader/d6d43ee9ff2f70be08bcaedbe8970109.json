{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect, memo } from 'react';\nimport { Grid, Button } from '@material-ui/core';\nimport { DataTable, AppTitle, AppAutocompleteStyled, DeleteIcon, DataTableCellExpand, DataTableNumberField } from '@/components';\nimport { useSelector } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport useStyles from './styles';\nimport { useTranslation } from 'next-i18next';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport { currencyRateFormat } from '@/utils/constant';\nimport * as columnProperties from '@/utils/columnProperties';\nimport AppNumber from '@/helper/AppNumber';\nimport { jobStore } from '@/store/reducers';\nimport * as yup from 'yup';\n\nfunction TableJobCurrencies() {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation('currency');\n  const jobForm = useFormContext();\n  const watchJobCurrencies = jobForm.watch('job_currencies', []);\n  const {\n    currencies\n  } = useSelector(jobStore.selectInitDataForCE);\n  const jobDetail = useSelector(jobStore.selectDetail);\n  const {\n    0: selectedCurrencies,\n    1: setSelectedCurrencies\n  } = useState([]);\n  const {\n    0: selectedCurrency,\n    1: setSelectedCurrency\n  } = useState(null);\n  useEffect(() => {\n    setSelectedCurrency(null);\n  }, [jobDetail]);\n\n  const onSelectJobCurrency = (event, value) => {\n    setSelectedCurrency(value);\n    const newJobCurrencies = immer(watchJobCurrencies, draft => {\n      draft.push(value);\n    });\n    jobForm.setValue('job_currencies', newJobCurrencies);\n  };\n\n  const onSelectedCurrencies = ({\n    selectionModel\n  }) => {\n    setSelectedCurrencies(selectionModel);\n  };\n\n  const onDeleteSelectedCurrencies = () => {\n    const newJobCurrencies = watchJobCurrencies.filter(currency => !selectedCurrencies.some(selC => selC === currency.id));\n    jobForm.setValue('job_currencies', newJobCurrencies);\n    setSelectedCurrencies([]);\n  };\n\n  const onChangeRateCurrency = (id, rate) => {\n    const newJobCurrencies = immer(watchJobCurrencies, draft => {\n      const index = _.findIndex(draft, {\n        id\n      });\n\n      draft[index].rate = rate;\n    });\n    jobForm.setValue('job_currencies', newJobCurrencies);\n  };\n\n  const columns = [{\n    field: 'description',\n    headerName: 'Currency',\n    flex: 0.7,\n    sortable: false\n  }, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.numberColumn), columnProperties.editCell('Rate')), {}, {\n    field: 'rate',\n    flex: 0.3,\n\n    renderCell(params) {\n      const value = AppNumber.format(params.value, currencyRateFormat);\n      return /*#__PURE__*/_jsx(DataTableCellExpand, {\n        value: value,\n        width: params.colDef.width\n      });\n    },\n\n    renderEditCell(params) {\n      return /*#__PURE__*/_jsx(DataTableNumberField, {\n        params: params,\n        onChangeValue: onChangeRateCurrency,\n        decimalScale: currencyRateFormat.precision,\n        fixedDecimalScale: currencyRateFormat.precision,\n        rules: yup.number().nullable().required(t('validation_message.rate_required')).min(currencyRateFormat.min, t('validation_message.rate_range')).max(currencyRateFormat.max, t('validation_message.rate_range'))\n      });\n    }\n\n  })];\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(AppTitle, {\n        label: \"Currency Rate\"\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: classes.currencyTop,\n        children: [/*#__PURE__*/_jsx(AppAutocompleteStyled, {\n          value: selectedCurrency,\n          width: 280,\n          height: 30,\n          label: \"Currency\",\n          options: currencies,\n          renderOption: option => option.description,\n          className: classes.currencyOption,\n          onChange: onSelectJobCurrency,\n          getOptionDisabled: option => watchJobCurrencies.some(currency => currency.id === option.id)\n        }), /*#__PURE__*/_jsx(Button, {\n          startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n          className: classes.deleteButton,\n          disabled: selectedCurrencies.length <= 0,\n          onClick: onDeleteSelectedCurrencies,\n          children: t('common:button.delete')\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.currencyTable,\n      children: /*#__PURE__*/_jsx(DataTable, {\n        hideFooter: true,\n        disableSelectionOnClick: true,\n        disableColumnMenu: true,\n        checkboxSelection: true,\n        selectionModel: selectedCurrencies,\n        columns: columns,\n        rows: watchJobCurrencies,\n        tableHeight: 110,\n        onSelectionModelChange: onSelectedCurrencies\n      })\n    })]\n  });\n}\n\nexport default /*#__PURE__*/memo(TableJobCurrencies);","map":null,"metadata":{},"sourceType":"module"}