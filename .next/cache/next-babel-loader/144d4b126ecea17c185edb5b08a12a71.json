{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useCallback, useState, useEffect } from 'react';\nimport { Grid, Paper, RadioGroup, FormControlLabel, Radio } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { DialogMain, DataTable, AppAutocompleteAsync } from '@/components';\nimport { defaultProperties } from '@/utils/columnProperties';\nimport HttpService from '@/helper/HttpService';\nimport _ from 'lodash';\n\nconst DialogCopyDesc = props => {\n  const {\n    open,\n    onClose,\n    compName,\n    entity,\n    descriptionValues,\n    onChange,\n    checkboxesToSelect,\n    autocompleteProps\n  } = props;\n  const httpService = new HttpService('');\n  const {\n    0: selectedRows,\n    1: setSelectedRows\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: descriptionList,\n    1: setDescriptionList\n  } = useState([]);\n  const {\n    0: paramApi,\n    1: setParamApi\n  } = useState({\n    entity: '',\n    compName: ''\n  });\n  const {\n    0: defaultOptions,\n    1: setDefaultOptions\n  } = useState([]);\n  const isContainCheckboxes = checkboxesToSelect.length > 0;\n  useEffect(() => {\n    if (isContainCheckboxes) {\n      const defaultCheckbox = _.find(checkboxesToSelect, {\n        default: true\n      });\n\n      defaultCheckbox && setParamApi({\n        entity: defaultCheckbox.entity,\n        compName: defaultCheckbox.value\n      });\n    } else {\n      setParamApi({\n        entity,\n        compName\n      });\n    }\n  }, [entity, compName, checkboxesToSelect, isContainCheckboxes]);\n\n  const fecthDescs = async id => {\n    setLoading(true);\n\n    try {\n      const data = await httpService.get(`${paramApi.entity}/${id}/descriptions`);\n      const ids = data.descriptions.map(des => des.id);\n      setDescriptionList(data.descriptions);\n      setSelectedRows(ids);\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    setLoading(false);\n  };\n\n  const handleSelect = async (event, option) => {\n    setSelectedRows([]);\n    await fecthDescs(option.value);\n  };\n\n  const handleSelectRows = ({\n    selectionModel\n  }) => {\n    setSelectedRows(selectionModel);\n  };\n\n  const handleCopyDescs = () => {\n    const descList = descriptionList.filter(desc => selectedRows.includes(desc.id)).map(({\n      description,\n      id\n    }) => ({\n      language_id: id,\n      description\n    }));\n\n    const mergeDescription = _.uniqBy([...descList, ...descriptionValues], 'language_id');\n\n    onChange(mergeDescription);\n    handleCloseDialog();\n  };\n\n  const handleCloseDialog = () => {\n    setDescriptionList([]);\n    setSelectedRows([]);\n    onClose();\n  };\n\n  const handleSelectModule = ({\n    entity,\n    value\n  }) => () => {\n    setParamApi({\n      entity,\n      compName: value\n    });\n    setDefaultOptions([]);\n  };\n\n  const renderCheckboxesSelect = useCallback(() => checkboxesToSelect.map(checkbox => /*#__PURE__*/_jsx(FormControlLabel, {\n    value: checkbox.value,\n    control: /*#__PURE__*/_jsx(Radio, {\n      color: \"primary\",\n      onChange: handleSelectModule(checkbox)\n    }),\n    label: checkbox.label\n  }, checkbox.value)), [checkboxesToSelect, handleSelectModule]);\n  return /*#__PURE__*/_jsx(DialogMain, {\n    open: open,\n    title: \"Copy descriptions\",\n    fullWidth: true,\n    maxWidth: \"sm\",\n    loading: loading,\n    onOk: handleCopyDescs,\n    onClose: handleCloseDialog,\n    okText: \"Save\",\n    okButtonProps: {\n      disabled: selectedRows.length === 0 || loading\n    },\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      style: {\n        marginTop: 4\n      },\n      children: [/*#__PURE__*/_jsx(When, {\n        condition: isContainCheckboxes,\n        children: /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(RadioGroup, {\n            row: true,\n            \"aria-label\": \"position\",\n            name: \"position\",\n            defaultValue: \"top\",\n            value: paramApi.compName,\n            children: renderCheckboxesSelect()\n          })\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(AppAutocompleteAsync, _objectSpread({\n          disabled: !paramApi.compName,\n          compName: paramApi.compName,\n          onChange: handleSelect,\n          label: \"Copy descriptions from\",\n          defaultOptions: defaultOptions\n        }, autocompleteProps))\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(Paper, {\n          children: /*#__PURE__*/_jsx(DataTable, {\n            hideFooter: true,\n            tableHeight: 275,\n            rows: descriptionList,\n            checkboxSelection: true,\n            selectionModel: selectedRows,\n            onSelectionModelChange: handleSelectRows,\n            columns: [_objectSpread(_objectSpread({}, defaultProperties), {}, {\n              field: 'language_desc',\n              headerName: 'Language',\n              width: 130\n            }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n              field: 'description',\n              headerName: 'Description',\n              flex: 0.7\n            })]\n          })\n        })\n      })]\n    })\n  });\n};\n\nDialogCopyDesc.defaultProps = {\n  checkboxesToSelect: []\n};\nexport default DialogCopyDesc;","map":null,"metadata":{},"sourceType":"module"}