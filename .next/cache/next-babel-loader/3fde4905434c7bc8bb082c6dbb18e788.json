{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { actionTypes } from '@/utils/constant';\nimport { createAction, createSlice, createSelector } from '@reduxjs/toolkit';\nexport const name = 'element';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nexport const tagDetail = {\n  job_id: null,\n  schematic_id: null,\n  descriptions: [],\n  additional_attributes: {},\n  tech_data: '',\n  fluid: '',\n  tag: '',\n  part_id: null,\n  element_id: null,\n  functions: []\n};\nconst initialState = {\n  initDataForList: {\n    jobs: [],\n    permissions: {\n      element: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  dataList: [],\n  initDataForCE: {\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: ''\n  },\n  dialogState: {\n    open: false,\n    loading: false,\n    tab: 0,\n    historyLogs: []\n  },\n  detail: tagDetail,\n  confirmRef: {\n    open: false,\n    message: ''\n  }\n};\nconst tagSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      state.dialogState.historyLogs = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    resetDetail(state, {\n      payload\n    }) {\n      const {\n        userJob,\n        userDrawing,\n        generateCode\n      } = payload;\n      const schematicId = userDrawing.value === -1 ? null : userDrawing;\n      const elementId = generateCode || null;\n      state.detail = _objectSpread(_objectSpread({}, initialState.detail), {}, {\n        schematic_id: schematicId,\n        job_id: userJob.value,\n        element_id: elementId\n      });\n    },\n\n    setDialogStateTab(state, {\n      payload\n    }) {\n      state.dialogState.tab = payload;\n    },\n\n    setConfirmRef(state, {\n      payload\n    }) {\n      state.confirmRef.open = payload.open;\n      state.confirmRef.message = payload.message;\n    },\n\n    setConfirmRefOpen(state, {\n      payload\n    }) {\n      state.confirmRef.open = payload;\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n});\nexport const {\n  actions\n} = tagSlice; // Saga actions\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaUpdateMultiple = createAction(`${name}/${actionTypes.UPDATE_MULTIPLE}`);\nexport const sagaChangeUserJob = createAction(`${name}/${actionTypes.CHANGE_USER_JOB}`);\nexport const sagaChangeUserSchematic = createAction(`${name}/CHANGE_USER_SCHEMATIC`);\nexport const sagaGetGenerateCode = createAction(`${name}/${actionTypes.GET_GENERATE_CODE}`);\nexport const sagaRemove = createAction(`${name}/${actionTypes.REMOVE}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`);\nexport const sagaGetPart = createAction(`${name}/${actionTypes.GET_PART}`);\nexport const sagaChangeUserDrawing = createAction(`${name}/${actionTypes.CHANGE_USER_DRAWING}`); // Selectors\n\nexport const selectState = state => state[name];\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport const selectInitDataForCE = createSelector(selectState, state => state.initDataForCE);\nexport const selectPermissions = createSelector(selectState, state => state.initDataForList.permissions.element);\nexport const selectSpecification = createSelector(selectState, state => state.initDataForList.permissions.element);\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectParameters = createSelector(selectState, ({\n  initDataForCE\n}) => initDataForCE.parameters);\nexport const selectDetail = createSelector(selectState, state => state.detail);\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport const selecGetPartRefTag = createSelector(selectState, state => state.detail);\nexport const selectConfirmRef = createSelector(selectState, state => state.confirmRef);\nexport default tagSlice;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/reducers/tag.reducer.ts"],"names":["actionTypes","createAction","createSlice","createSelector","name","resetState","RESET_STATE","tagDetail","job_id","schematic_id","descriptions","additional_attributes","tech_data","fluid","tag","part_id","element_id","functions","initialState","initDataForList","jobs","permissions","element","wiki_page","column_tooltips","dataList","initDataForCE","parameters","PLLA","dialogState","open","loading","tab","historyLogs","detail","confirmRef","message","tagSlice","reducers","setInitDataForList","state","payload","setInitDataForCE","setDataList","setDialogState","setDialogStateOpen","setDialogStateLoading","setHistoryLogs","setDetail","resetDetail","userJob","userDrawing","generateCode","schematicId","value","elementId","setDialogStateTab","setConfirmRef","setConfirmRefOpen","extraReducers","type","actions","sagaGetList","GET_LIST","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaCreate","CREATE","sagaUpdateMultiple","UPDATE_MULTIPLE","sagaChangeUserJob","CHANGE_USER_JOB","sagaChangeUserSchematic","sagaGetGenerateCode","GET_GENERATE_CODE","sagaRemove","REMOVE","sagaCloseDialog","CLOSE_DIALOG","sagaGetPart","GET_PART","sagaChangeUserDrawing","CHANGE_USER_DRAWING","selectState","selectInitDataForList","selectInitDataForCE","selectPermissions","selectSpecification","selectDialogState","selectParameters","selectDetail","selectDataList","selecGetPartRefTag","selectConfirmRef"],"mappings":"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","sourcesContent":["import { actionTypes } from '@/utils/constant'\nimport { createAction, createSlice, createSelector, PayloadAction } from '@reduxjs/toolkit'\n\nimport type { Entity, ParameterOption, DataForDropdown, PayloadOperation, HistoryLog } from '@/types/Common'\nimport type { RootReducerType } from './rootReducer'\nimport type { TagInitDataForCE, TagInitDataForList, TagDetail } from '@/types/Tag'\n\nexport const name: Entity = 'element'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const tagDetail = {\n  job_id: null,\n  schematic_id: null,\n  descriptions: [],\n  additional_attributes: {},\n  tech_data: '',\n  fluid: '',\n  tag: '',\n  part_id: null,\n  element_id: null,\n  functions: []\n} as TagDetail\n\nconst initialState = {\n  initDataForList: {\n    jobs: [],\n    permissions: {\n      element: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as TagInitDataForList,\n  dataList: [],\n  initDataForCE: {\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: ''\n  } as TagInitDataForCE,\n  dialogState: {\n    open: false,\n    loading: false,\n    tab: 0,\n    historyLogs: [] as HistoryLog[]\n  },\n  detail: tagDetail,\n  confirmRef: {\n    open: false,\n    message: ''\n  }\n}\n\nconst tagSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setInitDataForList(state, { payload }: PayloadAction<TagInitDataForList>) {\n      state.initDataForList = payload\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<TagInitDataForCE>) {\n      state.initDataForCE = payload\n    },\n    setDataList(state, { payload }) {\n      state.dataList = payload\n    },\n    setDialogState(state, { payload }) {\n      state.dialogState = { ...state.dialogState, ...payload }\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setHistoryLogs(state, { payload }: PayloadAction<HistoryLog[]>) {\n      state.dialogState.historyLogs = payload\n    },\n    setDetail(state, { payload }: PayloadAction<Partial<TagDetail>>) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    resetDetail(\n      state,\n      { payload }: PayloadAction<{ userJob: ParameterOption; userDrawing: DataForDropdown; generateCode?: string }>\n    ) {\n      const { userJob, userDrawing, generateCode } = payload\n      const schematicId = userDrawing.value === -1 ? null : userDrawing\n      const elementId = generateCode || null\n      state.detail = { ...initialState.detail, schematic_id: schematicId, job_id: userJob.value, element_id: elementId }\n    },\n    setDialogStateTab(state, { payload }: PayloadAction<number>) {\n      state.dialogState.tab = payload\n    },\n    setConfirmRef(state, { payload }) {\n      state.confirmRef.open = payload.open\n      state.confirmRef.message = payload.message\n    },\n    setConfirmRefOpen(state, { payload }: PayloadAction<boolean>) {\n      state.confirmRef.open = payload\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\nexport const { actions } = tagSlice\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaCreate = createAction<TagDetail>(`${name}/${actionTypes.CREATE}`)\nexport const sagaUpdateMultiple = createAction<TagDetail[]>(`${name}/${actionTypes.UPDATE_MULTIPLE}`)\nexport const sagaChangeUserJob = createAction<ParameterOption>(`${name}/${actionTypes.CHANGE_USER_JOB}`)\nexport const sagaChangeUserSchematic = createAction<DataForDropdown>(`${name}/CHANGE_USER_SCHEMATIC`)\nexport const sagaGetGenerateCode = createAction<{ formData: TagDetail; schematic: DataForDropdown }>(\n  `${name}/${actionTypes.GET_GENERATE_CODE}`\n)\nexport const sagaRemove = createAction<PayloadOperation[]>(`${name}/${actionTypes.REMOVE}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaGetPart = createAction<{\n  selected_part: number\n  selected_drawing: number\n  current_item: number\n  formData: TagDetail\n}>(`${name}/${actionTypes.GET_PART}`)\nexport const sagaChangeUserDrawing = createAction<DataForDropdown>(`${name}/${actionTypes.CHANGE_USER_DRAWING}`)\n\n// Selectors\nexport const selectState = (state: RootReducerType) => state[name]\n\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\n\nexport const selectInitDataForCE = createSelector(selectState, (state) => state.initDataForCE)\n\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.element)\n\nexport const selectSpecification = createSelector(selectState, (state) => state.initDataForList.permissions.element)\n\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\n\nexport const selectParameters = createSelector(selectState, ({ initDataForCE }) => initDataForCE.parameters)\n\nexport const selectDetail = createSelector(selectState, (state) => state.detail)\n\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\n\nexport const selecGetPartRefTag = createSelector(selectState, (state) => state.detail)\nexport const selectConfirmRef = createSelector(selectState, (state) => state.confirmRef)\n\nexport default tagSlice\n"]},"metadata":{},"sourceType":"module"}