{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useGetData from '@/hooks/useGetData';\nimport { DialogMain, FormControllerTabs, BtnHelp, AppTabHistoryLog } from '@/components';\nimport TabGeneral from './TabGeneral';\nimport Context from './Context';\nimport _ from 'lodash';\nimport { commonStore } from '@/store/reducers';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport getValidationSchema from './validationSchema';\nimport { defaultTagDetail } from '@/utils/defaultValues';\n\nconst DialogTag = props => {\n  var _permissions$element;\n\n  const {\n    open,\n    onClose,\n    detail,\n    initData\n  } = props;\n  const {\n    0: tab,\n    1: setTab\n  } = useState(0);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: historyLogs,\n    1: setHistoryLogs\n  } = useState([]);\n  const {\n    t\n  } = useTranslation('element');\n  const {\n    postCreate,\n    getGeneratedCode,\n    putUpdate\n  } = useGetData('elements');\n  const dispatch = useDispatch();\n  const {\n    wiki_page,\n    permissions\n  } = initData;\n  const userDrawing = useSelector(commonStore.selectUserValueDrawing);\n\n  const isCreating = _.isNil(detail === null || detail === void 0 ? void 0 : detail.id);\n\n  const vaidationSchema = useMemo(() => getValidationSchema(t), []);\n  const tagForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(vaidationSchema),\n    defaultValues: defaultTagDetail\n  });\n  useEffect(() => {\n    if (_.isPlainObject(detail)) {\n      _.forIn(detail, (value, key) => {\n        tagForm.setValue(key, value);\n      });\n    }\n  }, [detail]);\n\n  const onChangeLoading = newLoading => {\n    setLoading(newLoading);\n  };\n\n  const handleCreateTag = async formData => {\n    setLoading(true);\n\n    try {\n      const {\n        message\n      } = await postCreate(formData);\n\n      if (userDrawing.value > 0) {\n        const elementId = await getGeneratedCode({\n          drawing_id: userDrawing.value\n        });\n        tagForm.reset(_objectSpread(_objectSpread({}, detail), {}, {\n          element_id: elementId\n        }));\n      } else {\n        tagForm.reset();\n      }\n\n      dispatch(commonStore.actions.setSuccessMessage(message));\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    setLoading(false);\n  };\n\n  const handleUpdateTag = async (id, formData) => {\n    setLoading(true);\n\n    try {\n      const {\n        message\n      } = await putUpdate(id, formData);\n      dispatch(commonStore.actions.setSuccessMessage(message));\n      handleClose();\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    setLoading(false);\n  };\n\n  const handleSubmitForm = tagForm.handleSubmit(formData => {\n    var _formData$part_id;\n\n    formData.schematic_id = formData.schematic_id.value;\n    formData.part_id = ((_formData$part_id = formData.part_id) === null || _formData$part_id === void 0 ? void 0 : _formData$part_id.value) || null;\n\n    const data = _.pick(formData, ['job_id', 'schematic_id', 'element_id', 'part_id', 'tag', 'fluid', 'tech_data', 'descriptions', 'functions', 'additional_attributes']);\n\n    if (isCreating) {\n      handleCreateTag(data);\n    } else {\n      const tagEdit = _(formData).assign({\n        element_id_pk: formData.id\n      }).pick(['fluid', 'tech_data', 'descriptions', 'functions', 'tag', 'element_id', 'part_id', 'additional_attributes']).value();\n\n      handleUpdateTag(formData.id, tagEdit);\n    }\n  });\n\n  const handleClose = () => {\n    setTab(0);\n    tagForm.reset(_objectSpread({}, detail));\n    onClose();\n  };\n\n  const handleChangeTab = (event, nextTab) => {\n    setTab(nextTab);\n  };\n\n  const handleChangeHistoryLogs = data => {\n    setHistoryLogs(data);\n  };\n\n  const generalTab = {\n    label: t('common:tab.general'),\n    panel: /*#__PURE__*/_jsx(TabGeneral, {}),\n    errorKey: ['schematic_id', 'element_id ', 'job_id', 'part_id', 'tag', 'fluid', 'tech_data', 'functions']\n  };\n  const historyTab = {\n    label: t('common:tab.history'),\n    panel: /*#__PURE__*/_jsx(AppTabHistoryLog, {\n      isOpenDialog: open,\n      data: historyLogs,\n      onChange: handleChangeHistoryLogs,\n      entityId: detail === null || detail === void 0 ? void 0 : detail.id,\n      mode: \"horizonatal\",\n      tableHeight: 430,\n      descriptionRows: 26,\n      entity: \"element\"\n    }),\n    disabled: isCreating\n  };\n  const tabs = [generalTab, historyTab];\n  return /*#__PURE__*/_jsx(DialogMain, {\n    fullWidth: true,\n    maxWidth: \"md\",\n    open: open,\n    loading: loading,\n    title: /*#__PURE__*/_jsx(BtnHelp, {\n      title: isCreating ? t('form.title.create_tag') : t('form.title.update_tag'),\n      href: wiki_page\n    }),\n    onOk: handleSubmitForm,\n    onClose: handleClose,\n    okText: isCreating ? t('common:button.create') : t('common:button.update'),\n    okButtonProps: {\n      disabled: loading || !((_permissions$element = permissions.element) === null || _permissions$element === void 0 ? void 0 : _permissions$element.edit) && !isCreating\n    },\n    children: /*#__PURE__*/_jsx(Context.Provider, {\n      value: _objectSpread(_objectSpread({}, props), {}, {\n        onChangeLoading\n      }),\n      children: /*#__PURE__*/_jsx(FormControllerTabs, {\n        form: tagForm,\n        value: tab,\n        onChange: handleChangeTab,\n        tabs: tabs\n      })\n    })\n  });\n};\n\nexport default DialogTag;","map":null,"metadata":{},"sourceType":"module"}