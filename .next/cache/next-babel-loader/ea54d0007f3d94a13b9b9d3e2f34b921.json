{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchAssemblyInitDataForList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchAssemblyList),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(getAssemblyList),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(removeAssembly),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(changeUserJob),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(changeUserDrawing),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(assemblySaga);\n\nimport { takeEvery, put, call, putResolve } from 'redux-saga/effects';\nimport { select, all } from 'typed-redux-saga';\nimport _ from 'lodash';\nimport { assemblyStore, commonStore, advancedFilterActions, summaryReportActions, drawingStore } from '@/store/reducers';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport assemblyApi from '@/apis/assembly.api';\nimport partApi from '@/apis/part.api';\n\nfunction fetchAssemblyInitDataForList() {\n  var userJob, data;\n  return _regeneratorRuntime.wrap(function fetchAssemblyInitDataForList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.delegateYield(select(commonStore.selectUserValueJob), \"t0\", 1);\n\n        case 1:\n          userJob = _context.t0;\n          _context.next = 4;\n          return call(assemblyApi.getInitDataForList, {\n            job_id_pk: userJob.value\n          });\n\n        case 4:\n          data = _context.sent;\n\n          // when logged in as the fresh user, the API will not send the selected_job attribute\n          // then we will set selected_job as an empty object\n          if (_.isNull(data.selected_job)) {\n            data.selected_job = {};\n          } // the API will not send the selected_job attribute if you are in the all_job or all_standard mode,\n          // then we will set selected_job = current selected user job\n\n\n          if (userJob.value === -1 || userJob.value === -2) {\n            data.selected_job = userJob;\n          }\n\n          _context.next = 9;\n          return all([put(commonStore.actions.setUserValueJob(data.selected_job)), put(assemblyStore.actions.setInitDataForList(data))]);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction fetchAssemblyList() {\n  var _yield$all, tableState, searchQuery, filterData, userJob, userDrawing, page, per_page, data;\n\n  return _regeneratorRuntime.wrap(function fetchAssemblyList$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.delegateYield(all({\n            tableState: select(commonStore.selectTableState),\n            searchQuery: select(commonStore.selectSearchQuery),\n            filterData: select(advancedFilterActions.selectFilterData),\n            userJob: select(commonStore.selectUserValueJob),\n            userDrawing: select(commonStore.selectUserValueDrawing)\n          }), \"t0\", 1);\n\n        case 1:\n          _yield$all = _context2.t0;\n          tableState = _yield$all.tableState;\n          searchQuery = _yield$all.searchQuery;\n          filterData = _yield$all.filterData;\n          userJob = _yield$all.userJob;\n          userDrawing = _yield$all.userDrawing;\n\n          if (userJob.value) {\n            _context2.next = 9;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 9:\n          page = tableState.page, per_page = tableState.per_page;\n          _context2.next = 12;\n          return call(assemblyApi.getList, _objectSpread({\n            per_page: per_page,\n            page: page,\n            s: searchQuery,\n            job_id: userJob.value,\n            drawing_id: userDrawing.value\n          }, filterData));\n\n        case 12:\n          data = _context2.sent;\n          _context2.next = 15;\n          return put(commonStore.actions.setTableState({\n            total_items: data.total_items\n          }));\n\n        case 15:\n          _context2.next = 17;\n          return put(assemblyStore.actions.setDataList(data.assemblies));\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction getAssemblyList() {\n  var permissions;\n  return _regeneratorRuntime.wrap(function getAssemblyList$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 2:\n          _context3.prev = 2;\n          _context3.next = 5;\n          return call(fetchAssemblyInitDataForList);\n\n        case 5:\n          return _context3.delegateYield(select(assemblyStore.selectPermissions), \"t0\", 6);\n\n        case 6:\n          permissions = _context3.t0;\n\n          if (!(permissions === null || permissions === void 0 ? void 0 : permissions.view)) {\n            _context3.next = 10;\n            break;\n          }\n\n          _context3.next = 10;\n          return call(fetchAssemblyList);\n\n        case 10:\n          _context3.next = 16;\n          break;\n\n        case 12:\n          _context3.prev = 12;\n          _context3.t1 = _context3[\"catch\"](2);\n          _context3.next = 16;\n          return errorSaga.handleError(_context3.t1);\n\n        case 16:\n          _context3.next = 18;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 18:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[2, 12]]);\n}\n\nfunction removeAssembly(_ref) {\n  var payload, data, entity;\n  return _regeneratorRuntime.wrap(function removeAssembly$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          payload = _ref.payload;\n          _context4.next = 3;\n          return put(commonStore.actions.setLoadingPage(true));\n\n        case 3:\n          _context4.prev = 3;\n          _context4.next = 6;\n          return call(partApi.executeOperation, 'delete', payload);\n\n        case 6:\n          data = _context4.sent;\n\n          if (!(data.failed_count > 0)) {\n            _context4.next = 14;\n            break;\n          }\n\n          _context4.next = 10;\n          return put(summaryReportActions.setReportData(data));\n\n        case 10:\n          _context4.next = 12;\n          return put(summaryReportActions.setOpen(true));\n\n        case 12:\n          _context4.next = 16;\n          break;\n\n        case 14:\n          _context4.next = 16;\n          return put(commonStore.actions.setSuccessMessage(data.message));\n\n        case 16:\n          return _context4.delegateYield(select(commonStore.selectEntity), \"t0\", 17);\n\n        case 17:\n          entity = _context4.t0;\n\n          if (!(entity === 'drawing')) {\n            _context4.next = 23;\n            break;\n          }\n\n          _context4.next = 21;\n          return put(drawingStore.sagaGetDrawingPartList());\n\n        case 21:\n          _context4.next = 25;\n          break;\n\n        case 23:\n          _context4.next = 25;\n          return call(fetchAssemblyList);\n\n        case 25:\n          _context4.next = 31;\n          break;\n\n        case 27:\n          _context4.prev = 27;\n          _context4.t1 = _context4[\"catch\"](3);\n          _context4.next = 31;\n          return errorSaga.handleError(_context4.t1);\n\n        case 31:\n          _context4.next = 33;\n          return put(commonStore.actions.setLoadingPage(false));\n\n        case 33:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[3, 27]]);\n}\n\nfunction changeUserJob(_ref2) {\n  var payload;\n  return _regeneratorRuntime.wrap(function changeUserJob$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context5.next = 3;\n          return all([put(commonStore.actions.setUserValueJob(payload)), put(commonStore.actions.setUserValueDrawing(commonStore.initialState.userValue.drawing))]);\n\n        case 3:\n          _context5.next = 5;\n          return call(getAssemblyList);\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction changeUserDrawing(_ref3) {\n  var payload;\n  return _regeneratorRuntime.wrap(function changeUserDrawing$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          payload = _ref3.payload;\n          _context6.next = 3;\n          return putResolve(commonStore.actions.setUserValueDrawing(payload));\n\n        case 3:\n          _context6.next = 5;\n          return call(getAssemblyList);\n\n        case 5:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction assemblySaga() {\n  return _regeneratorRuntime.wrap(function assemblySaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(assemblyStore.sagaGetList, getAssemblyList);\n\n        case 2:\n          _context7.next = 4;\n          return takeEvery(assemblyStore.sagaRemove, removeAssembly);\n\n        case 4:\n          _context7.next = 6;\n          return takeEvery(assemblyStore.sagaChangeUserJob, changeUserJob);\n\n        case 6:\n          _context7.next = 8;\n          return takeEvery(assemblyStore.sagaChangeUserDrawing, changeUserDrawing);\n\n        case 8:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nexport default assemblySaga;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/saga/assembly.saga.ts"],"names":["fetchAssemblyInitDataForList","fetchAssemblyList","getAssemblyList","removeAssembly","changeUserJob","changeUserDrawing","assemblySaga","takeEvery","put","call","putResolve","select","all","_","assemblyStore","commonStore","advancedFilterActions","summaryReportActions","drawingStore","errorSaga","assemblyApi","partApi","selectUserValueJob","userJob","getInitDataForList","job_id_pk","value","data","isNull","selected_job","actions","setUserValueJob","setInitDataForList","tableState","selectTableState","searchQuery","selectSearchQuery","filterData","selectFilterData","userDrawing","selectUserValueDrawing","page","per_page","getList","s","job_id","drawing_id","setTableState","total_items","setDataList","assemblies","setLoadingPage","selectPermissions","permissions","view","handleError","payload","executeOperation","failed_count","setReportData","setOpen","setSuccessMessage","message","selectEntity","entity","sagaGetDrawingPartList","setUserValueDrawing","initialState","userValue","drawing","sagaGetList","sagaRemove","sagaChangeUserJob","sagaChangeUserDrawing"],"mappings":";;;;;;;oDASUA,4B;qDAqBAC,iB;qDAwBAC,e;qDAcAC,c;qDAsBAC,a;qDAQAC,iB;qDAKAC,Y;;AAvGV,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA4B,kBAA5B;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,qBAArC,EAA4DC,oBAA5D,EAAkFC,YAAlF,QAAsG,kBAAtG;AACA,OAAO,KAAKC,SAAZ,MAA2B,wBAA3B;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,OAAP,MAAoB,iBAApB;;AAEA,SAAUrB,4BAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACkB,wCAAOW,MAAM,CAACI,WAAW,CAACO,kBAAb,CAAb;;AADlB;AACQC,UAAAA,OADR;AAAA;AAEe,iBAAMd,IAAI,CAACW,WAAW,CAACI,kBAAb,EAAiC;AACtDC,YAAAA,SAAS,EAAEF,OAAO,CAACG;AADmC,WAAjC,CAAV;;AAFf;AAEQC,UAAAA,IAFR;;AAKE;AACA;AACA,cAAId,CAAC,CAACe,MAAF,CAASD,IAAI,CAACE,YAAd,CAAJ,EAAiC;AAC/BF,YAAAA,IAAI,CAACE,YAAL,GAAoB,EAApB;AACD,WATH,CAUE;AACA;;;AACA,cAAIN,OAAO,CAACG,KAAR,KAAkB,CAAC,CAAnB,IAAwBH,OAAO,CAACG,KAAR,KAAkB,CAAC,CAA/C,EAAkD;AAChDC,YAAAA,IAAI,CAACE,YAAL,GAAoBN,OAApB;AACD;;AAdH;AAeE,iBAAMX,GAAG,CAAC,CACRJ,GAAG,CAACO,WAAW,CAACe,OAAZ,CAAoBC,eAApB,CAAoCJ,IAAI,CAACE,YAAzC,CAAD,CADK,EAERrB,GAAG,CAACM,aAAa,CAACgB,OAAd,CAAsBE,kBAAtB,CAAyCL,IAAzC,CAAD,CAFK,CAAD,CAAT;;AAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBA,SAAU1B,iBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AACwE,yCAAOW,GAAG,CAAC;AAC/EqB,YAAAA,UAAU,EAAEtB,MAAM,CAACI,WAAW,CAACmB,gBAAb,CAD6D;AAE/EC,YAAAA,WAAW,EAAExB,MAAM,CAACI,WAAW,CAACqB,iBAAb,CAF4D;AAG/EC,YAAAA,UAAU,EAAE1B,MAAM,CAACK,qBAAqB,CAACsB,gBAAvB,CAH6D;AAI/Ef,YAAAA,OAAO,EAAEZ,MAAM,CAACI,WAAW,CAACO,kBAAb,CAJgE;AAK/EiB,YAAAA,WAAW,EAAE5B,MAAM,CAACI,WAAW,CAACyB,sBAAb;AAL4D,WAAD,CAAV;;AADxE;AAAA;AACUP,UAAAA,UADV,cACUA,UADV;AACsBE,UAAAA,WADtB,cACsBA,WADtB;AACmCE,UAAAA,UADnC,cACmCA,UADnC;AAC+Cd,UAAAA,OAD/C,cAC+CA,OAD/C;AACwDgB,UAAAA,WADxD,cACwDA,WADxD;;AAAA,cAQOhB,OAAO,CAACG,KARf;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAWUe,UAAAA,IAXV,GAW6BR,UAX7B,CAWUQ,IAXV,EAWgBC,QAXhB,GAW6BT,UAX7B,CAWgBS,QAXhB;AAAA;AAYe,iBAAMjC,IAAI,CAACW,WAAW,CAACuB,OAAb;AACrBD,YAAAA,QAAQ,EAARA,QADqB;AAErBD,YAAAA,IAAI,EAAJA,IAFqB;AAGrBG,YAAAA,CAAC,EAAET,WAHkB;AAIrBU,YAAAA,MAAM,EAAEtB,OAAO,CAACG,KAJK;AAKrBoB,YAAAA,UAAU,EAAEP,WAAW,CAACb;AALH,aAMlBW,UANkB,EAAV;;AAZf;AAYQV,UAAAA,IAZR;AAAA;AAoBE,iBAAMnB,GAAG,CAACO,WAAW,CAACe,OAAZ,CAAoBiB,aAApB,CAAkC;AAAEC,YAAAA,WAAW,EAAErB,IAAI,CAACqB;AAApB,WAAlC,CAAD,CAAT;;AApBF;AAAA;AAqBE,iBAAMxC,GAAG,CAACM,aAAa,CAACgB,OAAd,CAAsBmB,WAAtB,CAAkCtB,IAAI,CAACuB,UAAvC,CAAD,CAAT;;AArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBA,SAAUhD,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,GAAG,CAACO,WAAW,CAACe,OAAZ,CAAoBqB,cAApB,CAAmC,IAAnC,CAAD,CAAT;;AADF;AAAA;AAAA;AAGI,iBAAM1C,IAAI,CAACT,4BAAD,CAAV;;AAHJ;AAIwB,yCAAOW,MAAM,CAACG,aAAa,CAACsC,iBAAf,CAAb;;AAJxB;AAIUC,UAAAA,WAJV;;AAAA,gBAKQA,WALR,aAKQA,WALR,uBAKQA,WAAW,CAAEC,IALrB;AAAA;AAAA;AAAA;;AAAA;AAMM,iBAAM7C,IAAI,CAACR,iBAAD,CAAV;;AANN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASI,iBAAMkB,SAAS,CAACoC,WAAV,cAAN;;AATJ;AAAA;AAWE,iBAAM/C,GAAG,CAACO,WAAW,CAACe,OAAZ,CAAoBqB,cAApB,CAAmC,KAAnC,CAAD,CAAT;;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUhD,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2BqD,UAAAA,OAA3B,QAA2BA,OAA3B;AAAA;AACE,iBAAMhD,GAAG,CAACO,WAAW,CAACe,OAAZ,CAAoBqB,cAApB,CAAmC,IAAnC,CAAD,CAAT;;AADF;AAAA;AAAA;AAGiB,iBAAM1C,IAAI,CAACY,OAAO,CAACoC,gBAAT,EAA2B,QAA3B,EAAqCD,OAArC,CAAV;;AAHjB;AAGU7B,UAAAA,IAHV;;AAAA,gBAIQA,IAAI,CAAC+B,YAAL,GAAoB,CAJ5B;AAAA;AAAA;AAAA;;AAAA;AAKM,iBAAMlD,GAAG,CAACS,oBAAoB,CAAC0C,aAArB,CAAmChC,IAAnC,CAAD,CAAT;;AALN;AAAA;AAMM,iBAAMnB,GAAG,CAACS,oBAAoB,CAAC2C,OAArB,CAA6B,IAA7B,CAAD,CAAT;;AANN;AAAA;AAAA;;AAAA;AAAA;AAQM,iBAAMpD,GAAG,CAACO,WAAW,CAACe,OAAZ,CAAoB+B,iBAApB,CAAsClC,IAAI,CAACmC,OAA3C,CAAD,CAAT;;AARN;AAUmB,yCAAOnD,MAAM,CAACI,WAAW,CAACgD,YAAb,CAAb;;AAVnB;AAUUC,UAAAA,MAVV;;AAAA,gBAWQA,MAAM,KAAK,SAXnB;AAAA;AAAA;AAAA;;AAAA;AAYM,iBAAMxD,GAAG,CAACU,YAAY,CAAC+C,sBAAb,EAAD,CAAT;;AAZN;AAAA;AAAA;;AAAA;AAAA;AAcM,iBAAMxD,IAAI,CAACR,iBAAD,CAAV;;AAdN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiBI,iBAAMkB,SAAS,CAACoC,WAAV,cAAN;;AAjBJ;AAAA;AAmBE,iBAAM/C,GAAG,CAACO,WAAW,CAACe,OAAZ,CAAoBqB,cAApB,CAAmC,KAAnC,CAAD,CAAT;;AAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,SAAU/C,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0BoD,UAAAA,OAA1B,SAA0BA,OAA1B;AAAA;AACE,iBAAM5C,GAAG,CAAC,CACRJ,GAAG,CAACO,WAAW,CAACe,OAAZ,CAAoBC,eAApB,CAAoCyB,OAApC,CAAD,CADK,EAERhD,GAAG,CAACO,WAAW,CAACe,OAAZ,CAAoBoC,mBAApB,CAAwCnD,WAAW,CAACoD,YAAZ,CAAyBC,SAAzB,CAAmCC,OAA3E,CAAD,CAFK,CAAD,CAAT;;AADF;AAAA;AAKE,iBAAM5D,IAAI,CAACP,eAAD,CAAV;;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAUG,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8BmD,UAAAA,OAA9B,SAA8BA,OAA9B;AAAA;AACE,iBAAM9C,UAAU,CAACK,WAAW,CAACe,OAAZ,CAAoBoC,mBAApB,CAAwCV,OAAxC,CAAD,CAAhB;;AADF;AAAA;AAEE,iBAAM/C,IAAI,CAACP,eAAD,CAAV;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUI,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMC,SAAS,CAACO,aAAa,CAACwD,WAAf,EAA4BpE,eAA5B,CAAf;;AADF;AAAA;AAEE,iBAAMK,SAAS,CAACO,aAAa,CAACyD,UAAf,EAA2BpE,cAA3B,CAAf;;AAFF;AAAA;AAGE,iBAAMI,SAAS,CAACO,aAAa,CAAC0D,iBAAf,EAAkCpE,aAAlC,CAAf;;AAHF;AAAA;AAIE,iBAAMG,SAAS,CAACO,aAAa,CAAC2D,qBAAf,EAAsCpE,iBAAtC,CAAf;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAeC,YAAf","sourcesContent":["import { takeEvery, put, call, putResolve } from 'redux-saga/effects'\nimport { select, all } from 'typed-redux-saga'\nimport _ from 'lodash'\n\nimport { assemblyStore, commonStore, advancedFilterActions, summaryReportActions, drawingStore } from '@/store/reducers'\nimport * as errorSaga from '@/store/saga/errorSaga'\nimport assemblyApi from '@/apis/assembly.api'\nimport partApi from '@/apis/part.api'\n\nfunction* fetchAssemblyInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob)\n  const data = yield call(assemblyApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  })\n  // when logged in as the fresh user, the API will not send the selected_job attribute\n  // then we will set selected_job as an empty object\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {}\n  }\n  // the API will not send the selected_job attribute if you are in the all_job or all_standard mode,\n  // then we will set selected_job = current selected user job\n  if (userJob.value === -1 || userJob.value === -2) {\n    data.selected_job = userJob\n  }\n  yield all([\n    put(commonStore.actions.setUserValueJob(data.selected_job)),\n    put(assemblyStore.actions.setInitDataForList(data))\n  ])\n}\n\nfunction* fetchAssemblyList() {\n  const { tableState, searchQuery, filterData, userJob, userDrawing } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    userDrawing: select(commonStore.selectUserValueDrawing)\n  })\n  if (!userJob.value) {\n    return\n  }\n  const { page, per_page } = tableState\n  const data = yield call(assemblyApi.getList, {\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    drawing_id: userDrawing.value,\n    ...filterData\n  })\n  yield put(commonStore.actions.setTableState({ total_items: data.total_items }))\n  yield put(assemblyStore.actions.setDataList(data.assemblies))\n}\n\nfunction* getAssemblyList() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchAssemblyInitDataForList)\n    const permissions = yield* select(assemblyStore.selectPermissions)\n    if (permissions?.view) {\n      yield call(fetchAssemblyList)\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* removeAssembly({ payload }: ReturnType<typeof assemblyStore.sagaRemove>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const data = yield call(partApi.executeOperation, 'delete', payload)\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data))\n      yield put(summaryReportActions.setOpen(true))\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message))\n    }\n    const entity = yield* select(commonStore.selectEntity)\n    if (entity === 'drawing') {\n      yield put(drawingStore.sagaGetDrawingPartList())\n    } else {\n      yield call(fetchAssemblyList)\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* changeUserJob({ payload }: ReturnType<typeof assemblyStore.sagaChangeUserJob>) {\n  yield all([\n    put(commonStore.actions.setUserValueJob(payload)),\n    put(commonStore.actions.setUserValueDrawing(commonStore.initialState.userValue.drawing))\n  ])\n  yield call(getAssemblyList)\n}\n\nfunction* changeUserDrawing({ payload }: ReturnType<typeof assemblyStore.sagaChangeUserDrawing>) {\n  yield putResolve(commonStore.actions.setUserValueDrawing(payload))\n  yield call(getAssemblyList)\n}\n\nfunction* assemblySaga() {\n  yield takeEvery(assemblyStore.sagaGetList, getAssemblyList)\n  yield takeEvery(assemblyStore.sagaRemove, removeAssembly)\n  yield takeEvery(assemblyStore.sagaChangeUserJob, changeUserJob)\n  yield takeEvery(assemblyStore.sagaChangeUserDrawing, changeUserDrawing)\n}\n\nexport default assemblySaga\n"]},"metadata":{},"sourceType":"module"}