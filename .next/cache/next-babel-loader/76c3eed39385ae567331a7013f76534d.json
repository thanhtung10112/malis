{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\App\\\\DatePicker\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { TextField, InputAdornment } from '@material-ui/core';\nimport DateRangeIcon from '@material-ui/icons/DateRange'; // import DialogCalendar from '../DialogCalendar'\n\nimport { DialogCalendar, FormControllerErrorMessage } from '@/components/index';\nimport { isValid, parseISO, format } from 'date-fns';\nimport _ from 'lodash';\nimport * as constant from '@/utils/constant';\nimport { useToggle } from 'react-use';\nimport useStyles from './styles'; // import type { CustomDatePickerProps } from './type'\n\nfunction DatePicker(props) {\n  _s();\n\n  var value = props.value,\n      onChange = props.onChange,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      helperText = props.helperText,\n      error = props.error,\n      datePickerProps = _objectWithoutProperties(props, [\"value\", \"onChange\", \"minDate\", \"maxDate\", \"helperText\", \"error\"]);\n\n  var classes = useStyles();\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dateValue = _React$useState2[0],\n      setDateValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      openCalendar = _React$useState4[0],\n      setOpenCalendar = _React$useState4[1];\n\n  var _useToggle = useToggle(false),\n      _useToggle2 = _slicedToArray(_useToggle, 2),\n      isFocusing = _useToggle2[0],\n      setIsFocusing = _useToggle2[1];\n\n  var openTooltip = React.useMemo(function () {\n    return isFocusing && error;\n  }, [error, isFocusing]);\n  /**\n   * The function used to check valid date\n   * @param {String} date\n   * @return {boolean}\n   */\n\n  var isValidDate = function isValidDate(date) {\n    return isValid(parseISO(date));\n  };\n\n  React.useEffect(function () {\n    setDateValue(value);\n  }, [value]);\n\n  var onHoverField = function onHoverField() {\n    setIsFocusing(true);\n  };\n\n  var onLeavingField = function onLeavingField() {\n    setIsFocusing(false);\n  };\n\n  var addZero = function addZero(value) {\n    var splitMonth = value.toString().split('');\n\n    if (splitMonth.length === 2) {\n      return value;\n    }\n\n    return \"0\".concat(splitMonth);\n  };\n\n  var getSymbol = function getSymbol(date) {\n    if (date.includes('-')) {\n      return '-';\n    } else if (date.includes('/')) {\n      return '/';\n    } else {\n      return '.';\n    }\n  };\n  /**\n   * Build a date string based on symbols (\"/\", \".\", \"-\")\n   * @param {String} date\n   * @return {String} ex: 2021-07-01 (yyyy-MM-dd)\n   */\n\n\n  var buildDate = function buildDate(date) {\n    var symbol = getSymbol(date);\n    var splitDate = date.split(symbol); // 2021-07-02 => [2021, 07, 02]\n    // case user input full values\n\n    if (splitDate.length === 3 && symbol === '-') {\n      return format(new Date(date), constant.DATE_FORMAT);\n    }\n\n    if (splitDate.length === 3 && symbol !== '-') {\n      var newDate = date.split(symbol).reverse().join(symbol);\n      return format(new Date(newDate), constant.DATE_FORMAT);\n    }\n\n    var currentDate = new Date();\n    var year = currentDate.getFullYear();\n    var month;\n    var day;\n\n    if (splitDate.length === 2) {\n      // case user input two values,\n      // ex1: 02-01 => month = 02, day = 01\n      // ex2: 02/01 => month = 01, day = 02\n      // ex3: 02.01 => month = 01, day = 02\n      month = symbol === '-' ? splitDate[0] : splitDate[1];\n      day = symbol === '-' ? splitDate[1] : splitDate[0];\n    } else {\n      // case user input single value, then we will get the month in the current date\n      month = currentDate.getMonth() + 1;\n      day = date;\n    }\n\n    return \"\".concat(year, \"-\").concat(addZero(month), \"-\").concat(addZero(day));\n  };\n\n  var handleTransformValue = function handleTransformValue(event) {\n    var value = _.trim(event.target.value);\n\n    var date = value;\n\n    if (constant.REGEX_VALID_DATE_EUROPE.test(value) || constant.REGEX_VALID_DATE_ASIA.test(value)) {\n      date = buildDate(value);\n    }\n\n    if (isValidDate(date)) {\n      setDateValue(date);\n      onChange(date);\n    } else {\n      setDateValue(value);\n      onChange(value);\n    }\n  };\n\n  var handleChangeValue = function handleChangeValue(event) {\n    setDateValue(event.target.value);\n  };\n\n  var handleOpenCalendar = function handleOpenCalendar() {\n    setOpenCalendar(true);\n  };\n\n  var handleCloseCalendar = function handleCloseCalendar() {\n    setOpenCalendar(false);\n  };\n\n  var handleChangeDate = function handleChangeDate(nextDate) {\n    var dateFormat = format(nextDate, constant.DATE_FORMAT);\n    onChange(dateFormat);\n    handleCloseCalendar();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FormControllerErrorMessage, {\n      title: helperText,\n      open: openTooltip,\n      children: /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, datePickerProps), {}, {\n        error: error,\n        onMouseOver: onHoverField,\n        onMouseLeave: onLeavingField,\n        value: dateValue,\n        onChange: handleChangeValue,\n        onBlur: handleTransformValue,\n        variant: \"outlined\",\n        InputProps: {\n          endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"end\",\n            children: /*#__PURE__*/_jsxDEV(DateRangeIcon, {\n              className: classes.icon,\n              onClick: handleOpenCalendar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this)\n        }\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogCalendar, {\n      open: openCalendar,\n      date: dateValue,\n      onChange: handleChangeDate,\n      onClose: handleCloseCalendar,\n      minDate: minDate,\n      maxDate: maxDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DatePicker, \"B77jo/xFCFSK2A0ZatGZ72ZxAqw=\", false, function () {\n  return [useStyles, useToggle];\n});\n\n_c = DatePicker;\nexport default DatePicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"DatePicker\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/App/DatePicker/index.tsx"],"names":["React","TextField","InputAdornment","DateRangeIcon","DialogCalendar","FormControllerErrorMessage","isValid","parseISO","format","_","constant","useToggle","useStyles","DatePicker","props","value","onChange","minDate","maxDate","helperText","error","datePickerProps","classes","useState","dateValue","setDateValue","openCalendar","setOpenCalendar","isFocusing","setIsFocusing","openTooltip","useMemo","isValidDate","date","useEffect","onHoverField","onLeavingField","addZero","splitMonth","toString","split","length","getSymbol","includes","buildDate","symbol","splitDate","Date","DATE_FORMAT","newDate","reverse","join","currentDate","year","getFullYear","month","day","getMonth","handleTransformValue","event","trim","target","REGEX_VALID_DATE_EUROPE","test","REGEX_VALID_DATE_ASIA","handleChangeValue","handleOpenCalendar","handleCloseCalendar","handleChangeDate","nextDate","dateFormat","endAdornment","icon"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { TextField, InputAdornment } from '@material-ui/core'\nimport DateRangeIcon from '@material-ui/icons/DateRange'\n\n// import DialogCalendar from '../DialogCalendar'\nimport { DialogCalendar, FormControllerErrorMessage } from '@/components/index'\n\nimport { isValid, parseISO, format } from 'date-fns'\nimport _ from 'lodash'\nimport * as constant from '@/utils/constant'\n\nimport { useToggle } from 'react-use'\nimport useStyles from './styles'\n\n// import type { CustomDatePickerProps } from './type'\n\nfunction DatePicker(props) {\n  const { value, onChange, minDate, maxDate, helperText, error, ...datePickerProps } = props\n  const classes = useStyles()\n\n  const [dateValue, setDateValue] = React.useState('')\n  const [openCalendar, setOpenCalendar] = React.useState(false)\n\n  const [isFocusing, setIsFocusing] = useToggle(false)\n\n  const openTooltip = React.useMemo(() => isFocusing && error, [error, isFocusing])\n\n  /**\n   * The function used to check valid date\n   * @param {String} date\n   * @return {boolean}\n   */\n  const isValidDate = (date) => {\n    return isValid(parseISO(date))\n  }\n\n  React.useEffect(() => {\n    setDateValue(value)\n  }, [value])\n\n  const onHoverField = () => {\n    setIsFocusing(true)\n  }\n\n  const onLeavingField = () => {\n    setIsFocusing(false)\n  }\n\n  const addZero = (value) => {\n    const splitMonth = value.toString().split('')\n    if (splitMonth.length === 2) {\n      return value\n    }\n    return `0${splitMonth}`\n  }\n\n  const getSymbol = (date) => {\n    if (date.includes('-')) {\n      return '-'\n    } else if (date.includes('/')) {\n      return '/'\n    } else {\n      return '.'\n    }\n  }\n\n  /**\n   * Build a date string based on symbols (\"/\", \".\", \"-\")\n   * @param {String} date\n   * @return {String} ex: 2021-07-01 (yyyy-MM-dd)\n   */\n  const buildDate = (date) => {\n    const symbol = getSymbol(date)\n    const splitDate = date.split(symbol) // 2021-07-02 => [2021, 07, 02]\n    // case user input full values\n    if (splitDate.length === 3 && symbol === '-') {\n      return format(new Date(date), constant.DATE_FORMAT)\n    }\n    if (splitDate.length === 3 && symbol !== '-') {\n      const newDate = date.split(symbol).reverse().join(symbol)\n      return format(new Date(newDate), constant.DATE_FORMAT)\n    }\n    const currentDate = new Date()\n    const year = currentDate.getFullYear()\n    let month\n    let day\n    if (splitDate.length === 2) {\n      // case user input two values,\n      // ex1: 02-01 => month = 02, day = 01\n      // ex2: 02/01 => month = 01, day = 02\n      // ex3: 02.01 => month = 01, day = 02\n      month = symbol === '-' ? splitDate[0] : splitDate[1]\n      day = symbol === '-' ? splitDate[1] : splitDate[0]\n    } else {\n      // case user input single value, then we will get the month in the current date\n      month = currentDate.getMonth() + 1\n      day = date\n    }\n    return `${year}-${addZero(month)}-${addZero(day)}`\n  }\n\n  const handleTransformValue = (event) => {\n    const value = _.trim(event.target.value)\n    let date = value\n    if (constant.REGEX_VALID_DATE_EUROPE.test(value) || constant.REGEX_VALID_DATE_ASIA.test(value)) {\n      date = buildDate(value)\n    }\n    if (isValidDate(date)) {\n      setDateValue(date)\n      onChange(date)\n    } else {\n      setDateValue(value)\n      onChange(value)\n    }\n  }\n\n  const handleChangeValue = (event) => {\n    setDateValue(event.target.value)\n  }\n\n  const handleOpenCalendar = () => {\n    setOpenCalendar(true)\n  }\n\n  const handleCloseCalendar = () => {\n    setOpenCalendar(false)\n  }\n\n  const handleChangeDate = (nextDate) => {\n    const dateFormat = format(nextDate, constant.DATE_FORMAT)\n    onChange(dateFormat)\n    handleCloseCalendar()\n  }\n\n  return (\n    <>\n      <FormControllerErrorMessage title={helperText} open={openTooltip}>\n        <TextField\n          {...datePickerProps}\n          error={error}\n          onMouseOver={onHoverField}\n          onMouseLeave={onLeavingField}\n          value={dateValue}\n          onChange={handleChangeValue}\n          onBlur={handleTransformValue}\n          variant=\"outlined\"\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <DateRangeIcon className={classes.icon} onClick={handleOpenCalendar} />\n              </InputAdornment>\n            )\n          }}\n        />\n      </FormControllerErrorMessage>\n      <DialogCalendar\n        open={openCalendar}\n        date={dateValue}\n        onChange={handleChangeDate}\n        onClose={handleCloseCalendar}\n        minDate={minDate}\n        maxDate={maxDate}\n      />\n    </>\n  )\n}\n\nexport default DatePicker\n"]},"metadata":{},"sourceType":"module"}