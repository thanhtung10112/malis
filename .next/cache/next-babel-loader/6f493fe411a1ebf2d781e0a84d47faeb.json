{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport const name = 'manufacturer';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nexport const initialState = {\n  dialogState: {\n    open: false,\n    loading: false\n  },\n  dataList: [],\n  detail: {\n    manufacturer_id: null,\n    name: ''\n  },\n  initDataForCE: {\n    next_code: null,\n    wiki_page: ''\n  },\n  initDataForList: {\n    permissions: {\n      manufacturer: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  }\n};\nconst manufacturer = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setPermissions(state, {\n      payload\n    }) {\n      state.initDataForList.permissions.manufacturer = payload;\n    },\n\n    setNextCode(state, {\n      payload\n    }) {\n      state.initDataForCE.next_code = payload;\n    },\n\n    resetDetail(state) {\n      state.detail = _objectSpread(_objectSpread({}, initialState.detail), {}, {\n        manufacturer_id: state.initDataForCE.next_code\n      });\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n}); // Actions\n\nexport const {\n  actions\n} = manufacturer; // Saga actions\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaUpdate = createAction(`${name}/${actionTypes.UPDATE}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaGenerateCode = createAction(`${name}/${actionTypes.GET_GENERATE_CODE}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`); // Selectors\n\nexport const selectState = state => state[name];\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport const selectDetail = createSelector(selectState, state => state.detail);\nexport const selectPermissions = createSelector(selectState, state => state.initDataForList.permissions.manufacturer);\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport const selectInitDataForCE = createSelector(selectState, state => state.initDataForCE);\nexport default manufacturer;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/reducers/manufacturer.reducer.ts"],"names":["createSlice","createAction","createSelector","actionTypes","name","resetState","RESET_STATE","initialState","dialogState","open","loading","dataList","detail","manufacturer_id","initDataForCE","next_code","wiki_page","initDataForList","permissions","manufacturer","column_tooltips","reducers","setDialogState","state","payload","setDialogStateOpen","setDialogStateLoading","setDataList","setDetail","setInitDataForList","setInitDataForCE","setPermissions","setNextCode","resetDetail","extraReducers","type","actions","sagaGetList","GET_LIST","sagaCreate","CREATE","sagaUpdate","UPDATE","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaGenerateCode","GET_GENERATE_CODE","sagaCloseDialog","CLOSE_DIALOG","selectState","selectDialogState","selectDataList","selectDetail","selectPermissions","selectInitDataForList","selectInitDataForCE"],"mappings":"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","sourcesContent":["import { createSlice, createAction, PayloadAction, createSelector } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\n\nimport type { Entity } from '@/types/Common'\nimport type { RootReducerType } from './rootReducer'\nimport type {\n  ManufacturerInitDataForCE,\n  ManufacturerInitDataForList,\n  ManufacturerItem,\n  ManufacturerPermissions\n} from '@/types/Manufacturer'\n\nexport const name: Entity = 'manufacturer'\n\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const initialState = {\n  dialogState: {\n    open: false,\n    loading: false\n  },\n  dataList: [] as ManufacturerItem[],\n  detail: {\n    manufacturer_id: null,\n    name: ''\n  } as ManufacturerItem,\n  initDataForCE: {\n    next_code: null,\n    wiki_page: ''\n  } as ManufacturerInitDataForCE,\n  initDataForList: {\n    permissions: {\n      manufacturer: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as ManufacturerInitDataForList\n}\n\nconst manufacturer = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDialogState(state, { payload }) {\n      state.dialogState = {\n        ...state.dialogState,\n        ...payload\n      }\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setDataList(state, { payload }: PayloadAction<ManufacturerItem[]>) {\n      state.dataList = payload\n    },\n    setDetail(state, { payload }: PayloadAction<Partial<ManufacturerItem>>) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    setInitDataForList(state, { payload }: PayloadAction<ManufacturerInitDataForList>) {\n      state.initDataForList = payload\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<ManufacturerInitDataForCE>) {\n      state.initDataForCE = payload\n    },\n    setPermissions(state, { payload }: PayloadAction<ManufacturerPermissions>) {\n      state.initDataForList.permissions.manufacturer = payload\n    },\n    setNextCode(state, { payload }: PayloadAction<number>) {\n      state.initDataForCE.next_code = payload\n    },\n    resetDetail(state) {\n      state.detail = {\n        ...initialState.detail,\n        manufacturer_id: state.initDataForCE.next_code\n      }\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\n// Actions\nexport const { actions } = manufacturer\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaCreate = createAction<ManufacturerItem>(`${name}/${actionTypes.CREATE}`)\nexport const sagaUpdate = createAction<{ id: number; formData: ManufacturerItem }>(`${name}/${actionTypes.UPDATE}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaGenerateCode = createAction<ManufacturerItem>(`${name}/${actionTypes.GET_GENERATE_CODE}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\n\n// Selectors\nexport const selectState = (state: RootReducerType) => state[name]\n\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\nexport const selectDetail = createSelector(selectState, (state) => state.detail)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.manufacturer)\n\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\n\nexport const selectInitDataForCE = createSelector(selectState, (state) => state.initDataForCE)\n\nexport default manufacturer\n"]},"metadata":{},"sourceType":"module"}