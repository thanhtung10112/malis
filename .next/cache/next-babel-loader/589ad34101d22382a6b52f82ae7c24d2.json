{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport isEmpty from 'lodash/isEmpty';\nimport cookies from 'js-cookie';\nconst domain = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:5000/';\n\nclass Http {\n  get(path, query) {\n    const options = {};\n    const requestUrl = domain + path;\n\n    if (isEmpty(query) === false) {\n      options.params = query;\n    }\n\n    const token = cookies.get('token');\n\n    if (isEmpty(token) === false) {\n      options.headers = {\n        Authorization: `Bearer ${token}`\n      };\n    }\n\n    return axios.get(requestUrl, options);\n  }\n\n  post(path, data, headers = {}) {\n    const requestUrl = domain + path;\n    const token = cookies.get('token');\n    let options = {};\n\n    if (isEmpty(token) === false) {\n      options = {\n        headers: _objectSpread({\n          Authorization: `Bearer ${token}`\n        }, headers)\n      };\n    }\n\n    return axios.post(requestUrl, data, options);\n  }\n\n  put(path, data, query, headers = {}) {\n    let requestUrl = domain + path;\n\n    if (isEmpty(query) === false) {\n      requestUrl += this.queryStringBuilder(query);\n    }\n\n    const token = cookies.get('token');\n    let options = {};\n\n    if (isEmpty(token) === false) {\n      options = {\n        headers: _objectSpread({\n          Authorization: `Bearer ${token}`\n        }, headers)\n      };\n    }\n\n    return axios.put(requestUrl, data, options);\n  }\n\n  delete(path, data, query) {\n    let requestUrl = domain + path;\n\n    if (isEmpty(query) === false) {\n      requestUrl += this.queryStringBuilder(query);\n    }\n\n    const token = cookies.get('token');\n    let options = {};\n\n    if (isEmpty(token) === false) {\n      options = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n    }\n\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      data\n    });\n    return axios.delete(requestUrl, options);\n  }\n\n  queryStringBuilder(query) {\n    const str = [];\n\n    for (const p in query) {\n      const value = p + '=' + query[p];\n      str.push(value);\n    }\n\n    return '?' + str.join('&');\n  }\n\n}\n\nexport default new Http();","map":null,"metadata":{},"sourceType":"module"}