{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useTranslation } from 'next-i18next';\nimport useStyles from './styles';\nimport * as yup from 'yup';\nimport * as constants from '@/utils/constant';\nimport _ from 'lodash';\nimport { Grid, Tooltip, Tabs, Tab } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { FormControllerTextField, FormControllerAutocomplete, FormControllerCheckbox, DialogMain, AppTabHistoryLog, MalisPanel, SectionTimezone, BtnHelp } from '@/components';\nimport { parameterTypeStore } from '@/store/reducers';\n\nfunction ParameterTypeAddEditDialog() {\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation('parameter_type'),\n      t = _useTranslation.t;\n\n  var _useState = useState(0),\n      tab = _useState[0],\n      setTab = _useState[1];\n\n  var formValidationSchema = useMemo(function () {\n    return yup.object().shape({\n      type_id: yup.string().required(t('validation_message.type_id_required')).max(8, t('validation_message.type_id_max')).matches(constants.REGEX_ALPHA_NUMERIC_ONLY, t('validation_message.type_id_match')),\n      description: yup.string().max(80, t('validation_message.description_max')),\n      nbr_default: yup.string().required(t('validation_message.nbr_default_required')).matches(/^[0-9]+$/, t('validation_message.nbr_default_type_number')),\n      attributes: yup.string().matches(constants.REGEX_SEMICOLON_SEPERATED_ALPHA_NUMERIC_UNDERSCORE_ONLY, {\n        message: t('validation_message.attributes_match'),\n        excludeEmptyString: true\n      }).test('uniq', t('validation_message.attributes_match'), function (value) {\n        if (!value) {\n          return true;\n        }\n\n        var valueSplit = value.split(';');\n        return _.uniq(valueSplit).length === valueSplit.length;\n      }),\n      category: yup.number().required().nullable()\n    });\n  }, [t]);\n  var dispatch = useDispatch();\n  var dialogState = useSelector(parameterTypeStore.selectDialogState);\n  var editPermission = useSelector(parameterTypeStore.selectEditPermission);\n\n  var _useSelector = useSelector(parameterTypeStore.selectInitDataForCE),\n      categories = _useSelector.categories;\n\n  var paramTypeDetail = useSelector(parameterTypeStore.selectDetail);\n\n  var _useSelector2 = useSelector(parameterTypeStore.selectInitDataForCE),\n      wiki_page = _useSelector2.wiki_page;\n\n  var parameterTypeForm = useForm({\n    resolver: yupResolver(formValidationSchema),\n    shouldUnregister: false\n  });\n  useEffect(function () {\n    parameterTypeForm.reset(paramTypeDetail);\n    setTab(0);\n  }, [paramTypeDetail]);\n  var onSubmit = parameterTypeForm.handleSubmit(function (formData) {\n    var data = _.omit(formData, [].concat(_toConsumableArray(constants.removalProperties), ['help', 'parameters']));\n\n    data.nbr_default = parseInt(data.nbr_default);\n\n    if (dialogState.editMode) {\n      dispatch(parameterTypeStore.extraActions.update({\n        id: formData.id,\n        parameterType: data\n      }));\n    } else {\n      dispatch(parameterTypeStore.extraActions.create(data));\n    }\n  });\n\n  var onClose = function onClose() {\n    dispatch(parameterTypeStore.extraActions.closeDialog());\n  };\n\n  var handleChangeTab = function handleChangeTab(event, nextTab) {\n    setTab(nextTab);\n  };\n\n  var handleChangeHistoryLogs = function handleChangeHistoryLogs(data) {\n    dispatch(parameterTypeStore.actions.setHistoryLogs(data));\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(DialogMain, {\n      open: dialogState.open,\n      loading: dialogState.loading,\n      height: 557,\n      onOk: onSubmit,\n      onClose: onClose,\n      okText: dialogState.editMode ? t('common:button.update') : t('common:button.create'),\n      okButtonProps: {\n        disabled: dialogState.loading || !editPermission && dialogState.editMode\n      },\n      title: /*#__PURE__*/_jsx(BtnHelp, {\n        title: dialogState.editMode ? t('form.title.update_parameter_type') : t('form.title.create_parameter_type'),\n        href: wiki_page\n      }),\n      children: [/*#__PURE__*/_jsxs(Tabs, {\n        value: tab,\n        onChange: handleChangeTab,\n        children: [/*#__PURE__*/_jsx(Tab, {\n          label: t('common:tab.general')\n        }), /*#__PURE__*/_jsx(Tab, {\n          label: t('common:tab.history'),\n          disabled: !dialogState.editMode\n        })]\n      }), /*#__PURE__*/_jsx(MalisPanel, {\n        value: tab,\n        index: 0,\n        children: /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          spacing: 2,\n          className: classes.wrapDialog,\n          children: [/*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 8,\n            children: /*#__PURE__*/_jsx(FormControllerTextField, {\n              autoFocus: !dialogState.editMode,\n              control: parameterTypeForm.control,\n              label: \"Type\",\n              name: \"type_id\",\n              required: true,\n              InputProps: {\n                readOnly: dialogState.editMode\n              }\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsx(FormControllerCheckbox, {\n              control: parameterTypeForm.control,\n              name: \"is_multilingual\",\n              disabled: dialogState.editMode,\n              label: \"Multilingual\"\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 7,\n            children: /*#__PURE__*/_jsx(FormControllerAutocomplete, {\n              name: \"category\",\n              control: parameterTypeForm.control,\n              options: categories,\n              disableClearable: true,\n              renderOption: function renderOption(option) {\n                return option.description;\n              },\n              label: \"Category\",\n              required: true\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 5,\n            children: /*#__PURE__*/_jsx(FormControllerTextField, {\n              control: parameterTypeForm.control,\n              label: \"Number of defaults\",\n              name: \"nbr_default\",\n              required: true\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(Tooltip, {\n              title: /*#__PURE__*/_jsxs(_Fragment, {\n                children: [/*#__PURE__*/_jsx(\"p\", {\n                  children: \"Must be a semicolon separated string of the attribute names. The attribute names themselves:\"\n                }), /*#__PURE__*/_jsxs(\"ul\", {\n                  children: [/*#__PURE__*/_jsx(\"li\", {\n                    children: \"Must contain only A-Z, a-z, 0-9 and underscore (_) character\"\n                  }), /*#__PURE__*/_jsx(\"li\", {\n                    children: \"Must not begin with a number \"\n                  })]\n                })]\n              }),\n              children: /*#__PURE__*/_jsx(FormControllerTextField, {\n                label: \"Attributes\",\n                name: \"attributes\",\n                control: parameterTypeForm.control\n              })\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(FormControllerTextField, {\n              label: \"Description\",\n              name: \"description\",\n              control: parameterTypeForm.control,\n              multiline: true,\n              rows: 10\n            })\n          }), /*#__PURE__*/_jsx(When, {\n            condition: dialogState.editMode,\n            children: /*#__PURE__*/_jsx(SectionTimezone, {\n              value: paramTypeDetail\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(MalisPanel, {\n        value: tab,\n        index: 1,\n        children: /*#__PURE__*/_jsx(AppTabHistoryLog, {\n          isOpenDialog: dialogState.open,\n          data: dialogState.historyLogs,\n          onChange: handleChangeHistoryLogs,\n          entityId: paramTypeDetail === null || paramTypeDetail === void 0 ? void 0 : paramTypeDetail.id,\n          entity: \"parameter_type\"\n        })\n      })]\n    })\n  });\n}\n\nexport default ParameterTypeAddEditDialog;","map":null,"metadata":{},"sourceType":"module"}