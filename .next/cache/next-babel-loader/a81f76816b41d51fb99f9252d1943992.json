{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Common\\\\SSEProcess\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { CircularProgress, Typography } from '@material-ui/core';\nimport { CheckCircleRounded, HighlightOffOutlined } from '@material-ui/icons';\nimport { Case, Default, Switch } from 'react-if';\nimport { DialogMain, useConfirm } from '@/components/index';\nimport { useDispatch } from 'react-redux';\nimport useSSE from '@/hooks/useSSE';\nimport _ from 'lodash';\nimport { commonStore } from '@/store/reducers';\n\nfunction DialogSSEProcess(props) {\n  _s();\n\n  var open = props.open,\n      operationId = props.operationId,\n      onClose = props.onClose,\n      onSuccess = props.onSuccess,\n      onError = props.onError;\n\n  var _useSSE = useSSE(operationId),\n      dataSSE = _useSSE.dataSSE,\n      setDataSSE = _useSSE.setDataSSE;\n\n  var _useConfirm = useConfirm(),\n      confirm = _useConfirm.confirm,\n      handleCloseConfirm = _useConfirm.handleClose;\n\n  var dispatch = useDispatch();\n  var isCompleted = React.useMemo(function () {\n    return dataSSE.status === 'SUCCESS' || dataSSE.status === 'ERROR';\n  }, [dataSSE.status]);\n  React.useEffect(function () {\n    if (isCompleted) {\n      handleCloseConfirm();\n      onClose();\n\n      if (_.isFunction(onSuccess) && dataSSE.status === 'SUCCESS') {\n        onSuccess(operationId, dataSSE);\n      }\n\n      if (_.isFunction(onError) && dataSSE.status === 'ERROR') {\n        onError(operationId, dataSSE);\n      }\n    }\n  }, [isCompleted]);\n  /**\n   * This hook to reset state if open = false\n   */\n\n  React.useEffect(function () {\n    if (!open) {\n      setDataSSE({\n        message: 'Initializing...',\n        status: null,\n        operation_result: null\n      });\n    }\n  }, [open]);\n\n  var handleCancelProcess = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return confirm({\n                title: 'Confirm canceling exporting progress',\n                description: 'The progress is not completed yet. Are you sure you want to cancel?'\n              });\n\n            case 2:\n              result = _context.sent;\n\n              if (result === 'OK') {\n                onClose();\n                dispatch(commonStore.sagaCancelBackgroundJob(operationId));\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleCancelProcess() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(DialogMain, {\n    open: open,\n    onClose: isCompleted ? onClose : handleCancelProcess,\n    maxWidth: \"xs\",\n    fullWidth: true,\n    bodyStyles: {\n      margin: 'auto',\n      textAlign: 'center'\n    },\n    closeText: isCompleted ? 'Close' : 'Cancel',\n    children: [/*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Case, {\n        condition: dataSSE.status === 'SUCCESS',\n        children: /*#__PURE__*/_jsxDEV(CheckCircleRounded, {\n          fontSize: \"large\",\n          style: {\n            marginTop: '1rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Case, {\n        condition: dataSSE.status === 'ERROR',\n        children: /*#__PURE__*/_jsxDEV(HighlightOffOutlined, {\n          fontSize: \"large\",\n          style: {\n            marginTop: '1rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Default, {\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n          style: {\n            marginTop: '1rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      style: {\n        marginTop: '1rem'\n      },\n      children: dataSSE.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DialogSSEProcess, \"hS74ucNwJdibnJTIOUcvAmQjTss=\", false, function () {\n  return [useSSE, useConfirm, useDispatch];\n});\n\n_c = DialogSSEProcess;\nexport default DialogSSEProcess;\n\nvar _c;\n\n$RefreshReg$(_c, \"DialogSSEProcess\");","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Common/SSEProcess/index.tsx"],"names":["React","CircularProgress","Typography","CheckCircleRounded","HighlightOffOutlined","Case","Default","Switch","DialogMain","useConfirm","useDispatch","useSSE","_","commonStore","DialogSSEProcess","props","open","operationId","onClose","onSuccess","onError","dataSSE","setDataSSE","confirm","handleCloseConfirm","handleClose","dispatch","isCompleted","useMemo","status","useEffect","isFunction","message","operation_result","handleCancelProcess","title","description","result","sagaCancelBackgroundJob","margin","textAlign","marginTop"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { CircularProgress, Typography } from '@material-ui/core'\n\nimport { CheckCircleRounded, HighlightOffOutlined } from '@material-ui/icons'\n\nimport { Case, Default, Switch } from 'react-if'\n\nimport { DialogMain, useConfirm } from '@/components/index'\n\nimport { useDispatch } from 'react-redux'\nimport useSSE from '@/hooks/useSSE'\n\nimport _ from 'lodash'\nimport { commonStore } from '@/store/reducers'\n\nimport type { DialogSSEProcessProps } from './type'\n\nfunction DialogSSEProcess(props: DialogSSEProcessProps) {\n  const { open, operationId, onClose, onSuccess, onError } = props\n  const { dataSSE, setDataSSE } = useSSE(operationId)\n  const { confirm, handleClose: handleCloseConfirm } = useConfirm()\n\n  const dispatch = useDispatch()\n\n  const isCompleted = React.useMemo(() => dataSSE.status === 'SUCCESS' || dataSSE.status === 'ERROR', [dataSSE.status])\n\n  React.useEffect(() => {\n    if (isCompleted) {\n      handleCloseConfirm()\n      onClose()\n      if (_.isFunction(onSuccess) && dataSSE.status === 'SUCCESS') {\n        onSuccess(operationId, dataSSE)\n      }\n      if (_.isFunction(onError) && dataSSE.status === 'ERROR') {\n        onError(operationId, dataSSE)\n      }\n    }\n  }, [isCompleted])\n\n  /**\n   * This hook to reset state if open = false\n   */\n  React.useEffect(() => {\n    if (!open) {\n      setDataSSE({\n        message: 'Initializing...',\n        status: null,\n        operation_result: null\n      })\n    }\n  }, [open])\n\n  const handleCancelProcess = async () => {\n    const result = await confirm({\n      title: 'Confirm canceling exporting progress',\n      description: 'The progress is not completed yet. Are you sure you want to cancel?'\n    })\n    if (result === 'OK') {\n      onClose()\n      dispatch(commonStore.sagaCancelBackgroundJob(operationId))\n    }\n  }\n\n  return (\n    <DialogMain\n      open={open}\n      onClose={isCompleted ? onClose : handleCancelProcess}\n      maxWidth=\"xs\"\n      fullWidth\n      bodyStyles={{ margin: 'auto', textAlign: 'center' }}\n      closeText={isCompleted ? 'Close' : 'Cancel'}\n    >\n      <Switch>\n        <Case condition={dataSSE.status === 'SUCCESS'}>\n          <CheckCircleRounded fontSize=\"large\" style={{ marginTop: '1rem' }} />\n        </Case>\n        <Case condition={dataSSE.status === 'ERROR'}>\n          <HighlightOffOutlined fontSize=\"large\" style={{ marginTop: '1rem' }} />\n        </Case>\n        <Default>\n          <CircularProgress style={{ marginTop: '1rem' }} />\n        </Default>\n      </Switch>\n\n      <Typography variant=\"body1\" style={{ marginTop: '1rem' }}>\n        {dataSSE.message}\n      </Typography>\n    </DialogMain>\n  )\n}\n\nexport default DialogSSEProcess\n"]},"metadata":{},"sourceType":"module"}