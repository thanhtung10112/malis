{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport useStyles from '@/styles/page/layout';\nimport { Link } from '@material-ui/core';\nimport { AppLayout, MakeAListIcon, EditIcon, DeleteIcon, CreateIcon, SaveIcon, AppAutocompleteStyled, useConfirm, AppAutocompleteStyledAsync, DataTableCellExpand, DataTableNumberField, DialogPart } from '@/components';\nimport { itemStore, commonStore, partStore } from '@/store/reducers';\nimport * as columnProperties from '@/utils/columnProperties';\nimport AppNumber from '@/helper/AppNumber';\nimport { itemMassFormat } from '@/utils/constant';\nimport * as yup from 'yup';\nimport clsx from 'clsx';\nimport immer from 'immer';\nimport _ from 'lodash';\nimport { unsaveDialogOptions } from '@/utils/constant';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nimport { isAssemblyByDpn } from '@/utils/isAssembly';\n\nfunction ItemsPage() {\n  const classes = useStyles();\n  const {\n    confirm\n  } = useConfirm();\n  const {\n    t\n  } = useTranslation('item');\n  const breadcrumbData = [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Drawings',\n    href: '/drawings'\n  }, {\n    label: 'Items Management',\n    href: '/items'\n  }];\n  const dispatch = useDispatch();\n  const permissions = useSelector(itemStore.selectPermissions);\n  const userDrawing = useSelector(commonStore.selectUserValueDrawing);\n  const userJob = useSelector(commonStore.selectUserValueJob);\n  const editRows = useSelector(commonStore.selectEditRows);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const currentLang = useSelector(commonStore.selectCurrentLanguage);\n  const dataList = useSelector(itemStore.selectDataList);\n  const {\n    jobs: jobOptions,\n    column_tooltips,\n    wiki_page\n  } = useSelector(itemStore.selectInitDataForList);\n  useEffect(() => {\n    return () => dispatch(commonStore.actions.resetUserValue());\n  }, []);\n  /**\n   * @param {DataForDropdown} option\n   */\n\n  const handleChangeUserDrawing = async (event, optionValue) => {\n    let result = '';\n\n    if (editRows.length > 0) {\n      result = await confirm(unsaveDialogOptions);\n    }\n\n    if (result !== 'cancel') {\n      dispatch(itemStore.sagaChangeUserDrawing({\n        optionValue,\n        confirm: result\n      }));\n    }\n  };\n\n  const handleOpenCreateDialog = () => {\n    dispatch(partStore.sagaOpenCreateDialog('item'));\n  };\n\n  const handleChangeUserJob = async (event, optionValue) => {\n    let result = '';\n\n    if (editRows.length > 0) {\n      result = await confirm(unsaveDialogOptions);\n    }\n\n    if (result !== 'cancel') {\n      dispatch(itemStore.sagaChangeUserJob({\n        optionValue,\n        confirm: result\n      }));\n    }\n  };\n\n  const handleDeleteItems = async () => {\n    const description = getMessageConfirm(t, 'item', selectedRows, 'delete');\n    const result = await confirm({\n      description\n    });\n\n    if (result === 'OK') {\n      const parts = _.map(selectedRows, partId => {\n        const {\n          dpn,\n          id\n        } = _.find(dataList, {\n          id: partId\n        });\n\n        return {\n          entity_id: dpn,\n          id\n        };\n      });\n\n      dispatch(itemStore.sagaRemove(parts));\n    }\n  };\n\n  const handleOpenUpdateDialog = id => () => {\n    dispatch(partStore.sagaOpenUpdateDialog({\n      id,\n      entity: 'item'\n    }));\n  };\n\n  const onChangeMass = (item_id_pk, value, field) => {\n    const newEditRows = immer(editRows, draft => {\n      const findIndex = _.findIndex(draft, {\n        item_id_pk\n      });\n\n      const valueFormat = AppNumber.convertToNumber(value, itemMassFormat);\n\n      if (findIndex > -1) {\n        draft[findIndex][field] = valueFormat;\n      } else {\n        draft.push({\n          item_id_pk,\n          [field]: valueFormat\n        });\n      }\n    });\n    dispatch(commonStore.actions.setEditRows(newEditRows));\n  };\n\n  const onSaveUpdateData = () => {\n    dispatch(commonStore.sagaUpdateMultiple({\n      entity: 'item'\n    }));\n  };\n\n  const handleOpenPartDialog = (id, dpn) => event => {\n    event.preventDefault();\n    const entity = isAssemblyByDpn(dpn) ? 'assembly' : 'item';\n    dispatch(partStore.sagaOpenUpdateDialog({\n      id,\n      entity\n    }));\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    description: column_tooltips.edit,\n    field: 'id',\n    headerName: 'Edit',\n\n    renderCell(params) {\n      return /*#__PURE__*/_jsx(EditIcon, {\n        onClick: handleOpenUpdateDialog(params.value)\n      });\n    }\n\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.dpn,\n    field: 'dpn',\n    headerName: 'Item #',\n    flex: 0.25\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.descriptionsColumn(currentLang)), {}, {\n    description: column_tooltips.descriptions,\n    flex: 0.3\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.material_equiv,\n    field: 'material_equiv',\n    headerName: 'Material std',\n    flex: 0.2\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.manufacturer_equiv,\n    field: 'manufacturer_equiv',\n    headerName: 'Manufacturing std',\n    flex: 0.2\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.reference_dpn,\n    field: 'reference_dpn',\n    headerName: 'Part number',\n    flex: 0.25,\n\n    renderCell(params) {\n      const {\n        value,\n        row\n      } = params;\n      return /*#__PURE__*/_jsx(Link, {\n        href: \"#\",\n        onClick: handleOpenPartDialog(row.id_ref, value),\n        children: value\n      });\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.rightColumn), columnProperties.editCell('Mass (kg)', permissions === null || permissions === void 0 ? void 0 : permissions.edit, column_tooltips.mass)), {}, {\n    field: 'mass',\n\n    renderCell(params) {\n      const value = AppNumber.format(params.value, itemMassFormat);\n      return /*#__PURE__*/_jsx(DataTableCellExpand, {\n        value: value,\n        width: params.colDef.width\n      });\n    },\n\n    cellClassName(params) {\n      return clsx({\n        [classes.mark]: editRows.some(row => row.item_id_pk === params.id && typeof row.mass !== 'undefined')\n      });\n    },\n\n    renderEditCell(params) {\n      return /*#__PURE__*/_jsx(DataTableNumberField, {\n        params: params,\n        onChangeValue: onChangeMass,\n        decimalScale: itemMassFormat.precision,\n        fixedDecimalScale: itemMassFormat.precision,\n        rules: yup.number().nullable().required(t('validation_message.mass_required')).min(itemMassFormat.min, t('validation_message.mass_range')).max(itemMassFormat.max, t('validation_message.mass_range'))\n      });\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.raw_unit,\n    field: 'raw_unit',\n    headerName: 'Unit'\n  })];\n  const buttons = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n    onClick: handleOpenCreateDialog,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create) || userJob.value < 0 || !(userJob === null || userJob === void 0 ? void 0 : userJob.value)\n  }, {\n    label: t('common:button.save'),\n    startIcon: /*#__PURE__*/_jsx(SaveIcon, {}),\n    onClick: onSaveUpdateData,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.edit) || editRows.length === 0\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n    onClick: handleDeleteItems,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.delete) || selectedRows.length === 0 || userJob.value < 0\n  }, {\n    label: t('common:button.make_a_list'),\n    startIcon: /*#__PURE__*/_jsx(MakeAListIcon, {}),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.make_a_list)\n  }];\n\n  const Dialogs = /*#__PURE__*/_jsx(DialogPart, {});\n\n  const Options = /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(AppAutocompleteStyled, {\n      className: classes.controlAutocomplete,\n      width: 200,\n      label: \"Jobs\",\n      options: jobOptions,\n      value: userJob,\n      renderOption: option => option.description,\n      primaryKeyOption: \"value\",\n      onChange: handleChangeUserJob\n    }), /*#__PURE__*/_jsx(AppAutocompleteStyledAsync, {\n      disabled: !(userJob === null || userJob === void 0 ? void 0 : userJob.value),\n      width: 250,\n      label: \"Drawings\",\n      className: classes.controlAutocomplete,\n      compName: \"drawing_list\",\n      additionalData: {\n        limit_to_job: userJob.value,\n        include_all_drawings_option: true\n      },\n      onChange: handleChangeUserDrawing,\n      value: userDrawing,\n      defaultOptions: [commonStore.initialState.userValue.drawing]\n    })]\n  });\n\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: \"item\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: wiki_page,\n    searchProps: {\n      width: 300\n    },\n    buttons: buttons,\n    Options: Options,\n    permissions: permissions,\n    Dialogs: Dialogs,\n    tableProps: {\n      columns: columns,\n      isCellEditable: params => !params.row.reference_dpn\n    }\n  });\n}\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'item', 'make_a_list', 'advanced_filter', 'assembly', 'manufacturer']);\nexport default ItemsPage;","map":null,"metadata":{},"sourceType":"module"}