{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { TextField, InputAdornment } from '@material-ui/core';\nimport DateRangeIcon from '@material-ui/icons/DateRange'; // import DialogCalendar from '../DialogCalendar'\n\nimport { DialogCalendar, FormControllerErrorMessage } from '@/components/index';\nimport { isValid, parseISO, format } from 'date-fns';\nimport _ from 'lodash';\nimport * as constant from '@/utils/constant';\nimport { useToggle } from 'react-use';\nimport useStyles from './styles'; // import type { CustomDatePickerProps } from './type'\n\nfunction DatePicker(props) {\n  const {\n    value,\n    onChange,\n    minDate,\n    maxDate,\n    helperText,\n    error\n  } = props,\n        datePickerProps = _objectWithoutProperties(props, [\"value\", \"onChange\", \"minDate\", \"maxDate\", \"helperText\", \"error\"]);\n\n  const classes = useStyles();\n  const [dateValue, setDateValue] = React.useState('');\n  const [openCalendar, setOpenCalendar] = React.useState(false);\n  const [isFocusing, setIsFocusing] = useToggle(false);\n  const openTooltip = React.useMemo(() => isFocusing && error, [error, isFocusing]);\n  /**\n   * The function used to check valid date\n   * @param {String} date\n   * @return {boolean}\n   */\n\n  const isValidDate = date => {\n    return isValid(parseISO(date));\n  };\n\n  React.useEffect(() => {\n    setDateValue(value);\n  }, [value]);\n\n  const onHoverField = () => {\n    setIsFocusing(true);\n  };\n\n  const onLeavingField = () => {\n    setIsFocusing(false);\n  };\n\n  const addZero = value => {\n    const splitMonth = value.toString().split('');\n\n    if (splitMonth.length === 2) {\n      return value;\n    }\n\n    return `0${splitMonth}`;\n  };\n\n  const getSymbol = date => {\n    if (date.includes('-')) {\n      return '-';\n    } else if (date.includes('/')) {\n      return '/';\n    } else {\n      return '.';\n    }\n  };\n  /**\n   * Build a date string based on symbols (\"/\", \".\", \"-\")\n   * @param {String} date\n   * @return {String} ex: 2021-07-01 (yyyy-MM-dd)\n   */\n\n\n  const buildDate = date => {\n    const symbol = getSymbol(date);\n    const splitDate = date.split(symbol); // 2021-07-02 => [2021, 07, 02]\n    // case user input full values\n\n    if (splitDate.length === 3 && symbol === '-') {\n      return format(new Date(date), constant.DATE_FORMAT);\n    }\n\n    if (splitDate.length === 3 && symbol !== '-') {\n      const newDate = date.split(symbol).reverse().join(symbol);\n      return format(new Date(newDate), constant.DATE_FORMAT);\n    }\n\n    const currentDate = new Date();\n    const year = currentDate.getFullYear();\n    let month;\n    let day;\n\n    if (splitDate.length === 2) {\n      // case user input two values,\n      // ex1: 02-01 => month = 02, day = 01\n      // ex2: 02/01 => month = 01, day = 02\n      // ex3: 02.01 => month = 01, day = 02\n      month = symbol === '-' ? splitDate[0] : splitDate[1];\n      day = symbol === '-' ? splitDate[1] : splitDate[0];\n    } else {\n      // case user input single value, then we will get the month in the current date\n      month = currentDate.getMonth() + 1;\n      day = date;\n    }\n\n    return `${year}-${addZero(month)}-${addZero(day)}`;\n  };\n\n  const handleTransformValue = event => {\n    const value = _.trim(event.target.value);\n\n    let date = value;\n\n    if (constant.REGEX_VALID_DATE_EUROPE.test(value) || constant.REGEX_VALID_DATE_ASIA.test(value)) {\n      date = buildDate(value);\n    }\n\n    if (isValidDate(date)) {\n      setDateValue(date);\n      onChange(date);\n    } else {\n      setDateValue(value);\n      onChange(value);\n    }\n  };\n\n  const handleChangeValue = event => {\n    setDateValue(event.target.value);\n  };\n\n  const handleOpenCalendar = () => {\n    setOpenCalendar(true);\n  };\n\n  const handleCloseCalendar = () => {\n    setOpenCalendar(false);\n  };\n\n  const handleChangeDate = nextDate => {\n    const dateFormat = format(nextDate, constant.DATE_FORMAT);\n    onChange(dateFormat);\n    handleCloseCalendar();\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(FormControllerErrorMessage, {\n      title: helperText,\n      open: openTooltip,\n      children: /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({}, datePickerProps), {}, {\n        error: error,\n        onMouseOver: onHoverField,\n        onMouseLeave: onLeavingField,\n        value: dateValue,\n        onChange: handleChangeValue,\n        onBlur: handleTransformValue,\n        variant: \"outlined\",\n        InputProps: {\n          endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n            position: \"end\",\n            children: /*#__PURE__*/_jsx(DateRangeIcon, {\n              className: classes.icon,\n              onClick: handleOpenCalendar\n            })\n          })\n        }\n      }))\n    }), /*#__PURE__*/_jsx(DialogCalendar, {\n      open: openCalendar,\n      date: dateValue,\n      onChange: handleChangeDate,\n      onClose: handleCloseCalendar,\n      minDate: minDate,\n      maxDate: maxDate\n    })]\n  });\n}\n\nexport default DatePicker;","map":null,"metadata":{},"sourceType":"module"}