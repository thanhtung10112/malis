{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport const name = 'currency';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nexport const currencyDetail = {\n  currency_id: '',\n  description: '',\n  multiplier: null,\n  rate: '',\n  round_to: null,\n  base_currency: null,\n  is_base_rate_mode: false\n};\nconst initialState = {\n  dataList: [],\n  initDataForList: {\n    permissions: {\n      currency: null\n    },\n    base_currency_list: [],\n    user_base_currency: {\n      id: null,\n      description: '',\n      currency_id: ''\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  initDataForCE: {\n    multiplier_options: [],\n    round_to_options: [],\n    base_currency: {\n      currency_id: '',\n      id: null\n    },\n    wiki_page: ''\n  },\n  detail: currencyDetail,\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: []\n  }\n};\nconst currencySlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      state.dialogState.historyLogs = payload;\n    },\n\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    setPermissions(state, {\n      payload\n    }) {\n      state.initDataForList.permissions.currency = payload;\n    },\n\n    setUserBaseCurrency(state, {\n      payload\n    }) {\n      state.initDataForList.user_base_currency = payload;\n    },\n\n    resetDetail(state) {\n      state.detail = _objectSpread({}, currencyDetail);\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n});\nexport const {\n  actions\n} = currencySlice; // Saga actions\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaUpdate = createAction(`${name}/${actionTypes.UPDATE}`);\nexport const sagaChangeUserCurrency = createAction(`${name}/CHANGE_USER_CURRENCY`);\nexport const selectState = state => state[name];\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectInitDataForCE = createSelector(selectState, state => state.initDataForCE);\nexport const selectDetail = createSelector(selectState, state => state.detail);\nexport const selectPermissions = createSelector(selectState, state => state.initDataForList.permissions.currency);\nexport const selectUserBaseCurrency = createSelector(selectState, state => state.initDataForList.user_base_currency);\nexport default currencySlice;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/reducers/currency.reducer.ts"],"names":["createSlice","createAction","createSelector","actionTypes","name","resetState","RESET_STATE","currencyDetail","currency_id","description","multiplier","rate","round_to","base_currency","is_base_rate_mode","initialState","dataList","initDataForList","permissions","currency","base_currency_list","user_base_currency","id","wiki_page","column_tooltips","initDataForCE","multiplier_options","round_to_options","detail","dialogState","open","loading","historyLogs","currencySlice","reducers","setDialogState","state","payload","setDialogStateOpen","setDialogStateLoading","setHistoryLogs","setDataList","setInitDataForList","setInitDataForCE","setDetail","setPermissions","setUserBaseCurrency","resetDetail","extraReducers","type","actions","sagaGetList","GET_LIST","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaCloseDialog","CLOSE_DIALOG","sagaCreate","CREATE","sagaUpdate","UPDATE","sagaChangeUserCurrency","selectState","selectDataList","selectInitDataForList","selectDialogState","selectInitDataForCE","selectDetail","selectPermissions","selectUserBaseCurrency"],"mappings":"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","sourcesContent":["import { createSlice, createAction, PayloadAction, createSelector } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\n\nimport type { RootReducerType } from './rootReducer'\nimport type {\n  CurrencyInitDataForCE,\n  CurrencyDetail,\n  CurrencyPermissions,\n  CurrencyInitDataForList,\n  BaseCurrency\n} from '@/types/Currency'\nimport type { Entity, HistoryLog } from '@/types/Common'\n\nexport const name: Entity = 'currency'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const currencyDetail = {\n  currency_id: '',\n  description: '',\n  multiplier: null,\n  rate: '',\n  round_to: null,\n  base_currency: null,\n  is_base_rate_mode: false\n} as CurrencyDetail\n\nconst initialState = {\n  dataList: [] as CurrencyDetail[],\n  initDataForList: {\n    permissions: {\n      currency: null\n    },\n    base_currency_list: [],\n    user_base_currency: {\n      id: null,\n      description: '',\n      currency_id: ''\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as CurrencyInitDataForList,\n  initDataForCE: {\n    multiplier_options: [],\n    round_to_options: [],\n    base_currency: {\n      currency_id: '',\n      id: null\n    },\n    wiki_page: ''\n  } as CurrencyInitDataForCE,\n  detail: currencyDetail,\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: [] as HistoryLog[]\n  }\n}\n\nconst currencySlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDialogState(state, { payload }: PayloadAction<Partial<typeof initialState.dialogState>>) {\n      state.dialogState = {\n        ...state.dialogState,\n        ...payload\n      }\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setHistoryLogs(state, { payload }: PayloadAction<HistoryLog[]>) {\n      state.dialogState.historyLogs = payload\n    },\n    setDataList(state, { payload }: PayloadAction<CurrencyDetail[]>) {\n      state.dataList = payload\n    },\n    setInitDataForList(state, { payload }: PayloadAction<CurrencyInitDataForList>) {\n      state.initDataForList = payload\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<CurrencyInitDataForCE>) {\n      state.initDataForCE = payload\n    },\n    setDetail(state, { payload }: PayloadAction<Partial<CurrencyDetail>>) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    setPermissions(state, { payload }: PayloadAction<CurrencyPermissions>) {\n      state.initDataForList.permissions.currency = payload\n    },\n    setUserBaseCurrency(state, { payload }: PayloadAction<BaseCurrency>) {\n      state.initDataForList.user_base_currency = payload\n    },\n    resetDetail(state) {\n      state.detail = {\n        ...currencyDetail\n      }\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\nexport const { actions } = currencySlice\n\n// Saga actions\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaCreate = createAction<CurrencyDetail>(`${name}/${actionTypes.CREATE}`)\nexport const sagaUpdate = createAction<{ id: number; formData: CurrencyDetail }>(`${name}/${actionTypes.UPDATE}`)\nexport const sagaChangeUserCurrency = createAction<BaseCurrency>(`${name}/CHANGE_USER_CURRENCY`)\n\nexport const selectState = (state: RootReducerType) => state[name]\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\nexport const selectInitDataForCE = createSelector(selectState, (state) => state.initDataForCE)\nexport const selectDetail = createSelector(selectState, (state) => state.detail)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.currency)\nexport const selectUserBaseCurrency = createSelector(selectState, (state) => state.initDataForList.user_base_currency)\n\nexport default currencySlice\n"]},"metadata":{},"sourceType":"module"}