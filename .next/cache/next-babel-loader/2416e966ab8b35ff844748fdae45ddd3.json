{"ast":null,"code":"import { createAction, createSlice, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport const name = 'assembly';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nconst initialState = {\n  dataList: [],\n  initDataForList: {\n    jobs: [],\n    permissions: {\n      assembly: null\n    },\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  }\n};\nconst assemblySlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n});\nexport const {\n  actions\n} = assemblySlice;\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaChangeUserJob = createAction(`${name}/${actionTypes.CHANGE_USER_JOB}`);\nexport const sagaChangeUserDrawing = createAction(`${name}/${actionTypes.CHANGE_USER_DRAWING}`);\nexport const sagaRemove = createAction(`${name}/${actionTypes.REMOVE}`);\nexport const selectState = state => state[name];\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport const selectPermissions = createSelector(selectState, state => state.initDataForList.permissions.assembly);\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport default assemblySlice;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/reducers/assembly.reducer.ts"],"names":["createAction","createSlice","createSelector","actionTypes","name","resetState","RESET_STATE","initialState","dataList","initDataForList","jobs","permissions","assembly","parameters","PLLA","wiki_page","column_tooltips","assemblySlice","reducers","setInitDataForList","state","payload","setDataList","extraReducers","type","actions","sagaGetList","GET_LIST","sagaChangeUserJob","CHANGE_USER_JOB","sagaChangeUserDrawing","CHANGE_USER_DRAWING","sagaRemove","REMOVE","selectState","selectInitDataForList","selectPermissions","selectDataList"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,WAAvB,EAAmDC,cAAnD,QAAyE,kBAAzE;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAMA,OAAO,MAAMC,IAAY,GAAG,UAArB;AACP,OAAO,MAAMC,UAAU,GAAGL,YAAY,CAAE,GAAEI,IAAK,IAAGD,WAAW,CAACG,WAAY,EAApC,CAA/B;AAEP,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,eAAe,EAAE;AACfC,IAAAA,IAAI,EAAE,EADS;AAEfC,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE;AADC,KAFE;AAKfC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AADI,KALG;AAQfC,IAAAA,SAAS,EAAE,EARI;AASfC,IAAAA,eAAe,EAAE;AATF;AAFE,CAArB;AAeA,MAAMC,aAAa,GAAGhB,WAAW,CAAC;AAChCG,EAAAA,IADgC;AAEhCG,EAAAA,YAFgC;AAGhCW,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAA6D;AAC7ED,MAAAA,KAAK,CAACX,eAAN,GAAwBY,OAAxB;AACD,KAHO;;AAIRC,IAAAA,WAAW,CAACF,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAoD;AAC7DD,MAAAA,KAAK,CAACZ,QAAN,GAAiBa,OAAjB;AACD;;AANO,GAHsB;AAWhCE,EAAAA,aAAa,EAAE;AACb,KAAClB,UAAU,CAACmB,IAAZ,IAAoB;AAClB,aAAOjB,YAAP;AACD;;AAHY;AAXiB,CAAD,CAAjC;AAkBA,OAAO,MAAM;AAAEkB,EAAAA;AAAF,IAAcR,aAApB;AAEP,OAAO,MAAMS,WAAW,GAAG1B,YAAY,CAAE,GAAEI,IAAK,IAAGD,WAAW,CAACwB,QAAS,EAAjC,CAAhC;AACP,OAAO,MAAMC,iBAAiB,GAAG5B,YAAY,CAAmB,GAAEI,IAAK,IAAGD,WAAW,CAAC0B,eAAgB,EAAzD,CAAtC;AACP,OAAO,MAAMC,qBAAqB,GAAG9B,YAAY,CAAmB,GAAEI,IAAK,IAAGD,WAAW,CAAC4B,mBAAoB,EAA7D,CAA1C;AACP,OAAO,MAAMC,UAAU,GAAGhC,YAAY,CAAsB,GAAEI,IAAK,IAAGD,WAAW,CAAC8B,MAAO,EAAnD,CAA/B;AAEP,OAAO,MAAMC,WAAW,GAAId,KAAD,IAA4BA,KAAK,CAAChB,IAAD,CAArD;AACP,OAAO,MAAM+B,qBAAqB,GAAGjC,cAAc,CAACgC,WAAD,EAAed,KAAD,IAAWA,KAAK,CAACX,eAA/B,CAA5C;AACP,OAAO,MAAM2B,iBAAiB,GAAGlC,cAAc,CAACgC,WAAD,EAAed,KAAD,IAAWA,KAAK,CAACX,eAAN,CAAsBE,WAAtB,CAAkCC,QAA3D,CAAxC;AACP,OAAO,MAAMyB,cAAc,GAAGnC,cAAc,CAACgC,WAAD,EAAed,KAAD,IAAWA,KAAK,CAACZ,QAA/B,CAArC;AAEP,eAAeS,aAAf","sourcesContent":["import { createAction, createSlice, PayloadAction, createSelector } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\n\nimport type { DataForDropdown, Entity, ParameterOption, PayloadOperation } from '@/types/Common'\nimport type { AssemblyInitDataForList, AssemblyItem } from '@/types/Assembly'\nimport type { RootReducerType } from './rootReducer'\n\nexport const name: Entity = 'assembly'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nconst initialState = {\n  dataList: [] as AssemblyItem[],\n  initDataForList: {\n    jobs: [],\n    permissions: {\n      assembly: null\n    },\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as AssemblyInitDataForList\n}\n\nconst assemblySlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setInitDataForList(state, { payload }: PayloadAction<AssemblyInitDataForList>) {\n      state.initDataForList = payload\n    },\n    setDataList(state, { payload }: PayloadAction<AssemblyItem[]>) {\n      state.dataList = payload\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\nexport const { actions } = assemblySlice\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaChangeUserJob = createAction<ParameterOption>(`${name}/${actionTypes.CHANGE_USER_JOB}`)\nexport const sagaChangeUserDrawing = createAction<DataForDropdown>(`${name}/${actionTypes.CHANGE_USER_DRAWING}`)\nexport const sagaRemove = createAction<PayloadOperation[]>(`${name}/${actionTypes.REMOVE}`)\n\nexport const selectState = (state: RootReducerType) => state[name]\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.assembly)\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\n\nexport default assemblySlice\n"]},"metadata":{},"sourceType":"module"}