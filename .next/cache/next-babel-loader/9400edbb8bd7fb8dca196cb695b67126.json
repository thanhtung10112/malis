{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { makeStyles, Paper, Link } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { DataTable, DataTableNumberField } from '@/components';\nimport { partStore } from '@/store/reducers';\nimport * as dataForDD from '@/utils/dataForDD';\nimport { defaultProperties, editCell, rightColumn } from '@/utils/columnProperties';\nimport AppNumber from '@/helper/AppNumber';\nimport * as yup from 'yup';\nimport immer from 'immer';\nimport _ from 'lodash';\nimport { itemQuantityFormat } from '@/utils/constant';\nimport { isAssemblyByDpn } from '@/utils/isAssembly';\nconst useStyles = makeStyles(theme => ({\n  total: {\n    fontWeight: theme.typography.fontWeightBold,\n    fontSize: theme.typography.body1.fontSize,\n    borderTop: '1.5px solid #DAE1EC',\n    '&:hover': {\n      backgroundColor: 'transparent !important'\n    },\n    '& .MuiDataGrid-cellCheckbox': {\n      opacity: 0\n    },\n    '& .MuiDataGrid-cell:nth-child(2)': {\n      opacity: 0\n    }\n  }\n}));\n\nconst TabComponent = () => {\n  const {\n    t\n  } = useTranslation('assembly');\n  const classes = useStyles();\n  const assemblyForm = useFormContext();\n  const watchItems = assemblyForm.watch('items', []) || [];\n  const wacthDrawingId = assemblyForm.watch('drawing_id', dataForDD.defaultValue);\n  const dispatch = useDispatch();\n  const drawingItems = useSelector(partStore.selectDrawingItems);\n  useEffect(() => {\n    if ((wacthDrawingId === null || wacthDrawingId === void 0 ? void 0 : wacthDrawingId.value) && drawingItems.length === 0) {\n      dispatch(partStore.sagaGetDrawingItems(wacthDrawingId.value));\n    }\n  }, []);\n\n  const handleChangeQuantity = (item_id, value) => {\n    const {\n      items\n    } = assemblyForm.getValues();\n    const quantity = AppNumber.convertToNumber(value);\n    const newItems = immer(items, draft => {\n      const index = _.findIndex(draft, {\n        item_id\n      });\n\n      if (index === -1) {\n        draft.push({\n          item_id,\n          quantity\n        });\n      } else {\n        draft[index].quantity = quantity;\n      }\n    });\n    assemblyForm.setValue('items', newItems);\n  };\n\n  const getMultipMass = (item_id, qty) => {\n    const item = _.find(drawingItems, {\n      item_id\n    });\n\n    const mass = (item === null || item === void 0 ? void 0 : item.mass) || 0;\n    return qty * mass;\n  };\n\n  const getTotalMass = () => {\n    const totalMass = watchItems.reduce((prevValue, currentValue) => {\n      const multipMass = getMultipMass(currentValue.item_id, currentValue.quantity);\n      return prevValue + multipMass;\n    }, 0);\n    return AppNumber.format(totalMass, itemQuantityFormat);\n  };\n\n  const handleOpenPartDialog = (id, dpn) => event => {\n    event.preventDefault();\n    const entity = isAssemblyByDpn(dpn) ? 'assembly' : 'item';\n    dispatch(partStore.sagaOpenUpdateDialog({\n      id,\n      entity\n    }));\n  };\n\n  const columns = [_objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'raw_item_id',\n    headerName: 'Item',\n    flex: 0.15,\n\n    renderCell(params) {\n      const {\n        value,\n        id\n      } = params;\n      return /*#__PURE__*/_jsx(Link, {\n        href: \"#\",\n        onClick: handleOpenPartDialog(id, value),\n        children: value\n      });\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, editCell('Quantity')), rightColumn), {}, {\n    field: 'quantity',\n    flex: 0.15,\n    sortable: false,\n\n    valueGetter(params) {\n      const item = _.find(watchItems, {\n        item_id: params.id\n      });\n\n      return (item === null || item === void 0 ? void 0 : item.quantity) || 0;\n    },\n\n    valueFormatter(params) {\n      return AppNumber.format(params.value, itemQuantityFormat);\n    },\n\n    renderEditCell(params) {\n      return /*#__PURE__*/_jsx(DataTableNumberField, {\n        params: params,\n        onChangeValue: handleChangeQuantity,\n        rules: yup.number().nullable().required(t('validation_message.quantity_range')).min(itemQuantityFormat.min, t('validation_message.quantity_range')).max(itemQuantityFormat.max, t('validation_message.quantity_range'))\n      });\n    }\n\n  }), _objectSpread(_objectSpread({}, rightColumn), {}, {\n    sortable: false,\n    field: 'mass',\n    headerName: 'Unit Mass (kg)',\n    flex: 0.15,\n\n    valueFormatter(params) {\n      return AppNumber.format(params.value, itemQuantityFormat);\n    }\n\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'reference_to',\n    headerName: 'Reference',\n    flex: 0.2,\n\n    renderCell(params) {\n      const {\n        value,\n        row\n      } = params;\n      return /*#__PURE__*/_jsx(Link, {\n        href: \"#\",\n        onClick: handleOpenPartDialog(row.id_ref, value),\n        children: value\n      });\n    }\n\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'description',\n    headerName: 'Description',\n    flex: 0.15\n  }), _objectSpread(_objectSpread({\n    field: 'total_mass',\n    headerName: 'Mass (kg)',\n    flex: 0.2,\n    sortable: false\n  }, rightColumn), {}, {\n    valueGetter(params) {\n      const quantity = params.getValue(params.id, 'quantity');\n      const mass = params.getValue(params.id, 'mass');\n      return quantity * mass;\n    },\n\n    valueFormatter(params) {\n      return AppNumber.format(params.value, itemQuantityFormat);\n    }\n\n  })];\n  const columnsTotal = [_objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'raw_item_id',\n    headerName: 'Item',\n    flex: 0.15\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'quantity',\n    flex: 0.15\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'mass',\n    headerName: 'Unit Mass (kg)'\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'reference',\n    headerName: 'Reference',\n    flex: 0.15\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    field: 'description',\n    headerName: 'Description',\n    flex: 0.2\n  }), _objectSpread(_objectSpread({}, rightColumn), {}, {\n    field: 'total_mass',\n    headerName: 'Mass (kg)',\n    flex: 0.2\n  })];\n  const totalRows = {\n    id: 1,\n    description: 'Total',\n    total_mass: getTotalMass()\n  };\n  return /*#__PURE__*/_jsxs(Paper, {\n    elevation: 1,\n    children: [/*#__PURE__*/_jsx(DataTable, {\n      getRowId: params => params.item_id,\n      hideFooter: true,\n      disableSelectionOnClick: true,\n      disableColumnMenu: true,\n      tableHeight: 280,\n      rows: drawingItems,\n      columns: columns\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        height: 35,\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsx(DataGrid, {\n        disableSelectionOnClick: true,\n        disableColumnMenu: true,\n        checkboxSelection: true,\n        hideFooter: true,\n        columns: columnsTotal,\n        headerHeight: 0,\n        rowHeight: 35,\n        getRowClassName: () => classes.total,\n        rows: [totalRows],\n        onCellDoubleClick: (_, event) => {\n          event.stopPropagation();\n        }\n      })\n    })]\n  });\n};\n\nexport default TabComponent;","map":null,"metadata":{},"sourceType":"module"}