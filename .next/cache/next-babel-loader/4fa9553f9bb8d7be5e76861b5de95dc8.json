{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\DataTable\\\\EditInline\\\\TextField\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { TextField } from '@material-ui/core';\nimport { GRID_CELL_EDIT_EXIT } from '@material-ui/data-grid';\nimport { FormControllerErrorMessage } from '@/components/index';\nimport clsx from 'clsx';\nimport * as yup from 'yup';\nimport _ from 'lodash';\nimport useStyles from '../styles';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nfunction DataTableTextField(props) {\n  _s();\n\n  var _form$errors$name;\n\n  var classes = useStyles();\n\n  var className = props.className,\n      onChangeValue = props.onChangeValue,\n      params = props.params,\n      rules = props.rules,\n      type = props.type,\n      rest = _objectWithoutProperties(props, [\"className\", \"onChangeValue\", \"params\", \"rules\", \"type\"]);\n\n  var api = params.api,\n      id = params.id,\n      field = params.field,\n      value = params.value,\n      error = params.error;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      oldValue = _React$useState2[0],\n      setOldValue = _React$useState2[1];\n\n  var validationSchema = React.useMemo(function () {\n    if (_.isNil(rules)) {\n      return yup.object({\n        name: yup.string().nullable()\n      });\n    }\n\n    return yup.object({\n      name: rules\n    });\n  }, [rules]);\n  var form = useForm({\n    defaultValues: {\n      name: value\n    },\n    mode: 'onChange',\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  });\n  var watchValue = form.watch('name', '');\n  var errors = form.formState.errors;\n  React.useEffect(function () {\n    setOldValue(value);\n  }, []);\n  React.useEffect(function () {\n    api.setEditCellProps({\n      id: id,\n      field: field,\n      props: {\n        value: watchValue,\n        error: Boolean(errors.name)\n      }\n    });\n  }, [watchValue, errors, api, field, id, error]);\n  React.useEffect(function () {\n    return api.subscribeEvent(GRID_CELL_EDIT_EXIT, function () {\n      if (!error && String(oldValue) !== String(watchValue)) {\n        onChangeValue(id, watchValue, field);\n      }\n    });\n  }, [api, watchValue, error]);\n  return /*#__PURE__*/_jsxDEV(FormControllerErrorMessage, {\n    open: Boolean(form.errors.name),\n    title: (_form$errors$name = form.errors.name) === null || _form$errors$name === void 0 ? void 0 : _form$errors$name.message,\n    children: /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, rest), {}, {\n      autoFocus: true,\n      className: clsx(className, classes.root, form.errors.name && classes.textFieldError),\n      name: \"name\",\n      inputRef: form.register\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DataTableTextField, \"ugmfV3zlvcul7YIVfYonjy0A8Yc=\", false, function () {\n  return [useStyles, useForm];\n});\n\n_c = DataTableTextField;\nDataTableTextField.defaultProps = {\n  type: 'string'\n};\nexport default DataTableTextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTableTextField\");","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/DataTable/EditInline/TextField/index.tsx"],"names":["React","TextField","GRID_CELL_EDIT_EXIT","FormControllerErrorMessage","clsx","yup","_","useStyles","useForm","yupResolver","DataTableTextField","props","classes","className","onChangeValue","params","rules","type","rest","api","id","field","value","error","useState","oldValue","setOldValue","validationSchema","useMemo","isNil","object","name","string","nullable","form","defaultValues","mode","shouldUnregister","resolver","watchValue","watch","errors","formState","useEffect","setEditCellProps","Boolean","subscribeEvent","String","message","root","textFieldError","register","defaultProps"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,QAAkD,mBAAlD;AAEA,SAAyBC,mBAAzB,QAAoD,wBAApD;AAEA,SAASC,0BAAT,QAA2C,oBAA3C;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,yBAA5B;;AAQA,SAASC,kBAAT,CAA4BC,KAA5B,EAA4D;AAAA;;AAAA;;AAC1D,MAAMC,OAAO,GAAGL,SAAS,EAAzB;;AAD0D,MAGlDM,SAHkD,GAGSF,KAHT,CAGlDE,SAHkD;AAAA,MAGvCC,aAHuC,GAGSH,KAHT,CAGvCG,aAHuC;AAAA,MAGxBC,MAHwB,GAGSJ,KAHT,CAGxBI,MAHwB;AAAA,MAGhBC,KAHgB,GAGSL,KAHT,CAGhBK,KAHgB;AAAA,MAGTC,IAHS,GAGSN,KAHT,CAGTM,IAHS;AAAA,MAGAC,IAHA,4BAGSP,KAHT;;AAAA,MAIlDQ,GAJkD,GAIZJ,MAJY,CAIlDI,GAJkD;AAAA,MAI7CC,EAJ6C,GAIZL,MAJY,CAI7CK,EAJ6C;AAAA,MAIzCC,KAJyC,GAIZN,MAJY,CAIzCM,KAJyC;AAAA,MAIlCC,KAJkC,GAIZP,MAJY,CAIlCO,KAJkC;AAAA,MAI3BC,KAJ2B,GAIZR,MAJY,CAI3BQ,KAJ2B;;AAAA,wBAM1BvB,KAAK,CAACwB,QAAN,CAAe,EAAf,CAN0B;AAAA;AAAA,MAMnDC,QANmD;AAAA,MAMzCC,WANyC;;AAQ1D,MAAMC,gBAAgB,GAAG3B,KAAK,CAAC4B,OAAN,CAAc,YAAM;AAC3C,QAAItB,CAAC,CAACuB,KAAF,CAAQb,KAAR,CAAJ,EAAoB;AAClB,aAAOX,GAAG,CAACyB,MAAJ,CAAW;AAAEC,QAAAA,IAAI,EAAE1B,GAAG,CAAC2B,MAAJ,GAAaC,QAAb;AAAR,OAAX,CAAP;AACD;;AACD,WAAO5B,GAAG,CAACyB,MAAJ,CAAW;AAAEC,MAAAA,IAAI,EAAEf;AAAR,KAAX,CAAP;AACD,GALwB,EAKtB,CAACA,KAAD,CALsB,CAAzB;AAOA,MAAMkB,IAAI,GAAG1B,OAAO,CAAC;AACnB2B,IAAAA,aAAa,EAAE;AACbJ,MAAAA,IAAI,EAAET;AADO,KADI;AAInBc,IAAAA,IAAI,EAAE,UAJa;AAKnBC,IAAAA,gBAAgB,EAAE,KALC;AAMnBC,IAAAA,QAAQ,EAAE7B,WAAW,CAACkB,gBAAD;AANF,GAAD,CAApB;AAQA,MAAMY,UAAU,GAAGL,IAAI,CAACM,KAAL,CAAW,MAAX,EAAmB,EAAnB,CAAnB;AAvB0D,MAyBlDC,MAzBkD,GAyBvCP,IAAI,CAACQ,SAzBkC,CAyBlDD,MAzBkD;AA2B1DzC,EAAAA,KAAK,CAAC2C,SAAN,CAAgB,YAAM;AACpBjB,IAAAA,WAAW,CAACJ,KAAD,CAAX;AACD,GAFD,EAEG,EAFH;AAIAtB,EAAAA,KAAK,CAAC2C,SAAN,CAAgB,YAAM;AACpBxB,IAAAA,GAAG,CAACyB,gBAAJ,CAAqB;AACnBxB,MAAAA,EAAE,EAAFA,EADmB;AAEnBC,MAAAA,KAAK,EAALA,KAFmB;AAGnBV,MAAAA,KAAK,EAAE;AAAEW,QAAAA,KAAK,EAAEiB,UAAT;AAAqBhB,QAAAA,KAAK,EAAEsB,OAAO,CAACJ,MAAM,CAACV,IAAR;AAAnC;AAHY,KAArB;AAKD,GAND,EAMG,CAACQ,UAAD,EAAaE,MAAb,EAAqBtB,GAArB,EAA0BE,KAA1B,EAAiCD,EAAjC,EAAqCG,KAArC,CANH;AAQAvB,EAAAA,KAAK,CAAC2C,SAAN,CAAgB,YAAM;AACpB,WAAOxB,GAAG,CAAC2B,cAAJ,CAAmB5C,mBAAnB,EAAwC,YAAM;AACnD,UAAI,CAACqB,KAAD,IAAUwB,MAAM,CAACtB,QAAD,CAAN,KAAqBsB,MAAM,CAACR,UAAD,CAAzC,EAAuD;AACrDzB,QAAAA,aAAa,CAACM,EAAD,EAAKmB,UAAL,EAAiBlB,KAAjB,CAAb;AACD;AACF,KAJM,CAAP;AAKD,GAND,EAMG,CAACF,GAAD,EAAMoB,UAAN,EAAkBhB,KAAlB,CANH;AAQA,sBACE,QAAC,0BAAD;AAA4B,IAAA,IAAI,EAAEsB,OAAO,CAACX,IAAI,CAACO,MAAL,CAAYV,IAAb,CAAzC;AAA6D,IAAA,KAAK,uBAAEG,IAAI,CAACO,MAAL,CAAYV,IAAd,sDAAE,kBAAkBiB,OAAtF;AAAA,2BACE,QAAC,SAAD,kCACM9B,IADN;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,SAAS,EAAEd,IAAI,CAACS,SAAD,EAAYD,OAAO,CAACqC,IAApB,EAA0Bf,IAAI,CAACO,MAAL,CAAYV,IAAZ,IAAoBnB,OAAO,CAACsC,cAAtD,CAHjB;AAIE,MAAA,IAAI,EAAC,MAJP;AAKE,MAAA,QAAQ,EAAEhB,IAAI,CAACiB;AALjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GA1DQzC,kB;UACSH,S,EAcHC,O;;;KAfNE,kB;AA4DTA,kBAAkB,CAAC0C,YAAnB,GAAkC;AAChCnC,EAAAA,IAAI,EAAE;AAD0B,CAAlC;AAIA,eAAeP,kBAAf","sourcesContent":["import React from 'react'\n\nimport { TextField, StandardTextFieldProps } from '@material-ui/core'\n\nimport { GridCellParams, GRID_CELL_EDIT_EXIT } from '@material-ui/data-grid'\n\nimport { FormControllerErrorMessage } from '@/components/index'\n\nimport clsx from 'clsx'\nimport * as yup from 'yup'\nimport _ from 'lodash'\n\nimport useStyles from '../styles'\nimport { useForm } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\n\nexport interface DataTableTextFieldProps extends StandardTextFieldProps {\n  params: GridCellParams\n  onChangeValue(id: any, value: any, field?: any): void\n  rules?: any\n}\n\nfunction DataTableTextField(props: DataTableTextFieldProps) {\n  const classes = useStyles()\n\n  const { className, onChangeValue, params, rules, type, ...rest } = props\n  const { api, id, field, value, error }: any = params\n\n  const [oldValue, setOldValue] = React.useState('')\n\n  const validationSchema = React.useMemo(() => {\n    if (_.isNil(rules)) {\n      return yup.object({ name: yup.string().nullable() })\n    }\n    return yup.object({ name: rules })\n  }, [rules])\n\n  const form = useForm({\n    defaultValues: {\n      name: value\n    },\n    mode: 'onChange',\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  })\n  const watchValue = form.watch('name', '')\n\n  const { errors } = form.formState\n\n  React.useEffect(() => {\n    setOldValue(value)\n  }, [])\n\n  React.useEffect(() => {\n    api.setEditCellProps({\n      id,\n      field,\n      props: { value: watchValue, error: Boolean(errors.name) }\n    })\n  }, [watchValue, errors, api, field, id, error])\n\n  React.useEffect(() => {\n    return api.subscribeEvent(GRID_CELL_EDIT_EXIT, () => {\n      if (!error && String(oldValue) !== String(watchValue)) {\n        onChangeValue(id, watchValue, field)\n      }\n    })\n  }, [api, watchValue, error])\n\n  return (\n    <FormControllerErrorMessage open={Boolean(form.errors.name)} title={form.errors.name?.message}>\n      <TextField\n        {...rest}\n        autoFocus\n        className={clsx(className, classes.root, form.errors.name && classes.textFieldError)}\n        name=\"name\"\n        inputRef={form.register}\n      />\n    </FormControllerErrorMessage>\n  )\n}\n\nDataTableTextField.defaultProps = {\n  type: 'string'\n}\n\nexport default DataTableTextField\n"]},"metadata":{},"sourceType":"module"}