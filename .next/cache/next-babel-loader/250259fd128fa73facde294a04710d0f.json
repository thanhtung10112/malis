{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\FormController\\\\TextField\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { useController } from 'react-hook-form';\nimport { AppTextField } from '@/components/index';\nimport _ from 'lodash';\n\nconst FormControlledTextField = props => {\n  const {\n    control,\n    name,\n    defaultValue,\n    rules,\n    transformValue,\n    limitText\n  } = props,\n        textFieldProps = _objectWithoutProperties(props, [\"control\", \"name\", \"defaultValue\", \"rules\", \"transformValue\", \"limitText\"]);\n\n  const _useController = useController({\n    name,\n    rules,\n    defaultValue,\n    control\n  }),\n        {\n    field: {\n      onChange: onChangeController,\n      value\n    },\n    meta: {\n      invalid\n    }\n  } = _useController,\n        inputProps = _objectWithoutProperties(_useController.field, [\"onChange\", \"value\"]);\n\n  const onChangeValue = event => {\n    const {\n      value\n    } = event.target;\n    const transformVal = transformValue(value);\n\n    if (limitText && _.size(value) > limitText) {\n      return;\n    }\n\n    onChangeController(transformVal);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppTextField, _objectSpread(_objectSpread(_objectSpread({}, inputProps), textFieldProps), {}, {\n    name: name,\n    onChange: onChangeValue,\n    error: Boolean(invalid),\n    helperText: invalid === null || invalid === void 0 ? void 0 : invalid.message,\n    value: _.toString(value)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\nFormControlledTextField.defaultProps = {\n  rules: {},\n  transformValue: value => value,\n  limitText: null\n};\nexport default FormControlledTextField;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/FormController/TextField/index.tsx"],"names":["React","useController","AppTextField","_","FormControlledTextField","props","control","name","defaultValue","rules","transformValue","limitText","textFieldProps","field","onChange","onChangeController","value","meta","invalid","inputProps","onChangeValue","event","target","transformVal","size","Boolean","message","toString","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,SAASC,YAAT,QAA6B,oBAA7B;AAGA,OAAOC,CAAP,MAAc,QAAd;;AAEA,MAAMC,uBAA2D,GAAIC,KAAD,IAAW;AAC7E,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA,YAAjB;AAA+BC,IAAAA,KAA/B;AAAsCC,IAAAA,cAAtC;AAAsDC,IAAAA;AAAtD,MAAuFN,KAA7F;AAAA,QAA0EO,cAA1E,4BAA6FP,KAA7F;;AAEA,yBAGIJ,aAAa,CAAC;AAChBM,IAAAA,IADgB;AAEhBE,IAAAA,KAFgB;AAGhBD,IAAAA,YAHgB;AAIhBF,IAAAA;AAJgB,GAAD,CAHjB;AAAA,QAAM;AACJO,IAAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAEC,kBAAZ;AAAgCC,MAAAA;AAAhC,KADH;AAEJC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAFF,GAAN;AAAA,QACmDC,UADnD,2CACEN,KADF;;AAUA,QAAMO,aAAa,GAAIC,KAAD,IAAW;AAC/B,UAAM;AAAEL,MAAAA;AAAF,QAAYK,KAAK,CAACC,MAAxB;AACA,UAAMC,YAAY,GAAGb,cAAc,CAACM,KAAD,CAAnC;;AACA,QAAIL,SAAS,IAAIR,CAAC,CAACqB,IAAF,CAAOR,KAAP,IAAgBL,SAAjC,EAA4C;AAC1C;AACD;;AACDI,IAAAA,kBAAkB,CAACQ,YAAD,CAAlB;AACD,GAPD;;AASA,sBACE,QAAC,YAAD,gDACMJ,UADN,GAEOP,cAFP;AAGE,IAAA,IAAI,EAAEL,IAHR;AAIE,IAAA,QAAQ,EAAEa,aAJZ;AAKE,IAAA,KAAK,EAAEK,OAAO,CAACP,OAAD,CALhB;AAME,IAAA,UAAU,EAAGA,OAAH,aAAGA,OAAH,uBAAGA,OAAD,CAAkBQ,OANhC;AAOE,IAAA,KAAK,EAAEvB,CAAC,CAACwB,QAAF,CAAWX,KAAX;AAPT;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAjCD;;AAmCAZ,uBAAuB,CAACwB,YAAxB,GAAuC;AACrCnB,EAAAA,KAAK,EAAE,EAD8B;AAErCC,EAAAA,cAAc,EAAGM,KAAD,IAAWA,KAFU;AAGrCL,EAAAA,SAAS,EAAE;AAH0B,CAAvC;AAMA,eAAeP,uBAAf","sourcesContent":["import React from 'react'\nimport { useController } from 'react-hook-form'\n\nimport { AppTextField } from '@/components/index'\n\nimport { ControlledTextFieldProps } from './type'\nimport _ from 'lodash'\n\nconst FormControlledTextField: React.FC<ControlledTextFieldProps> = (props) => {\n  const { control, name, defaultValue, rules, transformValue, limitText, ...textFieldProps } = props\n\n  const {\n    field: { onChange: onChangeController, value, ...inputProps },\n    meta: { invalid }\n  } = useController({\n    name,\n    rules,\n    defaultValue,\n    control\n  })\n\n  const onChangeValue = (event) => {\n    const { value } = event.target\n    const transformVal = transformValue(value)\n    if (limitText && _.size(value) > limitText) {\n      return\n    }\n    onChangeController(transformVal)\n  }\n\n  return (\n    <AppTextField\n      {...inputProps}\n      {...(textFieldProps as any)}\n      name={name}\n      onChange={onChangeValue}\n      error={Boolean(invalid)}\n      helperText={(invalid as any)?.message}\n      value={_.toString(value)}\n    />\n  )\n}\n\nFormControlledTextField.defaultProps = {\n  rules: {},\n  transformValue: (value) => value,\n  limitText: null\n}\n\nexport default FormControlledTextField\n"]},"metadata":{},"sourceType":"module"}