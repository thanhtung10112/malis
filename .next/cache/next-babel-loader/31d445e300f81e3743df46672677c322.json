{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Material\\\\TabGeneral.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useFormContext } from 'react-hook-form';\nimport { useSelector } from 'react-redux';\nimport { Grid } from '@material-ui/core';\nimport { DataTable, AppAutocompleteAsync, FormControllerTextField, SectionTimezone, AppAutocomplete } from '@/components';\nimport { When } from 'react-if';\nimport { tagStore, commonStore } from '@/store/reducers';\n\nconst TabGeneral = () => {\n  var _specificationForm$er, _specificationForm$er2;\n\n  const specificationForm = useFormContext();\n  const specificationDetail = useSelector(tagStore.selectDetail);\n  const userJob = useSelector(commonStore.selectUserValueJob);\n\n  const handleChangeDrawingId = (event, optionValue) => {\n    console.warn('optionValue', '>>>', optionValue);\n  };\n\n  const columns = React.useMemo(() => [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    field: 'description_raw',\n    width: 130,\n    headerName: 'Language',\n\n    valueGetter(params) {\n      return `${params.row.parameter_id} - ${params.row.description}`;\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Description')), {}, {\n    field: 'value_raw',\n    flex: 0.7,\n    headerName: 'Description',\n    hide: editor !== 'text',\n\n    valueGetter(params) {\n      const cellValue = getCellValue(params.id);\n      return cellValue;\n    },\n\n    renderEditCell(params) {\n      return /*#__PURE__*/_jsxDEV(DataTableTextField, {\n        params: params,\n        onChangeValue: onChangeDescription,\n        rules: yup.string().max(255, 'Description must be less than 255 characters!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this);\n    }\n\n  }), {\n    field: 'value_raw_editor',\n    flex: 0.7,\n    headerName: 'Description',\n    sortable: false,\n    hide: editor === 'text',\n\n    renderCell(params) {\n      const description = getCellValue(params.id);\n      const pureContent = striptags(description);\n      const htmlContent = parseHTML(_.toString(description));\n\n      if (pureContent) {\n        return /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: htmlContent,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.rteRoot,\n            onDoubleClick: onOpenRTE(params.row),\n            children: pureContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.rteRoot,\n        onDoubleClick: onOpenRTE(params.row),\n        children: pureContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this);\n    }\n\n  }], [descriptionValues, editor]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          style: {\n            marginTop: 8\n          },\n          children: /*#__PURE__*/_jsxDEV(AppAutocomplete, {\n            helperText: (_specificationForm$er = specificationForm.errors.job_id) === null || _specificationForm$er === void 0 ? void 0 : _specificationForm$er.message,\n            error: Boolean(specificationForm.errors.job_id),\n            value: userJob,\n            popupIcon: null,\n            disabled: true,\n            label: \"Job\",\n            required: true,\n            primaryKeyOption: \"value\",\n            options: [],\n            renderOption: option => option.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(AppAutocompleteAsync, {\n            helperText: (_specificationForm$er2 = specificationForm.errors.drawing_id) === null || _specificationForm$er2 === void 0 ? void 0 : _specificationForm$er2.message,\n            error: Boolean(specificationForm.errors.drawing_id) // value={specificationDetail.drawing_id}\n            ,\n            compName: \"drawing_list\",\n            additionalData: {\n              limit_to_job: userJob.value\n            },\n            required: true,\n            label: \"Part #\",\n            onChange: handleChangeDrawingId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControllerTextField, {\n            disabled: false,\n            control: specificationForm.control,\n            label: \"Description #\",\n            required: true,\n            name: \"spec_id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControllerTextField, {\n            disabled: false,\n            control: specificationForm.control,\n            label: \"Mass kg\",\n            required: true,\n            name: \"spec_id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControllerTextField, {\n            disabled: false,\n            control: specificationForm.control,\n            label: \"Unit #\",\n            name: \"spec_id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(When, {\n          condition: false,\n          children: /*#__PURE__*/_jsxDEV(SectionTimezone, {\n            value: specificationDetail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        hideFooter: true,\n        disableSelectionOnClick: true,\n        disableColumnMenu: true,\n        tableHeight: tableHeight,\n        rows: filteredLanguageList,\n        columns: columns,\n        onCellDoubleClick: onDbClickCell,\n        getRowClassName: getStylesRowDisabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\nexport default TabGeneral;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Material/TabGeneral.tsx"],"names":["useFormContext","useSelector","Grid","DataTable","AppAutocompleteAsync","FormControllerTextField","SectionTimezone","AppAutocomplete","When","tagStore","commonStore","TabGeneral","specificationForm","specificationDetail","selectDetail","userJob","selectUserValueJob","handleChangeDrawingId","event","optionValue","console","warn","columns","React","useMemo","columnProperties","defaultProperties","field","width","headerName","valueGetter","params","row","parameter_id","description","editCell","flex","hide","editor","cellValue","getCellValue","id","renderEditCell","onChangeDescription","yup","string","max","sortable","renderCell","pureContent","striptags","htmlContent","parseHTML","_","toString","classes","rteRoot","onOpenRTE","descriptionValues","marginTop","errors","job_id","message","Boolean","option","drawing_id","limit_to_job","value","control","tableHeight","filteredLanguageList","onDbClickCell","getStylesRowDisabled"],"mappings":"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","sourcesContent":["import { useFormContext } from 'react-hook-form'\nimport { useSelector } from 'react-redux'\n\nimport { Grid } from '@material-ui/core'\nimport {\n  DataTable,\n  AppAutocompleteAsync,\n  FormControllerTextField,\n  SectionTimezone,\n  AppAutocomplete\n} from '@/components'\nimport { When } from 'react-if'\n\nimport { tagStore, commonStore } from '@/store/reducers'\n\nimport type { SpecificationDetail } from '@/types/Specification'\nimport type { DataForDropdown } from '@/types/Common'\n\nconst TabGeneral = () => {\n  const specificationForm = useFormContext<SpecificationDetail>()\n\n  const specificationDetail = useSelector(tagStore.selectDetail)\n  const userJob = useSelector(commonStore.selectUserValueJob)\n\n  const handleChangeDrawingId = (event, optionValue: DataForDropdown) => {\n    console.warn('optionValue', '>>>', optionValue)\n  }\n\n  const columns = React.useMemo<GridColumns>(\n    () => [\n      {\n        ...columnProperties.defaultProperties,\n        field: 'description_raw',\n        width: 130,\n        headerName: 'Language',\n        valueGetter(params) {\n          return `${params.row.parameter_id} - ${params.row.description}`\n        }\n      },\n      {\n        ...columnProperties.defaultProperties,\n        ...columnProperties.editCell('Description'),\n        field: 'value_raw',\n        flex: 0.7,\n        headerName: 'Description',\n        hide: editor !== 'text',\n        valueGetter(params) {\n          const cellValue = getCellValue(params.id as number)\n          return cellValue\n        },\n        renderEditCell(params) {\n          return (\n            <DataTableTextField\n              params={params}\n              onChangeValue={onChangeDescription}\n              rules={yup.string().max(255, 'Description must be less than 255 characters!')}\n            />\n          )\n        }\n      },\n      {\n        field: 'value_raw_editor',\n        flex: 0.7,\n        headerName: 'Description',\n        sortable: false,\n        hide: editor === 'text',\n        renderCell(params) {\n          const description = getCellValue(params.id as number)\n          const pureContent = striptags(description)\n          const htmlContent = parseHTML(_.toString(description))\n          if (pureContent) {\n            return (\n              <Tooltip title={htmlContent}>\n                <div className={classes.rteRoot} onDoubleClick={onOpenRTE(params.row)}>\n                  {pureContent}\n                </div>\n              </Tooltip>\n            )\n          }\n          return (\n            <div className={classes.rteRoot} onDoubleClick={onOpenRTE(params.row)}>\n              {pureContent}\n            </div>\n          )\n        }\n      }\n    ],\n    [descriptionValues, editor]\n  )\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={6}>\n        <Grid container spacing={2}>\n          <Grid item xs={12} style={{ marginTop: 8 }}>\n            <AppAutocomplete\n              helperText={specificationForm.errors.job_id?.message}\n              error={Boolean(specificationForm.errors.job_id)}\n              value={userJob}\n              popupIcon={null}\n              disabled\n              label=\"Job\"\n              required\n              primaryKeyOption=\"value\"\n              options={[]}\n              renderOption={(option) => option.description}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <AppAutocompleteAsync\n              helperText={specificationForm.errors.drawing_id?.message}\n              error={Boolean(specificationForm.errors.drawing_id)}\n              // value={specificationDetail.drawing_id}\n              compName=\"drawing_list\"\n              additionalData={{ limit_to_job: userJob.value }}\n              required\n              label=\"Part #\"\n              onChange={handleChangeDrawingId}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <FormControllerTextField\n              disabled={false}\n              control={specificationForm.control}\n              label=\"Description #\"\n              required\n              name=\"spec_id\"\n            />\n          </Grid>\n\n          <Grid item xs={6}>\n            <FormControllerTextField\n              disabled={false}\n              control={specificationForm.control}\n              label=\"Mass kg\"\n              required\n              name=\"spec_id\"\n            />\n          </Grid>\n\n          <Grid item xs={6}>\n            <FormControllerTextField\n              disabled={false}\n              control={specificationForm.control}\n              label=\"Unit #\"\n              name=\"spec_id\"\n            />\n          </Grid>\n\n          <When condition={false}>\n            <SectionTimezone value={specificationDetail} />\n          </When>\n        </Grid>\n      </Grid>\n\n      <Grid item xs={6}>\n        <DataTable\n          hideFooter\n          disableSelectionOnClick\n          disableColumnMenu\n          tableHeight={tableHeight}\n          rows={filteredLanguageList}\n          columns={columns}\n          onCellDoubleClick={onDbClickCell}\n          getRowClassName={getStylesRowDisabled}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default TabGeneral\n"]},"metadata":{},"sourceType":"module"}