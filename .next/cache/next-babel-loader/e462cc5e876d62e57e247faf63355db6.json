{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useMemo, useEffect } from 'react';\nimport { Paper, TextField, Grid } from '@material-ui/core';\nimport { DataTable } from '@/components';\nimport _ from 'lodash';\nimport * as columnProperties from '@/utils/columnProperties';\nimport HttpService from '@/helper/HttpService';\n\nconst AppTabHistoryLog = props => {\n  const {\n    entityId,\n    tableHeight,\n    mode,\n    descriptionRows,\n    extraColumns,\n    entity,\n    onChange,\n    data,\n    isOpenDialog\n  } = props;\n  const httpService = new HttpService('');\n  const {\n    0: operationDetail,\n    1: setOperationDetail\n  } = useState('');\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const defaultColumns = useMemo(() => [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    field: 'operation_code',\n    headerName: 'Tr.',\n    width: 80\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    field: 'created_at',\n    headerName: 'Date Time',\n    flex: 0.6\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    field: 'created_by',\n    headerName: 'User',\n    width: 80\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    field: 'operation_description',\n    headerName: 'Description',\n    flex: 0.6\n  })], []);\n  const columns = [...defaultColumns, ...extraColumns];\n  useEffect(() => {\n    if (data.length === 0 && (_.isNil(isOpenDialog) || isOpenDialog)) {\n      getHistoryData();\n    }\n  }, [entityId, entity, data, isOpenDialog]); // reset history log if close the dialog\n\n  useEffect(() => {\n    if (_.isNil(isOpenDialog)) {\n      return;\n    }\n\n    if (!isOpenDialog && data.length > 0) {\n      onChange([]);\n    }\n  }, [data, isOpenDialog, onChange]);\n\n  const getHistoryData = async () => {\n    setLoading(true);\n\n    try {\n      const {\n        history_logs\n      } = await httpService.get('history', {\n        entity,\n        pk: entityId\n      });\n      onChange(history_logs);\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    setLoading(false);\n  };\n\n  const handleSelectOperation = params => {\n    const id = params.id;\n\n    const operation = _.find(data, {\n      id\n    });\n\n    setOperationDetail((operation === null || operation === void 0 ? void 0 : operation.changelogs) || '');\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"history\",\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: mode === 'vertical' ? 12 : 7,\n        children: /*#__PURE__*/_jsx(Paper, {\n          children: /*#__PURE__*/_jsx(DataTable, {\n            rows: data,\n            columns: columns,\n            tableHeight: tableHeight,\n            loading: loading,\n            onRowClick: handleSelectOperation,\n            hideFooter: true\n          })\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: mode === 'vertical' ? 12 : 5,\n        children: /*#__PURE__*/_jsx(TextField, {\n          multiline: true,\n          rows: descriptionRows,\n          value: operationDetail\n        })\n      })]\n    })\n  });\n};\n\nAppTabHistoryLog.defaultProps = {\n  tableHeight: 350,\n  mode: 'vertical',\n  descriptionRows: 7,\n  extraColumns: []\n};\nexport default AppTabHistoryLog;","map":null,"metadata":{},"sourceType":"module"}