{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\FormController\\\\Autocomplete\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { useController } from 'react-hook-form';\nimport { AppAutocomplete } from '@/components/index';\nimport _ from 'lodash';\nconst useStyles = makeStyles(() => ({\n  popper: {\n    zIndex: 9999999\n  }\n}));\n\nconst FormControllerAutocomplete = props => {\n  const classes = useStyles();\n\n  const {\n    control,\n    defaultValue,\n    name,\n    rules,\n    primaryKeyOption,\n    onChange: onChangeProps,\n    textFieldProps\n  } = props,\n        autocompleteProps = _objectWithoutProperties(props, [\"control\", \"defaultValue\", \"name\", \"rules\", \"primaryKeyOption\", \"onChange\", \"textFieldProps\"]);\n\n  const _useController = useController({\n    name,\n    rules,\n    defaultValue,\n    control\n  }),\n        {\n    field: {\n      onChange\n    },\n    meta: {\n      invalid\n    }\n  } = _useController,\n        inputProps = _objectWithoutProperties(_useController.field, [\"onChange\"]);\n\n  const onChangeValue = (event, value) => {\n    if (_.isNil(value)) {\n      onChange(null);\n      return;\n    }\n\n    onChange(value[primaryKeyOption]);\n\n    if (_.isFunction(onChangeProps)) {\n      onChangeProps(value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppAutocomplete, _objectSpread(_objectSpread(_objectSpread({}, autocompleteProps), inputProps), {}, {\n    classes: _objectSpread({}, classes),\n    helperText: invalid === null || invalid === void 0 ? void 0 : invalid.message,\n    error: Boolean(invalid),\n    onChange: onChangeValue,\n    textFieldProps: _objectSpread({\n      name: name\n    }, textFieldProps),\n    primaryKeyOption: primaryKeyOption\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\nFormControllerAutocomplete.defaultProps = {\n  primaryKeyOption: 'id'\n};\nexport default FormControllerAutocomplete;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/FormController/Autocomplete/index.tsx"],"names":["React","makeStyles","useController","AppAutocomplete","_","useStyles","popper","zIndex","FormControllerAutocomplete","props","classes","control","defaultValue","name","rules","primaryKeyOption","onChange","onChangeProps","textFieldProps","autocompleteProps","field","meta","invalid","inputProps","onChangeValue","event","value","isNil","isFunction","message","Boolean","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,SAASC,eAAT,QAAgC,oBAAhC;AAEA,OAAOC,CAAP,MAAc,QAAd;AAIA,MAAMC,SAAS,GAAGJ,UAAU,CAAC,OAAO;AAClCK,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAE;AADF;AAD0B,CAAP,CAAD,CAA5B;;AAMA,MAAMC,0BAAqE,GAAIC,KAAD,IAAW;AACvF,QAAMC,OAAO,GAAGL,SAAS,EAAzB;;AACA,QAAM;AACJM,IAAAA,OADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA,KAJI;AAKJC,IAAAA,gBALI;AAMJC,IAAAA,QAAQ,EAAEC,aANN;AAOJC,IAAAA;AAPI,MASFT,KATJ;AAAA,QAQKU,iBARL,4BASIV,KATJ;;AAWA,yBAGIP,aAAa,CAAC;AAChBW,IAAAA,IADgB;AAEhBC,IAAAA,KAFgB;AAGhBF,IAAAA,YAHgB;AAIhBD,IAAAA;AAJgB,GAAD,CAHjB;AAAA,QAAM;AACJS,IAAAA,KAAK,EAAE;AAAEJ,MAAAA;AAAF,KADH;AAEJK,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAFF,GAAN;AAAA,QACwBC,UADxB,2CACEH,KADF;;AAUA,QAAMI,aAAa,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACtC,QAAItB,CAAC,CAACuB,KAAF,CAAQD,KAAR,CAAJ,EAAoB;AAClBV,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACA;AACD;;AACDA,IAAAA,QAAQ,CAACU,KAAK,CAACX,gBAAD,CAAN,CAAR;;AAEA,QAAIX,CAAC,CAACwB,UAAF,CAAaX,aAAb,CAAJ,EAAiC;AAC/BA,MAAAA,aAAa,CAACS,KAAD,CAAb;AACD;AACF,GAVD;;AAYA,sBACE,QAAC,eAAD,gDACMP,iBADN,GAEMI,UAFN;AAGE,IAAA,OAAO,oBAAOb,OAAP,CAHT;AAIE,IAAA,UAAU,EAAGY,OAAH,aAAGA,OAAH,uBAAGA,OAAD,CAAkBO,OAJhC;AAKE,IAAA,KAAK,EAAEC,OAAO,CAACR,OAAD,CALhB;AAME,IAAA,QAAQ,EAAEE,aANZ;AAOE,IAAA,cAAc;AAAIX,MAAAA,IAAI,EAAEA;AAAV,OAAmBK,cAAnB,CAPhB;AAQE,IAAA,gBAAgB,EAAEH;AARpB;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA/CD;;AAiDAP,0BAA0B,CAACuB,YAA3B,GAA0C;AACxChB,EAAAA,gBAAgB,EAAE;AADsB,CAA1C;AAIA,eAAeP,0BAAf","sourcesContent":["import React from 'react'\n\nimport { makeStyles } from '@material-ui/core'\nimport { useController } from 'react-hook-form'\n\nimport { AppAutocomplete } from '@/components/index'\n\nimport _ from 'lodash'\n\nimport type { FormControllerAutocompleteProps } from './type'\n\nconst useStyles = makeStyles(() => ({\n  popper: {\n    zIndex: 9999999\n  }\n}))\n\nconst FormControllerAutocomplete: React.FC<FormControllerAutocompleteProps> = (props) => {\n  const classes = useStyles()\n  const {\n    control,\n    defaultValue,\n    name,\n    rules,\n    primaryKeyOption,\n    onChange: onChangeProps,\n    textFieldProps,\n    ...autocompleteProps\n  } = props\n\n  const {\n    field: { onChange, ...inputProps },\n    meta: { invalid }\n  } = useController({\n    name,\n    rules,\n    defaultValue,\n    control\n  })\n\n  const onChangeValue = (event, value) => {\n    if (_.isNil(value)) {\n      onChange(null)\n      return\n    }\n    onChange(value[primaryKeyOption])\n\n    if (_.isFunction(onChangeProps)) {\n      onChangeProps(value)\n    }\n  }\n\n  return (\n    <AppAutocomplete\n      {...autocompleteProps}\n      {...inputProps}\n      classes={{ ...classes }}\n      helperText={(invalid as any)?.message}\n      error={Boolean(invalid)}\n      onChange={onChangeValue}\n      textFieldProps={{ name: name, ...textFieldProps }}\n      primaryKeyOption={primaryKeyOption}\n    />\n  )\n}\n\nFormControllerAutocomplete.defaultProps = {\n  primaryKeyOption: 'id'\n}\n\nexport default FormControllerAutocomplete\n"]},"metadata":{},"sourceType":"module"}