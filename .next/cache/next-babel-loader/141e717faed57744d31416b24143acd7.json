{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport var name = 'item';\nexport var resetState = createAction(\"\".concat(name, \"/\").concat(actionTypes.RESET_STATE));\nexport var initialState = {\n  dataList: [],\n  initDataForList: {\n    permissions: {\n      item: null\n    },\n    jobs: [],\n    wiki_page: '',\n    column_tooltips: {}\n  }\n};\nvar itemSlice = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    setDataList: function setDataList(state, _ref) {\n      var payload = _ref.payload;\n      state.dataList = payload;\n    },\n    setInitDataForList: function setInitDataForList(state, _ref2) {\n      var payload = _ref2.payload;\n      state.initDataForList = payload;\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n}); // Actions\n\nvar actions = itemSlice.actions; // Saga actions\n\nexport { actions };\nexport var sagaGetList = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_LIST));\nexport var sagaChangeUserJob = createAction(\"\".concat(name, \"/\").concat(actionTypes.CHANGE_USER_JOB));\nexport var sagaRemove = createAction(\"\".concat(name, \"/\").concat(actionTypes.REMOVE));\nexport var sagaChangeUserDrawing = createAction(\"\".concat(name, \"/\").concat(actionTypes.CHANGE_USER_DRAWING)); // selector\n\nvar selectState = function selectState(state) {\n  return state[name];\n};\n\nexport var selectDataList = createSelector(selectState, function (state) {\n  return state.dataList;\n});\nexport var selectPermissions = createSelector(selectState, function (state) {\n  return state.initDataForList.permissions.item;\n});\nexport var selectInitDataForList = createSelector(selectState, function (state) {\n  return state.initDataForList;\n});\nexport default itemSlice;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/reducers/item.reducer.ts"],"names":["createSlice","createAction","createSelector","actionTypes","name","resetState","RESET_STATE","initialState","dataList","initDataForList","permissions","item","jobs","wiki_page","column_tooltips","itemSlice","reducers","setDataList","state","payload","setInitDataForList","extraReducers","type","actions","sagaGetList","GET_LIST","sagaChangeUserJob","CHANGE_USER_JOB","sagaRemove","REMOVE","sagaChangeUserDrawing","CHANGE_USER_DRAWING","selectState","selectDataList","selectPermissions","selectInitDataForList"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,YAAtB,EAAmDC,cAAnD,QAAyE,kBAAzE;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAMA,OAAO,IAAMC,IAAY,GAAG,MAArB;AACP,OAAO,IAAMC,UAAU,GAAGJ,YAAY,WAAIG,IAAJ,cAAYD,WAAW,CAACG,WAAxB,EAA/B;AAEP,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,EADgB;AAE1BC,EAAAA,eAAe,EAAE;AACfC,IAAAA,WAAW,EAAE;AACXC,MAAAA,IAAI,EAAE;AADK,KADE;AAIfC,IAAAA,IAAI,EAAE,EAJS;AAKfC,IAAAA,SAAS,EAAE,EALI;AAMfC,IAAAA,eAAe,EAAE;AANF;AAFS,CAArB;AAYP,IAAMC,SAAS,GAAGf,WAAW,CAAC;AAC5BI,EAAAA,IAAI,EAAJA,IAD4B;AAE5BG,EAAAA,YAAY,EAAZA,YAF4B;AAG5BS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WADQ,uBACIC,KADJ,QAC+C;AAAA,UAAlCC,OAAkC,QAAlCA,OAAkC;AACrDD,MAAAA,KAAK,CAACV,QAAN,GAAiBW,OAAjB;AACD,KAHO;AAIRC,IAAAA,kBAJQ,8BAIWF,KAJX,SAImE;AAAA,UAA/CC,OAA+C,SAA/CA,OAA+C;AACzED,MAAAA,KAAK,CAACT,eAAN,GAAwBU,OAAxB;AACD;AANO,GAHkB;AAW5BE,EAAAA,aAAa,sBACVhB,UAAU,CAACiB,IADD,cACS;AAClB,WAAOf,YAAP;AACD,GAHU;AAXe,CAAD,CAA7B,C,CAiBA;;IACegB,O,GAAYR,S,CAAZQ,O,EAEf;;;AACA,OAAO,IAAMC,WAAW,GAAGvB,YAAY,WAAIG,IAAJ,cAAYD,WAAW,CAACsB,QAAxB,EAAhC;AACP,OAAO,IAAMC,iBAAiB,GAAGzB,YAAY,WACxCG,IADwC,cAChCD,WAAW,CAACwB,eADoB,EAAtC;AAGP,OAAO,IAAMC,UAAU,GAAG3B,YAAY,WAAwBG,IAAxB,cAAgCD,WAAW,CAAC0B,MAA5C,EAA/B;AACP,OAAO,IAAMC,qBAAqB,GAAG7B,YAAY,WAC5CG,IAD4C,cACpCD,WAAW,CAAC4B,mBADwB,EAA1C,C,CAIP;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACd,KAAD;AAAA,SAA4BA,KAAK,CAACd,IAAD,CAAjC;AAAA,CAApB;;AACA,OAAO,IAAM6B,cAAc,GAAG/B,cAAc,CAAC8B,WAAD,EAAc,UAACd,KAAD;AAAA,SAAWA,KAAK,CAACV,QAAjB;AAAA,CAAd,CAArC;AACP,OAAO,IAAM0B,iBAAiB,GAAGhC,cAAc,CAAC8B,WAAD,EAAc,UAACd,KAAD;AAAA,SAAWA,KAAK,CAACT,eAAN,CAAsBC,WAAtB,CAAkCC,IAA7C;AAAA,CAAd,CAAxC;AACP,OAAO,IAAMwB,qBAAqB,GAAGjC,cAAc,CAAC8B,WAAD,EAAc,UAACd,KAAD;AAAA,SAAWA,KAAK,CAACT,eAAjB;AAAA,CAAd,CAA5C;AAEP,eAAeM,SAAf","sourcesContent":["import { createSlice, createAction, PayloadAction, createSelector } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\n\nimport type { Item, ItemInitDataForList } from '@/types/Item'\nimport type { RootReducerType } from './rootReducer'\nimport type { DataForDropdown, Entity, ParameterOption, PayloadOperation } from '@/types/Common'\n\nexport const name: Entity = 'item'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const initialState = {\n  dataList: [] as Item[],\n  initDataForList: {\n    permissions: {\n      item: null\n    },\n    jobs: [],\n    wiki_page: '',\n    column_tooltips: {}\n  } as ItemInitDataForList\n}\n\nconst itemSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, { payload }: PayloadAction<Item[]>) {\n      state.dataList = payload\n    },\n    setInitDataForList(state, { payload }: PayloadAction<ItemInitDataForList>) {\n      state.initDataForList = payload\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n// Actions\nexport const { actions } = itemSlice\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaChangeUserJob = createAction<{ optionValue: ParameterOption; confirm: string }>(\n  `${name}/${actionTypes.CHANGE_USER_JOB}`\n)\nexport const sagaRemove = createAction<PayloadOperation[]>(`${name}/${actionTypes.REMOVE}`)\nexport const sagaChangeUserDrawing = createAction<{ optionValue: DataForDropdown; confirm: string }>(\n  `${name}/${actionTypes.CHANGE_USER_DRAWING}`\n)\n\n// selector\nconst selectState = (state: RootReducerType) => state[name]\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.item)\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\n\nexport default itemSlice\n"]},"metadata":{},"sourceType":"module"}