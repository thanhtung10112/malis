{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, put } from 'redux-saga/effects';\nimport { call, select, all } from 'typed-redux-saga';\nimport immer from 'immer';\nimport _ from 'lodash';\nimport { budgetActions, commonStore, advancedFilterActions, summaryReportActions } from '@/store/reducers';\nimport commonApi from '@/apis/common';\nimport budgetApi from '@/apis/budget';\nimport * as errorSaga from '@/store/saga/errorSaga';\nexport function* fetchInitDataForList() {\n  const userPuco = yield* select(budgetActions.selectUserPuco);\n  const userJob = yield* select(budgetActions.selectUserJob);\n  const data = yield call(budgetApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  });\n\n  if (_.isNull(data.selected_job)) {\n    ;\n    data.selected_job = {};\n  } // set all_value for all option\n\n\n  data.puco_list = immer(data.puco_list, draft => {\n    const index = _.findIndex(draft, item => _.isNull(item.value));\n\n    draft[index].value = 'all_value';\n  }); // if puco was selected, then set response.user_puco = current selected puco\n\n  if (!_.isNull(userPuco.value)) {\n    data.user_puco = userPuco;\n  }\n\n  yield put(budgetActions.setInitDataForList(data));\n}\nexport function* fetchInitDataForCreateEdit() {\n  const userJob = yield* select(budgetActions.selectUserJob);\n  const {\n    data\n  } = yield call(commonApi.getInitData, {\n    comp_name: 'create_edit_budget',\n    job_id_pk: userJob.value\n  });\n  yield put(budgetActions.setInitDataForCreateEdit(data));\n  yield put(budgetActions.setBudgetDetail({\n    job_id: userJob.value\n  }));\n}\n\nfunction* fetchList() {\n  var _userPuco;\n\n  // eslint-disable-next-line prefer-const\n  let {\n    tableState,\n    searchQuery,\n    filterData,\n    userJob,\n    userPuco\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(budgetActions.selectUserJob),\n    userPuco: select(budgetActions.selectUserPuco)\n  });\n\n  if (!userJob.value) {\n    return;\n  }\n\n  if (userPuco.value === 'all_value') {\n    userPuco = immer(userPuco, draft => {\n      draft.value = null;\n    });\n  }\n\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(budgetApi.getList, _objectSpread({\n    page,\n    per_page,\n    s: searchQuery,\n    job_id: userJob === null || userJob === void 0 ? void 0 : userJob.value,\n    puco_id: (_userPuco = userPuco) === null || _userPuco === void 0 ? void 0 : _userPuco.value\n  }, filterData));\n  yield put(budgetActions.setDataList(data.budgets));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(budgetActions.setBudgetSum(data.budgets_sum));\n  yield put(budgetActions.setPermissions(data.permissions));\n}\n\nfunction* fetchDetail(id) {\n  const {\n    budget\n  } = yield call(budgetApi.getDetail, id);\n  budget.amount = budget.amount.toString();\n  yield put(budgetActions.setBudgetDetail(budget));\n}\n\nfunction* getList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForList);\n    const permissions = yield* select(budgetActions.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* changeUserValue({\n  payload\n}) {\n  try {\n    const {\n      value,\n      option,\n      confirm\n    } = payload;\n\n    if (confirm === 'save') {\n      yield put(commonStore.sagaUpdateMultiple({\n        entity: 'budget',\n        action: budgetActions.changeUserValue,\n        payloadAction: {\n          value,\n          option\n        }\n      }));\n    } else {\n      yield put(budgetActions.setUserValues({\n        value,\n        option\n      }));\n      yield call(getList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\n\nfunction* openCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCreateEdit);\n    yield put(budgetActions.setOpenDialog(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* create({\n  payload\n}) {\n  yield put(budgetActions.setLoadingDialog(true));\n\n  try {\n    const {\n      message\n    } = yield call(budgetApi.create, payload);\n    yield put(commonStore.actions.setSuccessMessage(message));\n\n    const budgetDetail = _objectSpread(_objectSpread({}, budgetActions.budgetDetail), {}, {\n      job_id: payload.job_id\n    });\n\n    yield put(budgetActions.setBudgetDetail(budgetDetail));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(budgetActions.setLoadingDialog(false));\n}\n\nfunction* openUpdateDialog({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield all([call(fetchInitDataForCreateEdit), call(fetchDetail, payload)]);\n    yield put(budgetActions.setOpenDialog(true));\n    yield put(budgetActions.setEditMode(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* update({\n  payload\n}) {\n  yield put(budgetActions.setLoadingDialog(true));\n\n  try {\n    const {\n      message\n    } = yield call(budgetApi.updateMultiple, [payload]);\n    yield put(commonStore.actions.setSuccessMessage(message));\n    yield call(closeDialog);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(budgetActions.setLoadingDialog(false));\n}\n\nfunction* remove({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const data = yield call(budgetApi.executeOperation, 'delete', payload);\n\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data));\n      yield put(summaryReportActions.setOpen(true));\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message));\n    }\n\n    yield call(fetchList);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* importCostCode({\n  payload\n}) {\n  yield put(budgetActions.setImportLoading(true));\n\n  try {\n    const {\n      data\n    } = yield* call(commonApi.startBackgroundJob, 'import_budget', payload.operationData, payload.file);\n    yield all([put(budgetActions.setCeleryId(data.celery_id)), put(budgetActions.setOperationId(data.operation_id)), put(budgetActions.setOpenImportProcess(true)), put(budgetActions.setImportMode(payload.mode))]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(budgetActions.setImportLoading(false));\n}\n\nfunction* sendReportMail({\n  payload\n}) {\n  yield put(budgetActions.setImportLoading(true));\n\n  try {\n    const {\n      data\n    } = yield call(commonApi.sendReportMail, payload);\n    yield put(commonStore.actions.setSuccessMessage(data.message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(budgetActions.setImportLoading(false));\n}\n\nfunction* getRemindData() {\n  yield put(budgetActions.setImportLoading(true));\n\n  try {\n    const userJob = yield* select(budgetActions.selectUserJob);\n    const remindData = yield* select(budgetActions.selectRemindData);\n\n    if (remindData.helpText) {\n      yield put(budgetActions.setRemindData({\n        open: true\n      }));\n    } else {\n      const {\n        data\n      } = yield call(commonApi.getInitData, {\n        comp_name: 'import_budget',\n        job_id_pk: userJob.value\n      });\n      yield put(budgetActions.setRemindData({\n        helpText: data.help_text,\n        open: true\n      }));\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(budgetActions.setImportLoading(false));\n}\n\nfunction* closeDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield put(budgetActions.setOpenDialog(false));\n    yield call(fetchList);\n    yield put(budgetActions.setBudgetDetail(_objectSpread({}, budgetActions.budgetDetail)));\n    yield put(budgetActions.setEditMode(false));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* watchBudgetSaga() {\n  yield takeEvery(budgetActions.openCreateDialog, openCreateDialog);\n  yield takeEvery(budgetActions.closeDialog, closeDialog);\n  yield takeEvery(budgetActions.openUpdateDialog, openUpdateDialog);\n  yield takeEvery(budgetActions.getList, getList);\n  yield takeEvery(budgetActions.changeUserValue, changeUserValue);\n  yield takeEvery(budgetActions.create, create);\n  yield takeEvery(budgetActions.update, update);\n  yield takeEvery(budgetActions.remove, remove);\n  yield takeEvery(budgetActions.importCostCode, importCostCode);\n  yield takeEvery(budgetActions.sendReportMail, sendReportMail);\n  yield takeEvery(budgetActions.getRemindData, getRemindData);\n}\n\nexport default watchBudgetSaga;","map":null,"metadata":{},"sourceType":"module"}