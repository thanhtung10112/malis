{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useMemo } from 'react';\nimport { TextField, makeStyles, Checkbox } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { FormControllerErrorMessage } from '@/components/index';\nimport _ from 'lodash';\nvar useStyles = makeStyles({\n  buttonGroup: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: '0 !important'\n  },\n  chipRoot: {\n    height: 18,\n    fontSize: 13\n  },\n  chipIcon: {\n    width: 14,\n    heigt: 14\n  }\n});\n\nvar AppAutocomplete = function AppAutocomplete(props) {\n  var error = props.error,\n      helperText = props.helperText,\n      label = props.label,\n      required = props.required,\n      textFieldProps = props.textFieldProps,\n      primaryKeyOption = props.primaryKeyOption,\n      options = props.options,\n      value = props.value,\n      getOptionSelected = props.getOptionSelected,\n      renderOption = props.renderOption,\n      multiple = props.multiple,\n      autocompleteProps = _objectWithoutProperties(props, [\"error\", \"helperText\", \"label\", \"required\", \"textFieldProps\", \"primaryKeyOption\", \"options\", \"value\", \"getOptionSelected\", \"renderOption\", \"multiple\"]);\n\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      isFocusing = _useState[0],\n      setIsFocusing = _useState[1];\n\n  var openTooltip = useMemo(function () {\n    return isFocusing && error;\n  }, [error, isFocusing]);\n  var formatValue = useMemo(function () {\n    try {\n      if (_.isInteger(value) || _.isString(value)) {\n        return _.find(options, function (item) {\n          return item[primaryKeyOption] === value;\n        });\n      }\n\n      return value;\n    } catch (error) {\n      return _.toString(value);\n    }\n  }, [options, value]);\n  var filteredOptions = useMemo(function () {\n    if (_.every(options, function (op) {\n      return _.has(op, 'status');\n    })) {\n      return _.filter(options, {\n        status: true\n      });\n    }\n\n    return options;\n  }, [options]);\n\n  var getOptionSelectedState = function getOptionSelectedState(option, value) {\n    try {\n      if (_.isInteger(option) || _.isString(option)) {\n        return option[primaryKeyOption] === value;\n      }\n\n      return option[primaryKeyOption] === value[primaryKeyOption];\n    } catch (_unused) {\n      return false;\n    }\n  };\n\n  var renderOptionMultiple = function renderOptionMultiple(option, _ref) {\n    var selected = _ref.selected;\n    var label = renderOption(option, null);\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Checkbox, {\n        checked: selected,\n        style: {\n          padding: 0,\n          paddingRight: 8\n        },\n        color: \"primary\"\n      }), /*#__PURE__*/_jsx(\"span\", {\n        children: label\n      })]\n    });\n  };\n\n  var getRenderOption = function getRenderOption() {\n    if (multiple) {\n      return renderOptionMultiple;\n    }\n\n    return renderOption;\n  };\n\n  var getOptionSelectedProps = getOptionSelected || getOptionSelectedState;\n\n  var onHoverField = function onHoverField() {\n    setIsFocusing(true);\n  };\n\n  var onLeavingField = function onLeavingField() {\n    setIsFocusing(false);\n  };\n\n  var renderInput = function renderInput(params) {\n    return /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread(_objectSpread({}, params), {}, {\n      error: error,\n      label: label,\n      required: required\n    }, textFieldProps), {}, {\n      InputProps: _objectSpread(_objectSpread({}, params.InputProps), textFieldProps.InputProps)\n    }));\n  };\n\n  return /*#__PURE__*/_jsx(FormControllerErrorMessage, {\n    title: helperText,\n    open: openTooltip,\n    children: /*#__PURE__*/_jsx(Autocomplete, _objectSpread({\n      value: formatValue,\n      onMouseOver: onHoverField,\n      onMouseLeave: onLeavingField,\n      ChipProps: {\n        classes: {\n          root: classes.chipRoot,\n          deleteIcon: classes.chipIcon\n        }\n      },\n      getOptionSelected: getOptionSelectedProps // filterOptions={filterOptions}\n      ,\n      getOptionLabel: renderOption,\n      multiple: multiple,\n      renderInput: renderInput,\n      renderOption: getRenderOption(),\n      options: filteredOptions\n    }, autocompleteProps))\n  });\n};\n\nAppAutocomplete.defaultProps = {\n  primaryKeyOption: 'id',\n  textFieldProps: {},\n  disableClearable: true,\n  renderOption: function renderOption(option) {\n    return option.description;\n  }\n};\nexport default AppAutocomplete;","map":null,"metadata":{},"sourceType":"module"}