{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice, createSelector, createAction } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nimport _ from 'lodash';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nimport isAssembly from '@/utils/isAssembly';\nimport { manufacturerStore } from '@/store/reducers';\nexport var name = 'part';\nexport var itemDetail = {\n  job_id: null,\n  drawing_id: null,\n  dpn: '',\n  reference_to: null,\n  mass: 0,\n  unit: null,\n  manufacturer_equiv: null,\n  manufacturers: [],\n  material_equiv: null,\n  descriptions: [],\n  manufacturer_equiv_standards: [],\n  material_equiv_standards: [],\n  additional_attributes: {}\n};\nexport var assemblyDetail = {\n  job_id: null,\n  drawing_id: null,\n  dpn: '',\n  unit: null,\n  descriptions: [],\n  items: [],\n  manufacturers: [],\n  is_assembly: true,\n  additional_attributes: {},\n  drawing_items: []\n};\nexport var initialState = {\n  partList: [],\n  initData: {\n    parameters: {\n      MAAT: [],\n      PLLA: [],\n      UNIT: [],\n      PAAT: []\n    }\n  },\n  confirmRef: {\n    open: false,\n    message: ''\n  },\n  manufacturer: {\n    detail: manufacturerStore.initialState.detail,\n    dialogState: manufacturerStore.initialState.dialogState,\n    initData: _objectSpread(_objectSpread({}, manufacturerStore.initialState.initDataForCE), {}, {\n      permissions: null\n    })\n  }\n};\nvar partSlice = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    addPart: function addPart(state, _ref) {\n      var payload = _ref.payload;\n\n      var part = _objectSpread(_objectSpread({}, payload), {}, {\n        loading: false,\n        tab: 0,\n        historyLogs: []\n      });\n\n      state.partList.push(part);\n    },\n    setInitData: function setInitData(state, _ref2) {\n      var payload = _ref2.payload;\n      state.initData = payload;\n    },\n    setHistoryLogs: function setHistoryLogs(state, _ref3) {\n      var payload = _ref3.payload;\n      var length = state.partList.length;\n\n      if (length > 0) {\n        state.partList[length - 1].historyLogs = payload;\n      }\n    },\n    setPartLoading: function setPartLoading(state, _ref4) {\n      var payload = _ref4.payload;\n\n      var currentPart = _.last(state.partList);\n\n      var length = state.partList.length;\n\n      if (length <= 0) {\n        return;\n      }\n\n      if (currentPart.loading !== payload) {\n        state.partList[length - 1].loading = payload;\n      }\n    },\n    updateCurrentPart: function updateCurrentPart(state, _ref5) {\n      var payload = _ref5.payload;\n      var length = state.partList.length;\n      state.partList[length - 1].detail = _objectSpread(_objectSpread({}, state.partList[length - 1].detail), payload);\n    },\n    setConfirmRef: function setConfirmRef(state, _ref6) {\n      var payload = _ref6.payload;\n      state.confirmRef.open = payload.open;\n      state.confirmRef.message = payload.message;\n    },\n    setConfirmRefOpen: function setConfirmRefOpen(state, _ref7) {\n      var payload = _ref7.payload;\n      state.confirmRef.open = payload;\n    },\n    resetCurrentPart: function resetCurrentPart(state, _ref8) {\n      var payload = _ref8.payload;\n      var length = state.partList.length;\n      var userJob = payload.userJob,\n          userDrawing = payload.userDrawing,\n          generateCode = payload.generateCode;\n      var currentPart = state.partList[length - 1].detail;\n      var initDetail = isAssembly(currentPart) ? assemblyDetail : itemDetail;\n      var defaultValues = getDefaultValues(state.initData.parameters, {\n        unit: 'UNIT'\n      }, initDetail);\n      defaultValues.job_id = userJob.value;\n      defaultValues.drawing_id = userDrawing.value === -1 ? null : userDrawing;\n\n      if (generateCode) {\n        defaultValues.dpn = generateCode;\n      }\n\n      state.partList[length - 1].detail = defaultValues;\n    },\n    removePart: function removePart(state) {\n      state.partList.pop();\n    },\n    setPartTab: function setPartTab(state, _ref9) {\n      var payload = _ref9.payload;\n\n      var currentPart = _.last(state.partList);\n\n      var length = state.partList.length;\n\n      if (length <= 0) {\n        return;\n      }\n\n      if (currentPart.tab !== payload) {\n        state.partList[length - 1].tab = payload;\n      }\n    },\n    // Manufacturer\n    setManuDetail: function setManuDetail(state, _ref10) {\n      var payload = _ref10.payload;\n      state.manufacturer.detail = _objectSpread(_objectSpread({}, state.manufacturer.detail), payload);\n    },\n    setManuDialogOpen: function setManuDialogOpen(state, _ref11) {\n      var payload = _ref11.payload;\n      state.manufacturer.dialogState.open = payload;\n    },\n    setManuDialogLoading: function setManuDialogLoading(state, _ref12) {\n      var payload = _ref12.payload;\n      state.manufacturer.dialogState.loading = payload;\n    },\n    setManuInitData: function setManuInitData(state, _ref13) {\n      var payload = _ref13.payload;\n      state.manufacturer.initData = payload;\n    },\n    addManufacturer: function addManufacturer(state, _ref14) {\n      var payload = _ref14.payload;\n      var length = state.partList.length;\n      state.partList[length - 1].detail.manufacturers.push(payload);\n    },\n    setDrawingItems: function setDrawingItems(state, _ref15) {\n      var payload = _ref15.payload;\n      var length = state.partList.length;\n\n      if (length <= 0) {\n        return;\n      }\n\n      ;\n      state.partList[length - 1].detail.drawing_items = payload;\n    }\n  }\n});\nvar actions = partSlice.actions; // saga actions\n\nexport { actions };\nexport var sagaUpdate = createAction(\"\".concat(name, \"/\").concat(actionTypes.UPDATE));\nexport var sagaCreate = createAction(\"\".concat(name, \"/\").concat(actionTypes.CREATE));\nexport var sagaCloseDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.CLOSE_DIALOG));\nexport var sagaSelectEquiv = createAction(\"\".concat(name, \"/SELECT_EQUIV\"));\nexport var sagaOpenCreateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_CREATE_DIALOG));\nexport var sagaGetItemCopy = createAction(\"\".concat(name, \"/GET_ITEM_COPY\"));\nexport var sagaChangeDrawing = createAction(\"\".concat(name, \"/CHANGE_DRAWING\"));\nexport var sagaGetPartRefItem = createAction(\"\".concat(name, \"/GET_PART_REF_ITEM\"));\nexport var sagaOpenUpdateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_UPDATE_DIALOG));\nexport var sagaGetDrawingItems = createAction(\"\".concat(name, \"/GET_DRAWING_ITEMS\")); // saga actions Manufacturer\n\nexport var sagaOpenManuDialog = createAction(\"\".concat(name, \"/OPEN_UPDATE_MANU_DIALOG\"));\nexport var sagaCreateManu = createAction(\"\".concat(name, \"/CREATE_MANU\"));\nexport var sagaCloseManuDialog = createAction(\"\".concat(name, \"/CLOSE_MANU_DIALOG\"));\nexport var sagaGetManuId = createAction(\"\".concat(name, \"/GET_MANU_ID\")); // selectors\n\nexport var selectState = function selectState(state) {\n  return state[name];\n};\nexport var selectPartList = createSelector(selectState, function (state) {\n  return state.partList;\n});\nexport var selectParameters = createSelector(selectState, function (state) {\n  return state.initData.parameters;\n});\nexport var selectCurrentPart = createSelector(selectState, function (state) {\n  return _.last(state.partList);\n});\nexport var selectConfirmRef = createSelector(selectState, function (state) {\n  return state.confirmRef;\n});\nexport var selectPartManu = createSelector(selectState, function (state) {\n  return state.manufacturer;\n});\nexport var selectDrawingItems = createSelector(selectState, function (state) {\n  var partList = state.partList;\n\n  if (partList.length <= 0) {\n    return [];\n  }\n\n  var _$last = _.last(partList),\n      detail = _$last.detail;\n\n  return detail.drawing_items || [];\n});\nexport default partSlice;","map":null,"metadata":{},"sourceType":"module"}