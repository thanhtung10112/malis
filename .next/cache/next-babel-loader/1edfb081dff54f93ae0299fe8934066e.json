{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useFormContext } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Grid, Link, Box } from '@material-ui/core';\nimport { TableMultilingualDescription, AppAutocompleteAsync, FormControllerTextField, SectionTimezone, AppAutocomplete } from '@/components';\nimport { Unless } from 'react-if';\nimport _ from 'lodash';\nimport AppNumber from '@/helper/AppNumber';\nimport { specificationStore, commonStore } from '@/store/reducers';\n\nvar TabGeneral = function TabGeneral() {\n  var _specificationForm$er, _specificationForm$er2;\n\n  var specificationForm = useFormContext();\n  var dispatch = useDispatch();\n  var parameters = useSelector(specificationStore.selectParameters);\n  var specificationDetail = useSelector(specificationStore.selectDetail);\n  var userJob = useSelector(commonStore.selectUserValueJob);\n\n  var isCreating = _.isNil(specificationDetail.id);\n\n  var handleChangeDrawingId = function handleChangeDrawingId(event, drawing) {\n    var formData = specificationForm.getValues();\n    dispatch(specificationStore.sagaGenerateCode({\n      formData: formData,\n      drawing: drawing\n    }));\n  };\n\n  var handleBlur = function handleBlur(event) {\n    var value = event.target.value;\n\n    if (AppNumber.isNumber(value) && AppNumber.isPositiveNumber(value) && value !== '') {\n      var formatValue = 'D' + value.padStart(3, '0');\n      specificationForm.setValue('spec_id', formatValue);\n    }\n  };\n\n  var handleOpenDrawing = function handleOpenDrawing(event) {\n    event.preventDefault();\n    var formData = specificationForm.getValues();\n    dispatch(specificationStore.sagaOpenDrawingDialog(formData));\n  };\n\n  return /*#__PURE__*/_jsxs(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          style: {\n            marginTop: 8\n          },\n          children: /*#__PURE__*/_jsx(AppAutocomplete, {\n            helperText: (_specificationForm$er = specificationForm.errors.job_id) === null || _specificationForm$er === void 0 ? void 0 : _specificationForm$er.message,\n            error: Boolean(specificationForm.errors.job_id),\n            value: userJob,\n            popupIcon: null,\n            disabled: true,\n            label: \"Job\",\n            required: true,\n            primaryKeyOption: \"value\",\n            options: [],\n            renderOption: function renderOption(option) {\n              return option.description;\n            }\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(AppAutocompleteAsync, {\n            helperText: (_specificationForm$er2 = specificationForm.errors.drawing_id) === null || _specificationForm$er2 === void 0 ? void 0 : _specificationForm$er2.message,\n            error: Boolean(specificationForm.errors.drawing_id),\n            disabled: !isCreating,\n            value: specificationDetail.drawing_id,\n            compName: \"drawing_list\",\n            additionalData: {\n              limit_to_job: userJob.value\n            },\n            required: true,\n            label: \"Drawing #\",\n            onChange: handleChangeDrawingId\n          })\n        }), /*#__PURE__*/_jsx(Unless, {\n          condition: isCreating,\n          children: /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            component: Box,\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            children: /*#__PURE__*/_jsx(Link, {\n              href: \"#\",\n              onClick: handleOpenDrawing,\n              children: \"View Drawing Info\"\n            })\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerTextField, {\n            disabled: !isCreating,\n            control: specificationForm.control,\n            label: \"Document #\",\n            required: true,\n            name: \"spec_id\",\n            onBlur: handleBlur\n          })\n        }), /*#__PURE__*/_jsx(Unless, {\n          condition: isCreating,\n          children: /*#__PURE__*/_jsx(SectionTimezone, {\n            value: specificationDetail\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsx(TableMultilingualDescription, {\n        languageList: parameters.PLLA,\n        editMode: !isCreating,\n        name: \"descriptions\",\n        tableHeight: 290,\n        control: specificationForm.control,\n        editor: \"rte\",\n        copyable: true,\n        copyDialogProps: {\n          compName: 'specification_list',\n          entity: 'specifications'\n        },\n        autocompleteProps: {\n          getOptionLabel: function getOptionLabel(option) {\n            return option.entity_id;\n          }\n        }\n      })\n    })]\n  });\n};\n\nexport default TabGeneral;","map":null,"metadata":{},"sourceType":"module"}