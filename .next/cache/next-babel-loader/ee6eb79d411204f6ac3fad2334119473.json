{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport useStyles from './styles';\nimport useDraggableInPortal from '@/hooks/useDraggableInPortal';\nimport { useFormContext } from 'react-hook-form';\nimport { useTranslation } from 'next-i18next';\nimport useDialogContext from '../Context/useDialogContext';\nimport { Grid, List, ListItem, Paper, Typography, Box } from '@material-ui/core';\nimport { AppTitle, DataTable, DataTableTextField, DataTableDatePicker, CreateIcon, DeleteIcon, DragIcon } from '@/components';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport clsx from 'clsx';\nimport _ from 'lodash';\nimport { v1 as uuidv1 } from 'uuid';\nimport { format as formatDate } from 'date-fns';\nimport immer from 'immer';\nimport * as yup from 'yup';\nimport * as constant from '@/utils/constant';\nimport swapOrder from '@/utils/swapOrder';\nimport * as columnProperties from '@/utils/columnProperties';\n\nfunction TabAdditionalInfo() {\n  const {\n    t\n  } = useTranslation('job');\n  const classes = useStyles();\n  const renderDraggable = useDraggableInPortal();\n  const {\n    isCreating\n  } = useDialogContext();\n  const jobForm = useFormContext();\n  const expeditingDates = jobForm.watch('job_expediting_dates', []);\n  const {\n    0: selectedExDates,\n    1: setSelectedExDates\n  } = useState([]);\n\n  const renderItems = () => {\n    const {\n      job_standard\n    } = jobForm.getValues();\n    return job_standard.map((item, index) => /*#__PURE__*/_jsx(Draggable, {\n      draggableId: item.parameter_id,\n      index: index,\n      children: renderDraggable(provided => /*#__PURE__*/_jsxs(ListItem, _objectSpread(_objectSpread({\n        component: \"div\",\n        className: classes.listItem,\n        ref: provided.innerRef\n      }, provided.draggableProps), {}, {\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"caption\",\n          component: \"div\",\n          children: index + 1\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"caption\",\n          component: \"div\",\n          children: item.parameter_id + ' - ' + item.description\n        }), /*#__PURE__*/_jsx(\"span\", _objectSpread(_objectSpread({}, provided.dragHandleProps), {}, {\n          className: classes.dragIcon,\n          children: /*#__PURE__*/_jsx(DragIcon, {})\n        }))]\n      })))\n    }, item.id));\n  };\n\n  const onAddExpeditingDateRows = () => {\n    const newExDate = immer(expeditingDates, draft => {\n      draft.push({\n        id: uuidv1(),\n        exp_date: formatDate(new Date(), constant.DATE_FORMAT),\n        comment: ''\n      });\n    });\n    jobForm.setValue('job_expediting_dates', newExDate);\n  };\n\n  const onDragEndItem = result => {\n    if (result.source && result.destination) {\n      const {\n        job_standard\n      } = jobForm.getValues();\n      const items = swapOrder(job_standard, result.source.index, result.destination.index);\n      jobForm.setValue('job_standard', items);\n    }\n  };\n\n  const onChangeExpeditingDate = (id, date) => {\n    const value = formatDate(date, constant.DATE_FORMAT);\n    const newExDates = immer(expeditingDates, draft => {\n      const indexExDate = _.findIndex(draft, exDate => exDate.id === id);\n\n      draft[indexExDate].exp_date = value;\n    });\n    jobForm.setValue('job_expediting_dates', newExDates);\n  };\n\n  const onChangeExpeditingComment = (id, value) => {\n    const newExDates = immer(expeditingDates, draft => {\n      const indexExDate = _.findIndex(draft, exDate => exDate.id === id);\n\n      draft[indexExDate].comment = value;\n    });\n    jobForm.setValue('job_expediting_dates', newExDates);\n  };\n\n  const onSelectedExDate = ({\n    selectionModel\n  }) => {\n    setSelectedExDates(selectionModel);\n  };\n\n  const onDeleteExDate = () => {\n    const newExDates = expeditingDates.filter(exDate => !selectedExDates.some(item => item === exDate.id));\n    jobForm.setValue('job_expediting_dates', newExDates);\n    setSelectedExDates([]);\n  };\n\n  return /*#__PURE__*/_jsxs(Grid, {\n    container: true,\n    spacing: 3,\n    children: [/*#__PURE__*/_jsxs(Grid, {\n      item: true,\n      xs: 6,\n      children: [/*#__PURE__*/_jsx(AppTitle, {\n        label: \"Standards\"\n      }), /*#__PURE__*/_jsx(Paper, {\n        children: /*#__PURE__*/_jsxs(List, {\n          dense: true,\n          className: classes.rootList,\n          component: \"div\",\n          children: [/*#__PURE__*/_jsxs(ListItem, {\n            component: \"div\",\n            className: clsx(classes.listItem, classes.header),\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"caption\",\n              component: Box,\n              fontWeight: 700,\n              children: \"#\"\n            }), /*#__PURE__*/_jsx(Typography, {\n              variant: \"caption\",\n              component: Box,\n              fontWeight: 700,\n              children: \"Standard\"\n            })]\n          }), /*#__PURE__*/_jsx(DragDropContext, {\n            onDragEnd: onDragEndItem,\n            children: /*#__PURE__*/_jsx(Droppable, {\n              droppableId: \"droppable\",\n              children: provided => /*#__PURE__*/_jsxs(\"div\", _objectSpread(_objectSpread({\n                className: \"\"\n              }, provided.droppableProps), {}, {\n                ref: provided.innerRef,\n                children: [renderItems(), provided.placeholder]\n              }))\n            })\n          })]\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(Grid, {\n      item: true,\n      xs: 6,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: classes.expeditionHeader,\n        children: [/*#__PURE__*/_jsx(AppTitle, {\n          label: \"Expediting Dates\"\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.buttonGroup,\n          children: [/*#__PURE__*/_jsx(CreateIcon, {\n            onClick: onAddExpeditingDateRows\n          }), /*#__PURE__*/_jsx(DeleteIcon, {\n            onClick: onDeleteExDate,\n            className: clsx(selectedExDates.length <= 0 && classes.disabled)\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(Paper, {\n        children: /*#__PURE__*/_jsx(DataTable, {\n          hideFooter: true,\n          disableColumnMenu: true,\n          disableSelectionOnClick: true,\n          checkboxSelection: true,\n          tableHeight: 340,\n          selectionModel: selectedExDates,\n          onSelectionModelChange: onSelectedExDate,\n          rows: expeditingDates,\n          columns: [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n            field: 'exp_date',\n            flex: 0.3,\n            headerName: 'Date',\n\n            renderCell(params) {\n              return /*#__PURE__*/_jsx(DataTableDatePicker, {\n                minDate: isCreating ? new Date() : null,\n                params: params,\n                onChangeValue: onChangeExpeditingDate\n              });\n            }\n\n          }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Comment')), {}, {\n            field: 'comment',\n            flex: 0.7,\n\n            renderEditCell(params) {\n              return /*#__PURE__*/_jsx(DataTableTextField, {\n                params: params,\n                onChangeValue: onChangeExpeditingComment,\n                rules: yup.string().max(255, t('validation_message.ex_date_comment_max'))\n              });\n            }\n\n          })]\n        })\n      })]\n    })]\n  });\n}\n\nexport default TabAdditionalInfo;","map":null,"metadata":{},"sourceType":"module"}