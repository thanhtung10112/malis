{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Part\\\\Item\\\\DialogCopyItem.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { useTranslation } from 'next-i18next';\nimport { AppAutocompleteAsync, DialogMain } from '@/components';\nimport { partStore } from '@/store/reducers';\n\nvar DialogCopyItem = function DialogCopyItem(props) {\n  _s();\n\n  var open = props.open,\n      onClose = props.onClose;\n\n  var _useTranslation = useTranslation('item'),\n      t = _useTranslation.t;\n\n  var _useState = useState({\n    value: null,\n    entity_id: '',\n    description: ''\n  }),\n      itemSelected = _useState[0],\n      setItemSelected = _useState[1]; // when close this dialog, then reset itemSelected\n\n\n  useEffect(function () {\n    if (!open) {\n      setItemSelected({\n        value: null,\n        entity_id: '',\n        description: ''\n      });\n    }\n  }, [open]);\n  var dispatch = useDispatch();\n\n  var handleOk = function handleOk(event) {\n    dispatch(partStore.sagaGetItemCopy(itemSelected));\n    onClose(event);\n  };\n  /**\n   * @param {DataForDropdown} optionValue\n   */\n\n\n  var handleSelectItem = function handleSelectItem(event, optionValue) {\n    setItemSelected(optionValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(DialogMain, {\n    title: t('form.title.copy_attribute'),\n    open: open,\n    onOk: handleOk,\n    onClose: onClose,\n    okText: t('common:button.save'),\n    children: /*#__PURE__*/_jsxDEV(AppAutocompleteAsync, {\n      style: {\n        marginTop: 4\n      },\n      label: \"Part #\",\n      compName: \"part_list\",\n      onChange: handleSelectItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(DialogCopyItem, \"bmx6EkR7erl90NHQGkx/icZc7IQ=\", false, function () {\n  return [useTranslation, useDispatch];\n});\n\n_c = DialogCopyItem;\nexport default DialogCopyItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"DialogCopyItem\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Part/Item/DialogCopyItem.tsx"],"names":["useDispatch","useState","useEffect","useTranslation","AppAutocompleteAsync","DialogMain","partStore","DialogCopyItem","props","open","onClose","t","value","entity_id","description","itemSelected","setItemSelected","dispatch","handleOk","event","sagaGetItemCopy","handleSelectItem","optionValue","marginTop"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,SAASC,oBAAT,EAA+BC,UAA/B,QAAiD,cAAjD;AAEA,SAASC,SAAT,QAA0B,kBAA1B;;AAOA,IAAMC,cAA6C,GAAG,SAAhDA,cAAgD,CAACC,KAAD,EAAW;AAAA;;AAAA,MACvDC,IADuD,GACrCD,KADqC,CACvDC,IADuD;AAAA,MACjDC,OADiD,GACrCF,KADqC,CACjDE,OADiD;;AAAA,wBAGjDP,cAAc,CAAC,MAAD,CAHmC;AAAA,MAGvDQ,CAHuD,mBAGvDA,CAHuD;;AAAA,kBAKvBV,QAAQ,CAAkB;AAChEW,IAAAA,KAAK,EAAE,IADyD;AAEhEC,IAAAA,SAAS,EAAE,EAFqD;AAGhEC,IAAAA,WAAW,EAAE;AAHmD,GAAlB,CALe;AAAA,MAKxDC,YALwD;AAAA,MAK1CC,eAL0C,iBAW/D;;;AACAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACO,IAAL,EAAW;AACTO,MAAAA,eAAe,CAAC;AACdJ,QAAAA,KAAK,EAAE,IADO;AAEdC,QAAAA,SAAS,EAAE,EAFG;AAGdC,QAAAA,WAAW,EAAE;AAHC,OAAD,CAAf;AAKD;AACF,GARQ,EAQN,CAACL,IAAD,CARM,CAAT;AAUA,MAAMQ,QAAQ,GAAGjB,WAAW,EAA5B;;AAEA,MAAMkB,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1BF,IAAAA,QAAQ,CAACX,SAAS,CAACc,eAAV,CAA0BL,YAA1B,CAAD,CAAR;AACAL,IAAAA,OAAO,CAACS,KAAD,CAAP;AACD,GAHD;AAKA;AACF;AACA;;;AACE,MAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACF,KAAD,EAAQG,WAAR,EAAyC;AAChEN,IAAAA,eAAe,CAACM,WAAD,CAAf;AACD,GAFD;;AAIA,sBACE,QAAC,UAAD;AACE,IAAA,KAAK,EAAEX,CAAC,CAAC,2BAAD,CADV;AAEE,IAAA,IAAI,EAAEF,IAFR;AAGE,IAAA,IAAI,EAAES,QAHR;AAIE,IAAA,OAAO,EAAER,OAJX;AAKE,IAAA,MAAM,EAAEC,CAAC,CAAC,oBAAD,CALX;AAAA,2BAOE,QAAC,oBAAD;AAAsB,MAAA,KAAK,EAAE;AAAEY,QAAAA,SAAS,EAAE;AAAb,OAA7B;AAA+C,MAAA,KAAK,EAAC,QAArD;AAA8D,MAAA,QAAQ,EAAC,WAAvE;AAAmF,MAAA,QAAQ,EAAEF;AAA7F;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,WADF;AAWD,CA/CD;;GAAMd,c;UAGUJ,c,EAmBGH,W;;;KAtBbO,c;AAiDN,eAAeA,cAAf","sourcesContent":["import { useDispatch } from 'react-redux'\nimport { useState, useEffect } from 'react'\nimport { useTranslation } from 'next-i18next'\n\nimport { AppAutocompleteAsync, DialogMain } from '@/components'\n\nimport { partStore } from '@/store/reducers'\n\nimport type { DialogMainProps } from '@/components/Dialog/Main/type'\nimport type { DataForDropdown } from '@/types/Common'\n\nexport type DialogCopyItemProps = Pick<DialogMainProps, 'open' | 'onClose'>\n\nconst DialogCopyItem: React.FC<DialogCopyItemProps> = (props) => {\n  const { open, onClose } = props\n\n  const { t } = useTranslation('item')\n\n  const [itemSelected, setItemSelected] = useState<DataForDropdown>({\n    value: null,\n    entity_id: '',\n    description: ''\n  })\n\n  // when close this dialog, then reset itemSelected\n  useEffect(() => {\n    if (!open) {\n      setItemSelected({\n        value: null,\n        entity_id: '',\n        description: ''\n      })\n    }\n  }, [open])\n\n  const dispatch = useDispatch()\n\n  const handleOk = (event) => {\n    dispatch(partStore.sagaGetItemCopy(itemSelected))\n    onClose(event)\n  }\n\n  /**\n   * @param {DataForDropdown} optionValue\n   */\n  const handleSelectItem = (event, optionValue: DataForDropdown) => {\n    setItemSelected(optionValue)\n  }\n\n  return (\n    <DialogMain\n      title={t('form.title.copy_attribute')}\n      open={open}\n      onOk={handleOk}\n      onClose={onClose}\n      okText={t('common:button.save')}\n    >\n      <AppAutocompleteAsync style={{ marginTop: 4 }} label=\"Part #\" compName=\"part_list\" onChange={handleSelectItem} />\n    </DialogMain>\n  )\n}\n\nexport default DialogCopyItem\n"]},"metadata":{},"sourceType":"module"}