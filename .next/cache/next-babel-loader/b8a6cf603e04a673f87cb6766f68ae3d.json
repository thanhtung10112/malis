{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport Head from 'next/head';\nimport { red } from '@material-ui/core/colors';\nimport * as _ from 'lodash';\nimport * as constants from '@/utils/constant';\nimport { ExpandMore, CheckCircle, Check, ImportExport, Save, Group } from '@material-ui/icons';\nimport { TableContainer, Table, TableHead, TableBody, TableRow, TableCell, Grid, Tooltip, Button, Accordion, AccordionDetails, AccordionSummary, Typography } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { AppBreadcrumb, MalisNoViewPermissionOnModule } from '@/components';\nimport useStyles from '@/styles/page/layout';\nimport { groupStore } from '@/store/reducers';\nimport produce from 'immer';\n\nfunction PermissionTopic({\n  name,\n  permissions,\n  groupList,\n  changeAction,\n  handleMarkCell,\n  isMarked\n}) {\n  const classes = useStyles();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: topicPermissions,\n    1: setTopicPermissions\n  } = useState(permissions);\n  const {\n    0: topicName\n  } = useState(name); // This is the trick for force re-render\n\n  const {\n    1: setValue\n  } = useState(0);\n\n  const togglePermission = (action, group) => () => {\n    // We have three modes of permission, each will be asign to a number\n    // 0 for no permission\n    // 1 for all job\n    // 2 for per job\n    // Let's determine the current permission mode of the action\n    let currentMode = 0; // default to no permission\n\n    if (action.all_job_groups && action.all_job_groups.split(';').includes(`${group.id}`)) {\n      currentMode = 1;\n    } else if (action.per_job_groups && action.per_job_groups.split(';').includes(`${group.id}`)) {\n      currentMode = 2;\n    } // We have current mode now. Let's determine the next mode that we will switch to\n\n\n    let nextMode = 0;\n\n    if (currentMode === 0) {\n      // switch to mode 1\n      nextMode = 1;\n    } else if (currentMode === 1) {\n      // if the action allow per job, then switch to mode 2\n      // otherwise, switch to mode 0\n      if (action.is_per_job) {\n        nextMode = 2;\n      } else {\n        nextMode = 0;\n      }\n    } else {\n      // switch straight to mode 0\n      nextMode = 0;\n    } // We have the next mode now. Let's do the real switch\n\n\n    if (nextMode === 0) {\n      // Remove the group id from both all job and per job\n      if (action.all_job_groups) {\n        // console.log(action.all_job_groups);\n        action.all_job_groups = action.all_job_groups.split(';').filter(groupId => groupId !== `${group.id}`).join(';'); // console.log(action.all_job_groups);\n      }\n\n      if (action.per_job_groups) {\n        action.per_job_groups = action.per_job_groups.split(';').filter(groupId => groupId !== `${group.id}`).join(';');\n      }\n    } else if (nextMode === 1) {\n      // Add the permission to all job groups\n      if (action.all_job_groups) {\n        const tmp_all_job_groups = action.all_job_groups.split(';');\n        tmp_all_job_groups.push(`${group.id}`);\n        action.all_job_groups = _.uniq(tmp_all_job_groups).join(';');\n      } else {\n        action.all_job_groups = `${group.id}`;\n      }\n    } else if (nextMode === 2) {\n      // Remove the group from all job group\n      if (action.all_job_groups) {\n        action.all_job_groups = action.all_job_groups.split(';').filter(groupId => groupId !== `${group.id}`).join(';');\n      } // Add it to per_job_group\n\n\n      if (action.per_job_groups) {\n        const tmp_per_job_groups = action.per_job_groups.split(';');\n        tmp_per_job_groups.push(`${group.id}`);\n        action.per_job_groups = _.uniq(tmp_per_job_groups).join(';');\n      } else {\n        action.per_job_groups = `${group.id}`;\n      }\n    } // Update the permission object & update state\n\n\n    const indexForUpdating = _.findIndex(topicPermissions, {\n      id: action.id\n    });\n\n    topicPermissions[indexForUpdating] = action;\n    setTopicPermissions(() => topicPermissions); // Send the change to parent\n\n    changeAction(action); // Force re-render\n\n    setValue(value => value + 1);\n    handleMarkCell(action, group);\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(Accordion, {\n      expanded: open,\n      children: [/*#__PURE__*/_jsx(AccordionSummary, {\n        expandIcon: /*#__PURE__*/_jsx(ExpandMore, {}),\n        \"aria-controls\": topicName,\n        id: `topic-${topicName}`,\n        onClick: () => setOpen(!open),\n        children: /*#__PURE__*/_jsx(Typography, {\n          children: /*#__PURE__*/_jsxs(\"b\", {\n            children: [\"Topic: \", constants.PERMISSION_TOPIC_MAP[topicName] || topicName]\n          })\n        })\n      }), /*#__PURE__*/_jsx(AccordionDetails, {\n        children: /*#__PURE__*/_jsx(TableContainer, {\n          children: /*#__PURE__*/_jsxs(Table, {\n            stickyHeader: true,\n            size: \"small\",\n            \"aria-label\": \"sticky table\",\n            children: [/*#__PURE__*/_jsx(TableHead, {\n              children: /*#__PURE__*/_jsxs(TableRow, {\n                children: [/*#__PURE__*/_jsx(TableCell, {\n                  align: \"center\",\n                  style: {\n                    width: '10%',\n                    position: 'sticky',\n                    background: '#fff',\n                    left: 0,\n                    zIndex: 3\n                  },\n                  children: \"Action\"\n                }), groupList.map(group => /*#__PURE__*/_jsx(Tooltip, {\n                  title: group.name,\n                  children: /*#__PURE__*/_jsx(TableCell, {\n                    align: \"center\",\n                    style: {\n                      width: `${90 / groupList.length}%`\n                    },\n                    children: group.group_id\n                  })\n                }, group.group_id))]\n              })\n            }), /*#__PURE__*/_jsx(TableBody, {\n              children: topicPermissions.map(action => /*#__PURE__*/_jsxs(TableRow, {\n                children: [/*#__PURE__*/_jsx(TableCell, {\n                  align: \"left\",\n                  style: {\n                    width: '10%',\n                    position: 'sticky',\n                    background: '#fff',\n                    left: 0,\n                    zIndex: 3\n                  },\n                  children: constants.PERMISSION_MAP[action.action] || action.action\n                }), groupList.map(group => /*#__PURE__*/_jsx(Fragment, {\n                  children: /*#__PURE__*/_jsx(TableCell, {\n                    align: \"center\",\n                    className: classes.permissionItem,\n                    style: {\n                      width: `${90 / groupList.length}%`,\n                      cursor: 'pointer',\n                      backgroundColor: isMarked(action, group) ? red[50] : null\n                    },\n                    onClick: togglePermission(action, group),\n                    children: action.all_job_groups && action.all_job_groups.split(';').includes(`${group.id}`) ? /*#__PURE__*/_jsx(Check, {\n                      className: \"tick-icon\"\n                    }) : action.per_job_groups && action.per_job_groups.split(';').includes(`${group.id}`) ? /*#__PURE__*/_jsx(CheckCircle, {}) : /*#__PURE__*/_jsx(_Fragment, {})\n                  })\n                }, `${group.group_id}-${action.id}`))]\n              }, action.id))\n            })]\n          })\n        })\n      })]\n    })\n  });\n}\n\nfunction PermissionRightTable() {\n  const breadcrumbData = [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'System Management',\n    href: '/users'\n  }, {\n    label: 'Groups Management',\n    href: '/groups'\n  }, {\n    label: 'Permissions Management',\n    href: '/groups/permissions'\n  }];\n  const classes = useStyles();\n  const {\n    0: changedActions,\n    1: setChangedActions\n  } = useState([]); // This is the trick for force re-render\n  // const [value, setValue] = useState(0)\n\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    0: markEdit,\n    1: setMarkEdit\n  } = useState([]);\n  const groupPermissionState = useSelector(groupStore.selectGroupPermissions);\n  const permissionsList = useSelector(groupStore.selectPermissions);\n\n  const {\n    groups: groupList,\n    permissions\n  } = _.cloneDeep(groupPermissionState);\n\n  const permissionsGroupByTopics = _.groupBy(permissions, 'entity');\n\n  useEffect(() => {\n    dispatch(groupStore.sagaGetGroupPermissions());\n  }, []);\n\n  const handleMarkCell = (action, group) => {\n    const cellMark = group.id + ':' + action.id;\n    setMarkEdit(prevState => produce(prevState, draftState => {\n      draftState.push(cellMark);\n    }));\n  };\n\n  const isMarked = (action, group) => {\n    const cellMark = group.id + ':' + action.id;\n    return markEdit.includes(cellMark);\n  };\n\n  const renderTopics = () => {\n    const topicSegment = [];\n\n    for (const key in permissionsGroupByTopics) {\n      topicSegment.push( /*#__PURE__*/_jsx(PermissionTopic, {\n        name: key,\n        permissions: permissionsGroupByTopics[key],\n        groupList: groupList,\n        changeAction: onActionChanged,\n        handleMarkCell: handleMarkCell,\n        isMarked: isMarked\n      }, key));\n    }\n\n    return topicSegment;\n  };\n\n  const onActionChanged = action => {\n    if (permissionsList === null || permissionsList === void 0 ? void 0 : permissionsList.edit_permissions) {\n      const newChangedActions = [...changedActions];\n\n      const indexForChange = _.findIndex(changedActions, {\n        id: action.id\n      });\n\n      if (indexForChange !== -1) {\n        newChangedActions[indexForChange] = action;\n      } else {\n        newChangedActions.push(action);\n      }\n\n      setChangedActions(newChangedActions);\n    }\n  };\n\n  const savePermissions = () => {\n    if (permissionsList === null || permissionsList === void 0 ? void 0 : permissionsList.edit_permissions) {\n      const updatedPermissions = [];\n      changedActions.forEach(action => {\n        updatedPermissions.push({\n          id: action.id,\n          all_job_groups: action.all_job_groups,\n          per_job_groups: action.per_job_groups\n        });\n      });\n      dispatch(groupStore.sagaUpdateGroupPermissions({\n        permissions: updatedPermissions\n      }));\n      setChangedActions([]);\n      setMarkEdit([]);\n    }\n  };\n\n  const goToGroupList = () => {\n    router.push('/groups');\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"Groups Management\"\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: classes.main,\n      children: /*#__PURE__*/_jsx(AppBreadcrumb, {\n        items: breadcrumbData\n      })\n    }), /*#__PURE__*/_jsx(\"main\", {\n      className: classes.main,\n      children: /*#__PURE__*/_jsx(Grid, {\n        container: true,\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxs(Grid, {\n          item: true,\n          xs: 12,\n          style: {\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsx(Button, {\n            disabled: changedActions.length <= 0 || !(permissionsList === null || permissionsList === void 0 ? void 0 : permissionsList.edit_permissions),\n            startIcon: /*#__PURE__*/_jsx(Save, {}),\n            onClick: savePermissions,\n            children: \"Save\"\n          }), /*#__PURE__*/_jsx(Button, {\n            disabled: true,\n            startIcon: /*#__PURE__*/_jsx(ImportExport, {}),\n            onClick: savePermissions,\n            children: \"Export\"\n          }), /*#__PURE__*/_jsx(Button, {\n            startIcon: /*#__PURE__*/_jsx(Group, {}),\n            onClick: goToGroupList,\n            children: \"View Groups\"\n          })]\n        })\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      container: true,\n      style: {\n        height: 'calc(100vh - 9rem)',\n        width: '100%',\n        overflow: 'hidden',\n        overflowY: 'scroll'\n      },\n      children: /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsx(When, {\n          condition: permissionsList === null || permissionsList === void 0 ? void 0 : permissionsList.edit_permissions,\n          children: renderTopics()\n        }), /*#__PURE__*/_jsx(When, {\n          condition: !_.isNull(permissionsList) && !(permissionsList === null || permissionsList === void 0 ? void 0 : permissionsList.edit_permissions),\n          children: /*#__PURE__*/_jsx(MalisNoViewPermissionOnModule, {})\n        })]\n      })\n    })]\n  });\n}\n\nexport const getServerSideProps = useAuthMiddleware();\nexport default PermissionRightTable;","map":null,"metadata":{},"sourceType":"module"}