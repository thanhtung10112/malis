{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Drawing\\\\TabTags.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport useStyles from './styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport { Paper, Link } from '@material-ui/core';\nimport { DataTable, CreateIcon, DeleteIcon, AppButton, DialogTag, DialogPart, useConfirm } from '@/components';\nimport immer from 'immer';\nimport _ from 'lodash';\nimport drawingApi from '@/apis/drawing.api';\nimport tagApi from '@/apis/tag.api';\nimport { commonStore, drawingStore, partStore, summaryReportActions } from '@/store/reducers';\nimport { defaultTagInitDataForCE, defaultTagDetail } from '@/utils/defaultValues';\nimport { defaultProperties } from '@/utils/columnProperties';\nimport { isAssemblyByDpn } from '@/utils/isAssembly';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\n\nconst TabTags = () => {\n  const classes = useStyles();\n  const {\n    confirm\n  } = useConfirm();\n  const {\n    t\n  } = useTranslation('element');\n  const {\n    0: openDialog,\n    1: setOpenDialog\n  } = useState(false);\n  const {\n    0: initDataForCE,\n    1: setInitDataForCE\n  } = useState(defaultTagInitDataForCE);\n  const {\n    0: tagDetail,\n    1: setTagDetail\n  } = useState(defaultTagDetail);\n  const {\n    0: selectedRows,\n    1: setSelectedRows\n  } = useState([]);\n  const drawingForm = useFormContext();\n  const watchTagsList = drawingForm.watch('tag_list', []) || [];\n  const watchId = drawingForm.watch('id', null);\n  const watchDrawing_id = drawingForm.watch('drawing_id', '');\n  const dispatch = useDispatch();\n  const userJob = useSelector(commonStore.selectUserValueJob);\n  const userDrawing = useSelector(commonStore.selectUserValueDrawing);\n  useEffect(() => {\n    const schematicValue = userDrawing.value > 0 ? userDrawing : null;\n    setTagDetail(currentState => immer(currentState, draft => {\n      draft.schematic_id = schematicValue;\n    }));\n  }, [userDrawing]);\n  useEffect(() => {\n    setTagDetail(currentState => immer(currentState, draft => {\n      draft.job_id = userJob.value;\n    }));\n  }, [userJob]);\n\n  const handleSelectRows = ({\n    selectionModel\n  }) => {\n    setSelectedRows(selectionModel);\n  };\n\n  const resetDetail = () => {\n    setTagDetail(() => immer(defaultTagDetail, draft => {\n      draft.schematic_id = userDrawing.value > 0 ? userDrawing : null;\n      draft.job_id = userJob.value;\n    }));\n  };\n\n  const handleClosePartDialog = async () => {\n    dispatch(drawingStore.actions.setDialogStateLoading(true));\n\n    try {\n      const {\n        drawing\n      } = await drawingApi.getDetail(watchId);\n      drawingForm.setValue('tag_list', drawing.tag_list);\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error));\n    }\n\n    dispatch(drawingStore.actions.setDialogStateLoading(false));\n  };\n\n  const handleCloseElementDialog = async () => {\n    setOpenDialog(false);\n    dispatch(drawingStore.actions.setDialogStateLoading(true));\n\n    try {\n      const {\n        drawing\n      } = await drawingApi.getDetail(watchId);\n      drawingForm.setValue('tag_list', drawing.tag_list);\n      resetDetail();\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error));\n    }\n\n    dispatch(drawingStore.actions.setDialogStateLoading(false));\n  };\n\n  const updateUserDrawing = () => {\n    dispatch(commonStore.actions.setUserValueDrawing({\n      entity_id: watchDrawing_id,\n      description: '',\n      value: watchId\n    }));\n  };\n\n  const handleOpenTagCreateDialog = async () => {\n    updateUserDrawing();\n    dispatch(commonStore.actions.setLoadingPage(true));\n\n    try {\n      const resInitDataForCE = await tagApi.getInitDataForCE({\n        job_id_pk: userJob.value\n      });\n      const {\n        generated_code\n      } = await tagApi.getGenerateCode(watchId);\n      setInitDataForCE(resInitDataForCE);\n      setTagDetail(currentState => immer(currentState, draft => {\n        draft.element_id = generated_code;\n      }));\n      setOpenDialog(true);\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error));\n    }\n\n    dispatch(commonStore.actions.setLoadingPage(false));\n  };\n\n  const handleOpenTagUpdateDialog = id => async event => {\n    event.preventDefault();\n    updateUserDrawing();\n    dispatch(commonStore.actions.setLoadingPage(true));\n\n    try {\n      const resInitDataForCE = await tagApi.getInitDataForCE({\n        job_id_pk: userJob.value\n      });\n      const {\n        element\n      } = await tagApi.getDetail(id);\n      setInitDataForCE(resInitDataForCE);\n      setTagDetail(immer(element, draft => {\n        draft.schematic_id = element.related_schematic;\n        draft.part_id = element.related_part;\n      }));\n      setOpenDialog(true);\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error));\n    }\n\n    dispatch(commonStore.actions.setLoadingPage(false));\n  };\n\n  const handleOpenPartUpdateDialog = (id, dpn) => event => {\n    event.preventDefault();\n    const entity = isAssemblyByDpn(dpn) ? 'assembly' : 'item';\n    dispatch(partStore.sagaOpenUpdateDialog({\n      id,\n      entity\n    }));\n  };\n\n  const deleteTags = async () => {\n    dispatch(drawingStore.actions.setDialogStateLoading(true));\n\n    try {\n      const tags = _.map(selectedRows, partId => {\n        const {\n          rp_element_id,\n          id\n        } = _.find(watchTagsList, {\n          id: partId\n        });\n\n        return {\n          entity_id: rp_element_id,\n          id\n        };\n      });\n\n      const data = await tagApi.executeOperation('delete', tags);\n\n      if (data.failed_count > 0) {\n        dispatch(summaryReportActions.setReportData(data));\n        dispatch(summaryReportActions.setOpen(true));\n      } else {\n        dispatch(commonStore.actions.setSuccessMessage(data.message));\n      }\n\n      const {\n        drawing\n      } = await drawingApi.getDetail(watchId);\n      drawingForm.setValue('tag_list', drawing.tag_list);\n      setSelectedRows([]);\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error));\n    }\n\n    dispatch(drawingStore.actions.setDialogStateLoading(false));\n  };\n\n  const handleRemoveTags = async () => {\n    const description = getMessageConfirm(t, 'element', selectedRows, 'delete');\n    const result = await confirm({\n      description\n    });\n\n    if (result === 'OK') {\n      deleteTags();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttonGroupRoot,\n      children: [/*#__PURE__*/_jsxDEV(AppButton, {\n        startIcon: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 31\n        }, this),\n        onClick: handleOpenTagCreateDialog,\n        children: \"New\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AppButton, {\n        startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 31\n        }, this),\n        disabled: selectedRows.length === 0,\n        onClick: handleRemoveTags,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 1,\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        rows: watchTagsList,\n        checkboxSelection: true,\n        selectionModel: selectedRows,\n        onSelectionModelChange: handleSelectRows,\n        onCellClick: (params, event) => {\n          if (['element_id'].includes(params.field)) {\n            event.stopPropagation();\n          }\n        },\n        columns: [_objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'element_id',\n          headerName: 'Element #',\n          flex: 0.15,\n\n          renderCell(params) {\n            const {\n              value,\n              id\n            } = params;\n            return /*#__PURE__*/_jsxDEV(Link, {\n              href: \"#\",\n              onClick: handleOpenTagUpdateDialog(id),\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this);\n          }\n\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'tag',\n          headerName: 'Tag #',\n          flex: 0.15\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'related_part',\n          headerName: 'Part',\n          valueGetter: params => params.value.entity_id,\n\n          renderCell(params) {\n            const {\n              row\n            } = params;\n            const {\n              value,\n              entity_id\n            } = row.related_part;\n            return /*#__PURE__*/_jsxDEV(Link, {\n              href: \"#\",\n              onClick: handleOpenPartUpdateDialog(value, entity_id),\n              children: params.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 19\n            }, this);\n          },\n\n          flex: 0.15\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'description',\n          headerName: 'Description',\n          flex: 0.6\n        })],\n        hideFooter: true,\n        tableHeight: 385\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogTag, {\n      open: openDialog,\n      initData: initDataForCE,\n      detail: tagDetail,\n      onClose: handleCloseElementDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogPart, {\n      onClose: handleClosePartDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default TabTags;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Drawing/TabTags.tsx"],"names":["useState","useEffect","useFormContext","useStyles","useDispatch","useSelector","useTranslation","Paper","Link","DataTable","CreateIcon","DeleteIcon","AppButton","DialogTag","DialogPart","useConfirm","immer","_","drawingApi","tagApi","commonStore","drawingStore","partStore","summaryReportActions","defaultTagInitDataForCE","defaultTagDetail","defaultProperties","isAssemblyByDpn","getMessageConfirm","TabTags","classes","confirm","t","openDialog","setOpenDialog","initDataForCE","setInitDataForCE","tagDetail","setTagDetail","selectedRows","setSelectedRows","drawingForm","watchTagsList","watch","watchId","watchDrawing_id","dispatch","userJob","selectUserValueJob","userDrawing","selectUserValueDrawing","schematicValue","value","currentState","draft","schematic_id","job_id","handleSelectRows","selectionModel","resetDetail","handleClosePartDialog","actions","setDialogStateLoading","drawing","getDetail","setValue","tag_list","error","setError","handleCloseElementDialog","updateUserDrawing","setUserValueDrawing","entity_id","description","handleOpenTagCreateDialog","setLoadingPage","resInitDataForCE","getInitDataForCE","job_id_pk","generated_code","getGenerateCode","element_id","handleOpenTagUpdateDialog","id","event","preventDefault","element","related_schematic","part_id","related_part","handleOpenPartUpdateDialog","dpn","entity","sagaOpenUpdateDialog","deleteTags","tags","map","partId","rp_element_id","find","data","executeOperation","failed_count","setReportData","setOpen","setSuccessMessage","message","handleRemoveTags","result","buttonGroupRoot","length","params","includes","field","stopPropagation","headerName","flex","renderCell","valueGetter","row"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useFormContext } from 'react-hook-form'\nimport useStyles from './styles'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useTranslation } from 'next-i18next'\n\nimport { Paper, Link } from '@material-ui/core'\nimport { DataTable, CreateIcon, DeleteIcon, AppButton, DialogTag, DialogPart, useConfirm } from '@/components'\n\nimport immer from 'immer'\nimport _ from 'lodash'\nimport drawingApi from '@/apis/drawing.api'\nimport tagApi from '@/apis/tag.api'\nimport { commonStore, drawingStore, partStore, summaryReportActions } from '@/store/reducers'\nimport { defaultTagInitDataForCE, defaultTagDetail } from '@/utils/defaultValues'\nimport { defaultProperties } from '@/utils/columnProperties'\nimport { isAssemblyByDpn } from '@/utils/isAssembly'\nimport getMessageConfirm from '@/utils/getMessageConfirm'\n\nimport type { DrawingDetail } from '@/types/Drawing'\nimport type { DataForDropdown, PayloadOperation } from '@/types/Common'\n\nconst TabTags: React.FC = () => {\n  const classes = useStyles()\n  const { confirm } = useConfirm()\n  const { t } = useTranslation('element')\n\n  const [openDialog, setOpenDialog] = useState(false)\n  const [initDataForCE, setInitDataForCE] = useState(defaultTagInitDataForCE)\n  const [tagDetail, setTagDetail] = useState(defaultTagDetail)\n  const [selectedRows, setSelectedRows] = useState<number[]>([])\n\n  const drawingForm = useFormContext<DrawingDetail>()\n  const watchTagsList = drawingForm.watch('tag_list', []) || []\n  const watchId = drawingForm.watch('id', null)\n  const watchDrawing_id = drawingForm.watch('drawing_id', '')\n\n  const dispatch = useDispatch()\n  const userJob = useSelector(commonStore.selectUserValueJob)\n  const userDrawing = useSelector(commonStore.selectUserValueDrawing)\n\n  useEffect(() => {\n    const schematicValue = userDrawing.value > 0 ? userDrawing : null\n    setTagDetail((currentState) =>\n      immer(currentState, (draft) => {\n        draft.schematic_id = schematicValue\n      })\n    )\n  }, [userDrawing])\n\n  useEffect(() => {\n    setTagDetail((currentState) =>\n      immer(currentState, (draft) => {\n        draft.job_id = userJob.value\n      })\n    )\n  }, [userJob])\n\n  const handleSelectRows = ({ selectionModel }) => {\n    setSelectedRows(selectionModel)\n  }\n\n  const resetDetail = () => {\n    setTagDetail(() =>\n      immer(defaultTagDetail, (draft) => {\n        draft.schematic_id = userDrawing.value > 0 ? userDrawing : null\n        draft.job_id = userJob.value\n      })\n    )\n  }\n\n  const handleClosePartDialog = async () => {\n    dispatch(drawingStore.actions.setDialogStateLoading(true))\n    try {\n      const { drawing } = await drawingApi.getDetail(watchId)\n      drawingForm.setValue('tag_list', drawing.tag_list)\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error))\n    }\n    dispatch(drawingStore.actions.setDialogStateLoading(false))\n  }\n\n  const handleCloseElementDialog = async () => {\n    setOpenDialog(false)\n    dispatch(drawingStore.actions.setDialogStateLoading(true))\n    try {\n      const { drawing } = await drawingApi.getDetail(watchId)\n      drawingForm.setValue('tag_list', drawing.tag_list)\n      resetDetail()\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error))\n    }\n    dispatch(drawingStore.actions.setDialogStateLoading(false))\n  }\n\n  const updateUserDrawing = () => {\n    dispatch(\n      commonStore.actions.setUserValueDrawing({\n        entity_id: watchDrawing_id,\n        description: '',\n        value: watchId\n      })\n    )\n  }\n\n  const handleOpenTagCreateDialog = async () => {\n    updateUserDrawing()\n    dispatch(commonStore.actions.setLoadingPage(true))\n    try {\n      const resInitDataForCE = await tagApi.getInitDataForCE({ job_id_pk: userJob.value })\n      const { generated_code } = await tagApi.getGenerateCode(watchId)\n      setInitDataForCE(resInitDataForCE)\n      setTagDetail((currentState) =>\n        immer(currentState, (draft) => {\n          draft.element_id = generated_code\n        })\n      )\n      setOpenDialog(true)\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error))\n    }\n    dispatch(commonStore.actions.setLoadingPage(false))\n  }\n\n  const handleOpenTagUpdateDialog = (id: number) => async (event) => {\n    event.preventDefault()\n    updateUserDrawing()\n    dispatch(commonStore.actions.setLoadingPage(true))\n    try {\n      const resInitDataForCE = await tagApi.getInitDataForCE({ job_id_pk: userJob.value })\n      const { element } = await tagApi.getDetail(id)\n      setInitDataForCE(resInitDataForCE)\n      setTagDetail(\n        immer(element, (draft) => {\n          draft.schematic_id = element.related_schematic\n          draft.part_id = element.related_part\n        }) as any\n      )\n      setOpenDialog(true)\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error))\n    }\n    dispatch(commonStore.actions.setLoadingPage(false))\n  }\n\n  const handleOpenPartUpdateDialog = (id: number, dpn: string) => (event) => {\n    event.preventDefault()\n    const entity = isAssemblyByDpn(dpn) ? 'assembly' : 'item'\n    dispatch(partStore.sagaOpenUpdateDialog({ id, entity }))\n  }\n\n  const deleteTags = async () => {\n    dispatch(drawingStore.actions.setDialogStateLoading(true))\n    try {\n      const tags: PayloadOperation[] = _.map(selectedRows, (partId) => {\n        const { rp_element_id, id } = _.find(watchTagsList, { id: partId })\n        return { entity_id: rp_element_id, id }\n      })\n      const data = await tagApi.executeOperation('delete', tags)\n      if (data.failed_count > 0) {\n        dispatch(summaryReportActions.setReportData(data))\n        dispatch(summaryReportActions.setOpen(true))\n      } else {\n        dispatch(commonStore.actions.setSuccessMessage(data.message))\n      }\n      const { drawing } = await drawingApi.getDetail(watchId)\n      drawingForm.setValue('tag_list', drawing.tag_list)\n      setSelectedRows([])\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error))\n    }\n    dispatch(drawingStore.actions.setDialogStateLoading(false))\n  }\n\n  const handleRemoveTags = async () => {\n    const description = getMessageConfirm(t, 'element', selectedRows, 'delete')\n    const result = await confirm({ description })\n    if (result === 'OK') {\n      deleteTags()\n    }\n  }\n\n  return (\n    <>\n      <div className={classes.buttonGroupRoot}>\n        <AppButton startIcon={<CreateIcon />} onClick={handleOpenTagCreateDialog}>\n          New\n        </AppButton>\n        <AppButton startIcon={<DeleteIcon />} disabled={selectedRows.length === 0} onClick={handleRemoveTags}>\n          Remove\n        </AppButton>\n      </div>\n      <Paper elevation={1}>\n        <DataTable\n          rows={watchTagsList}\n          checkboxSelection\n          selectionModel={selectedRows}\n          onSelectionModelChange={handleSelectRows}\n          onCellClick={(params, event) => {\n            if (['element_id'].includes(params.field)) {\n              event.stopPropagation()\n            }\n          }}\n          columns={[\n            {\n              ...defaultProperties,\n              field: 'element_id',\n              headerName: 'Element #',\n              flex: 0.15,\n              renderCell(params) {\n                const { value, id } = params\n                return (\n                  <Link href=\"#\" onClick={handleOpenTagUpdateDialog(id as number)}>\n                    {value}\n                  </Link>\n                )\n              }\n            },\n            {\n              ...defaultProperties,\n              field: 'tag',\n              headerName: 'Tag #',\n              flex: 0.15\n            },\n            {\n              ...defaultProperties,\n              field: 'related_part',\n              headerName: 'Part',\n              valueGetter: (params) => (params.value as DataForDropdown).entity_id,\n              renderCell(params) {\n                const { row } = params\n                const { value, entity_id } = row.related_part\n                return (\n                  <Link href=\"#\" onClick={handleOpenPartUpdateDialog(value, entity_id)}>\n                    {params.value}\n                  </Link>\n                )\n              },\n              flex: 0.15\n            },\n            {\n              ...defaultProperties,\n              field: 'description',\n              headerName: 'Description',\n              flex: 0.6\n            }\n          ]}\n          hideFooter\n          tableHeight={385}\n        />\n      </Paper>\n      <DialogTag open={openDialog} initData={initDataForCE} detail={tagDetail} onClose={handleCloseElementDialog} />\n      <DialogPart onClose={handleClosePartDialog} />\n    </>\n  )\n}\n\nexport default TabTags\n"]},"metadata":{},"sourceType":"module"}