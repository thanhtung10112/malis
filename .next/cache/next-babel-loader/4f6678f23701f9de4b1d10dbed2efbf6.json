{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createAction, createSlice, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport const name = 'common';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nexport const initialState = {\n  searchQuery: '',\n  entity: '',\n  loading: {\n    table: false,\n    page: false\n  },\n  tableState: {\n    page: 1,\n    per_page: 100,\n    total_items: 0\n  },\n  messageState: {\n    message: '',\n    status: 'success',\n    display: false\n  },\n  editRows: [],\n  currentLanguage: {\n    value: null,\n    // primary key\n    description: '',\n    properties: {},\n    is_default: false,\n    parameter_id: '',\n    id: null,\n    // primary key\n    status: false\n  },\n  selectedRows: [],\n  userValue: {\n    drawing: {\n      description: '',\n      entity_id: 'All',\n      value: -1\n    },\n    job: {\n      description: '',\n      value: null\n    }\n  }\n};\nconst commonSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setSearchQuery(state, {\n      payload\n    }) {\n      state.searchQuery = payload;\n    },\n\n    setEntity(state, {\n      payload\n    }) {\n      state.entity = payload;\n    },\n\n    setLoadingTable(state, {\n      payload\n    }) {\n      state.loading.table = payload;\n    },\n\n    setLoadingPage(state, {\n      payload\n    }) {\n      state.loading.page = payload;\n    },\n\n    setTableState(state, {\n      payload\n    }) {\n      state.tableState = _objectSpread(_objectSpread({}, state.tableState), payload);\n    },\n\n    setErrorMessage(state, action) {\n      state.messageState.message = action.payload;\n      state.messageState.status = 'error';\n      state.messageState.display = true;\n    },\n\n    setSuccessMessage(state, action) {\n      state.messageState.message = action.payload;\n      state.messageState.status = 'success';\n      state.messageState.display = true;\n    },\n\n    setDisplayMessage(state, action) {\n      state.messageState.display = action.payload;\n    },\n\n    setEditRows(state, {\n      payload\n    }) {\n      state.editRows = payload;\n    },\n\n    setUserValueDrawing(state, {\n      payload\n    }) {\n      state.userValue.drawing = payload;\n    },\n\n    setUserValueJob(state, {\n      payload\n    }) {\n      state.userValue.job = payload;\n    },\n\n    resetUserValue(state) {\n      state.userValue = initialState.userValue;\n    },\n\n    setSelectedRows(state, {\n      payload\n    }) {\n      state.selectedRows = payload;\n    },\n\n    resetMessageState(state) {\n      state.messageState = initialState.messageState;\n    },\n\n    setCurrentLanguage(state, {\n      payload\n    }) {\n      state.currentLanguage = payload;\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n}); // Selectors\n\nexport const selectState = state => state[name];\nexport const selectSearchQuery = createSelector(selectState, state => state.searchQuery);\nexport const selectEntity = createSelector(selectState, state => state.entity);\nexport const selectLoading = createSelector(selectState, state => state.loading);\nexport const selectTableState = createSelector(selectState, state => state.tableState);\nexport const selectMessageState = createSelector(selectState, state => state.messageState);\nexport const selectUserValueDrawing = createSelector(selectState, state => state.userValue.drawing);\nexport const selectUserValueJob = createSelector(selectState, state => state.userValue.job);\nexport const selectEditRows = createSelector(selectState, state => state.editRows);\nexport const selectSelectedRows = createSelector(selectState, state => state.selectedRows);\nexport const selectCurrentLanguage = createSelector(selectState, state => state.currentLanguage);\nexport const {\n  actions\n} = commonSlice; // Saga actions\n\nexport const sagaExecuteOperation = createAction(`${name}/${actionTypes.EXECUTE_OPERATION}`);\nexport const sagaGetHistoryLogs = createAction(`${name}/${actionTypes.GET_HISTORY}`);\nexport const sagaUpdateMultiple = createAction(`${name}/${actionTypes.UPDATE_MULTIPLE}`);\nexport const sagaCancelBackgroundJob = createAction(`${name}/CANCEL_BACKGROUND_JOB`);\nexport default commonSlice;","map":null,"metadata":{},"sourceType":"module"}