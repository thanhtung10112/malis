{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { exportProcessDialogActions, makeAListActions } from '@/store/reducers';\nimport { CheckCircleRounded, HighlightOffOutlined } from '@material-ui/icons';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Typography, Button, CircularProgress } from '@material-ui/core';\nimport { DialogMain } from '@/components/index';\nimport { Case, Default, Switch } from 'react-if';\n\nfunction ExportProgressDialog() {\n  var dispatch = useDispatch();\n  var sseConnection = useRef(null);\n  var domain = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:5000/';\n  var isOpen = useSelector(function (state) {\n    return state.exportProcessDialog.isOpen;\n  });\n  var message = useSelector(function (state) {\n    return state.exportProcessDialog.message;\n  });\n  var operationId = useSelector(function (state) {\n    return state.exportProcessDialog.operationId;\n  });\n  var status = useSelector(function (state) {\n    return state.exportProcessDialog.status;\n  });\n  var celeryId = useSelector(function (state) {\n    return state.exportProcessDialog.celeryId;\n  });\n\n  var _useState = useState(false),\n      confirmDialogOpen = _useState[0],\n      setConfirmDialogOpen = _useState[1];\n\n  var backgroundJobListener = function backgroundJobListener(event) {\n    var data = JSON.parse(event.data);\n    dispatch(exportProcessDialogActions.setMessage(data.message));\n    dispatch(exportProcessDialogActions.setStatus(data.status));\n\n    if (data.status === 'SUCCESS') {\n      sseConnection.current.removeEventListener(operationId, backgroundJobListener);\n      var redirectUrl = \"\".concat(domain, \"make_a_list/get_result?operation_id=\").concat(operationId, \"&destination=\").concat(data.destination, \"&t=\").concat(Date.now());\n      window.open(redirectUrl);\n      setConfirmDialogOpen(false);\n      dispatch(exportProcessDialogActions.setOpen(false));\n    } else if (data.status === 'ERROR') {\n      setConfirmDialogOpen(false);\n    }\n  };\n\n  useEffect(function () {\n    if (!isOpen) {\n      dispatch(exportProcessDialogActions.resetInitState());\n\n      if (sseConnection.current) {\n        sseConnection.current.close();\n        sseConnection.current = null;\n      }\n    } else {\n      if (!sseConnection.current) {\n        sseConnection.current = new EventSource(\"\".concat(domain, \"background_stream\"));\n      }\n\n      sseConnection.current.addEventListener(operationId, backgroundJobListener);\n    }\n  }, [isOpen]);\n\n  var cancelOperation = function cancelOperation() {\n    setConfirmDialogOpen(true);\n  };\n\n  var handleCancelOperation = function handleCancelOperation() {\n    dispatch(makeAListActions.stopMakeAList({\n      celery_id: celeryId\n    }));\n    setConfirmDialogOpen(false);\n    dispatch(exportProcessDialogActions.setOpen(false));\n  };\n\n  var closeDialog = function closeDialog() {\n    dispatch(exportProcessDialogActions.setOpen(false));\n  };\n\n  var renderButton = {\n    label: status === 'SUCCESS' || status === 'ERROR' ? 'Close' : 'Cancel',\n    onClick: status === 'SUCCESS' || status === 'ERROR' ? closeDialog : cancelOperation\n  };\n\n  var SimpleConfirmationDialog = function SimpleConfirmationDialog() {\n    return /*#__PURE__*/_jsxs(Dialog, {\n      open: true // onClose={()=>{}}\n      ,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      children: [/*#__PURE__*/_jsx(DialogTitle, {\n        id: \"alert-dialog-title\",\n        children: \"Confirm canceling exporting progress\"\n      }), /*#__PURE__*/_jsx(DialogContent, {\n        children: /*#__PURE__*/_jsx(DialogContentText, {\n          id: \"alert-dialog-description\",\n          children: \"Are you sure want to cancel the exporting progress?\"\n        })\n      }), /*#__PURE__*/_jsxs(DialogActions, {\n        children: [/*#__PURE__*/_jsx(Button, {\n          onClick: handleCancelOperation,\n          color: \"primary\",\n          children: \"Yes\"\n        }), /*#__PURE__*/_jsx(Button, {\n          onClick: function onClick() {\n            return setConfirmDialogOpen(false);\n          },\n          children: \"No\"\n        })]\n      })]\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(DialogMain, {\n      open: isOpen,\n      maxWidth: \"xs\",\n      fullWidth: true,\n      extraButtons: renderButton,\n      bodyStyles: {\n        margin: 'auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxs(Switch, {\n        children: [/*#__PURE__*/_jsx(Case, {\n          condition: status === 'SUCCESS',\n          children: /*#__PURE__*/_jsx(CheckCircleRounded, {\n            fontSize: \"large\",\n            style: {\n              marginTop: '1rem'\n            }\n          })\n        }), /*#__PURE__*/_jsx(Case, {\n          condition: status === 'ERROR',\n          children: /*#__PURE__*/_jsx(HighlightOffOutlined, {\n            fontSize: \"large\",\n            style: {\n              marginTop: '1rem'\n            }\n          })\n        }), /*#__PURE__*/_jsx(Default, {\n          children: /*#__PURE__*/_jsx(CircularProgress, {\n            style: {\n              marginTop: '1rem'\n            }\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Typography, {\n        variant: \"body1\",\n        style: {\n          marginTop: '1rem'\n        },\n        children: message\n      })]\n    }), confirmDialogOpen ? SimpleConfirmationDialog() : '']\n  });\n}\n\nexport default ExportProgressDialog;","map":null,"metadata":{},"sourceType":"module"}