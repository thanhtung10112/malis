{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { CircularProgress, Tooltip } from '@material-ui/core';\nimport { When, Unless, If, Then, Else } from 'react-if';\nimport { UploadIcon, DeleteIcon } from '@/components/index';\nimport Http from '@/utils/Http';\nimport clsx from 'clsx';\nimport { commonStore } from '@/store/reducers';\nimport immer from 'immer';\nimport { useDispatch } from 'react-redux';\nimport useStyles from './styles';\n\nconst UploadImage = props => {\n  const {\n    image: imageProp,\n    fileTypes,\n    fileSize,\n    httpRequest,\n    onChange,\n    width,\n    height,\n    error: errorProps\n  } = props;\n  const classes = useStyles({\n    width,\n    height\n  });\n  const [image, setImage] = React.useState({\n    file: null,\n    base64: ''\n  });\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const dispatch = useDispatch();\n  let refInput = null;\n  React.useEffect(() => {\n    setImage(prevState => immer(prevState, draft => {\n      if (imageProp instanceof File) {\n        draft.file = imageProp;\n      } else {\n        draft.base64 = imageProp;\n      }\n    }));\n  }, [imageProp]);\n  React.useEffect(() => {\n    setError(errorProps);\n  }, [errorProps]);\n  const accepTypes = React.useMemo(() => fileTypes.join(','), [fileTypes]);\n  const isValidImage = React.useCallback(file => {\n    const size = file.size / 1024;\n    const type = file.type;\n    return size <= fileSize && fileTypes.includes(type);\n  }, [fileTypes, fileSize]);\n\n  const convertFilesToBase64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onloadend = () => {\n      resolve(reader.result);\n    };\n\n    reader.onerror = reject;\n  });\n\n  const setRefInput = element => {\n    refInput = element;\n  };\n\n  const handleOpenWindowSelect = () => {\n    refInput.value = '';\n    refInput.click();\n  };\n\n  const handleUploadImage = async ({\n    file,\n    base64\n  }) => {\n    setLoading(true);\n\n    try {\n      const formData = new FormData();\n      formData.append(httpRequest.key, file);\n      const {\n        data\n      } = await Http[httpRequest.method](httpRequest.endpoint, formData);\n      onChange({\n        file,\n        base64\n      });\n      dispatch(commonStore.actions.setSuccessMessage(data.message));\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      setError(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message);\n    }\n\n    setLoading(false);\n  };\n\n  const handleChangeFile = async event => {\n    const file = event.target.files[0];\n    const base64 = await convertFilesToBase64(file);\n    const fileInstance = {\n      file,\n      base64\n    };\n    setImage(fileInstance);\n\n    if (!isValidImage(file) && httpRequest) {\n      setError('The file must be image or file size must be less than 500KB!');\n      return;\n    }\n\n    setError('');\n\n    if (httpRequest) {\n      await handleUploadImage(fileInstance);\n    } else {\n      onChange(fileInstance);\n    }\n  };\n\n  const removeImageRequest = async () => {\n    if (error) {\n      setImage(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        base64: imageProp\n      }));\n      setError('');\n    } else {\n      setLoading(true);\n      setError('');\n\n      try {\n        const formData = new FormData();\n        formData.append(httpRequest.key, null);\n        const {\n          data\n        } = await Http[httpRequest.method](httpRequest.endpoint, formData);\n        dispatch(commonStore.actions.setSuccessMessage(data.message));\n        setImage({\n          file: null,\n          base64: ''\n        });\n        onChange({\n          file: null,\n          base64: null\n        });\n      } catch (error) {\n        var _error$response2, _error$response2$data;\n\n        setError(error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message);\n      }\n\n      setLoading(false);\n    }\n  };\n\n  const handleRemoveImage = async () => {\n    setError('');\n\n    if (httpRequest) {\n      await removeImageRequest();\n    } else {\n      onChange({\n        base64: '',\n        file: null\n      });\n      setImage({\n        base64: '',\n        file: null\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsx(Tooltip, {\n    title: error || 'Only PNG, JPG, JPEG files are allowed!',\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: clsx(classes.upload, {\n        error: Boolean(error)\n      }),\n      children: /*#__PURE__*/_jsxs(\"span\", {\n        className: classes.uploadSelect,\n        children: [/*#__PURE__*/_jsx(\"input\", {\n          type: \"file\",\n          onChange: handleChangeFile,\n          ref: setRefInput,\n          style: {\n            display: 'none'\n          },\n          accept: accepTypes\n        }), /*#__PURE__*/_jsx(Unless, {\n          condition: image.base64,\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: classes.uploadSection,\n            onClick: handleOpenWindowSelect,\n            children: /*#__PURE__*/_jsx(UploadIcon, {\n              className: classes.uploadSelect__icon,\n              role: \"button\",\n              \"aria-label\": \"upload\"\n            })\n          })\n        }), /*#__PURE__*/_jsx(When, {\n          condition: image.base64,\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: classes.imageSection,\n            children: [/*#__PURE__*/_jsx(\"img\", {\n              src: image.base64,\n              alt: \"\",\n              className: classes.imageSection__image\n            }), /*#__PURE__*/_jsxs(If, {\n              condition: loading,\n              children: [/*#__PURE__*/_jsx(Then, {\n                children: /*#__PURE__*/_jsxs(\"div\", {\n                  className: classes.imageSection__loadingOverlay,\n                  children: [/*#__PURE__*/_jsx(CircularProgress, {\n                    size: 20,\n                    color: \"inherit\"\n                  }), /*#__PURE__*/_jsx(\"div\", {\n                    style: {\n                      marginTop: 8\n                    },\n                    children: \"Uploading...\"\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(Else, {\n                children: /*#__PURE__*/_jsxs(\"div\", {\n                  className: classes.imageSection__actions,\n                  children: [/*#__PURE__*/_jsx(UploadIcon, {\n                    className: classes.imageSection__actions__item,\n                    onClick: handleOpenWindowSelect\n                  }), /*#__PURE__*/_jsx(DeleteIcon, {\n                    className: classes.imageSection__actions__item,\n                    onClick: handleRemoveImage\n                  })]\n                })\n              })]\n            })]\n          })\n        })]\n      })\n    })\n  });\n};\n\nUploadImage.defaultProps = {\n  fileTypes: ['image/png', 'image/jpg', 'image/jpeg'],\n  fileSize: 500,\n  width: '100%',\n  height: '100%'\n};\nexport default UploadImage;","map":null,"metadata":{},"sourceType":"module"}