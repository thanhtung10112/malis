{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { DialogMain } from '@/components/index';\n\nclass ErrorDialog extends React.PureComponent {\n  render() {\n    const {\n      open,\n      onClose\n    } = this.props;\n    return /*#__PURE__*/_jsx(DialogMain, {\n      type: \"error\",\n      open: open,\n      maxWidth: \"xs\",\n      title: \"Error\",\n      onClose: onClose,\n      closeText: \"Ok\",\n      closeButtonProps: {\n        color: 'secondary'\n      },\n      description: \"An unexpected error has occurred, please contact your administrator.\"\n    });\n  }\n\n}\n\nclass ErrorBoundary extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      hasError: false\n    });\n\n    _defineProperty(this, \"onCloseErrorDialog\", () => {\n      this.setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n        hasError: false\n      }));\n    });\n  }\n\n  static getDerivedStateFromError(error) {\n    if (process.env.NEXT_PUBLIC_MODE === 'develop') {\n      console.error('error', error);\n    }\n\n    return {\n      hasError: true\n    };\n  }\n\n  render() {\n    const {\n      hasError\n    } = this.state;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [this.props.children, /*#__PURE__*/_jsx(ErrorDialog, {\n        open: hasError,\n        onClose: this.onCloseErrorDialog\n      })]\n    });\n  }\n\n}\n\nexport default ErrorBoundary;","map":null,"metadata":{},"sourceType":"module"}