{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport { select, all, call } from 'typed-redux-saga';\nimport { authStore, advancedFilterActions, commonStore } from '@/store/reducers';\nimport { createAction } from '@reduxjs/toolkit';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport afApi from '@/apis/advancedFilter.api';\nimport { StatusCode } from '@/utils/StatusCode';\nimport { actionTypes } from '@/utils/constant';\n\nfunction* getEntity() {\n  const entity = yield* select(commonStore.selectEntity);\n  return entity;\n}\n\nfunction* fetchDefaultFilter() {\n  const entity = yield getEntity();\n  const data = yield call(afApi.getInitDataForList, entity);\n  yield put(advancedFilterActions.setDefaultFilter(data.default_filter));\n  yield put(advancedFilterActions.setPermissions(data.permissions.advanced_filters));\n  yield put(advancedFilterActions.setSystemPreset(data.system_default_filter));\n}\n\nfunction* fetchFilterList(filterType = '') {\n  let type = filterType;\n\n  if (!type) {\n    type = yield* select(advancedFilterActions.selectFilterType);\n  }\n\n  const entity = yield getEntity();\n  const {\n    filter_preset_list\n  } = yield call(afApi.getList, {\n    entity,\n    type\n  });\n  yield put(advancedFilterActions.setFilterPresetList(filter_preset_list));\n}\n\nfunction* fetchInitDataForCreateEdit() {\n  const entity = yield getEntity();\n  const data = yield call(afApi.getInitDataForCE, entity);\n  yield put(advancedFilterActions.setInitData(data));\n}\n\nfunction* fetchFilterDetail(id) {\n  const {\n    filter_preset\n  } = yield call(afApi.getDetail, id);\n  const filterType = yield* select(advancedFilterActions.selectFilterType);\n\n  if (filterType === 'shared') {\n    filter_preset.is_user_default = false;\n  }\n\n  yield put(advancedFilterActions.setFilterDetail(filter_preset));\n}\n\nfunction* open() {\n  yield put(advancedFilterActions.setOpenAdvanceSearch(true));\n  yield put(advancedFilterActions.setLoadingSection(true));\n\n  try {\n    yield all([call(fetchDefaultFilter), call(fetchFilterList), call(fetchInitDataForCreateEdit)]);\n    const {\n      user,\n      defaultFilter\n    } = yield* all({\n      user: select(authStore.selectProfile),\n      defaultFilter: select(advancedFilterActions.selectDefaultFilter)\n    });\n\n    if (user.user_id === defaultFilter.created_by) {\n      yield put(advancedFilterActions.setEditMode(true));\n    }\n\n    yield call(fetchFilterDetail, defaultFilter.id);\n    yield put(advancedFilterActions.setExpandedSection(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(advancedFilterActions.setLoadingSection(false));\n}\n\nfunction* changeFilterType({\n  payload: filterType\n}) {\n  yield put(advancedFilterActions.setLoadingTable(true));\n\n  try {\n    yield call(fetchFilterList, filterType);\n    yield put(advancedFilterActions.setFilterType(filterType));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(advancedFilterActions.setLoadingTable(false));\n}\n\nfunction* getList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchFilterList);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* getDefaultFilter() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchDefaultFilter);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* create() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const _yield$select = yield select(advancedFilterActions.selectFilterDetail),\n          {\n      id,\n      created_at,\n      created_by,\n      updated_at,\n      updated_by,\n      is_system_default\n    } = _yield$select,\n          filterDetail = _objectWithoutProperties(_yield$select, [\"id\", \"created_at\", \"created_by\", \"updated_at\", \"updated_by\", \"is_system_default\"]);\n\n    const data = yield call(afApi.create, filterDetail);\n    yield all([call(fetchDefaultFilter), call(fetchFilterList)]);\n    const userInfo = yield select(authStore.selectProfile);\n    yield put(advancedFilterActions.setEditMode(true));\n    yield put(advancedFilterActions.setFilterDetail({\n      id: data.id,\n      created_by: userInfo.user_id,\n      is_system_default: false\n    }));\n    yield put(commonStore.actions.setSuccessMessage(data.message));\n    yield put(advancedFilterActions.setAfForm({\n      clearError: true,\n      error: ''\n    }));\n  } catch (error) {\n    const {\n      response: {\n        data,\n        status\n      }\n    } = error;\n\n    if (status === StatusCode.BAD_REQUEST) {\n      const error = data.message;\n      yield put(advancedFilterActions.setAfForm({\n        error\n      }));\n    } else {\n      yield errorSaga.handleError(error);\n    }\n  }\n\n  yield put(advancedFilterActions.setAfForm({\n    clearError: false,\n    error: ''\n  }));\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* update() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const _yield$select2 = yield select(advancedFilterActions.selectFilterDetail),\n          {\n      id,\n      created_at,\n      created_by,\n      updated_at,\n      updated_by,\n      is_system_default\n    } = _yield$select2,\n          filterDetail = _objectWithoutProperties(_yield$select2, [\"id\", \"created_at\", \"created_by\", \"updated_at\", \"updated_by\", \"is_system_default\"]);\n\n    const {\n      message\n    } = yield call(afApi.update, id, filterDetail);\n    yield all([call(fetchDefaultFilter), call(fetchFilterList)]);\n    yield put(commonStore.actions.setSuccessMessage(message));\n    yield put(advancedFilterActions.setAfForm({\n      clearError: true,\n      error: ''\n    }));\n  } catch (error) {\n    const {\n      response: {\n        data,\n        status\n      }\n    } = error;\n\n    if (status === StatusCode.BAD_REQUEST) {\n      const error = data.message;\n      yield put(advancedFilterActions.setAfForm({\n        error\n      }));\n    } else {\n      yield errorSaga.handleError(error);\n    }\n  }\n\n  yield put(advancedFilterActions.setAfForm({\n    clearError: false,\n    error: ''\n  }));\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* share({\n  payload\n}) {\n  yield put(advancedFilterActions.setLoadingTable(true));\n\n  try {\n    const {\n      id,\n      is_shared\n    } = payload;\n    const {\n      message\n    } = yield call(afApi.share, id, is_shared);\n    yield call(fetchFilterList);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(advancedFilterActions.setLoadingTable(false));\n}\n\nfunction* getDetail({\n  payload: id\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield all([call(fetchInitDataForCreateEdit), call(fetchFilterDetail, id)]);\n    yield put(advancedFilterActions.setEditMode(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* remove() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      id\n    } = yield select(advancedFilterActions.selectFilterDetail);\n    const {\n      message\n    } = yield call(afApi.remove, id);\n    yield all([call(fetchDefaultFilter), call(fetchFilterList)]);\n    const defaultFilter = yield select(advancedFilterActions.selectDefaultFilter);\n    yield call(fetchFilterDetail, defaultFilter.id);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* clearDefaultFilter() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const entity = yield getEntity();\n    const {\n      message\n    } = yield call(afApi.clearDefault, entity);\n    yield call(fetchDefaultFilter);\n    const filterDefault = yield select(advancedFilterActions.selectDefaultFilter);\n    yield put(advancedFilterActions.setFilterDetail(filterDefault));\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* saveAs({\n  payload: name\n}) {\n  yield put(advancedFilterActions.setLoadingDialog(true));\n\n  try {\n    const _yield$select3 = yield select(advancedFilterActions.selectFilterDetail),\n          {\n      id,\n      created_at,\n      created_by,\n      updated_at,\n      updated_by,\n      is_system_default\n    } = _yield$select3,\n          filterDetail = _objectWithoutProperties(_yield$select3, [\"id\", \"created_at\", \"created_by\", \"updated_at\", \"updated_by\", \"is_system_default\"]);\n\n    const copyFilterDetail = _objectSpread(_objectSpread({}, filterDetail), {}, {\n      name\n    });\n\n    const data = yield call(afApi.create, copyFilterDetail);\n    yield all([call(fetchDefaultFilter), call(fetchFilterList)]);\n    const userInfo = yield select(authStore.selectProfile);\n    yield put(advancedFilterActions.setEditMode(true));\n    yield put(advancedFilterActions.setFilterDetail({\n      id: data.id,\n      created_by: userInfo.user_id,\n      is_system_default: false,\n      name\n    }));\n    yield put(commonStore.actions.setSuccessMessage(data.message));\n    yield put(advancedFilterActions.setSaveAsForm({\n      open: false,\n      clearError: true,\n      error: ''\n    }));\n  } catch (error) {\n    const {\n      response: {\n        data,\n        status\n      }\n    } = error;\n\n    if (status === StatusCode.BAD_REQUEST) {\n      const error = data.message;\n      yield put(advancedFilterActions.setSaveAsForm({\n        error\n      }));\n    } else {\n      yield errorSaga.handleError(error);\n    }\n  }\n\n  yield put(advancedFilterActions.setSaveAsForm({\n    clearError: false,\n    error: ''\n  }));\n  yield put(advancedFilterActions.setLoadingDialog(false));\n}\n\nfunction* apply() {\n  let entity = yield* getEntity();\n\n  if (entity === 'manufacturing_standard' || entity === 'material_standard') {\n    entity = 'equivalence';\n  }\n\n  const getListAction = createAction(`${entity}/${actionTypes.GET_LIST}`);\n  yield put(commonStore.actions.setTableState({\n    page: 1\n  }));\n  yield put(getListAction());\n  yield put(commonStore.actions.setSuccessMessage('The filter preset is applied successfully! This result is temporary'));\n}\n\nfunction* close() {\n  let entity = yield* getEntity();\n\n  if (entity === 'manufacturing_standard' || entity === 'material_standard') {\n    entity = 'equivalence';\n  }\n\n  const getListAction = createAction(`${entity}/${actionTypes.GET_LIST}`);\n  yield put(getListAction());\n}\n\nfunction* advancedFilterSaga() {\n  yield takeEvery(advancedFilterActions.getList, getList);\n  yield takeEvery(advancedFilterActions.create, create);\n  yield takeEvery(advancedFilterActions.update, update);\n  yield takeEvery(advancedFilterActions.getDetail, getDetail);\n  yield takeEvery(advancedFilterActions.share, share);\n  yield takeLatest(advancedFilterActions.remove, remove);\n  yield takeLatest(advancedFilterActions.clearDefaultFilter, clearDefaultFilter);\n  yield takeEvery(advancedFilterActions.getDefaultFilter, getDefaultFilter);\n  yield takeEvery(advancedFilterActions.changeFilterType, changeFilterType);\n  yield takeEvery(advancedFilterActions.saveAs, saveAs);\n  yield takeEvery(advancedFilterActions.open, open);\n  yield takeEvery(advancedFilterActions.apply, apply);\n  yield takeEvery(advancedFilterActions.close, close);\n}\n\nexport default advancedFilterSaga;","map":null,"metadata":{},"sourceType":"module"}