{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Part\\\\Item\\\\TabGeneral.tsx\";\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport { Button, Grid } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { FormControllerTextField, TableMultilingualDescription, FormControllerAutocomplete, AppAutocompleteAsync, SectionTimezone, AppAutocomplete, CopyIcon, DropdownIcon, FormControllerNumberField } from '@/components';\nimport DialogCopyItem from './DialogCopyItem';\nimport { commonStore, partStore } from '@/store/reducers';\nimport _ from 'lodash';\nimport { itemMassFormat } from '@/utils/constant';\n\nconst TabGeneral = () => {\n  var _itemForm$errors$job_, _itemForm$errors$draw;\n\n  const {\n    t\n  } = useTranslation('common');\n  const {\n    0: openCopyItem,\n    1: setOpenCopyItem\n  } = useState(false);\n  const {\n    0: defaultPartList,\n    1: setDefaultPartList\n  } = useState([]);\n  const itemForm = useFormContext();\n  const itemFormData = itemForm.getValues();\n  const watchDrawingId = itemForm.watch('drawing_id', null);\n  const watchRefTo = itemForm.watch('reference_to', null);\n  const watchId = itemForm.watch('id', null);\n\n  const isCreating = _.isNil(watchId);\n\n  const dispatch = useDispatch();\n  const parameters = useSelector(partStore.selectParameters);\n  const userJob = useSelector(commonStore.selectUserValueJob);\n  const entity = useSelector(commonStore.selectEntity);\n\n  const getAdditionalDataPart = () => {\n    const data = {};\n    data.limit_to_job = userJob.value;\n\n    if (!_.isNil(watchDrawingId)) {\n      data.excluded_drawings = [watchDrawingId.value];\n    }\n\n    return data;\n  };\n\n  const additionalDataPart = getAdditionalDataPart();\n\n  const handleChangeDrawingId = (event, optionValue) => {\n    const formData = itemForm.getValues();\n    setDefaultPartList([]);\n    dispatch(partStore.sagaChangeDrawing({\n      formData,\n      drawing: optionValue,\n      entity: 'item'\n    }));\n  };\n\n  const handleSetOpenCopyItem = isOpen => () => {\n    if (_.isNull(watchRefTo)) {\n      setOpenCopyItem(isOpen);\n    }\n  };\n\n  const handleSelectPart = (event, optionValue) => {\n    var _formData$drawing_id;\n\n    const formData = itemForm.getValues();\n    const payload = {\n      selected_part: (optionValue === null || optionValue === void 0 ? void 0 : optionValue.value) || null,\n      selected_drawing: (_formData$drawing_id = formData.drawing_id) === null || _formData$drawing_id === void 0 ? void 0 : _formData$drawing_id.value,\n      current_item: isCreating ? null : formData.id\n    };\n    dispatch(partStore.sagaGetPartRefItem(payload));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(AppAutocomplete, {\n              helperText: (_itemForm$errors$job_ = itemForm.errors.job_id) === null || _itemForm$errors$job_ === void 0 ? void 0 : _itemForm$errors$job_.message,\n              error: Boolean(itemForm.errors.job_id),\n              value: userJob,\n              popupIcon: null,\n              disabled: true,\n              label: \"Job\",\n              required: true,\n              primaryKeyOption: \"value\",\n              options: [],\n              renderOption: option => option.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(AppAutocompleteAsync, {\n              popupIcon: entity === 'drawing' ? null : /*#__PURE__*/_jsxDEV(DropdownIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 58\n              }, this),\n              helperText: (_itemForm$errors$draw = itemForm.errors.drawing_id) === null || _itemForm$errors$draw === void 0 ? void 0 : _itemForm$errors$draw.message,\n              error: Boolean(itemForm.errors.drawing_id),\n              disabled: !isCreating || entity === 'drawing',\n              value: watchDrawingId,\n              compName: \"drawing_list\",\n              additionalData: {\n                limit_to_job: userJob.value\n              },\n              required: true,\n              label: \"Drawing #\",\n              onChange: handleChangeDrawingId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 8,\n            children: /*#__PURE__*/_jsxDEV(FormControllerTextField, {\n              disabled: !isCreating,\n              control: itemForm.control,\n              name: \"dpn\",\n              required: true,\n              label: \"Item #\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              startIcon: /*#__PURE__*/_jsxDEV(CopyIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 28\n              }, this),\n              style: {\n                padding: '0 4px',\n                textTransform: 'capitalize'\n              },\n              onClick: handleSetOpenCopyItem(true),\n              disabled: Boolean(watchRefTo),\n              children: t('button.copy_attribute')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(AppAutocompleteAsync, {\n              disabled: !watchDrawingId,\n              disableClearable: false,\n              value: watchRefTo,\n              compName: \"part_list\",\n              additionalData: additionalDataPart,\n              label: \"Reference Part Number\",\n              onChange: handleSelectPart,\n              defaultOptions: defaultPartList,\n              filterOptions: options => {\n                if (_.isNil(options)) {\n                  return [];\n                }\n\n                if (isCreating) {\n                  return options;\n                }\n\n                return _.filter(options, option => option.value !== watchId);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormControllerNumberField, {\n              control: itemForm.control,\n              name: \"mass\",\n              required: true,\n              label: \"Mass (kg)\",\n              disabled: Boolean(watchRefTo),\n              decimalScale: itemMassFormat.precision,\n              fixedDecimalScale: itemMassFormat.precision\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormControllerAutocomplete, {\n              control: itemForm.control,\n              name: \"unit\",\n              required: true,\n              label: \"Unit\",\n              primaryKeyOption: \"value\",\n              options: parameters.UNIT,\n              renderOption: option => option.description,\n              disabled: Boolean(watchRefTo)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(When, {\n            condition: !isCreating,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              style: {\n                padding: 0\n              },\n              children: /*#__PURE__*/_jsxDEV(SectionTimezone, {\n                value: itemFormData\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(TableMultilingualDescription, {\n          disabled: Boolean(watchRefTo),\n          languageList: parameters.PLLA,\n          editMode: !isCreating,\n          name: \"descriptions\",\n          tableHeight: 290,\n          control: itemForm.control,\n          copyable: true,\n          copyDialogProps: {\n            checkboxesToSelect: [{\n              label: 'Drawing',\n              value: 'drawing_list',\n              entity: 'drawings'\n            }, {\n              label: 'Item/Assembly',\n              value: 'part_list',\n              entity: 'parts',\n              default: true\n            }]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogCopyItem, {\n      open: openCopyItem,\n      onClose: handleSetOpenCopyItem(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default TabGeneral;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Part/Item/TabGeneral.tsx"],"names":["useState","useFormContext","useSelector","useDispatch","useTranslation","Button","Grid","When","FormControllerTextField","TableMultilingualDescription","FormControllerAutocomplete","AppAutocompleteAsync","SectionTimezone","AppAutocomplete","CopyIcon","DropdownIcon","FormControllerNumberField","DialogCopyItem","commonStore","partStore","_","itemMassFormat","TabGeneral","t","openCopyItem","setOpenCopyItem","defaultPartList","setDefaultPartList","itemForm","itemFormData","getValues","watchDrawingId","watch","watchRefTo","watchId","isCreating","isNil","dispatch","parameters","selectParameters","userJob","selectUserValueJob","entity","selectEntity","getAdditionalDataPart","data","limit_to_job","value","excluded_drawings","additionalDataPart","handleChangeDrawingId","event","optionValue","formData","sagaChangeDrawing","drawing","handleSetOpenCopyItem","isOpen","isNull","handleSelectPart","payload","selected_part","selected_drawing","drawing_id","current_item","id","sagaGetPartRefItem","errors","job_id","message","Boolean","option","description","control","padding","textTransform","options","filter","precision","UNIT","PLLA","checkboxesToSelect","label","default"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { useFormContext } from 'react-hook-form'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useTranslation } from 'next-i18next'\n\nimport { Button, Grid } from '@material-ui/core'\nimport { When } from 'react-if'\nimport {\n  FormControllerTextField,\n  TableMultilingualDescription,\n  FormControllerAutocomplete,\n  AppAutocompleteAsync,\n  SectionTimezone,\n  AppAutocomplete,\n  CopyIcon,\n  DropdownIcon,\n  FormControllerNumberField\n} from '@/components'\nimport DialogCopyItem from './DialogCopyItem'\n\nimport { commonStore, partStore } from '@/store/reducers'\nimport _ from 'lodash'\nimport { itemMassFormat } from '@/utils/constant'\n\nimport type { ItemDetail } from '@/types/Item'\nimport type { DataForDropdown } from '@/types/Common'\n\nconst TabGeneral: React.FC = () => {\n  const { t } = useTranslation('common')\n\n  const [openCopyItem, setOpenCopyItem] = useState(false)\n  const [defaultPartList, setDefaultPartList] = useState([])\n\n  const itemForm = useFormContext<ItemDetail>()\n  const itemFormData = itemForm.getValues()\n  const watchDrawingId = itemForm.watch('drawing_id', null)\n  const watchRefTo = itemForm.watch('reference_to', null)\n  const watchId = itemForm.watch('id', null)\n\n  const isCreating = _.isNil(watchId)\n\n  const dispatch = useDispatch()\n  const parameters = useSelector(partStore.selectParameters)\n  const userJob = useSelector(commonStore.selectUserValueJob)\n  const entity = useSelector(commonStore.selectEntity)\n\n  const getAdditionalDataPart = () => {\n    const data = {} as any\n    data.limit_to_job = userJob.value\n    if (!_.isNil(watchDrawingId)) {\n      data.excluded_drawings = [(watchDrawingId as DataForDropdown).value]\n    }\n    return data\n  }\n\n  const additionalDataPart = getAdditionalDataPart()\n\n  const handleChangeDrawingId = (event, optionValue: DataForDropdown) => {\n    const formData = itemForm.getValues()\n    setDefaultPartList([])\n    dispatch(\n      partStore.sagaChangeDrawing({\n        formData,\n        drawing: optionValue,\n        entity: 'item'\n      })\n    )\n  }\n\n  const handleSetOpenCopyItem = (isOpen: boolean) => () => {\n    if (_.isNull(watchRefTo)) {\n      setOpenCopyItem(isOpen)\n    }\n  }\n\n  const handleSelectPart = (event, optionValue: DataForDropdown) => {\n    const formData = itemForm.getValues()\n    const payload = {\n      selected_part: optionValue?.value || null,\n      selected_drawing: (formData.drawing_id as DataForDropdown)?.value,\n      current_item: isCreating ? null : formData.id\n    }\n    dispatch(partStore.sagaGetPartRefItem(payload))\n  }\n\n  return (\n    <>\n      <Grid container spacing={2}>\n        <Grid item xs={6}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <AppAutocomplete\n                helperText={itemForm.errors.job_id?.message}\n                error={Boolean(itemForm.errors.job_id)}\n                value={userJob}\n                popupIcon={null}\n                disabled\n                label=\"Job\"\n                required\n                primaryKeyOption=\"value\"\n                options={[]}\n                renderOption={(option) => option.description}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <AppAutocompleteAsync\n                popupIcon={entity === 'drawing' ? null : <DropdownIcon />}\n                helperText={itemForm.errors.drawing_id?.message}\n                error={Boolean(itemForm.errors.drawing_id)}\n                disabled={!isCreating || entity === 'drawing'}\n                value={watchDrawingId}\n                compName=\"drawing_list\"\n                additionalData={{ limit_to_job: userJob.value }}\n                required\n                label=\"Drawing #\"\n                onChange={handleChangeDrawingId}\n              />\n            </Grid>\n            <Grid item xs={8}>\n              <FormControllerTextField\n                disabled={!isCreating}\n                control={itemForm.control}\n                name=\"dpn\"\n                required\n                label=\"Item #\"\n              />\n            </Grid>\n            <Grid item xs={4}>\n              <Button\n                startIcon={<CopyIcon />}\n                style={{ padding: '0 4px', textTransform: 'capitalize' }}\n                onClick={handleSetOpenCopyItem(true)}\n                disabled={Boolean(watchRefTo)}\n              >\n                {t('button.copy_attribute')}\n              </Button>\n            </Grid>\n            <Grid item xs={12}>\n              <AppAutocompleteAsync\n                disabled={!watchDrawingId}\n                disableClearable={false}\n                value={watchRefTo}\n                compName=\"part_list\"\n                additionalData={additionalDataPart}\n                label=\"Reference Part Number\"\n                onChange={handleSelectPart}\n                defaultOptions={defaultPartList}\n                filterOptions={(options) => {\n                  if (_.isNil(options)) {\n                    return []\n                  }\n                  if (isCreating) {\n                    return options\n                  }\n                  return _.filter(options, (option) => option.value !== watchId)\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControllerNumberField\n                control={itemForm.control}\n                name=\"mass\"\n                required\n                label=\"Mass (kg)\"\n                disabled={Boolean(watchRefTo)}\n                decimalScale={itemMassFormat.precision}\n                fixedDecimalScale={itemMassFormat.precision}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControllerAutocomplete\n                control={itemForm.control}\n                name=\"unit\"\n                required\n                label=\"Unit\"\n                primaryKeyOption=\"value\"\n                options={parameters.UNIT}\n                renderOption={(option) => option.description}\n                disabled={Boolean(watchRefTo)}\n              />\n            </Grid>\n            <When condition={!isCreating}>\n              <Grid item xs={12} style={{ padding: 0 }}>\n                <SectionTimezone value={itemFormData} />\n              </Grid>\n            </When>\n          </Grid>\n        </Grid>\n        <Grid item xs={6}>\n          <TableMultilingualDescription\n            disabled={Boolean(watchRefTo)}\n            languageList={parameters.PLLA}\n            editMode={!isCreating}\n            name=\"descriptions\"\n            tableHeight={290}\n            control={itemForm.control}\n            copyable\n            copyDialogProps={{\n              checkboxesToSelect: [\n                {\n                  label: 'Drawing',\n                  value: 'drawing_list',\n                  entity: 'drawings'\n                },\n                {\n                  label: 'Item/Assembly',\n                  value: 'part_list',\n                  entity: 'parts',\n                  default: true\n                }\n              ]\n            }}\n          />\n        </Grid>\n      </Grid>\n\n      <DialogCopyItem open={openCopyItem} onClose={handleSetOpenCopyItem(false)} />\n    </>\n  )\n}\n\nexport default TabGeneral\n"]},"metadata":{},"sourceType":"module"}