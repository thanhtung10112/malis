{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\DataTable\\\\Common\\\\ExtendedProperties\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Paper, Checkbox, Tooltip } from '@material-ui/core';\nimport { DataTable, DataTableTextField, DataTableAutocomplete } from '@/components';\nimport { Switch, Case, If, Then, Else } from 'react-if';\nimport { useController } from 'react-hook-form';\nimport useStyles from './styles';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport * as yup from 'yup';\nimport clsx from 'clsx';\nimport * as columnProperties from '@/utils/columnProperties';\n\nconst TableExtendedProperties = props => {\n  const classes = useStyles();\n  const {\n    propertiesList,\n    name,\n    control,\n    tableHeight,\n    editMode,\n    parameterName\n  } = props;\n  const {\n    field: {\n      value: propertiesValue,\n      onChange\n    }\n  } = useController({\n    name,\n    control\n  });\n\n  const getStylesRowDisabled = params => {\n    const language = _.find(propertiesList, {\n      id: params.id\n    });\n\n    return clsx({\n      [classes.disable]: (language === null || language === void 0 ? void 0 : language.status) === false\n    });\n  };\n\n  const onChangeValue = (id, value) => {\n    const newPropertiesValue = immer(propertiesValue, draft => {\n      const {\n        parameter_id\n      } = _.find(propertiesList, {\n        id\n      });\n\n      if (value === '' || value === false) {\n        delete draft[parameter_id];\n      } else {\n        draft[parameter_id] = value;\n      }\n    });\n    onChange(newPropertiesValue);\n  };\n\n  const handleChangeValueDropdown = id => (event, optionValue, reason) => {\n    const newPropertiesValue = immer(propertiesValue, draft => {\n      const {\n        parameter_id\n      } = _.find(propertiesList, {\n        id\n      });\n\n      if (reason === 'clear') {\n        delete draft[parameter_id];\n      } else {\n        draft[parameter_id] = optionValue.properties.value;\n      }\n    });\n    onChange(newPropertiesValue);\n  };\n\n  const filteredProperties = React.useMemo(() => {\n    const types = ['boolean', 'string', 'dropdown'];\n    const propertiesWithTypes = propertiesList.filter(property => types.includes(property.properties.type));\n\n    if (editMode) {\n      const filterList = propertiesWithTypes.filter(property => {\n        return property.status === true || _.has(propertiesValue, property.parameter_id);\n      });\n      return filterList;\n    } else {\n      return propertiesWithTypes.filter(property => property.status === true);\n    }\n  }, [propertiesList, propertiesValue]);\n\n  const getValueDropdown = (value, list) => {\n    if (list.length === 0) {\n      return value;\n    }\n\n    const optionValue = _.find(list, item => {\n      var _item$properties;\n\n      return ((_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.value) === value;\n    });\n\n    return (optionValue === null || optionValue === void 0 ? void 0 : optionValue.description) || value;\n  };\n\n  const renderDropdownField = params => {\n    const {\n      properties\n    } = params.row;\n    let value = '';\n\n    if (params.value) {\n      value = _.find(properties.valid_value_list, option => {\n        var _option$properties;\n\n        return ((_option$properties = option.properties) === null || _option$properties === void 0 ? void 0 : _option$properties.value) === params.value;\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(DataTableAutocomplete, {\n      value: value,\n      params: params,\n      options: (properties === null || properties === void 0 ? void 0 : properties.valid_value_list) || [],\n      onChange: handleChangeValueDropdown(params.id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 1,\n    children: /*#__PURE__*/_jsxDEV(DataTable, {\n      tableHeight: tableHeight,\n      disableColumnMenu: true,\n      disableSelectionOnClick: true,\n      rows: filteredProperties,\n      hideFooter: true,\n      getRowClassName: getStylesRowDisabled,\n      onCellDoubleClick: (params, event) => {\n        const {\n          properties,\n          status\n        } = params.row;\n\n        if (properties.type === 'boolean' || !status) {\n          event.stopPropagation();\n        }\n      },\n      columns: [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n        field: 'description',\n        headerName: 'Properties',\n        width: 180\n      }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Value')), {}, {\n        field: 'value',\n        flex: 0.6,\n\n        valueGetter(params) {\n          const {\n            parameter_id\n          } = params.row;\n          return propertiesValue[parameter_id] || '';\n        },\n\n        renderEditCell(params) {\n          const {\n            properties\n          } = params.row;\n          return /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Case, {\n              condition: properties.type === 'string',\n              children: /*#__PURE__*/_jsxDEV(DataTableTextField, {\n                rules: yup.string().matches(properties.regex, {\n                  message: `Key's value is invalid! please refer to the \"code of ${parameterName} parameter\" regex.`,\n                  excludeEmptyString: true\n                }),\n                params: params,\n                onChangeValue: onChangeValue,\n                placeholder: properties.placeholder\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Case, {\n              condition: properties.type === 'dropdown',\n              children: renderDropdownField(params)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this);\n        },\n\n        renderCell(params) {\n          const {\n            properties,\n            parameter_id,\n            status,\n            id\n          } = params.row;\n          const value = propertiesValue[parameter_id];\n          return /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Case, {\n              condition: properties.type === 'boolean',\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: properties.placeholder,\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  color: \"primary\",\n                  className: classes.checkbox,\n                  disabled: !status,\n                  checked: Boolean(value),\n                  onChange: (event, checked) => onChangeValue(id, checked)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Case, {\n              condition: properties.type === 'string',\n              children: /*#__PURE__*/_jsxDEV(If, {\n                condition: Boolean(value),\n                children: [/*#__PURE__*/_jsxDEV(Then, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.textValue,\n                    children: value\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Else, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.placeholder,\n                    children: properties.placeholder\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 172,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Case, {\n              condition: properties.type === 'dropdown',\n              children: /*#__PURE__*/_jsxDEV(If, {\n                condition: Boolean(value),\n                children: [/*#__PURE__*/_jsxDEV(Then, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.textValue,\n                    children: getValueDropdown(value, properties.valid_value_list || [])\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Else, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.placeholder,\n                    children: properties.placeholder\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 184,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this);\n        }\n\n      })]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\nTableExtendedProperties.defaultProps = {\n  tableHeight: 360,\n  editMode: false\n};\nexport default TableExtendedProperties;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/DataTable/Common/ExtendedProperties/index.tsx"],"names":["React","Paper","Checkbox","Tooltip","DataTable","DataTableTextField","DataTableAutocomplete","Switch","Case","If","Then","Else","useController","useStyles","_","immer","yup","clsx","columnProperties","TableExtendedProperties","props","classes","propertiesList","name","control","tableHeight","editMode","parameterName","field","value","propertiesValue","onChange","getStylesRowDisabled","params","language","find","id","disable","status","onChangeValue","newPropertiesValue","draft","parameter_id","handleChangeValueDropdown","event","optionValue","reason","properties","filteredProperties","useMemo","types","propertiesWithTypes","filter","property","includes","type","filterList","has","getValueDropdown","list","length","item","description","renderDropdownField","row","valid_value_list","option","stopPropagation","defaultProperties","headerName","width","editCell","flex","valueGetter","renderEditCell","string","matches","regex","message","excludeEmptyString","placeholder","renderCell","checkbox","Boolean","checked","textValue","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Paper, Checkbox, Tooltip } from '@material-ui/core'\n\nimport { DataTable, DataTableTextField, DataTableAutocomplete } from '@/components'\n\nimport { Switch, Case, If, Then, Else } from 'react-if'\n\nimport { useController } from 'react-hook-form'\nimport useStyles from './styles'\n\nimport _ from 'lodash'\nimport immer from 'immer'\nimport * as yup from 'yup'\nimport clsx from 'clsx'\n\nimport * as columnProperties from '@/utils/columnProperties'\n\nimport type { TableExtendedPropertiesProps } from './type'\n\nconst TableExtendedProperties: React.FC<TableExtendedPropertiesProps> = (props) => {\n  const classes = useStyles()\n  const { propertiesList, name, control, tableHeight, editMode, parameterName } = props\n\n  const {\n    field: { value: propertiesValue, onChange }\n  } = useController({\n    name,\n    control\n  })\n\n  const getStylesRowDisabled = (params) => {\n    const language = _.find(propertiesList, { id: params.id })\n    return clsx({\n      [classes.disable]: language?.status === false\n    })\n  }\n\n  const onChangeValue = (id, value: string | boolean) => {\n    const newPropertiesValue = immer(propertiesValue, (draft) => {\n      const { parameter_id } = _.find(propertiesList, { id })\n      if (value === '' || value === false) {\n        delete draft[parameter_id]\n      } else {\n        draft[parameter_id] = value\n      }\n    })\n    onChange(newPropertiesValue)\n  }\n\n  const handleChangeValueDropdown = (id) => (event, optionValue, reason) => {\n    const newPropertiesValue = immer(propertiesValue, (draft) => {\n      const { parameter_id } = _.find(propertiesList, { id })\n      if (reason === 'clear') {\n        delete draft[parameter_id]\n      } else {\n        draft[parameter_id] = optionValue.properties.value\n      }\n    })\n    onChange(newPropertiesValue)\n  }\n\n  const filteredProperties = React.useMemo(() => {\n    const types = ['boolean', 'string', 'dropdown']\n    const propertiesWithTypes = propertiesList.filter((property) => types.includes(property.properties.type))\n    if (editMode) {\n      const filterList = propertiesWithTypes.filter((property) => {\n        return property.status === true || _.has(propertiesValue, property.parameter_id)\n      })\n      return filterList\n    } else {\n      return propertiesWithTypes.filter((property) => property.status === true)\n    }\n  }, [propertiesList, propertiesValue])\n\n  const getValueDropdown = (value, list) => {\n    if (list.length === 0) {\n      return value\n    }\n    const optionValue = _.find(list, (item) => item.properties?.value === value)\n    return optionValue?.description || value\n  }\n\n  const renderDropdownField = (params) => {\n    const { properties } = params.row\n    let value: any = ''\n    if (params.value) {\n      value = _.find(properties.valid_value_list, (option) => option.properties?.value === params.value)\n    }\n    return (\n      <DataTableAutocomplete\n        value={value}\n        params={params}\n        options={properties?.valid_value_list || []}\n        onChange={handleChangeValueDropdown(params.id)}\n      />\n    )\n  }\n\n  return (\n    <Paper elevation={1}>\n      <DataTable\n        tableHeight={tableHeight}\n        disableColumnMenu\n        disableSelectionOnClick\n        rows={filteredProperties}\n        hideFooter\n        getRowClassName={getStylesRowDisabled}\n        onCellDoubleClick={(params, event) => {\n          const { properties, status } = params.row\n          if (properties.type === 'boolean' || !status) {\n            event.stopPropagation()\n          }\n        }}\n        columns={[\n          {\n            ...columnProperties.defaultProperties,\n            field: 'description',\n            headerName: 'Properties',\n            width: 180\n          },\n          {\n            ...columnProperties.defaultProperties,\n            ...columnProperties.editCell('Value'),\n            field: 'value',\n            flex: 0.6,\n            valueGetter(params) {\n              const { parameter_id } = params.row\n              return propertiesValue[parameter_id] || ''\n            },\n            renderEditCell(params) {\n              const { properties } = params.row\n              return (\n                <Switch>\n                  <Case condition={properties.type === 'string'}>\n                    <DataTableTextField\n                      rules={yup.string().matches(properties.regex, {\n                        message: `Key's value is invalid! please refer to the \"code of ${parameterName} parameter\" regex.`,\n                        excludeEmptyString: true\n                      })}\n                      params={params}\n                      onChangeValue={onChangeValue}\n                      placeholder={properties.placeholder}\n                    />\n                  </Case>\n                  <Case condition={properties.type === 'dropdown'}>{renderDropdownField(params)}</Case>\n                </Switch>\n              )\n            },\n            renderCell(params) {\n              const { properties, parameter_id, status, id } = params.row\n              const value = propertiesValue[parameter_id]\n              return (\n                <Switch>\n                  <Case condition={properties.type === 'boolean'}>\n                    <Tooltip title={properties.placeholder}>\n                      <Checkbox\n                        color=\"primary\"\n                        className={classes.checkbox}\n                        disabled={!status}\n                        checked={Boolean(value)}\n                        onChange={(event, checked) => onChangeValue(id, checked)}\n                      />\n                    </Tooltip>\n                  </Case>\n                  <Case condition={properties.type === 'string'}>\n                    <If condition={Boolean(value)}>\n                      <Then>\n                        <div className={classes.textValue}>{value}</div>\n                      </Then>\n                      <Else>\n                        <div className={classes.placeholder}>{properties.placeholder}</div>\n                      </Else>\n                    </If>\n                  </Case>\n                  <Case condition={properties.type === 'dropdown'}>\n                    <If condition={Boolean(value)}>\n                      <Then>\n                        <div className={classes.textValue}>\n                          {getValueDropdown(value, properties.valid_value_list || [])}\n                        </div>\n                      </Then>\n                      <Else>\n                        <div className={classes.placeholder}>{properties.placeholder}</div>\n                      </Else>\n                    </If>\n                  </Case>\n                </Switch>\n              )\n            }\n          }\n        ]}\n      />\n    </Paper>\n  )\n}\n\nTableExtendedProperties.defaultProps = {\n  tableHeight: 360,\n  editMode: false\n}\n\nexport default TableExtendedProperties\n"]},"metadata":{},"sourceType":"module"}