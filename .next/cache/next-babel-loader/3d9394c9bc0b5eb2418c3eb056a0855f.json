{"ast":null,"code":"import * as yup from 'yup';\nimport { isValid, parseISO } from 'date-fns';\nimport getPasswordYup from '@/utils/getPasswordYup';\n\nfunction getValidationSchema(t, editMode) {\n  const validationSchema = yup.object().shape({\n    user_id: yup.string().trim().required(t('validation_message.user_id_required')).min(2, t('validation_message.user_id_length')).max(12, t('validation_message.user_id_length')),\n    user_abb: yup.string().max(12, t('validation_message.user_abb_max')),\n    first_name: yup.string().trim().required(t('validation_message.first_name_required')).max(20, t('validation_message.first_name_max')),\n    last_name: yup.string().trim().required(t('validation_message.last_name_required')).max(20, t('validation_message.last_name_max')),\n    email: yup.string().nullable().email(t('validation_message.email_format')),\n    password: yup.lazy(() => {\n      if (editMode) {\n        return yup.string().nullable();\n      }\n\n      return getPasswordYup('Password');\n    }),\n    confirm_password: yup.lazy(() => {\n      if (editMode) {\n        return yup.string().nullable();\n      }\n\n      return yup.string().oneOf([yup.ref('password'), null], t('validation_message.confirm_password_match'));\n    }),\n    time_zone: yup.string().nullable().required(t('validation_message.timezone_required')),\n    puco: yup.number().nullable().required(t('validation_message.puco_required')),\n    default_language: yup.number().nullable().required(t('validation_message.default_language_required')),\n    valid_from: yup.mixed().test('date_format', t('validation_message.valid_from_invalid'), value => {\n      // if (value === '' || value === null || value === undefined) {\n      //   return true\n      // }\n      return /^\\d{4}-\\d{2}-\\d{2}$/.test(value) || value === '' || value === null || value === undefined;\n    }).test('date_valid', t('validation_message.valid_from_invalid'), value => {\n      return isValid(parseISO(value)) || value === '' || value === null || value === undefined;\n    }),\n    valid_until: yup.mixed().test('date_format', t('validation_message.valid_until_invalid'), value => {\n      // if (value === '' || value === null || value === undefined) {\n      //   return true\n      // }\n      return /^\\d{4}-\\d{2}-\\d{2}$/.test(value) || value === '' || value === null || value === undefined;\n    }).test('date_valid', t('validation_message.valid_until_invalid'), value => {\n      return isValid(parseISO(value)) || value === '' || value === null || value === undefined;\n    })\n  });\n  return validationSchema;\n}\n\nexport default getValidationSchema;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/User/validationSchema.ts"],"names":["yup","isValid","parseISO","getPasswordYup","getValidationSchema","t","editMode","validationSchema","object","shape","user_id","string","trim","required","min","max","user_abb","first_name","last_name","email","nullable","password","lazy","confirm_password","oneOf","ref","time_zone","puco","number","default_language","valid_from","mixed","test","value","undefined","valid_until"],"mappings":"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","sourcesContent":["import * as yup from 'yup'\nimport { isValid, parseISO } from 'date-fns'\nimport getPasswordYup from '@/utils/getPasswordYup'\n\nimport type { TFunction } from 'next-i18next'\n\nfunction getValidationSchema(t: TFunction, editMode: boolean) {\n  const validationSchema = yup.object().shape({\n    user_id: yup\n      .string()\n      .trim()\n      .required(t('validation_message.user_id_required'))\n      .min(2, t('validation_message.user_id_length'))\n      .max(12, t('validation_message.user_id_length')),\n    user_abb: yup.string().max(12, t('validation_message.user_abb_max')),\n    first_name: yup\n      .string()\n      .trim()\n      .required(t('validation_message.first_name_required'))\n      .max(20, t('validation_message.first_name_max')),\n    last_name: yup\n      .string()\n      .trim()\n      .required(t('validation_message.last_name_required'))\n      .max(20, t('validation_message.last_name_max')),\n    email: yup.string().nullable().email(t('validation_message.email_format')),\n    password: yup.lazy(() => {\n      if (editMode) {\n        return yup.string().nullable()\n      }\n      return getPasswordYup('Password')\n    }),\n    confirm_password: yup.lazy(() => {\n      if (editMode) {\n        return yup.string().nullable()\n      }\n      return yup.string().oneOf([yup.ref('password'), null], t('validation_message.confirm_password_match'))\n    }),\n    time_zone: yup.string().nullable().required(t('validation_message.timezone_required')),\n    puco: yup.number().nullable().required(t('validation_message.puco_required')),\n    default_language: yup.number().nullable().required(t('validation_message.default_language_required')),\n    valid_from: yup\n      .mixed()\n      .test('date_format', t('validation_message.valid_from_invalid'), (value) => {\n        // if (value === '' || value === null || value === undefined) {\n        //   return true\n        // }\n        return /^\\d{4}-\\d{2}-\\d{2}$/.test(value) || value === '' || value === null || value === undefined\n      })\n      .test('date_valid', t('validation_message.valid_from_invalid'), (value) => {\n        return isValid(parseISO(value)) || value === '' || value === null || value === undefined\n      }),\n    valid_until: yup\n      .mixed()\n      .test('date_format', t('validation_message.valid_until_invalid'), (value) => {\n        // if (value === '' || value === null || value === undefined) {\n        //   return true\n        // }\n        return /^\\d{4}-\\d{2}-\\d{2}$/.test(value) || value === '' || value === null || value === undefined\n      })\n      .test('date_valid', t('validation_message.valid_until_invalid'), (value) => {\n        return isValid(parseISO(value)) || value === '' || value === null || value === undefined\n      })\n  })\n  return validationSchema\n}\n\nexport default getValidationSchema\n"]},"metadata":{},"sourceType":"module"}