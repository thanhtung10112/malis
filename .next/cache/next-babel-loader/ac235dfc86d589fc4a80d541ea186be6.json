{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport const name = 'location';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nexport const initialState = {\n  dataList: [],\n  detail: {\n    location_id: '',\n    language: null,\n    location_type: null,\n    name: '',\n    office_address1: '',\n    office_address2: '',\n    office_city: '',\n    office_zip: '',\n    office_state: '',\n    office_country: null,\n    office_phone: '',\n    office_email: '',\n    office_fax: '',\n    workshop_address1: '',\n    workshop_address2: '',\n    workshop_city: '',\n    workshop_phone: '',\n    workshop_email: '',\n    workshop_fax: '',\n    comment: '',\n    specialties: '',\n    remark: '',\n    additional_attributes: {}\n  },\n  dialogState: {\n    open: false,\n    loading: false,\n    editMode: false,\n    historyLogs: []\n  },\n  initDataForList: {\n    permissions: {\n      location: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  initDataForCE: {\n    parameters: {\n      CTRY: [],\n      // country\n      LOAT: [],\n      // extended properties\n      PLLA: [],\n      // language\n      PUCO: [],\n      // puco\n      SSPE: [],\n      // specialties\n      TYLO: [] // location type\n\n    },\n    next_code: '',\n    wiki_page: ''\n  }\n};\nconst locationSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, action) {\n      state.dataList = action.payload;\n    },\n\n    setPermissions(state, {\n      payload\n    }) {\n      state.initDataForList.permissions.location = payload;\n    },\n\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      state.dialogState.historyLogs = payload;\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setDialogStateEditMode(state, {\n      payload\n    }) {\n      state.dialogState.editMode = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setNextCode(state, {\n      payload\n    }) {\n      state.initDataForCE.next_code = payload;\n    },\n\n    resetDetail(state) {\n      state.detail = _objectSpread({}, initialState.detail);\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n});\nexport const {\n  actions\n} = locationSlice;\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaUpdate = createAction(`${name}/${actionTypes.UPDATE}`);\nexport const sagaGetNextCode = createAction(`${name}/${actionTypes.GET_GENERATE_CODE}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`); // Selectors\n\nexport const selectState = state => state[name];\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport const selectInitDataForCE = createSelector(selectState, state => state.initDataForCE);\nexport const selectDetail = createSelector(selectState, state => state.detail);\nexport const selectPermissions = createSelector(selectState, state => state.initDataForList.permissions.location);\nexport default locationSlice;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/reducers/location.reducer.ts"],"names":["createSlice","createAction","createSelector","actionTypes","name","resetState","RESET_STATE","initialState","dataList","detail","location_id","language","location_type","office_address1","office_address2","office_city","office_zip","office_state","office_country","office_phone","office_email","office_fax","workshop_address1","workshop_address2","workshop_city","workshop_phone","workshop_email","workshop_fax","comment","specialties","remark","additional_attributes","dialogState","open","loading","editMode","historyLogs","initDataForList","permissions","location","wiki_page","column_tooltips","initDataForCE","parameters","CTRY","LOAT","PLLA","PUCO","SSPE","TYLO","next_code","locationSlice","reducers","setDataList","state","action","payload","setPermissions","setDialogState","setHistoryLogs","setDialogStateOpen","setDialogStateLoading","setDialogStateEditMode","setDetail","setInitDataForList","setInitDataForCE","setNextCode","resetDetail","extraReducers","type","actions","sagaGetList","GET_LIST","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaCreate","CREATE","sagaUpdate","UPDATE","sagaGetNextCode","GET_GENERATE_CODE","sagaCloseDialog","CLOSE_DIALOG","selectState","selectDataList","selectDialogState","selectInitDataForList","selectInitDataForCE","selectDetail","selectPermissions"],"mappings":"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","sourcesContent":["import { createSlice, createAction, PayloadAction, createSelector } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\n\nimport type { RootReducerType } from './rootReducer'\nimport type {\n  LocationInitDataForList,\n  LocationDetail,\n  LocationInitDataForCE,\n  LocationPermissions,\n  LocationItem\n} from '@/types/Location'\nimport type { HistoryLog } from '@/types/Common'\n\nexport const name = 'location'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const initialState = {\n  dataList: [] as LocationItem[],\n  detail: {\n    location_id: '',\n    language: null,\n    location_type: null,\n    name: '',\n    office_address1: '',\n    office_address2: '',\n    office_city: '',\n    office_zip: '',\n    office_state: '',\n    office_country: null,\n    office_phone: '',\n    office_email: '',\n    office_fax: '',\n    workshop_address1: '',\n    workshop_address2: '',\n    workshop_city: '',\n    workshop_phone: '',\n    workshop_email: '',\n    workshop_fax: '',\n    comment: '',\n    specialties: '',\n    remark: '',\n    additional_attributes: {}\n  } as LocationDetail,\n  dialogState: {\n    open: false,\n    loading: false,\n    editMode: false,\n    historyLogs: [] as HistoryLog[]\n  },\n  initDataForList: {\n    permissions: {\n      location: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as LocationInitDataForList,\n  initDataForCE: {\n    parameters: {\n      CTRY: [], // country\n      LOAT: [], // extended properties\n      PLLA: [], // language\n      PUCO: [], // puco\n      SSPE: [], // specialties\n      TYLO: [] // location type\n    },\n    next_code: '',\n    wiki_page: ''\n  } as LocationInitDataForCE\n}\n\nconst locationSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, action: PayloadAction<LocationItem[]>) {\n      state.dataList = action.payload\n    },\n    setPermissions(state, { payload }: PayloadAction<LocationPermissions>) {\n      state.initDataForList.permissions.location = payload\n    },\n    setDialogState(state, { payload }: PayloadAction<Partial<typeof initialState.dialogState>>) {\n      state.dialogState = {\n        ...state.dialogState,\n        ...payload\n      }\n    },\n    setHistoryLogs(state, { payload }: PayloadAction<HistoryLog[]>) {\n      state.dialogState.historyLogs = payload\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setDialogStateEditMode(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.editMode = payload\n    },\n    setDetail(state, { payload }: PayloadAction<Partial<LocationDetail>>) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    setInitDataForList(state, { payload }: PayloadAction<LocationInitDataForList>) {\n      state.initDataForList = payload\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<LocationInitDataForCE>) {\n      state.initDataForCE = payload\n    },\n    setNextCode(state, { payload }: PayloadAction<string>) {\n      state.initDataForCE.next_code = payload\n    },\n    resetDetail(state) {\n      state.detail = { ...initialState.detail }\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\nexport const { actions } = locationSlice\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaCreate = createAction<LocationDetail>(`${name}/${actionTypes.CREATE}`)\nexport const sagaUpdate = createAction<{ id: number; location: LocationDetail }>(`${name}/${actionTypes.UPDATE}`)\nexport const sagaGetNextCode = createAction<LocationDetail>(`${name}/${actionTypes.GET_GENERATE_CODE}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\n\n// Selectors\nexport const selectState = (state: RootReducerType) => state[name]\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\nexport const selectInitDataForCE = createSelector(selectState, (state) => state.initDataForCE)\nexport const selectDetail = createSelector(selectState, (state) => state.detail)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.location)\n\nexport default locationSlice\n"]},"metadata":{},"sourceType":"module"}