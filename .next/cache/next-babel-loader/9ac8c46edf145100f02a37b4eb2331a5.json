{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useStyles from './styles';\nimport useDialogContext from './Context/useDialogContext';\nimport useGetData from '@/hooks/useGetData';\nimport { Grid } from '@material-ui/core';\nimport { TableMultilingualDescription, AppAutocompleteAsync, FormControllerTextField, SectionTimezone, AppAutocomplete, FormControllerNumberField, useConfirm } from '@/components';\nimport { Unless } from 'react-if';\nimport _ from 'lodash';\nimport partApi from '@/apis/part.api';\nimport { commonStore } from '@/store/reducers';\nimport { StatusCode } from '@/utils/StatusCode';\n\nvar TabGeneral = function TabGeneral() {\n  var _tagForm$errors$job_i, _tagForm$errors$schem;\n\n  var classes = useStyles();\n\n  var _useConfirm = useConfirm(),\n      confirm = _useConfirm.confirm;\n\n  var _useGetData = useGetData('elements'),\n      getGeneratedCode = _useGetData.getGeneratedCode;\n\n  var _useState = useState([]),\n      defaultPartList = _useState[0],\n      setDefaultPartList = _useState[1];\n\n  var tagForm = useFormContext();\n  var watchSchematic = tagForm.watch('schematic_id', null);\n  var watchPartId = tagForm.watch('part_id', null);\n  var watchId = tagForm.watch('id', null);\n\n  var _useDialogContext = useDialogContext(),\n      detail = _useDialogContext.detail,\n      initData = _useDialogContext.initData,\n      onChangeLoading = _useDialogContext.onChangeLoading;\n\n  var parameters = initData.parameters;\n  var dispatch = useDispatch();\n  var userJob = useSelector(commonStore.selectUserValueJob);\n\n  var isCreating = _.isNil(detail.id);\n\n  var handleChangeSchematicId = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event, optionValue) {\n      var elementId;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setDefaultPartList([]);\n              onChangeLoading(true);\n              _context.prev = 2;\n              tagForm.setValue('schematic_id', optionValue);\n              _context.next = 6;\n              return getGeneratedCode({\n                drawing_id: optionValue.value\n              });\n\n            case 6:\n              elementId = _context.sent;\n              tagForm.setValue('element_id', elementId);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](2);\n              console.error('error', '>>>', _context.t0);\n\n            case 13:\n              onChangeLoading(false);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 10]]);\n    }));\n\n    return function handleChangeSchematicId(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleFormatElementId = function handleFormatElementId(event) {\n    var value = event.target.value;\n    var formatValue = value.padStart(4, '0');\n    tagForm.setValue('element_id', formatValue);\n  };\n\n  var getAdditionalDataPart = function getAdditionalDataPart() {\n    var data = {};\n    data.limit_to_job = userJob.value;\n\n    if (!_.isNil(watchSchematic)) {\n      data.excluded_drawings = [watchSchematic.value];\n    }\n\n    return data;\n  };\n\n  var additionalDataPart = getAdditionalDataPart();\n\n  var displayConfirmRefDialog = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return confirm({\n                title: 'Warning',\n                description: message,\n                buttons: [{\n                  label: 'Ok',\n                  action: 'OK'\n                }]\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function displayConfirmRefDialog(_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getPart = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(selectedPart) {\n      var _formData$schematic_i, formData, reqPayload, _yield$partApi$getRef, part, message, partFormat, _error$response, status, data;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              onChangeLoading(true);\n              _context3.prev = 1;\n              formData = tagForm.getValues();\n              reqPayload = {\n                selected_part: selectedPart.value,\n                selected_drawing: (_formData$schematic_i = formData.schematic_id) === null || _formData$schematic_i === void 0 ? void 0 : _formData$schematic_i.value,\n                current_item: formData.id || null\n              };\n              _context3.next = 6;\n              return partApi.getReferencedPart(reqPayload);\n\n            case 6:\n              _yield$partApi$getRef = _context3.sent;\n              part = _yield$partApi$getRef.part;\n              message = _yield$partApi$getRef.message;\n              partFormat = {\n                description: selectedPart.description,\n                entity_id: part.dpn,\n                value: part.id\n              };\n              tagForm.setValue('part_id', partFormat);\n              tagForm.setValue('descriptions', part.descriptions);\n\n              if (selectedPart.value !== part.id) {\n                displayConfirmRefDialog(message);\n              } else {\n                dispatch(commonStore.actions.setSuccessMessage(message));\n              }\n\n              _context3.next = 19;\n              break;\n\n            case 15:\n              _context3.prev = 15;\n              _context3.t0 = _context3[\"catch\"](1);\n              _error$response = _context3.t0.response, status = _error$response.status, data = _error$response.data;\n\n              if (status === StatusCode.BAD_REQUEST) {\n                displayConfirmRefDialog(data.message);\n              }\n\n            case 19:\n              onChangeLoading(false);\n\n            case 20:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 15]]);\n    }));\n\n    return function getPart(_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleSelectPart = function handleSelectPart(event, optionValue, reason) {\n    if (reason === 'remove-option') {\n      tagForm.setValue('part_id', null);\n    } else {\n      getPart(optionValue);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          style: {\n            marginTop: 8\n          },\n          children: /*#__PURE__*/_jsx(AppAutocomplete, {\n            helperText: (_tagForm$errors$job_i = tagForm.errors.job_id) === null || _tagForm$errors$job_i === void 0 ? void 0 : _tagForm$errors$job_i.message,\n            error: Boolean(tagForm.errors.job_id),\n            value: userJob,\n            popupIcon: null,\n            disabled: true,\n            label: \"Job\",\n            required: true,\n            primaryKeyOption: \"value\",\n            options: [],\n            renderOption: function renderOption(option) {\n              return option.description;\n            }\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(AppAutocompleteAsync, {\n            disabled: !isCreating,\n            helperText: (_tagForm$errors$schem = tagForm.errors.schematic_id) === null || _tagForm$errors$schem === void 0 ? void 0 : _tagForm$errors$schem.message,\n            error: Boolean(tagForm.errors.schematic_id),\n            value: watchSchematic,\n            compName: \"drawing_list\",\n            additionalData: {\n              limit_to_job: userJob.value\n            },\n            required: true,\n            label: \"Schematic #\",\n            onChange: handleChangeSchematicId\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerNumberField, {\n            disabled: !isCreating,\n            fixedDecimalScale: false,\n            decimalScale: null,\n            thousandSeparator: \"\",\n            isNumericString: true,\n            control: tagForm.control,\n            label: \"Element #\",\n            required: true,\n            name: \"element_id\",\n            onBlur: handleFormatElementId\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerTextField, {\n            control: tagForm.control,\n            label: \"Tag #\",\n            name: \"tag\",\n            required: true\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(AppAutocompleteAsync, {\n            disabled: !watchSchematic,\n            disableClearable: false,\n            value: watchPartId,\n            compName: \"part_list\",\n            additionalData: additionalDataPart,\n            label: \"Part #\",\n            onChange: handleSelectPart,\n            defaultOptions: defaultPartList,\n            filterOptions: function filterOptions(options) {\n              if (_.isNil(options)) {\n                return [];\n              }\n\n              if (isCreating) {\n                return options;\n              }\n\n              return _.filter(options, function (option) {\n                return option.value !== watchId;\n              });\n            }\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsx(TableMultilingualDescription, {\n        languageList: parameters.PLLA,\n        editMode: !isCreating,\n        name: \"descriptions\",\n        tableHeight: 160,\n        control: tagForm.control,\n        copyable: true,\n        copyDialogProps: {\n          checkboxesToSelect: [{\n            label: 'Drawing',\n            value: 'drawing_list',\n            entity: 'drawings'\n          }, {\n            label: 'Item/Assembly',\n            value: 'part_list',\n            entity: 'parts'\n          }, {\n            label: 'Tag',\n            value: 'element_list',\n            entity: 'elements',\n            \"default\": true\n          }]\n        },\n        disabled: Boolean(watchPartId)\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: classes.tabGeneral__divider\n      })\n    }), /*#__PURE__*/_jsxs(Grid, {\n      item: true,\n      xs: 6,\n      children: [/*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerTextField, {\n            control: tagForm.control,\n            label: \"Fluid\",\n            name: \"fluid\"\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(FormControllerTextField, {\n            control: tagForm.control,\n            label: \"Tech. data\",\n            name: \"tech_data\"\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Unless, {\n        condition: isCreating,\n        children: /*#__PURE__*/_jsx(SectionTimezone, {\n          value: detail\n        })\n      })]\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsx(TableMultilingualDescription, {\n        languageList: parameters.PLLA,\n        editMode: !isCreating,\n        name: \"functions\",\n        tableHeight: 160,\n        control: tagForm.control,\n        copyable: true,\n        copyDialogProps: {\n          compName: 'element_list',\n          entity: 'elements'\n        }\n      })\n    })]\n  });\n};\n\nexport default TabGeneral;","map":null,"metadata":{},"sourceType":"module"}