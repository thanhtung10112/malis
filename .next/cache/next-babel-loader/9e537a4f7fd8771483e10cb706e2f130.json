{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { DialogMain } from '@/components/index';\nimport ConfirmContext from './ConfirmContext';\nimport { DEFAULT_OPTIONS } from './constant';\n\nconst buildOptions = (propsOptions, options) => {\n  const dialogProps = _objectSpread(_objectSpread({}, propsOptions.dialogProps || DEFAULT_OPTIONS.dialogProps), options.dialogProps || {});\n\n  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), propsOptions), options), {}, {\n    dialogProps\n  });\n};\n\nfunction ConfirmationProvider(props) {\n  const {\n    children,\n    propsOptions\n  } = props;\n  const [options, setOptions] = React.useState(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), propsOptions));\n  const [resolveReject, setResolveReject] = React.useState([]);\n  const [resolve] = resolveReject;\n  const confirm = React.useCallback((options = {}) => {\n    return new Promise((resolve, reject) => {\n      setOptions(buildOptions(propsOptions, options));\n      setResolveReject([resolve, reject]);\n    });\n  }, []);\n  const handleClose = React.useCallback(() => {\n    setResolveReject([]);\n  }, []);\n  const handleClickButton = React.useCallback(action => () => {\n    resolve(action);\n    handleClose();\n  }, [resolve, handleClose]);\n  const mapButtonActions = options.buttons.map((_ref) => {\n    let {\n      action\n    } = _ref,\n        buttonProps = _objectWithoutProperties(_ref, [\"action\"]);\n\n    return _objectSpread(_objectSpread({}, buttonProps), {}, {\n      onClick: handleClickButton(action)\n    });\n  });\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(ConfirmContext.Provider, {\n      value: {\n        confirm,\n        handleClose\n      },\n      children: children\n    }), /*#__PURE__*/_jsx(DialogMain, _objectSpread(_objectSpread({}, options.dialogProps), {}, {\n      type: \"warning\",\n      open: resolveReject.length === 2,\n      title: options.title,\n      description: options.description,\n      extraButtons: mapButtonActions\n    }))]\n  });\n}\n\nConfirmationProvider.defaultProps = {\n  propsOptions: {}\n};\nexport default ConfirmationProvider;","map":null,"metadata":{},"sourceType":"module"}