{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\AdvancedFilter\\\\ColumnList\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { useState } from 'react';\nimport { v1 as uuidv1 } from 'uuid';\nimport { AddCircle, Cancel } from '@material-ui/icons';\nimport { useTranslation } from 'next-i18next';\nimport { IconButton, ButtonGroup, Tooltip, Typography } from '@material-ui/core';\nimport * as _ from 'lodash';\nimport ColumnOptions from './ColumnOptions'; // import SortOptions from './SortOptions'\n// The main component (which is exported)\n\nfunction ColumnList(_ref) {\n  _s();\n\n  var columnOptions = _ref.columnOptions,\n      selectedColumns = _ref.selectedColumns,\n      disabled = _ref.disabled,\n      onRemove = _ref.onRemove,\n      onAdd = _ref.onAdd;\n\n  // trick for forcing rerender\n  var _useState = useState(0),\n      setValue = _useState[1];\n\n  var forceRerender = function forceRerender() {\n    setValue(function (value) {\n      return value + 1;\n    });\n  };\n\n  var _useTranslation = useTranslation(['advanced_filter', 'make_a_list']),\n      t = _useTranslation.t;\n\n  var selectedColumnsComponent = [];\n\n  var addNewColumn = function addNewColumn(condition_id) {\n    return function () {\n      var columnIndex = _.findIndex(selectedColumns, {\n        condition_id: condition_id\n      });\n\n      var selectedColumnsArr = selectedColumns.map(function (cond) {\n        return cond.id;\n      });\n      selectedColumns.splice(columnIndex + 1, 0, {\n        id: columnOptions.filter(function (colOpts) {\n          return !selectedColumnsArr.includes(colOpts.id);\n        })[0].id,\n        condition_id: uuidv1()\n      });\n      forceRerender();\n      onAdd();\n    };\n  };\n\n  var removeColumn = function removeColumn(condition_id) {\n    return function () {\n      var columnIndex = _.findIndex(selectedColumns, {\n        condition_id: condition_id\n      });\n\n      selectedColumns.splice(columnIndex, 1);\n      forceRerender();\n      onRemove();\n    };\n  };\n\n  var _iterator = _createForOfIteratorHelper(selectedColumns),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var columnData = _step.value;\n      selectedColumnsComponent.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '0.5rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(ColumnOptions, {\n          columnOptions: columnOptions,\n          condition: columnData,\n          conditionData: selectedColumns,\n          disabled: disabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this), disabled ? '' : /*#__PURE__*/_jsxDEV(ButtonGroup, {\n          style: {\n            marginLeft: '0.5rem'\n          },\n          size: \"small\",\n          children: [selectedColumns.length >= columnOptions.length ? '' : /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: t('make_a_list:tooltip.add_column'),\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: addNewColumn(columnData.condition_id),\n              children: /*#__PURE__*/_jsxDEV(AddCircle, {\n                style: {\n                  color: '#7D90B2'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: t('make_a_list:tooltip.remove_column'),\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: removeColumn(columnData.condition_id),\n              children: /*#__PURE__*/_jsxDEV(Cancel, {\n                style: {\n                  color: '#7D90B2'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [selectedColumns.length === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: disabled ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: '1.6rem'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          gutterBottom: true,\n          color: \"textSecondary\",\n          children: t('advanced_filter:column_list.no_column_selected')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: t('advanced_filter:column_list.add_sort_condition'),\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: addNewColumn(),\n          children: /*#__PURE__*/_jsxDEV(AddCircle, {\n            style: {\n              color: '#7D90B2'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this)\n    }, void 0, false) : '', selectedColumnsComponent]\n  }, void 0, true);\n}\n\n_s(ColumnList, \"XqkIMiVX/eXlEb1N4q1NwCNa+80=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ColumnList;\nexport default ColumnList; // // The main component (which is exported)\n// function SortConditionList ({ columnOptions, sortOptions, sortData: sortConditionData, disabled, hideSortOption = false }) {\n//   // trick for forcing rerender\n//   const [, setValue] = useState(0)\n//   const forceRerender = () => {\n//     setValue((value) => value + 1)\n//   }\n//   const sortConditionComponents = []\n//   const addNewSortCondition = (sortConditionId?) => () => {\n//     const sortConditionIndex = _.findIndex(sortConditionData, {\n//       id: sortConditionId\n//     })\n//     const selectedColumns = sortConditionData.map((cond) => cond.id)\n//     sortConditionData.splice(sortConditionIndex + 1, 0, {\n//       id: columnOptions.filter(\n//         (col) => !selectedColumns.includes(col.id)\n//       )[0].id,\n//       direction: sortOptions[0].value\n//     })\n//     forceRerender()\n//   }\n//   const removeSortCondition = (sortConditionId) => () => {\n//     const sortConditionIndex = _.findIndex(sortConditionData, {\n//       id: sortConditionId\n//     })\n//     sortConditionData.splice(sortConditionIndex, 1)\n//     forceRerender()\n//   }\n//   for (const sortCond of sortConditionData) {\n//     sortConditionComponents.push(\n//       <div style={{ marginBottom: '0.5rem' }}>\n//         <ColumnOptions\n//           columnOptions={columnOptions}\n//           condition={sortCond}\n//           conditionData={sortConditionData}\n//           disabled={disabled}\n//         />\n//         {!hideSortOption && <SortOptions sortOptions={sortOptions} condition={sortCond} disabled={disabled} />}\n//         {disabled ? '' : (\n//           <ButtonGroup\n//             style={{ marginLeft: '0.5rem' }}\n//             size=\"small\"\n//           >\n//             {sortConditionData.length >= columnOptions.length ? (\n//               ''\n//             ) : (\n//               <IconButton onClick={addNewSortCondition(sortCond.id)}>\n//                 <AddCircle />\n//               </IconButton>\n//             )}\n//             <IconButton onClick={removeSortCondition(sortCond.id)}>\n//               <Cancel />\n//             </IconButton>\n//           </ButtonGroup>\n//         )}\n//       </div>\n//     )\n//   }\n//   return (\n//     <>\n//       {sortConditionData.length === 0 ? (\n//         <>\n//           {\n//             disabled ? (\n//               <div style={{ marginLeft: '1.6rem' }}>\n//                 <Typography variant=\"subtitle1\" gutterBottom color=\"textSecondary\">\n//                   No sort conditions\n//                 </Typography>\n//               </div>\n//             ) : (\n//               <Tooltip title=\"Add sort condition\">\n//                 <IconButton onClick={addNewSortCondition()}>\n//                   <AddCircle />\n//                 </IconButton>\n//               </Tooltip>\n//             )\n//           }\n//         </>\n//       ) : (\n//         ''\n//       )}\n//       {sortConditionComponents}\n//     </>\n//   )\n// }\n// export default SortConditionList\n\nvar _c;\n\n$RefreshReg$(_c, \"ColumnList\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/AdvancedFilter/ColumnList/index.tsx"],"names":["useState","v1","uuidv1","AddCircle","Cancel","useTranslation","IconButton","ButtonGroup","Tooltip","Typography","_","ColumnOptions","ColumnList","columnOptions","selectedColumns","disabled","onRemove","onAdd","setValue","forceRerender","value","t","selectedColumnsComponent","addNewColumn","condition_id","columnIndex","findIndex","selectedColumnsArr","map","cond","id","splice","filter","colOpts","includes","removeColumn","columnData","push","marginBottom","marginLeft","length","color"],"mappings":";;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,oBAAlC;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,OAAlC,EAA2CC,UAA3C,QAA6D,mBAA7D;AAEA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB;AAEA,OAAOC,aAAP,MAA0B,iBAA1B,C,CACA;AAEA;;AAEA,SAASC,UAAT,OAAmF;AAAA;;AAAA,MAA7DC,aAA6D,QAA7DA,aAA6D;AAAA,MAA9CC,eAA8C,QAA9CA,eAA8C;AAAA,MAA7BC,QAA6B,QAA7BA,QAA6B;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;AAAA,MAATC,KAAS,QAATA,KAAS;;AACjF;AADiF,kBAE5DjB,QAAQ,CAAC,CAAD,CAFoD;AAAA,MAExEkB,QAFwE;;AAGjF,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BD,IAAAA,QAAQ,CAAC,UAACE,KAAD;AAAA,aAAWA,KAAK,GAAG,CAAnB;AAAA,KAAD,CAAR;AACD,GAFD;;AAHiF,wBAOnEf,cAAc,CAAC,CAAC,iBAAD,EAAoB,aAApB,CAAD,CAPqD;AAAA,MAOzEgB,CAPyE,mBAOzEA,CAPyE;;AASjF,MAAMC,wBAAwB,GAAG,EAAjC;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,YAAD;AAAA,WAAmB,YAAM;AAC5C,UAAMC,WAAW,GAAGf,CAAC,CAACgB,SAAF,CAAYZ,eAAZ,EAA6B;AAC/CU,QAAAA,YAAY,EAAEA;AADiC,OAA7B,CAApB;;AAIA,UAAMG,kBAAkB,GAAGb,eAAe,CAACc,GAAhB,CAAoB,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,EAAf;AAAA,OAApB,CAA3B;AAEAhB,MAAAA,eAAe,CAACiB,MAAhB,CAAuBN,WAAW,GAAG,CAArC,EAAwC,CAAxC,EAA2C;AACzCK,QAAAA,EAAE,EAAEjB,aAAa,CAACmB,MAAd,CAAqB,UAACC,OAAD;AAAA,iBAAa,CAACN,kBAAkB,CAACO,QAAnB,CAA4BD,OAAO,CAACH,EAApC,CAAd;AAAA,SAArB,EAA4E,CAA5E,EAA+EA,EAD1C;AAEzCN,QAAAA,YAAY,EAAEtB,MAAM;AAFqB,OAA3C;AAIAiB,MAAAA,aAAa;AACbF,MAAAA,KAAK;AACN,KAboB;AAAA,GAArB;;AAeA,MAAMkB,YAAY,GAAG,SAAfA,YAAe,CAACX,YAAD;AAAA,WAAkB,YAAM;AAC3C,UAAMC,WAAW,GAAGf,CAAC,CAACgB,SAAF,CAAYZ,eAAZ,EAA6B;AAC/CU,QAAAA,YAAY,EAAEA;AADiC,OAA7B,CAApB;;AAGAV,MAAAA,eAAe,CAACiB,MAAhB,CAAuBN,WAAvB,EAAoC,CAApC;AACAN,MAAAA,aAAa;AACbH,MAAAA,QAAQ;AACT,KAPoB;AAAA,GAArB;;AA1BiF,6CAmCxDF,eAnCwD;AAAA;;AAAA;AAmCjF,wDAA0C;AAAA,UAA/BsB,UAA+B;AACxCd,MAAAA,wBAAwB,CAACe,IAAzB,eACE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,YAAY,EAAE;AAAhB,SAAZ;AAAA,gCACE,QAAC,aAAD;AACE,UAAA,aAAa,EAAEzB,aADjB;AAEE,UAAA,SAAS,EAAEuB,UAFb;AAGE,UAAA,aAAa,EAAEtB,eAHjB;AAIE,UAAA,QAAQ,EAAEC;AAJZ;AAAA;AAAA;AAAA;AAAA,gBADF,EAQGA,QAAQ,GACP,EADO,gBAGP,QAAC,WAAD;AAAa,UAAA,KAAK,EAAE;AAAEwB,YAAAA,UAAU,EAAE;AAAd,WAApB;AAA8C,UAAA,IAAI,EAAC,OAAnD;AAAA,qBACGzB,eAAe,CAAC0B,MAAhB,IAA0B3B,aAAa,CAAC2B,MAAxC,GACC,EADD,gBAGC,QAAC,OAAD;AAAS,YAAA,KAAK,EAAEnB,CAAC,CAAC,gCAAD,CAAjB;AAAA,mCACE,QAAC,UAAD;AAAY,cAAA,OAAO,EAAEE,YAAY,CAACa,UAAU,CAACZ,YAAZ,CAAjC;AAAA,qCACE,QAAC,SAAD;AAAW,gBAAA,KAAK,EAAE;AAAEiB,kBAAAA,KAAK,EAAE;AAAT;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAUE,QAAC,OAAD;AAAS,YAAA,KAAK,EAAEpB,CAAC,CAAC,mCAAD,CAAjB;AAAA,mCACE,QAAC,UAAD;AAAY,cAAA,OAAO,EAAEc,YAAY,CAACC,UAAU,CAACZ,YAAZ,CAAjC;AAAA,qCACE,QAAC,MAAD;AAAQ,gBAAA,KAAK,EAAE;AAAEiB,kBAAAA,KAAK,EAAE;AAAT;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AA+BD;AAnEgF;AAAA;AAAA;AAAA;AAAA;;AAqEjF,sBACE;AAAA,eACG3B,eAAe,CAAC0B,MAAhB,KAA2B,CAA3B,gBACC;AAAA,gBACGzB,QAAQ,gBACP;AAAK,QAAA,KAAK,EAAE;AAAEwB,UAAAA,UAAU,EAAE;AAAd,SAAZ;AAAA,+BACE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,WAApB;AAAgC,UAAA,YAAY,MAA5C;AAA6C,UAAA,KAAK,EAAC,eAAnD;AAAA,oBACGlB,CAAC,CAAC,gDAAD;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADO,gBAOP,QAAC,OAAD;AAAS,QAAA,KAAK,EAAEA,CAAC,CAAC,gDAAD,CAAjB;AAAA,+BACE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAEE,YAAY,EAAjC;AAAA,iCACE,QAAC,SAAD;AAAW,YAAA,KAAK,EAAE;AAAEkB,cAAAA,KAAK,EAAE;AAAT;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AARJ,qBADD,GAiBC,EAlBJ,EAoBGnB,wBApBH;AAAA,kBADF;AAwBD;;GA7FQV,U;UAOOP,c;;;KAPPO,U;AA+FT,eAAeA,UAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { useState } from 'react'\n\nimport { v1 as uuidv1 } from 'uuid'\n\nimport { AddCircle, Cancel } from '@material-ui/icons'\nimport { useTranslation } from 'next-i18next'\n\nimport { IconButton, ButtonGroup, Tooltip, Typography } from '@material-ui/core'\n\nimport * as _ from 'lodash'\n\nimport ColumnOptions from './ColumnOptions'\n// import SortOptions from './SortOptions'\n\n// The main component (which is exported)\n\nfunction ColumnList({ columnOptions, selectedColumns, disabled, onRemove, onAdd }) {\n  // trick for forcing rerender\n  const [, setValue] = useState(0)\n  const forceRerender = () => {\n    setValue((value) => value + 1)\n  }\n\n  const { t } = useTranslation(['advanced_filter', 'make_a_list'])\n\n  const selectedColumnsComponent = []\n\n  const addNewColumn = (condition_id?) => () => {\n    const columnIndex = _.findIndex(selectedColumns, {\n      condition_id: condition_id\n    })\n\n    const selectedColumnsArr = selectedColumns.map((cond) => cond.id)\n\n    selectedColumns.splice(columnIndex + 1, 0, {\n      id: columnOptions.filter((colOpts) => !selectedColumnsArr.includes(colOpts.id))[0].id,\n      condition_id: uuidv1()\n    })\n    forceRerender()\n    onAdd()\n  }\n\n  const removeColumn = (condition_id) => () => {\n    const columnIndex = _.findIndex(selectedColumns, {\n      condition_id: condition_id\n    })\n    selectedColumns.splice(columnIndex, 1)\n    forceRerender()\n    onRemove()\n  }\n\n  for (const columnData of selectedColumns) {\n    selectedColumnsComponent.push(\n      <div style={{ marginBottom: '0.5rem' }}>\n        <ColumnOptions\n          columnOptions={columnOptions}\n          condition={columnData}\n          conditionData={selectedColumns}\n          disabled={disabled}\n        />\n\n        {disabled ? (\n          ''\n        ) : (\n          <ButtonGroup style={{ marginLeft: '0.5rem' }} size=\"small\">\n            {selectedColumns.length >= columnOptions.length ? (\n              ''\n            ) : (\n              <Tooltip title={t('make_a_list:tooltip.add_column')}>\n                <IconButton onClick={addNewColumn(columnData.condition_id)}>\n                  <AddCircle style={{ color: '#7D90B2' }} />\n                </IconButton>\n              </Tooltip>\n            )}\n            <Tooltip title={t('make_a_list:tooltip.remove_column')}>\n              <IconButton onClick={removeColumn(columnData.condition_id)}>\n                <Cancel style={{ color: '#7D90B2' }} />\n              </IconButton>\n            </Tooltip>\n          </ButtonGroup>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <>\n      {selectedColumns.length === 0 ? (\n        <>\n          {disabled ? (\n            <div style={{ marginLeft: '1.6rem' }}>\n              <Typography variant=\"subtitle1\" gutterBottom color=\"textSecondary\">\n                {t('advanced_filter:column_list.no_column_selected')}\n              </Typography>\n            </div>\n          ) : (\n            <Tooltip title={t('advanced_filter:column_list.add_sort_condition')}>\n              <IconButton onClick={addNewColumn()}>\n                <AddCircle style={{ color: '#7D90B2' }} />\n              </IconButton>\n            </Tooltip>\n          )}\n        </>\n      ) : (\n        ''\n      )}\n      {selectedColumnsComponent}\n    </>\n  )\n}\n\nexport default ColumnList\n\n// // The main component (which is exported)\n// function SortConditionList ({ columnOptions, sortOptions, sortData: sortConditionData, disabled, hideSortOption = false }) {\n//   // trick for forcing rerender\n//   const [, setValue] = useState(0)\n//   const forceRerender = () => {\n//     setValue((value) => value + 1)\n//   }\n\n//   const sortConditionComponents = []\n\n//   const addNewSortCondition = (sortConditionId?) => () => {\n//     const sortConditionIndex = _.findIndex(sortConditionData, {\n//       id: sortConditionId\n//     })\n//     const selectedColumns = sortConditionData.map((cond) => cond.id)\n\n//     sortConditionData.splice(sortConditionIndex + 1, 0, {\n//       id: columnOptions.filter(\n//         (col) => !selectedColumns.includes(col.id)\n//       )[0].id,\n//       direction: sortOptions[0].value\n//     })\n//     forceRerender()\n//   }\n\n//   const removeSortCondition = (sortConditionId) => () => {\n//     const sortConditionIndex = _.findIndex(sortConditionData, {\n//       id: sortConditionId\n//     })\n//     sortConditionData.splice(sortConditionIndex, 1)\n//     forceRerender()\n//   }\n\n//   for (const sortCond of sortConditionData) {\n//     sortConditionComponents.push(\n//       <div style={{ marginBottom: '0.5rem' }}>\n//         <ColumnOptions\n//           columnOptions={columnOptions}\n//           condition={sortCond}\n//           conditionData={sortConditionData}\n//           disabled={disabled}\n//         />\n//         {!hideSortOption && <SortOptions sortOptions={sortOptions} condition={sortCond} disabled={disabled} />}\n\n//         {disabled ? '' : (\n//           <ButtonGroup\n//             style={{ marginLeft: '0.5rem' }}\n//             size=\"small\"\n//           >\n//             {sortConditionData.length >= columnOptions.length ? (\n//               ''\n//             ) : (\n//               <IconButton onClick={addNewSortCondition(sortCond.id)}>\n//                 <AddCircle />\n//               </IconButton>\n//             )}\n//             <IconButton onClick={removeSortCondition(sortCond.id)}>\n//               <Cancel />\n//             </IconButton>\n//           </ButtonGroup>\n//         )}\n\n//       </div>\n//     )\n//   }\n//   return (\n//     <>\n//       {sortConditionData.length === 0 ? (\n//         <>\n//           {\n//             disabled ? (\n//               <div style={{ marginLeft: '1.6rem' }}>\n//                 <Typography variant=\"subtitle1\" gutterBottom color=\"textSecondary\">\n//                   No sort conditions\n//                 </Typography>\n//               </div>\n//             ) : (\n//               <Tooltip title=\"Add sort condition\">\n//                 <IconButton onClick={addNewSortCondition()}>\n//                   <AddCircle />\n//                 </IconButton>\n//               </Tooltip>\n//             )\n//           }\n//         </>\n//       ) : (\n//         ''\n//       )}\n//       {sortConditionComponents}\n//     </>\n//   )\n// }\n\n// export default SortConditionList\n"]},"metadata":{},"sourceType":"module"}