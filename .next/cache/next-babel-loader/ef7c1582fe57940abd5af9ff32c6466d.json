{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Common\\\\ExportProgressDialog\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { exportProcessDialogActions, makeAListActions } from '@/store/reducers';\nimport { CheckCircleRounded, HighlightOffOutlined } from '@material-ui/icons';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Typography, Button, CircularProgress } from '@material-ui/core';\nimport { DialogMain } from '@/components/index';\nimport { Case, Default, Switch } from 'react-if';\n\nfunction ExportProgressDialog() {\n  _s();\n\n  var _this = this;\n\n  var dispatch = useDispatch();\n  var sseConnection = useRef(null);\n  var domain = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:5000/';\n  var isOpen = useSelector(function (state) {\n    return state.exportProcessDialog.isOpen;\n  });\n  var message = useSelector(function (state) {\n    return state.exportProcessDialog.message;\n  });\n  var operationId = useSelector(function (state) {\n    return state.exportProcessDialog.operationId;\n  });\n  var status = useSelector(function (state) {\n    return state.exportProcessDialog.status;\n  });\n  var celeryId = useSelector(function (state) {\n    return state.exportProcessDialog.celeryId;\n  });\n\n  var _useState = useState(false),\n      confirmDialogOpen = _useState[0],\n      setConfirmDialogOpen = _useState[1];\n\n  var backgroundJobListener = function backgroundJobListener(event) {\n    var data = JSON.parse(event.data);\n    dispatch(exportProcessDialogActions.setMessage(data.message));\n    dispatch(exportProcessDialogActions.setStatus(data.status));\n\n    if (data.status === 'SUCCESS') {\n      sseConnection.current.removeEventListener(operationId, backgroundJobListener);\n      var redirectUrl = \"\".concat(domain, \"make_a_list/get_result?operation_id=\").concat(operationId, \"&destination=\").concat(data.destination, \"&t=\").concat(Date.now());\n      window.open(redirectUrl);\n      setConfirmDialogOpen(false);\n      dispatch(exportProcessDialogActions.setOpen(false));\n    } else if (data.status === 'ERROR') {\n      setConfirmDialogOpen(false);\n    }\n  };\n\n  useEffect(function () {\n    if (!isOpen) {\n      dispatch(exportProcessDialogActions.resetInitState());\n\n      if (sseConnection.current) {\n        sseConnection.current.close();\n        sseConnection.current = null;\n      }\n    } else {\n      if (!sseConnection.current) {\n        sseConnection.current = new EventSource(\"\".concat(domain, \"background_stream\"));\n      }\n\n      sseConnection.current.addEventListener(operationId, backgroundJobListener);\n    }\n  }, [isOpen]);\n\n  var cancelOperation = function cancelOperation() {\n    setConfirmDialogOpen(true);\n  };\n\n  var handleCancelOperation = function handleCancelOperation() {\n    dispatch(makeAListActions.stopMakeAList({\n      celery_id: celeryId\n    }));\n    setConfirmDialogOpen(false);\n    dispatch(exportProcessDialogActions.setOpen(false));\n  };\n\n  var closeDialog = function closeDialog() {\n    dispatch(exportProcessDialogActions.setOpen(false));\n  };\n\n  var renderButton = {\n    label: status === 'SUCCESS' || status === 'ERROR' ? 'Close' : 'Cancel',\n    onClick: status === 'SUCCESS' || status === 'ERROR' ? closeDialog : cancelOperation\n  };\n\n  var SimpleConfirmationDialog = function SimpleConfirmationDialog() {\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: true // onClose={()=>{}}\n      ,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"alert-dialog-title\",\n        children: \"Confirm canceling exporting progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          id: \"alert-dialog-description\",\n          children: \"Are you sure want to cancel the exporting progress?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCancelOperation,\n          color: \"primary\",\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: function onClick() {\n            return setConfirmDialogOpen(false);\n          },\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DialogMain, {\n      open: isOpen,\n      maxWidth: \"xs\",\n      fullWidth: true,\n      extraButtons: renderButton,\n      bodyStyles: {\n        margin: 'auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Case, {\n          condition: status === 'SUCCESS',\n          children: /*#__PURE__*/_jsxDEV(CheckCircleRounded, {\n            fontSize: \"large\",\n            style: {\n              marginTop: '1rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Case, {\n          condition: status === 'ERROR',\n          children: /*#__PURE__*/_jsxDEV(HighlightOffOutlined, {\n            fontSize: \"large\",\n            style: {\n              marginTop: '1rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Default, {\n          children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n            style: {\n              marginTop: '1rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        style: {\n          marginTop: '1rem'\n        },\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), confirmDialogOpen ? SimpleConfirmationDialog() : '']\n  }, void 0, true);\n}\n\n_s(ExportProgressDialog, \"on6qtttibWe133b1S8n2rRk3WUM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ExportProgressDialog;\nexport default ExportProgressDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExportProgressDialog\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Common/ExportProgressDialog/index.tsx"],"names":["useEffect","useState","useRef","useSelector","useDispatch","exportProcessDialogActions","makeAListActions","CheckCircleRounded","HighlightOffOutlined","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Typography","Button","CircularProgress","DialogMain","Case","Default","Switch","ExportProgressDialog","dispatch","sseConnection","domain","process","env","NEXT_PUBLIC_BACKEND_URL","isOpen","state","exportProcessDialog","message","operationId","status","celeryId","confirmDialogOpen","setConfirmDialogOpen","backgroundJobListener","event","data","JSON","parse","setMessage","setStatus","current","removeEventListener","redirectUrl","destination","Date","now","window","open","setOpen","resetInitState","close","EventSource","addEventListener","cancelOperation","handleCancelOperation","stopMakeAList","celery_id","closeDialog","renderButton","label","onClick","SimpleConfirmationDialog","margin","textAlign","marginTop"],"mappings":"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","sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { exportProcessDialogActions, makeAListActions } from '@/store/reducers'\n\nimport { CheckCircleRounded, HighlightOffOutlined } from '@material-ui/icons'\n\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Typography,\n  Button,\n  CircularProgress\n} from '@material-ui/core'\n\nimport { DialogMain } from '@/components/index'\nimport { Case, Default, Switch } from 'react-if'\n\nimport type { ExtraButton } from '@/components/Dialog/Main/type'\n\nfunction ExportProgressDialog() {\n  const dispatch = useDispatch()\n\n  const sseConnection = useRef(null)\n\n  const domain = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:5000/'\n\n  const isOpen = useSelector((state: any) => state.exportProcessDialog.isOpen)\n  const message = useSelector((state: any) => state.exportProcessDialog.message)\n  const operationId = useSelector((state: any) => state.exportProcessDialog.operationId)\n  const status = useSelector((state: any) => state.exportProcessDialog.status)\n\n  const celeryId = useSelector((state: any) => state.exportProcessDialog.celeryId)\n\n  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false)\n\n  const backgroundJobListener = (event) => {\n    const data = JSON.parse(event.data)\n    dispatch(exportProcessDialogActions.setMessage(data.message))\n    dispatch(exportProcessDialogActions.setStatus(data.status))\n\n    if (data.status === 'SUCCESS') {\n      sseConnection.current.removeEventListener(operationId, backgroundJobListener)\n      const redirectUrl = `${domain}make_a_list/get_result?operation_id=${operationId}&destination=${\n        data.destination\n      }&t=${Date.now()}`\n      window.open(redirectUrl)\n      setConfirmDialogOpen(false)\n      dispatch(exportProcessDialogActions.setOpen(false))\n    } else if (data.status === 'ERROR') {\n      setConfirmDialogOpen(false)\n    }\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      dispatch(exportProcessDialogActions.resetInitState())\n      if (sseConnection.current) {\n        sseConnection.current.close()\n        sseConnection.current = null\n      }\n    } else {\n      if (!sseConnection.current) {\n        sseConnection.current = new EventSource(`${domain}background_stream`)\n      }\n      sseConnection.current.addEventListener(operationId, backgroundJobListener)\n    }\n  }, [isOpen])\n\n  const cancelOperation = () => {\n    setConfirmDialogOpen(true)\n  }\n\n  const handleCancelOperation = () => {\n    dispatch(makeAListActions.stopMakeAList({ celery_id: celeryId }))\n    setConfirmDialogOpen(false)\n    dispatch(exportProcessDialogActions.setOpen(false))\n  }\n\n  const closeDialog = () => {\n    dispatch(exportProcessDialogActions.setOpen(false))\n  }\n\n  const renderButton: ExtraButton = {\n    label: status === 'SUCCESS' || status === 'ERROR' ? 'Close' : 'Cancel',\n    onClick: status === 'SUCCESS' || status === 'ERROR' ? closeDialog : cancelOperation\n  }\n\n  const SimpleConfirmationDialog = () => {\n    return (\n      <Dialog\n        open\n        // onClose={()=>{}}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">Confirm canceling exporting progress</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Are you sure want to cancel the exporting progress?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCancelOperation} color=\"primary\">\n            Yes\n          </Button>\n          <Button onClick={() => setConfirmDialogOpen(false)}>No</Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  return (\n    <>\n      <DialogMain\n        open={isOpen}\n        maxWidth=\"xs\"\n        fullWidth\n        extraButtons={renderButton}\n        bodyStyles={{ margin: 'auto', textAlign: 'center' }}\n      >\n        <Switch>\n          <Case condition={status === 'SUCCESS'}>\n            <CheckCircleRounded fontSize=\"large\" style={{ marginTop: '1rem' }} />\n          </Case>\n          <Case condition={status === 'ERROR'}>\n            <HighlightOffOutlined fontSize=\"large\" style={{ marginTop: '1rem' }} />\n          </Case>\n          <Default>\n            <CircularProgress style={{ marginTop: '1rem' }} />\n          </Default>\n        </Switch>\n\n        <Typography variant=\"body1\" style={{ marginTop: '1rem' }}>\n          {message}\n        </Typography>\n      </DialogMain>\n\n      {confirmDialogOpen ? SimpleConfirmationDialog() : ''}\n    </>\n  )\n}\n\nexport default ExportProgressDialog\n"]},"metadata":{},"sourceType":"module"}