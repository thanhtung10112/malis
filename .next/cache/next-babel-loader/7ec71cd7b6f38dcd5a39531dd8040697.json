{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\pages\\\\currencies.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '@/styles/page/layout';\nimport { useTranslation } from 'next-i18next';\nimport { DialogCurrencyCreateEdit, useConfirm, confirmConstant, AppLayout, EditIcon, CreateIcon, EnableIcon, DisableIcon, DeleteIcon, AppAutocompleteStyled } from '@/components';\nimport { currencyStore, commonStore } from '@/store/reducers';\nimport clsx from 'clsx';\nimport * as columnProperties from '@/utils/columnProperties';\nimport * as currency from '@/utils/currency';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nexport var __N_SSP = true;\nexport default function Currencies() {\n  _s();\n\n  var _this = this;\n\n  var _useTranslation = useTranslation('currency'),\n      t = _useTranslation.t;\n\n  var classes = useStyles();\n  var breadcrumbData = [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Basic Options',\n    href: '/jobs'\n  }, {\n    label: 'Currencies Management',\n    href: '/currencies'\n  }];\n\n  var _useConfirm = useConfirm(),\n      confirm = _useConfirm.confirm;\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(currencyStore.selectInitDataForList),\n      base_currency_list = _useSelector.base_currency_list,\n      user_base_currency = _useSelector.user_base_currency,\n      column_tooltips = _useSelector.column_tooltips;\n\n  var permissions = useSelector(currencyStore.selectPermissions);\n  var selectedRows = useSelector(commonStore.selectSelectedRows);\n  var initDataForList = useSelector(currencyStore.selectInitDataForList);\n  var isEmptySelectedRows = selectedRows.length <= 0;\n\n  var onChangeBaseCurrency = function onChangeBaseCurrency(event, optionValue) {\n    dispatch(commonStore.actions.setTableState({\n      page: 1\n    }));\n    dispatch(currencyStore.sagaChangeUserCurrency(optionValue));\n  };\n\n  var onOpenCreateDialog = function onOpenCreateDialog() {\n    dispatch(currencyStore.sagaOpenCreateDialog());\n  };\n\n  var onOpenUpdateDialog = function onOpenUpdateDialog(id) {\n    return function () {\n      dispatch(currencyStore.sagaOpenUpdateDialog(id));\n    };\n  };\n\n  var onExecuteActions = function onExecuteActions(operation) {\n    return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var description, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              description = getMessageConfirm(t, 'currency', selectedRows, operation);\n              _context.next = 3;\n              return confirm({\n                description: description\n              });\n\n            case 3:\n              result = _context.sent;\n\n              if (result === confirmConstant.actionTypes.OK) {\n                dispatch(commonStore.sagaExecuteOperation({\n                  entity: 'currency',\n                  operation: operation,\n                  operationList: selectedRows\n                }));\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n\n  var columns = [_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    field: 'id',\n    headerName: 'Edit',\n    description: column_tooltips.edit,\n    renderCell: function renderCell(param) {\n      return /*#__PURE__*/_jsxDEV(EditIcon, {\n        onClick: onOpenUpdateDialog(param.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 16\n      }, _this);\n    }\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.currency_id,\n    field: 'currency_id',\n    headerName: 'Code'\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.description,\n    field: 'description',\n    headerName: 'Description',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.rightColumn), {}, {\n    description: column_tooltips.multiplier,\n    field: 'multiplier',\n    headerName: 'Currency Multiplier',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.numberColumn), {}, {\n    description: column_tooltips.rate,\n    field: 'rate',\n    headerName: 'Rate',\n    flex: 0.05,\n    valueFormatter: function valueFormatter(params) {\n      return currency.format(params.value, {\n        precision: 6\n      });\n    }\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.rightColumn), {}, {\n    description: column_tooltips.round_to,\n    field: 'round_to',\n    headerName: 'Round to',\n    sortable: false,\n    disableColumnMenu: true,\n    flex: 0.05\n  }), _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.rightColumn), columnProperties.iconColumn), {}, {\n    description: column_tooltips.status,\n    field: 'status',\n    headerName: 'Status',\n    renderCell: function renderCell(param) {\n      return param.value ? /*#__PURE__*/_jsxDEV(EnableIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 45\n      }, _this) : /*#__PURE__*/_jsxDEV(DisableIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 62\n      }, _this);\n    }\n  })];\n  var buttons = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 18\n    }, this),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create),\n    onClick: onOpenCreateDialog\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 18\n    }, this),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions[\"delete\"]),\n    onClick: onExecuteActions('delete')\n  }, {\n    label: t('common:button.enable'),\n    startIcon: /*#__PURE__*/_jsxDEV(EnableIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 18\n    }, this),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable),\n    onClick: onExecuteActions('enable')\n  }, {\n    label: t('common:button.disable'),\n    startIcon: /*#__PURE__*/_jsxDEV(DisableIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 18\n    }, this),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable),\n    onClick: onExecuteActions('disable')\n  }];\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    entity: \"currency\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: initDataForList.wiki_page,\n    permissions: permissions,\n    Dialogs: /*#__PURE__*/_jsxDEV(DialogCurrencyCreateEdit, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 16\n    }, this),\n    Options: /*#__PURE__*/_jsxDEV(AppAutocompleteStyled, {\n      width: 180,\n      label: \"Base currency\",\n      className: classes.controlAutocomplete,\n      options: base_currency_list,\n      value: user_base_currency,\n      getOptionLabel: function getOptionLabel(option) {\n        return option.currency_id;\n      },\n      onChange: onChangeBaseCurrency\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this),\n    buttons: buttons,\n    tableProps: {\n      className: classes.currencyTable,\n      columns: columns,\n      getRowClassName: function getRowClassName(params) {\n        return clsx({\n          homeCurrency: !params.row.base_currency\n        });\n      },\n      isRowSelectable: function isRowSelectable(params) {\n        return Boolean(params.row.base_currency);\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Currencies, \"rGD5jN1dkkQdDTumVsnpig98TPY=\", false, function () {\n  return [useTranslation, useStyles, useConfirm, useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Currencies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Currencies\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/pages/currencies.tsx"],"names":["useDispatch","useSelector","useStyles","useTranslation","DialogCurrencyCreateEdit","useConfirm","confirmConstant","AppLayout","EditIcon","CreateIcon","EnableIcon","DisableIcon","DeleteIcon","AppAutocompleteStyled","currencyStore","commonStore","clsx","columnProperties","currency","getMessageConfirm","Currencies","t","classes","breadcrumbData","label","href","confirm","dispatch","selectInitDataForList","base_currency_list","user_base_currency","column_tooltips","permissions","selectPermissions","selectedRows","selectSelectedRows","initDataForList","isEmptySelectedRows","length","onChangeBaseCurrency","event","optionValue","actions","setTableState","page","sagaChangeUserCurrency","onOpenCreateDialog","sagaOpenCreateDialog","onOpenUpdateDialog","id","sagaOpenUpdateDialog","onExecuteActions","operation","description","result","actionTypes","OK","sagaExecuteOperation","entity","operationList","columns","defaultProperties","iconColumn","field","headerName","edit","renderCell","param","value","currency_id","flex","rightColumn","multiplier","numberColumn","rate","valueFormatter","params","format","precision","round_to","sortable","disableColumnMenu","status","buttons","startIcon","disabled","create","onClick","disable_enable","wiki_page","controlAutocomplete","option","className","currencyTable","getRowClassName","homeCurrency","row","base_currency","isRowSelectable","Boolean"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from 'react-redux'\nimport useStyles from '@/styles/page/layout'\nimport { useTranslation } from 'next-i18next'\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware'\n\nimport {\n  DialogCurrencyCreateEdit,\n  useConfirm,\n  confirmConstant,\n  AppLayout,\n  EditIcon,\n  CreateIcon,\n  EnableIcon,\n  DisableIcon,\n  DeleteIcon,\n  AppAutocompleteStyled\n} from '@/components'\n\nimport { currencyStore, commonStore } from '@/store/reducers'\n\nimport clsx from 'clsx'\n\nimport * as columnProperties from '@/utils/columnProperties'\nimport * as currency from '@/utils/currency'\nimport getMessageConfirm from '@/utils/getMessageConfirm'\n\nimport type { GridColumns } from '@material-ui/data-grid'\nimport type { BaseCurrency, CurrencyOperation } from '@/types/Currency'\n\nexport default function Currencies() {\n  const { t } = useTranslation('currency')\n\n  const classes = useStyles()\n\n  const breadcrumbData = [\n    { label: 'Home', href: '/' },\n    { label: 'Basic Options', href: '/jobs' },\n    { label: 'Currencies Management', href: '/currencies' }\n  ]\n\n  const { confirm } = useConfirm()\n\n  const dispatch = useDispatch()\n  const { base_currency_list, user_base_currency, column_tooltips } = useSelector(currencyStore.selectInitDataForList)\n  const permissions = useSelector(currencyStore.selectPermissions)\n  const selectedRows = useSelector(commonStore.selectSelectedRows)\n  const initDataForList = useSelector(currencyStore.selectInitDataForList)\n  const isEmptySelectedRows = selectedRows.length <= 0\n\n  const onChangeBaseCurrency = (event, optionValue: BaseCurrency) => {\n    dispatch(commonStore.actions.setTableState({ page: 1 }))\n    dispatch(currencyStore.sagaChangeUserCurrency(optionValue))\n  }\n\n  const onOpenCreateDialog = () => {\n    dispatch(currencyStore.sagaOpenCreateDialog())\n  }\n\n  const onOpenUpdateDialog = (id: number) => () => {\n    dispatch(currencyStore.sagaOpenUpdateDialog(id))\n  }\n\n  const onExecuteActions = (operation: CurrencyOperation) => async () => {\n    const description = getMessageConfirm(t, 'currency', selectedRows, operation)\n    const result = await confirm({ description })\n    if (result === confirmConstant.actionTypes.OK) {\n      dispatch(\n        commonStore.sagaExecuteOperation({\n          entity: 'currency',\n          operation,\n          operationList: selectedRows\n        })\n      )\n    }\n  }\n\n  const columns: GridColumns = [\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.iconColumn,\n      field: 'id',\n      headerName: 'Edit',\n      description: column_tooltips.edit,\n      renderCell: (param) => {\n        return <EditIcon onClick={onOpenUpdateDialog(param.value as number)} />\n      }\n    },\n    {\n      ...columnProperties.defaultProperties,\n      description: column_tooltips.currency_id,\n      field: 'currency_id',\n      headerName: 'Code'\n    },\n    {\n      ...columnProperties.defaultProperties,\n      description: column_tooltips.description,\n      field: 'description',\n      headerName: 'Description',\n      flex: 0.1\n    },\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.rightColumn,\n      description: column_tooltips.multiplier,\n      field: 'multiplier',\n      headerName: 'Currency Multiplier',\n      flex: 0.1\n    },\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.numberColumn,\n      description: column_tooltips.rate,\n      field: 'rate',\n      headerName: 'Rate',\n      flex: 0.05,\n      valueFormatter(params) {\n        return currency.format(params.value, { precision: 6 })\n      }\n    },\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.rightColumn,\n      description: column_tooltips.round_to,\n      field: 'round_to',\n      headerName: 'Round to',\n      sortable: false,\n      disableColumnMenu: true,\n      flex: 0.05\n    },\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.rightColumn,\n      ...columnProperties.iconColumn,\n      description: column_tooltips.status,\n      field: 'status',\n      headerName: 'Status',\n      renderCell: (param) => (param.value ? <EnableIcon /> : <DisableIcon />)\n    }\n  ]\n\n  const buttons = [\n    {\n      label: t('common:button.new'),\n      startIcon: <CreateIcon />,\n      disabled: !permissions?.create,\n      onClick: onOpenCreateDialog\n    },\n    {\n      label: t('common:button.delete'),\n      startIcon: <DeleteIcon />,\n      disabled: isEmptySelectedRows || !permissions?.delete,\n      onClick: onExecuteActions('delete')\n    },\n    {\n      label: t('common:button.enable'),\n      startIcon: <EnableIcon />,\n      disabled: isEmptySelectedRows || !permissions?.disable_enable,\n      onClick: onExecuteActions('enable')\n    },\n    {\n      label: t('common:button.disable'),\n      startIcon: <DisableIcon />,\n      disabled: isEmptySelectedRows || !permissions?.disable_enable,\n      onClick: onExecuteActions('disable')\n    }\n  ]\n\n  return (\n    <AppLayout\n      entity=\"currency\"\n      breadcrumbs={breadcrumbData}\n      wikiPage={initDataForList.wiki_page}\n      permissions={permissions}\n      Dialogs={<DialogCurrencyCreateEdit />}\n      Options={\n        <AppAutocompleteStyled\n          width={180}\n          label=\"Base currency\"\n          className={classes.controlAutocomplete}\n          options={base_currency_list}\n          value={user_base_currency}\n          getOptionLabel={(option) => option.currency_id}\n          onChange={onChangeBaseCurrency}\n        />\n      }\n      buttons={buttons}\n      tableProps={{\n        className: classes.currencyTable,\n        columns: columns,\n        getRowClassName(params) {\n          return clsx({ homeCurrency: !params.row.base_currency })\n        },\n        isRowSelectable(params) {\n          return Boolean(params.row.base_currency)\n        }\n      }}\n    />\n  )\n}\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'currency', 'advanced_filter'])\n"]},"metadata":{},"sourceType":"module"}