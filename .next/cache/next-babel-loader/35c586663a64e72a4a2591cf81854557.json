{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { actionTypes } from '@/utils/constant';\nexport const name = 'job';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nexport const transferListState = {\n  userAvailableList: [],\n  userGroup: [],\n  open: false\n};\nexport const jobDetail = {\n  job_id: '',\n  equipment_type: null,\n  language: null,\n  erection_site: null,\n  job_standard: [],\n  people_responsible: [],\n  squad_leader: [],\n  drawings_responsible: [],\n  contract_no: '',\n  contract_desc: '',\n  credit_letter: '',\n  logo: null,\n  additional_attributes: {},\n  job_currencies: [],\n  job_descriptions: [],\n  job_users: [],\n  job_expediting_dates: []\n};\nexport const initialState = {\n  dataList: [],\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: []\n  },\n  selectedJobCategory: {\n    description: '',\n    id: null,\n    parameter_id: ''\n  },\n  initDataForList: {\n    job_categories: [],\n    permissions: {\n      job: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  initDataForCE: {\n    currencies: [],\n    group_map: {\n      job_all: '',\n      job_drawing: '',\n      job_responsible: '',\n      job_squad_leader: ''\n    },\n    erection_sites: [],\n    parameters: {\n      EQTY: [],\n      JOAT: [],\n      PLLA: [],\n      PLNO: []\n    },\n    tooltip: '<span></span>',\n    job_template: jobDetail,\n    wiki_page: ''\n  },\n  transferListState,\n  keyMapping: null,\n  detail: jobDetail\n};\nconst jobSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      state.dialogState.historyLogs = payload;\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setOpenTransferList(state, {\n      payload\n    }) {\n      state.transferListState.open = payload;\n    },\n\n    setTransferUserAvailableList(state, {\n      payload\n    }) {\n      state.transferListState.userAvailableList = payload;\n    },\n\n    setTransferListUserGroup(state, {\n      payload\n    }) {\n      state.transferListState.userGroup = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    setSelectedCategory(state, {\n      payload\n    }) {\n      state.selectedJobCategory = payload;\n    },\n\n    setKeyMapping(state, {\n      payload\n    }) {\n      state.keyMapping = payload;\n    },\n\n    closeTransferList(state) {\n      state.transferListState = _objectSpread(_objectSpread({}, transferListState), {}, {\n        userGroup: state.transferListState.userGroup\n      });\n    },\n\n    setPermissions(state, {\n      payload\n    }) {\n      state.initDataForList.permissions.job = payload;\n    },\n\n    resetDetail(state) {\n      const jobStandard = state.initDataForCE.parameters.PLNO.map(item => _.pick(item, ['description', 'parameter_id', 'id']));\n      state.detail = _objectSpread(_objectSpread({}, jobDetail), {}, {\n        job_standard: jobStandard\n      });\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n}); // Actions\n\nexport const {\n  actions\n} = jobSlice; // Saga actions\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaUpdate = createAction(`${name}/${actionTypes.UPDATE}`);\nexport const sagaGetUserGroupMapping = createAction(`${name}/GET_USER_GROUP_MAPPING`); // Selector\n\nexport const selectState = state => state[name];\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport const selectJobCategories = createSelector(selectState, state => state.initDataForList.job_categories);\nexport const selectPermissions = createSelector(selectState, state => state.initDataForList.permissions.job);\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectInitDataForCE = createSelector(selectState, state => state.initDataForCE);\nexport const selectTransferListState = createSelector(selectState, state => state.transferListState);\nexport const selectDetail = createSelector(selectState, state => state.detail);\nexport const selectKeyMapping = createSelector(selectState, state => state.keyMapping);\nexport const selectSelectedJobCategory = createSelector(selectState, state => state.selectedJobCategory);\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport default jobSlice;","map":null,"metadata":{},"sourceType":"module"}