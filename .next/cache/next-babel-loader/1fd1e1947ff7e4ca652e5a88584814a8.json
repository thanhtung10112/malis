{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button, Checkbox, Typography, Tooltip } from '@material-ui/core';\nimport { DataTable, DataTableCellExpand, CreateIcon, CloseIcon, AppAutocompleteStyled } from '@/components/index';\nimport { Unless } from 'react-if';\nimport { useMemo, useState, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport useStyles from './styles';\nimport useStylesLayout from '@/styles/page/layout';\nimport clsx from 'clsx';\nimport { advancedFilterActions, commonStore } from '@/store/reducers';\nimport * as columnProperties from '@/utils/columnProperties';\n\nfunction FilterPresetList({\n  onChangeActiveTab\n}) {\n  // props.entity is the thing that you will pass to the backend to get the corresponding data for each module\n  const classes = useStyles();\n  const classesLayout = useStylesLayout();\n  const refDataGrid = useRef(null);\n  const {\n    0: idSelected,\n    1: setIdSelected\n  } = useState(null);\n  const dispatch = useDispatch();\n  const {\n    t\n  } = useTranslation(['common', 'advanced_filter']);\n  const defaultFilter = useSelector(advancedFilterActions.selectDefaultFilter);\n  const presetList = useSelector(advancedFilterActions.selectListData);\n  const filterType = useSelector(advancedFilterActions.selectFilterType);\n  const loading = useSelector(advancedFilterActions.selectLoading);\n  const entity = useSelector(commonStore.selectEntity);\n  const afPermissions = useSelector(advancedFilterActions.selectPermissions);\n  const filterDetail = useSelector(advancedFilterActions.selectFilterDetail);\n\n  const getOptionFilterList = () => {\n    const defaultOptions = [{\n      name: 'Owner',\n      value: 'own'\n    }, {\n      name: 'Shared',\n      value: 'shared'\n    }];\n\n    if (afPermissions.update_system_default_presets) {\n      defaultOptions.push({\n        name: 'System',\n        value: 'system'\n      });\n    }\n\n    return defaultOptions;\n  };\n\n  const filterOptions = useMemo(getOptionFilterList, [afPermissions.update_system_default_presets]);\n\n  const getColumnPresetList = () => {\n    const onwColumns = [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      field: 'name',\n      headerName: 'Name',\n      flex: 0.6\n    }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      headerName: 'Shared',\n      field: 'is_shared',\n\n      renderCell(params) {\n        if (!refDataGrid.current) {\n          refDataGrid.current = params.api;\n        }\n\n        const message = params.value ? t('advanced_filter:tooltip.unshare_checkbox') : t('advanced_filter:tooltip.share_checkbox');\n        return /*#__PURE__*/_jsx(Tooltip, {\n          title: message,\n          children: /*#__PURE__*/_jsx(Checkbox, {\n            color: \"primary\",\n            checked: params.value,\n            onChange: onShareFilter(params.id)\n          })\n        });\n      }\n\n    })];\n    const sharedColumns = [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      field: 'name',\n      headerName: 'Name',\n      flex: 0.6,\n\n      renderCell(params) {\n        if (!refDataGrid.current) {\n          refDataGrid.current = params.api;\n        }\n\n        return /*#__PURE__*/_jsx(DataTableCellExpand, {\n          value: params.value,\n          width: params.colDef.width\n        });\n      }\n\n    }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      field: 'created_by',\n      headerName: t('advanced_filter:list.owner')\n    })];\n\n    if (filterType === 'own') {\n      return onwColumns;\n    }\n\n    return sharedColumns;\n  };\n\n  const columnsMyPreset = useMemo(getColumnPresetList, [filterType]);\n  useEffect(() => {\n    setIdSelected(filterDetail.id);\n  }, [filterDetail]);\n\n  const onChangeFilterType = (_, {\n    value\n  }) => {\n    dispatch(advancedFilterActions.changeFilterType(value));\n    onChangeActiveTab(null, 0);\n  };\n\n  const onCreateFilter = () => {\n    var _refDataGrid$current;\n\n    (_refDataGrid$current = refDataGrid.current) === null || _refDataGrid$current === void 0 ? void 0 : _refDataGrid$current.setSelectionModel([]);\n    dispatch(advancedFilterActions.setEditMode(false));\n    dispatch(advancedFilterActions.resetFilterDetail(entity));\n    onChangeActiveTab(null, 0);\n  };\n\n  const onClearUserDefault = () => {\n    var _refDataGrid$current2;\n\n    (_refDataGrid$current2 = refDataGrid.current) === null || _refDataGrid$current2 === void 0 ? void 0 : _refDataGrid$current2.setSelectionModel([]);\n    dispatch(advancedFilterActions.clearDefaultFilter());\n  };\n\n  const onSelectFilterDetail = id => () => {\n    var _refDataGrid$current3;\n\n    (_refDataGrid$current3 = refDataGrid.current) === null || _refDataGrid$current3 === void 0 ? void 0 : _refDataGrid$current3.setSelectionModel([]);\n    dispatch(advancedFilterActions.getDetail(id));\n  };\n\n  const onShareFilter = id => (_, is_shared) => {\n    const data = {\n      id,\n      is_shared\n    };\n    dispatch(advancedFilterActions.share(data));\n  };\n\n  const onSelectRowPresetDetail = params => {\n    onChangeActiveTab(null, 0);\n    onSelectFilterDetail(params.id)();\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: classes.filterListTopSection,\n      children: [/*#__PURE__*/_jsx(AppAutocompleteStyled, {\n        primaryKeyOption: \"value\",\n        label: \"Preset List\",\n        options: filterOptions,\n        defaultValue: filterOptions[0],\n        onChange: onChangeFilterType,\n        renderOption: option => option.name\n      }), /*#__PURE__*/_jsx(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n        className: clsx(classesLayout.buttonControl, 'new', classes.btnCreatePreset),\n        onClick: onCreateFilter,\n        style: {\n          background: '#0A65FF',\n          color: 'white'\n        },\n        children: \"New preset\"\n      })]\n    }), /*#__PURE__*/_jsxs(Typography, {\n      component: \"div\",\n      className: classes.wrapLabelFilter,\n      children: [/*#__PURE__*/_jsxs(Typography, {\n        component: \"strong\",\n        variant: \"body1\",\n        children: [t('advanced_filter:filter_presets.default_filter'), \"\\xA0\"]\n      }), /*#__PURE__*/_jsx(Typography, {\n        component: \"span\",\n        variant: \"body1\",\n        className: classes.defaultFilterLink,\n        noWrap: true,\n        onClick: onSelectFilterDetail(defaultFilter.id),\n        children: defaultFilter.name\n      }), /*#__PURE__*/_jsx(Unless, {\n        condition: defaultFilter.is_system_default,\n        children: /*#__PURE__*/_jsx(CloseIcon, {\n          onClick: onClearUserDefault\n        })\n      })]\n    }), /*#__PURE__*/_jsx(DataTable, {\n      loading: loading.table,\n      tableHeight: 370,\n      disableColumnMenu: true,\n      columns: columnsMyPreset,\n      rows: presetList,\n      hideFooter: true,\n      onRowClick: onSelectRowPresetDetail,\n      getRowClassName: params => clsx({\n        [classes.presetSelected]: params.id === idSelected\n      }),\n      onCellClick: (params, event) => {\n        if (params.field === 'is_shared') {\n          event.stopPropagation();\n        }\n      }\n    })]\n  });\n}\n\nexport default FilterPresetList;","map":null,"metadata":{},"sourceType":"module"}