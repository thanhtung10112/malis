{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, takeLatest, put } from 'redux-saga/effects';\nimport { call, select, all } from 'typed-redux-saga';\nimport { advancedFilterActions, commonStore, currencyStore } from '@/store/reducers';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport _ from 'lodash';\nimport currencyApi from '@/apis/currency.api';\nimport * as constant from '@/utils/constant';\nimport AppNumber from '@/helper/AppNumber';\n\nfunction* fetchInitDataForList() {\n  const userBaseCurrency = yield* select(currencyStore.selectUserBaseCurrency);\n  const data = yield call(currencyApi.getInitDataForList);\n\n  if (!_.isNull(userBaseCurrency.id)) {\n    data.user_base_currency = userBaseCurrency;\n  }\n\n  yield put(currencyStore.actions.setInitDataForList(data));\n}\n\nfunction* fetchList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData,\n    baseCurrency\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    baseCurrency: select(currencyStore.selectUserBaseCurrency)\n  });\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(currencyApi.getList, _objectSpread({\n    base_currency_id: baseCurrency.id,\n    page,\n    per_page,\n    s: searchQuery\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(currencyStore.actions.setDataList(data.currency_list));\n}\n\nfunction* fetchInitDataForCE() {\n  const {\n    id: base_currency_id\n  } = yield* select(currencyStore.selectUserBaseCurrency);\n  const data = yield call(currencyApi.getInitDataForCE, {\n    base_currency_id\n  });\n  yield put(currencyStore.actions.setInitDataForCE(data));\n}\n\nfunction* fetchDetail(id) {\n  const {\n    currency\n  } = yield call(currencyApi.getDetail, id);\n  currency.rate = AppNumber.format(currency.rate, constant.currencyRateFormat);\n  yield put(currencyStore.actions.setDetail(currency));\n}\n\nexport function* getCurrencyList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForList);\n    const permissions = yield* select(currencyStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* changeUserCurrency({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield put(currencyStore.actions.setUserBaseCurrency(payload));\n    yield call(fetchList);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* openCurrencyCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    yield put(currencyStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* createCurrency({\n  payload\n}) {\n  yield put(currencyStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      message\n    } = yield call(currencyApi.create, payload);\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(currencyStore.actions.resetDetail())]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(currencyStore.actions.setDialogStateLoading(false));\n}\nexport function* openCurrencyUpdateDialog({\n  payload: id\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    yield call(fetchDetail, id);\n    yield put(currencyStore.actions.setDialogState({\n      open: true,\n      editMode: true\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* updateCurrency({\n  payload\n}) {\n  yield put(currencyStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      id,\n      formData\n    } = payload;\n    const {\n      message\n    } = yield call(currencyApi.update, id, formData);\n    yield call(closeCurrencyDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(currencyStore.actions.setDialogStateLoading(false));\n}\nexport function* closeCurrencyDialog() {\n  try {\n    yield put(currencyStore.actions.setDialogStateOpen(false));\n    yield call(getCurrencyList);\n    yield put(currencyStore.actions.resetDetail());\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\n\nfunction* currencySaga() {\n  yield takeEvery(currencyStore.sagaGetList, getCurrencyList);\n  yield takeEvery(currencyStore.sagaCreate, createCurrency);\n  yield takeLatest(currencyStore.sagaOpenCreateDialog, openCurrencyCreateDialog);\n  yield takeEvery(currencyStore.sagaOpenUpdateDialog, openCurrencyUpdateDialog);\n  yield takeEvery(currencyStore.sagaUpdate, updateCurrency);\n  yield takeEvery(currencyStore.sagaCloseDialog, closeCurrencyDialog);\n  yield takeEvery(currencyStore.sagaChangeUserCurrency, changeUserCurrency);\n}\n\nexport default currencySaga;","map":null,"metadata":{},"sourceType":"module"}