{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, put, call, takeLatest } from 'redux-saga/effects';\nimport { select, all } from 'typed-redux-saga';\nimport { commonStore, advancedFilterActions, equivalenceStore } from '@/store/reducers';\nimport equivalenceApi from '@/apis/equivalence.api';\nimport * as errorSaga from '@/store/saga/errorSaga';\n\nfunction* fetchInitDataForList() {\n  const data = yield call(equivalenceApi.getInitDataForList);\n  yield put(equivalenceStore.actions.setInitDataForList(data));\n}\n\nfunction* fetchInitDataForCE() {\n  const equivalenceType = yield* select(equivalenceStore.selectEquivalenceType);\n  const data = yield call(equivalenceApi.getInitDataForCE, {\n    equivalence_type: equivalenceType\n  });\n  yield put(equivalenceStore.actions.setInitDataForCE(data));\n  yield put(equivalenceStore.actions.setDetail({\n    equiv_id: data.next_code\n  }));\n}\n\nfunction* fetchList() {\n  const equivalenceType = yield* select(equivalenceStore.selectEquivalenceType);\n  const {\n    tableState,\n    searchQuery,\n    filterData\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData)\n  });\n  const {\n    page,\n    per_page\n  } = tableState;\n  const {\n    equivalences\n  } = yield call(equivalenceApi.getList, equivalenceType, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: equivalences.length\n  }));\n  yield put(equivalenceStore.actions.setDataList(equivalences));\n}\n\nfunction* getEquivalenceList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForList);\n    const permissions = yield* select(equivalenceStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* fetchDetail(id) {\n  const {\n    equivalence\n  } = yield call(equivalenceApi.getDetail, id);\n  yield put(equivalenceStore.actions.setDetail(equivalence));\n}\n\nfunction* openEquivCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    yield put(equivalenceStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* createEquiv({\n  payload\n}) {\n  yield put(equivalenceStore.actions.setDialogStateLoading(true));\n\n  try {\n    const equivalenceType = yield* select(equivalenceStore.selectEquivalenceType);\n    const {\n      message\n    } = yield call(equivalenceApi.create, payload);\n    const {\n      generated_code\n    } = yield call(equivalenceApi.getNextCode, equivalenceType, null);\n    yield put(commonStore.actions.setSuccessMessage(message));\n    yield put(equivalenceStore.actions.setDetail(_objectSpread(_objectSpread({}, equivalenceStore.equivalenceDetail), {}, {\n      equiv_id: generated_code\n    })));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(equivalenceStore.actions.setDialogStateLoading(false));\n}\n\nfunction* closeEquivDialog() {\n  try {\n    yield put(equivalenceStore.actions.setDialogStateOpen(false));\n    yield call(getEquivalenceList);\n    yield put(equivalenceStore.actions.resetDetail());\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\n\nfunction* openEquivUpdateDialog({\n  payload: id\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    yield call(fetchDetail, id);\n    yield put(equivalenceStore.actions.setDialogState({\n      open: true,\n      editMode: true\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* updateEquiv({\n  payload\n}) {\n  yield put(equivalenceStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      id,\n      formData\n    } = payload;\n    const {\n      message\n    } = yield call(equivalenceApi.update, id, formData);\n    yield call(closeEquivDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(equivalenceStore.actions.setDialogStateLoading(false));\n}\n\nfunction* getNextEquivCode({\n  payload\n}) {\n  yield put(equivalenceStore.actions.setDialogStateLoading(true));\n\n  try {\n    const equivalenceType = yield* select(equivalenceStore.selectEquivalenceType);\n    const {\n      generated_code\n    } = yield call(equivalenceApi.getNextCode, equivalenceType, payload.equiv_id);\n    payload.equiv_id = generated_code;\n    yield put(equivalenceStore.actions.setDetail(payload));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(equivalenceStore.actions.setDialogStateLoading(false));\n}\n\nfunction* equivalenceSaga() {\n  yield takeEvery(equivalenceStore.sagaGetList, getEquivalenceList);\n  yield takeEvery(equivalenceStore.sagaCreate, createEquiv);\n  yield takeEvery(equivalenceStore.sagaOpenCreateDialog, openEquivCreateDialog);\n  yield takeEvery(equivalenceStore.sagaCloseDialog, closeEquivDialog);\n  yield takeEvery(equivalenceStore.sagaOpenUpdateDialog, openEquivUpdateDialog);\n  yield takeEvery(equivalenceStore.sagaUpdate, updateEquiv);\n  yield takeLatest(equivalenceStore.sagaGetNextCode, getNextEquivCode);\n}\n\nexport default equivalenceSaga;","map":null,"metadata":{},"sourceType":"module"}