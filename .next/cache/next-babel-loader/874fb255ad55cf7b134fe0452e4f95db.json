{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { createWrapper } from 'next-redux-wrapper';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '@/store/saga/rootSaga';\nimport rootReducer from '@/store/reducers/rootReducer';\nexport const makeStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [...getDefaultMiddleware({\n      thunk: false,\n      immutableCheck: false\n    }), ...middlewares],\n    devTools: process.env.NEXT_PUBLIC_MODE === 'develop'\n  });\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\nexport const wrapper = createWrapper(makeStore, {\n  debug: process.env.NEXT_PUBLIC_MODE === 'develop'\n});","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/config.ts"],"names":["configureStore","getDefaultMiddleware","createWrapper","createSagaMiddleware","rootSaga","rootReducer","makeStore","sagaMiddleware","middlewares","store","reducer","middleware","thunk","immutableCheck","devTools","process","env","NEXT_PUBLIC_MODE","run","wrapper","debug"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,oBAAzB,QAA4D,kBAA5D;AACA,SAAoBC,aAApB,QAAyC,oBAAzC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,OAAO,MAAMC,SAAoB,GAAG,MAAa;AAC/C,QAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AACA,QAAMK,WAAW,GAAG,CAACD,cAAD,CAApB;AAEA,QAAME,KAAK,GAAGT,cAAc,CAAC;AAC3BU,IAAAA,OAAO,EAAEL,WADkB;AAE3BM,IAAAA,UAAU,EAAE,CAAC,GAAGV,oBAAoB,CAAC;AAAEW,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,cAAc,EAAE;AAAhC,KAAD,CAAxB,EAAmE,GAAGL,WAAtE,CAFe;AAG3BM,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBAAZ,KAAiC;AAHhB,GAAD,CAA5B;AAMAV,EAAAA,cAAc,CAACW,GAAf,CAAmBd,QAAnB;AAEA,SAAOK,KAAP;AACD,CAbM;AAeP,OAAO,MAAMU,OAAO,GAAGjB,aAAa,CAACI,SAAD,EAAY;AAC9Cc,EAAAA,KAAK,EAAEL,OAAO,CAACC,GAAR,CAAYC,gBAAZ,KAAiC;AADM,CAAZ,CAA7B","sourcesContent":["import { configureStore, getDefaultMiddleware, Store } from '@reduxjs/toolkit'\nimport { MakeStore, createWrapper } from 'next-redux-wrapper'\nimport createSagaMiddleware from 'redux-saga'\n\nimport rootSaga from '@/store/saga/rootSaga'\nimport rootReducer from '@/store/reducers/rootReducer'\n\nexport const makeStore: MakeStore = (): Store => {\n  const sagaMiddleware = createSagaMiddleware()\n  const middlewares = [sagaMiddleware]\n\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [...getDefaultMiddleware({ thunk: false, immutableCheck: false }), ...middlewares],\n    devTools: process.env.NEXT_PUBLIC_MODE === 'develop'\n  })\n\n  sagaMiddleware.run(rootSaga)\n\n  return store\n}\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: process.env.NEXT_PUBLIC_MODE === 'develop'\n})\n"]},"metadata":{},"sourceType":"module"}