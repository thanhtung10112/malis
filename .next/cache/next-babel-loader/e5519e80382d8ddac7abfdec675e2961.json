{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Paper } from '@material-ui/core';\nimport { DataTableTextField, DialogCodeEditor, DataTableCellExpand, DataTable } from '@/components/index';\nimport { useController } from 'react-hook-form';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport * as columnProperties from '@/utils/columnProperties';\n\nfunction TableAttributes(props) {\n  const {\n    attributes,\n    parameterId,\n    config\n  } = props,\n        formProps = _objectWithoutProperties(props, [\"attributes\", \"parameterId\", \"config\"]);\n\n  const attributeList = React.useMemo(() => {\n    if (_.isEmpty(attributes)) {\n      return [];\n    }\n\n    return attributes.split(';').map(attr => {\n      return {\n        attr\n      };\n    });\n  }, [attributes]);\n  const [codeEditorState, setCodeEditorState] = React.useState({\n    isOpen: false,\n    value: '',\n    attribute: '',\n    mode: '',\n    guideline: ''\n  });\n  const {\n    field\n  } = useController(_objectSpread({}, formProps));\n\n  const getValueAttribute = attr => {\n    const valueAttr = field.value[attr];\n    return valueAttr || '';\n  };\n\n  const isMarkdownField = attr => {\n    const queryFields = ['columns_definition', 'pre_select_query', 'from_clause'];\n    return parameterId === 'TTIP' || parameterId === 'MKAL' && queryFields.includes(attr);\n  };\n\n  const onChangeAttr = (id, value) => {\n    field.onChange(immer(field.value, draft => {\n      draft[id] = value;\n    }));\n  };\n\n  const handleDbClickToEdit = (params, event) => {\n    const {\n      attr\n    } = params.row;\n\n    if (isMarkdownField(attr)) {\n      handleOpenCodeEditor(attr);\n      event.stopPropagation();\n    }\n  };\n\n  const handleOpenCodeEditor = attr => {\n    setCodeEditorState(prevState => immer(prevState, draft => {\n      var _config$attributes$at, _config$attributes$at2;\n\n      draft.value = getValueAttribute(attr);\n      draft.attribute = attr;\n      draft.mode = (config === null || config === void 0 ? void 0 : (_config$attributes$at = config.attributes[attr]) === null || _config$attributes$at === void 0 ? void 0 : _config$attributes$at.mode) || 'json';\n      draft.guideline = (config === null || config === void 0 ? void 0 : (_config$attributes$at2 = config.attributes[attr]) === null || _config$attributes$at2 === void 0 ? void 0 : _config$attributes$at2.guideline) || '(no guideline)';\n      draft.isOpen = true;\n    }));\n  };\n\n  const onCodeEditorClose = () => {\n    setCodeEditorState(prevState => immer(prevState, draft => {\n      draft.isOpen = false;\n    }));\n  };\n\n  const onCodeEditorConfirm = (value, attribute) => {\n    field.onChange(immer(field.value, draft => {\n      draft[attribute] = value;\n    }));\n    onCodeEditorClose();\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Paper, {\n      elevation: 1,\n      children: /*#__PURE__*/_jsx(DataTable, {\n        tableHeight: 200,\n        rows: attributeList,\n        hideFooter: true,\n        onCellDoubleClick: handleDbClickToEdit,\n        getRowId: params => params.attr,\n        columns: [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n          field: 'attr',\n          headerName: 'Attribute',\n          sortable: false,\n          width: 150\n        }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Value')), {}, {\n          field: 'raw_value',\n          flex: 0.75,\n\n          valueGetter(params) {\n            const {\n              attr\n            } = params.row;\n            const value = getValueAttribute(attr);\n            return value;\n          },\n\n          renderEditCell(params) {\n            return /*#__PURE__*/_jsx(DataTableTextField, {\n              params: params,\n              onChangeValue: onChangeAttr\n            });\n          },\n\n          renderCell(params) {\n            const {\n              attr\n            } = params.row;\n\n            if (isMarkdownField(attr)) {\n              return /*#__PURE__*/_jsx(\"div\", {\n                children: params.value\n              });\n            }\n\n            return /*#__PURE__*/_jsx(DataTableCellExpand, {\n              value: params.value,\n              width: params.colDef.width\n            });\n          }\n\n        })]\n      })\n    }), /*#__PURE__*/_jsx(DialogCodeEditor, _objectSpread(_objectSpread({}, codeEditorState), {}, {\n      onClose: onCodeEditorClose,\n      onConfirm: onCodeEditorConfirm\n    }))]\n  });\n}\n\nexport default TableAttributes;","map":null,"metadata":{},"sourceType":"module"}