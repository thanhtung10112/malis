{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport var name = 'equivalence';\nexport var resetState = createAction(\"\".concat(name, \"/\").concat(actionTypes.RESET_STATE));\nexport var dialogState = {\n  open: false,\n  loading: false\n};\nexport var equivalenceDetail = {\n  equiv_id: null,\n  description: '',\n  equiv_type: null,\n  image: '',\n  standards: []\n};\nexport var initialState = {\n  equivalenceType: '',\n  dialogState: dialogState,\n  dataList: [],\n  initDataForList: {\n    permissions: {\n      manufacturing_standard: null,\n      material_standard: null\n    },\n    wiki_page: {\n      manufacturing_standard: '',\n      material_standard: ''\n    },\n    column_tooltips: {\n      manufacturing_standard: {},\n      material_standard: {}\n    }\n  },\n  initDataForCE: {\n    parameters: {\n      PLNO: []\n    },\n    next_code: 0,\n    wiki_page: ''\n  },\n  detail: equivalenceDetail\n};\nvar equivalenceSlice = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    setEquivalenceType: function setEquivalenceType(state, _ref) {\n      var payload = _ref.payload;\n      state.equivalenceType = payload;\n    },\n    setDialogState: function setDialogState(state, _ref2) {\n      var payload = _ref2.payload;\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n    setDialogStateOpen: function setDialogStateOpen(state, _ref3) {\n      var payload = _ref3.payload;\n      state.dialogState.open = payload;\n    },\n    setDialogStateLoading: function setDialogStateLoading(state, _ref4) {\n      var payload = _ref4.payload;\n      state.dialogState.loading = payload;\n    },\n    setDataList: function setDataList(state, _ref5) {\n      var payload = _ref5.payload;\n      state.dataList = payload;\n    },\n    setDetail: function setDetail(state, _ref6) {\n      var payload = _ref6.payload;\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n    setInitDataForCE: function setInitDataForCE(state, _ref7) {\n      var payload = _ref7.payload;\n      state.initDataForCE = payload;\n    },\n    setInitDataForList: function setInitDataForList(state, _ref8) {\n      var payload = _ref8.payload;\n      state.initDataForList = payload;\n    },\n    resetDetail: function resetDetail(state) {\n      state.detail = _objectSpread({}, equivalenceDetail);\n    },\n    setNextCode: function setNextCode(state, _ref9) {\n      var payload = _ref9.payload;\n      state.initDataForCE.next_code = payload;\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n}); // Actions\n\nvar actions = equivalenceSlice.actions; // Saga actions\n\nexport { actions };\nexport var sagaGetList = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_LIST));\nexport var sagaOpenCreateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_CREATE_DIALOG));\nexport var sagaOpenUpdateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_UPDATE_DIALOG));\nexport var sagaCloseDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.CLOSE_DIALOG));\nexport var sagaCreate = createAction(\"\".concat(name, \"/\").concat(actionTypes.CREATE));\nexport var sagaUpdate = createAction(\"\".concat(name, \"/\").concat(actionTypes.UPDATE));\nexport var sagaGetNextCode = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_NEXT_CODE)); // Selector\n\nexport var selectState = function selectState(state) {\n  return state[name];\n};\nexport var selectEquivalenceType = createSelector(selectState, function (state) {\n  return state.equivalenceType;\n});\nexport var selectDialogState = createSelector(selectState, function (state) {\n  return state.dialogState;\n});\nexport var selectDataList = createSelector(selectState, function (state) {\n  return state.dataList;\n});\nexport var selectDetail = createSelector(selectState, function (state) {\n  return state.detail;\n});\nexport var selectPermissions = createSelector(selectState, function (state) {\n  var initDataForList = state.initDataForList,\n      equivalenceType = state.equivalenceType;\n\n  if (!equivalenceType) {\n    return null;\n  }\n\n  return initDataForList.permissions[equivalenceType];\n});\nexport var selectInitDataForCE = createSelector(selectState, function (state) {\n  return state.initDataForCE;\n});\nexport var selectInitDataForList = createSelector(selectState, function (state) {\n  return state.initDataForList;\n});\nexport default equivalenceSlice;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/reducers/equivalence.reducer.ts"],"names":["createSlice","createAction","createSelector","actionTypes","name","resetState","RESET_STATE","dialogState","open","loading","equivalenceDetail","equiv_id","description","equiv_type","image","standards","initialState","equivalenceType","dataList","initDataForList","permissions","manufacturing_standard","material_standard","wiki_page","column_tooltips","initDataForCE","parameters","PLNO","next_code","detail","equivalenceSlice","reducers","setEquivalenceType","state","payload","setDialogState","setDialogStateOpen","setDialogStateLoading","setDataList","setDetail","setInitDataForCE","setInitDataForList","resetDetail","setNextCode","extraReducers","type","actions","sagaGetList","GET_LIST","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaCloseDialog","CLOSE_DIALOG","sagaCreate","CREATE","sagaUpdate","UPDATE","sagaGetNextCode","GET_NEXT_CODE","selectState","selectEquivalenceType","selectDialogState","selectDataList","selectDetail","selectPermissions","selectInitDataForCE","selectInitDataForList"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction, createAction, createSelector } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\n\nimport type { RootReducerType } from './rootReducer'\nimport type {\n  EquivalenceInitDataForList,\n  EquivalenceDetail,\n  EquivalenceInitDataForCE,\n  EquivalenceType\n} from '@/types/Equivalence'\n\nexport const name = 'equivalence'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const dialogState = {\n  open: false,\n  loading: false\n}\n\nexport const equivalenceDetail = {\n  equiv_id: null,\n  description: '',\n  equiv_type: null,\n  image: '',\n  standards: []\n} as EquivalenceDetail\n\nexport const initialState = {\n  equivalenceType: '' as EquivalenceType,\n  dialogState,\n  dataList: [],\n  initDataForList: {\n    permissions: {\n      manufacturing_standard: null,\n      material_standard: null\n    },\n    wiki_page: {\n      manufacturing_standard: '',\n      material_standard: ''\n    },\n    column_tooltips: {\n      manufacturing_standard: {},\n      material_standard: {}\n    }\n  } as EquivalenceInitDataForList,\n  initDataForCE: {\n    parameters: {\n      PLNO: []\n    },\n    next_code: 0,\n    wiki_page: ''\n  } as EquivalenceInitDataForCE,\n  detail: equivalenceDetail\n}\n\nconst equivalenceSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setEquivalenceType(state, { payload }: PayloadAction<EquivalenceType>) {\n      state.equivalenceType = payload\n    },\n    setDialogState(state, { payload }: PayloadAction<Partial<typeof initialState.dialogState>>) {\n      state.dialogState = {\n        ...state.dialogState,\n        ...payload\n      }\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setDataList(state, { payload }: PayloadAction<EquivalenceDetail[]>) {\n      state.dataList = payload\n    },\n    setDetail(state, { payload }: PayloadAction<Partial<EquivalenceDetail>>) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<EquivalenceInitDataForCE>) {\n      state.initDataForCE = payload\n    },\n    setInitDataForList(state, { payload }: PayloadAction<EquivalenceInitDataForList>) {\n      state.initDataForList = payload\n    },\n    resetDetail(state) {\n      state.detail = { ...equivalenceDetail }\n    },\n    setNextCode(state, { payload }: PayloadAction<number>) {\n      state.initDataForCE.next_code = payload\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\n// Actions\nexport const { actions } = equivalenceSlice\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaCreate = createAction<FormData>(`${name}/${actionTypes.CREATE}`)\nexport const sagaUpdate = createAction<{ id: number; formData: FormData }>(`${name}/${actionTypes.UPDATE}`)\nexport const sagaGetNextCode = createAction<EquivalenceDetail>(`${name}/${actionTypes.GET_NEXT_CODE}`)\n\n// Selector\nexport const selectState = (state: RootReducerType) => state[name]\nexport const selectEquivalenceType = createSelector(selectState, (state) => state.equivalenceType)\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\nexport const selectDetail = createSelector(selectState, (state) => state.detail)\nexport const selectPermissions = createSelector(selectState, (state) => {\n  const { initDataForList, equivalenceType } = state\n  if (!equivalenceType) {\n    return null\n  }\n  return initDataForList.permissions[equivalenceType]\n})\nexport const selectInitDataForCE = createSelector(selectState, (state) => state.initDataForCE)\n\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\n\nexport default equivalenceSlice\n"]},"metadata":{},"sourceType":"module"}