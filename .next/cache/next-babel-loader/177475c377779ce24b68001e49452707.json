{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm, Controller } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport Head from 'next/head';\nimport { Avatar, Button, CssBaseline, TextField, FormControlLabel, Checkbox, Typography, Container, LinearProgress } from '@material-ui/core';\nimport { Lock as LockIcon } from '@material-ui/icons';\nimport { When } from 'react-if';\nimport useStyles from '@/styles/page/login';\nimport { commonStore, authStore } from '@/store/reducers';\n\nfunction Login() {\n  var _loginForm$errors$use, _loginForm$errors$pas;\n\n  var classes = useStyles();\n  var dispatch = useDispatch();\n  var authencationState = useSelector(authStore.selectState);\n  var messageState = useSelector(commonStore.selectMessageState);\n  var defaultData = {\n    user_id: '',\n    password: '',\n    remember: true\n  };\n  var validationSchema = yup.object({\n    user_id: yup.string().required('User is required'),\n    password: yup.string().required('Password is required')\n  });\n  var resolver = yupResolver(validationSchema);\n  var loginForm = useForm({\n    resolver: resolver,\n    shouldUnregister: false,\n    defaultValues: _objectSpread({}, defaultData)\n  });\n  useEffect(function () {\n    if (authencationState.access_token) {\n      loginForm.clearErrors();\n    }\n  }, [authencationState]);\n  var onLogin = loginForm.handleSubmit(function (data) {\n    dispatch(authStore.sagaLogin(data));\n    dispatch(commonStore.actions.setDisplayMessage(false));\n  });\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"Sign in\"\n      })\n    }), /*#__PURE__*/_jsxs(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      className: classes.wrapLogin,\n      children: [/*#__PURE__*/_jsx(CssBaseline, {}), /*#__PURE__*/_jsxs(\"div\", {\n        className: classes.loginForm,\n        role: \"login-form\",\n        children: [/*#__PURE__*/_jsx(When, {\n          condition: authencationState.loading,\n          children: /*#__PURE__*/_jsx(LinearProgress, {\n            className: classes.progress\n          })\n        }), /*#__PURE__*/_jsx(Avatar, {\n          className: classes.topIcon,\n          children: /*#__PURE__*/_jsx(LockIcon, {})\n        }), /*#__PURE__*/_jsx(Typography, {\n          component: \"h1\",\n          variant: \"h5\",\n          className: classes.loginTitle,\n          role: \"heading\",\n          children: \"Sign in\"\n        }), /*#__PURE__*/_jsxs(\"form\", {\n          onSubmit: onLogin,\n          role: \"form\",\n          children: [/*#__PURE__*/_jsx(When, {\n            condition: messageState.display,\n            children: /*#__PURE__*/_jsx(\"div\", {\n              role: \"alert\",\n              className: classes.error,\n              children: messageState.message\n            })\n          }), /*#__PURE__*/_jsx(TextField, {\n            required: true,\n            className: classes.textField,\n            label: \"Username\",\n            name: \"user_id\",\n            role: \"input\",\n            inputProps: {\n              'aria-label': 'user_id'\n            },\n            inputRef: loginForm.register,\n            error: Boolean(loginForm.errors.user_id),\n            helperText: (_loginForm$errors$use = loginForm.errors.user_id) === null || _loginForm$errors$use === void 0 ? void 0 : _loginForm$errors$use.message\n          }), /*#__PURE__*/_jsx(TextField, {\n            required: true,\n            type: \"password\",\n            className: classes.textField,\n            label: \"Password\",\n            name: \"password\",\n            role: \"input\",\n            inputProps: {\n              'aria-label': 'password'\n            },\n            error: Boolean(loginForm.errors.password),\n            helperText: (_loginForm$errors$pas = loginForm.errors.password) === null || _loginForm$errors$pas === void 0 ? void 0 : _loginForm$errors$pas.message,\n            inputRef: loginForm.register\n          }), /*#__PURE__*/_jsx(Controller, {\n            name: \"remember\",\n            control: loginForm.control,\n            render: function render(_ref) {\n              var _onChange = _ref.onChange,\n                  props = _objectWithoutProperties(_ref, [\"onChange\"]);\n\n              var remember = loginForm.watch('remember');\n              return /*#__PURE__*/_jsx(FormControlLabel, _objectSpread(_objectSpread({}, props), {}, {\n                className: classes.checkbox,\n                label: \"Remember\",\n                onChange: function onChange(_, checked) {\n                  _onChange(checked);\n                },\n                checked: remember,\n                control: /*#__PURE__*/_jsx(Checkbox, {\n                  inputProps: {\n                    'aria-label': 'remember'\n                  }\n                })\n              }));\n            }\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: classes.wrapButton,\n            children: /*#__PURE__*/_jsx(Button, {\n              type: \"submit\",\n              fullWidth: true,\n              variant: \"contained\",\n              color: \"primary\",\n              className: classes.submitButton,\n              disableElevation: true,\n              role: \"button\",\n              \"aria-pressed\": \"true\",\n              children: \"Sign in\"\n            })\n          })]\n        })]\n      })]\n    })]\n  });\n}\n\nexport var __N_SSP = true;\nexport default Login;","map":null,"metadata":{},"sourceType":"module"}