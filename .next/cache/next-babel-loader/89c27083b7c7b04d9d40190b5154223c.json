{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'next-i18next';\nimport { DialogMain, TableExtendedProperties, AppTabHistoryLog, FormControllerTabs, BtnHelp } from '@/components';\nimport TabGeneral from './TabGeneral';\nimport TabDetail from './TabDetail';\nimport TabParts from './TabParts';\nimport TabTags from './TabTags';\nimport TabSynchronization from './TabSynchronization';\nimport TabJobNotice from './TabJobNotice';\nimport TabParent from './TabParent';\nimport DialogRevision from './DialogRevision';\nimport _ from 'lodash';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { drawingStore, commonStore } from '@/store/reducers';\nimport getValidationSchema from './validationSchema';\nimport { defaultProperties } from '@/utils/columnProperties';\n\nfunction DialogDrawingCreateEdit() {\n  var _useTranslation = useTranslation('drawing'),\n      t = _useTranslation.t;\n\n  var validationSchema = useMemo(function () {\n    return getValidationSchema(t);\n  }, []);\n  var dispatch = useDispatch();\n  var dialogState = useSelector(drawingStore.selectDialogState);\n  var drawingDetail = useSelector(drawingStore.selectDetail);\n  var userJob = useSelector(commonStore.selectUserValueJob);\n\n  var _useSelector = useSelector(drawingStore.selectInitDataForCE),\n      parameters = _useSelector.parameters,\n      wiki_page = _useSelector.wiki_page;\n\n  var permissions = useSelector(drawingStore.selectPermissions);\n\n  var isCreating = _.isNil(drawingDetail.id);\n\n  var drawingForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  });\n  useEffect(function () {\n    drawingForm.reset(drawingDetail);\n  }, [drawingDetail]);\n\n  var onChangeTab = function onChangeTab(event, nextTab) {\n    dispatch(drawingStore.actions.setDialogStateTab(nextTab));\n  };\n\n  var onSubmitData = drawingForm.handleSubmit(function (data) {\n    data.job_id = userJob.value;\n    data.associated_documents = data.associated_documents.map(function (_ref) {\n      var value = _ref.value;\n      return parseInt(value);\n    });\n\n    var drawing = _.pick(data, ['additional_attributes', 'associated_documents', 'customer_id', 'descriptions', 'drawing_format', 'drawing_purpose', 'exclude_from_customer', 'exclude_from_other', 'exclude_from_supplier', 'file_prefix', 'file_type', 'job_id', 'revision', 'drawing_id', 'is_detail_drawing', 'is_drawing', 'is_other_document', 'is_schematic', 'is_specification']);\n\n    if (isCreating) {\n      dispatch(drawingStore.sagaCreate(drawing));\n    } else {\n      var payloadUpdate = _.omit(drawing, ['drawing_id', 'revison']);\n\n      dispatch(drawingStore.sagaUpdate({\n        id: data.id,\n        drawing: payloadUpdate\n      }));\n    }\n  });\n\n  var handleClose = function handleClose() {\n    dispatch(drawingStore.sagaCloseDialog());\n  };\n\n  var handleOpenRevisionDialog = function handleOpenRevisionDialog() {\n    dispatch(drawingStore.sagaOpenRevDialog(drawingDetail.revision));\n  };\n\n  var handleChangeHistoryLogs = function handleChangeHistoryLogs(data) {\n    dispatch(drawingStore.actions.setHistoryLogs(data));\n  };\n\n  var extraButtons = [{\n    label: t('button.save_as_revision'),\n    hide: isCreating,\n    disabled: dialogState.loading || !(permissions === null || permissions === void 0 ? void 0 : permissions.edit) && !isCreating,\n    onClick: handleOpenRevisionDialog\n  }, {\n    label: isCreating ? t('common:button.create') : t('common:button.update'),\n    disabled: dialogState.loading || !(permissions === null || permissions === void 0 ? void 0 : permissions.edit) && !isCreating,\n    onClick: onSubmitData\n  }, {\n    label: t('common:button.close'),\n    onClick: handleClose\n  }];\n  var generalTab = {\n    label: t('common:tab.general'),\n    panel: /*#__PURE__*/_jsx(TabGeneral, {}),\n    errorKey: ['drawing_id', 'customer_id', 'revision', 'drawing_format', 'drawing_purpose']\n  };\n  var detailTab = {\n    label: t('form.tab.detail'),\n    panel: /*#__PURE__*/_jsx(TabDetail, {})\n  };\n  var partsTab = {\n    label: t('form.tab.parts'),\n    panel: /*#__PURE__*/_jsx(TabParts, {}),\n    hide: isCreating\n  };\n  var tagsTab = {\n    label: t('form.tab.tags'),\n    panel: /*#__PURE__*/_jsx(TabTags, {}),\n    hide: isCreating\n  };\n  var syncTab = {\n    label: t('form.tab.synchronization'),\n    panel: /*#__PURE__*/_jsx(TabSynchronization, {}),\n    hide: isCreating,\n    disabled: true\n  };\n  var jobNoticeTab = {\n    label: t('form.tab.job_notices'),\n    panel: /*#__PURE__*/_jsx(TabJobNotice, {}),\n    hide: isCreating,\n    disabled: true\n  };\n  var parentTab = {\n    label: t('form.tab.parents'),\n    panel: /*#__PURE__*/_jsx(TabParent, {}),\n    hide: isCreating,\n    disabled: true\n  };\n  var historyTab = {\n    label: t('common:tab.history'),\n    panel: /*#__PURE__*/_jsx(AppTabHistoryLog, {\n      isOpenDialog: dialogState.open,\n      data: dialogState.historyLogs,\n      onChange: handleChangeHistoryLogs,\n      entityId: drawingDetail.id,\n      mode: \"horizonatal\",\n      tableHeight: 430,\n      descriptionRows: 26,\n      entity: \"drawing\",\n      extraColumns: [_objectSpread(_objectSpread({}, defaultProperties), {}, {\n        field: 'revision',\n        headerName: 'Revision',\n        width: 100\n      })]\n    }),\n    hide: isCreating\n  };\n  var extendedPropertyTab = {\n    label: t('common:tab.extended_properties'),\n    panel: /*#__PURE__*/_jsx(TableExtendedProperties, {\n      control: drawingForm.control,\n      name: \"additional_attributes\",\n      editMode: !isCreating,\n      propertiesList: parameters.PLAT,\n      tableHeight: 435,\n      parameterName: \"PLAT\"\n    })\n  };\n  var tabs = [generalTab, detailTab, partsTab, tagsTab, syncTab, jobNoticeTab, parentTab, historyTab, extendedPropertyTab];\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(DialogMain, {\n      open: dialogState.open,\n      loading: dialogState.loading,\n      title: /*#__PURE__*/_jsx(BtnHelp, {\n        title: isCreating ? t('form.title.create_drawing') : t('form.title.update_drawing'),\n        href: wiki_page\n      }),\n      fullWidth: true,\n      maxWidth: \"lg\",\n      extraButtons: extraButtons,\n      height: 510,\n      onClose: handleClose,\n      children: /*#__PURE__*/_jsx(FormControllerTabs, {\n        value: dialogState.tab,\n        onChange: onChangeTab,\n        form: drawingForm,\n        tabs: tabs\n      })\n    }), /*#__PURE__*/_jsx(DialogRevision, {})]\n  });\n}\n\nexport default DialogDrawingCreateEdit;","map":null,"metadata":{},"sourceType":"module"}