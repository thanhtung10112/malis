{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Paper, Button, Tooltip } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { DataTable, DataTableTextField, CopyIcon } from '@/components';\nimport DialogRichTextEditor from './RichTextEditor';\nimport DialogCopyDesc from './DialogCopyDesc';\nimport { useController } from 'react-hook-form';\nimport useStyles from './styles';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport clsx from 'clsx';\nimport striptags from 'striptags';\nimport * as yup from 'yup';\nimport parseHTML from 'html-react-parser';\nimport * as columnProperties from '@/utils/columnProperties';\n\nconst MultilingualDescription = props => {\n  const classes = useStyles();\n\n  const {\n    name,\n    control,\n    rules,\n    editMode,\n    languageList,\n    tableHeight,\n    editor,\n    copyable,\n    copyDialogProps,\n    disabled,\n    autocompleteProps\n  } = props,\n        paperPropsRest = _objectWithoutProperties(props, [\"name\", \"control\", \"rules\", \"editMode\", \"languageList\", \"tableHeight\", \"editor\", \"copyable\", \"copyDialogProps\", \"disabled\", \"autocompleteProps\"]);\n\n  const defaultValueRTE = React.useMemo(() => ({\n    isOpen: false,\n    content: '',\n    title: '',\n    languageId: null\n  }), []);\n  const {\n    field: {\n      value: descriptionValues,\n      onChange\n    }\n  } = useController({\n    name,\n    control\n  });\n  const [RTEState, setRTEState] = React.useState(_objectSpread({}, defaultValueRTE));\n  const [openCopy, setOpenCopy] = React.useState(false);\n\n  const getCellValue = language_id => {\n    const cellItem = _.find(descriptionValues, {\n      language_id\n    });\n\n    return (cellItem === null || cellItem === void 0 ? void 0 : cellItem.description) || '';\n  };\n\n  const getStylesRowDisabled = params => {\n    const language = _.find(languageList, {\n      id: params.id\n    });\n\n    return clsx({\n      [classes.disable]: (language === null || language === void 0 ? void 0 : language.status) === false || disabled\n    });\n  };\n\n  const filteredLanguageList = React.useMemo(() => {\n    if (editMode) {\n      return languageList.filter(item => item.status === true || descriptionValues.some(({\n        language_id\n      }) => item.id === language_id && item.status === false));\n    } else {\n      return languageList.filter(item => item.status === true);\n    }\n  }, [editMode]);\n\n  const onDbClickCell = (params, event) => {\n    const language = _.find(languageList, {\n      id: params.id\n    });\n\n    if ((language === null || language === void 0 ? void 0 : language.status) === false || disabled) {\n      event.stopPropagation();\n    }\n  };\n\n  const columns = React.useMemo(() => [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    field: 'description_raw',\n    width: 130,\n    headerName: 'Language',\n\n    valueGetter(params) {\n      return `${params.row.parameter_id} - ${params.row.description}`;\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Description')), {}, {\n    field: 'value_raw',\n    flex: 0.7,\n    headerName: 'Description',\n    hide: editor !== 'text',\n\n    valueGetter(params) {\n      const cellValue = getCellValue(params.id);\n      return cellValue;\n    },\n\n    renderEditCell(params) {\n      return /*#__PURE__*/_jsx(DataTableTextField, {\n        params: params,\n        onChangeValue: onChangeDescription,\n        rules: yup.string().max(255, 'Description must be less than 255 characters!')\n      });\n    }\n\n  }), {\n    field: 'value_raw_editor',\n    flex: 0.7,\n    headerName: 'Description',\n    sortable: false,\n    hide: editor === 'text',\n\n    renderCell(params) {\n      const description = getCellValue(params.id);\n      const pureContent = striptags(description);\n      const htmlContent = parseHTML(_.toString(description));\n\n      if (pureContent) {\n        return /*#__PURE__*/_jsx(Tooltip, {\n          title: htmlContent,\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: classes.rteRoot,\n            onDoubleClick: onOpenRTE(params.row),\n            children: pureContent\n          })\n        });\n      }\n\n      return /*#__PURE__*/_jsx(\"div\", {\n        className: classes.rteRoot,\n        onDoubleClick: onOpenRTE(params.row),\n        children: pureContent\n      });\n    }\n\n  }], [descriptionValues, editor]);\n\n  const onChangeDescription = (language_id, description) => {\n    const newDescriptionValues = immer(descriptionValues, draft => {\n      const existingDescIndex = _.findIndex(descriptionValues, {\n        language_id\n      });\n\n      if (existingDescIndex === -1) {\n        draft.push({\n          language_id,\n          description\n        });\n      } else {\n        draft[existingDescIndex].description = description;\n      }\n    });\n    onChange(newDescriptionValues);\n  };\n\n  const onOpenRTE = language => () => {\n    const currentContent = getCellValue(language.id);\n    setRTEState(prevState => immer(prevState, draft => {\n      draft.content = currentContent;\n      draft.languageId = language.id;\n      draft.title = `${language.parameter_id} - ${language.description}`;\n      draft.isOpen = true;\n    }));\n  };\n\n  const handleCloseRTE = () => {\n    setRTEState(_objectSpread({}, defaultValueRTE));\n  };\n\n  const onCloseRTE = () => {\n    handleCloseRTE();\n  };\n\n  const onConfirmRTE = (language_id, description) => {\n    onChangeDescription(language_id, description);\n    handleCloseRTE();\n  };\n\n  const handleOpenCopyDialog = () => {\n    if (!disabled) {\n      setOpenCopy(true);\n    }\n  };\n\n  const handleCloseCopyDialog = () => {\n    if (!disabled) {\n      setOpenCopy(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(When, {\n      condition: copyable,\n      children: /*#__PURE__*/_jsx(Button, {\n        disabled: disabled,\n        startIcon: /*#__PURE__*/_jsx(CopyIcon, {}),\n        style: {\n          marginBottom: 4,\n          paddingTop: 0\n        },\n        onClick: handleOpenCopyDialog,\n        children: \"Copy\"\n      })\n    }), /*#__PURE__*/_jsxs(Paper, _objectSpread(_objectSpread({}, paperPropsRest), {}, {\n      children: [/*#__PURE__*/_jsx(DataTable, {\n        hideFooter: true,\n        disableSelectionOnClick: true,\n        disableColumnMenu: true,\n        tableHeight: tableHeight,\n        rows: filteredLanguageList,\n        columns: columns,\n        onCellDoubleClick: onDbClickCell,\n        getRowClassName: getStylesRowDisabled\n      }), /*#__PURE__*/_jsx(DialogRichTextEditor, {\n        isOpen: RTEState.isOpen,\n        title: RTEState.title,\n        content: RTEState.content,\n        languageId: RTEState.languageId,\n        onClose: onCloseRTE,\n        onConfirm: onConfirmRTE\n      }), /*#__PURE__*/_jsx(DialogCopyDesc, _objectSpread(_objectSpread({}, copyDialogProps), {}, {\n        autocompleteProps: autocompleteProps,\n        descriptionValues: descriptionValues,\n        open: openCopy,\n        onClose: handleCloseCopyDialog,\n        onChange: onChange\n      }))]\n    }))]\n  });\n};\n\nMultilingualDescription.defaultProps = {\n  editor: 'text',\n  elevation: 1,\n  tableHeight: 300,\n  copyable: false,\n  copyDialogProps: {},\n  disabled: false,\n  autocompleteProps: {}\n};\nexport default MultilingualDescription;","map":null,"metadata":{},"sourceType":"module"}