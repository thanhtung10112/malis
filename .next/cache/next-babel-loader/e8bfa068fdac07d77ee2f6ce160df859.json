{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport { setCookie, destroyCookie } from 'nookies';\nimport Router from 'next/router';\nimport { actionTypes } from '@/utils/constant';\nexport const name = 'auth';\nexport const resetState = createAction(`${name}/RESET_STATE`);\nexport const initialState = {\n  access_token: '',\n  loading: false,\n  unauthorized: false,\n  loadingAuth: false,\n  profile: {\n    user_id: '',\n    first_name: '',\n    last_name: '',\n    email: '',\n    valid_until: '',\n    user_name: '',\n    updated_at: '',\n    group_membership: [],\n    default_language_id: null\n  },\n  pwdDialogState: {\n    loading: false,\n    open: false\n  },\n  settings: {\n    initData: {\n      parameters: {\n        PAGES: [],\n        PLLA: []\n      },\n      timezones: []\n    },\n    detail: {\n      default_language: null,\n      home_page: null,\n      time_zone: ''\n    }\n  }\n};\nconst authSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    saveTokenLogin(state, {\n      payload\n    }) {\n      state.access_token = payload.access_token;\n\n      if (payload.remember) {\n        setCookie(null, 'token', payload.access_token, {\n          maxAge: 60 * 60 * 24 // 1 day\n\n        });\n      } else {\n        setCookie(null, 'token', payload.access_token);\n      }\n\n      setCookie(null, 'redirect_to', payload.redirect_to, {\n        maxAge: 60 * 60 * 24 * 365\n      });\n      Router.push(payload.redirect_to);\n    },\n\n    setLoading(state, {\n      payload\n    }) {\n      state.loading = payload;\n    },\n\n    setUnauthorized(state, {\n      payload\n    }) {\n      state.unauthorized = payload;\n    },\n\n    setProfile(state, {\n      payload\n    }) {\n      state.profile = payload;\n    },\n\n    logout(state) {\n      destroyCookie(null, 'token');\n      destroyCookie(null, 'redirect_to');\n      destroyCookie(null, 'current_job_id');\n      state.unauthorized = false;\n      state.access_token = '';\n      Router.push('/login');\n    },\n\n    setPwDialogState(state, {\n      payload\n    }) {\n      state.pwdDialogState = _objectSpread(_objectSpread({}, state.pwdDialogState), payload);\n    },\n\n    setProfileAvatar(state, {\n      payload\n    }) {\n      state.profile.avatar = payload;\n    },\n\n    setSettingInitData(state, {\n      payload\n    }) {\n      state.settings.initData = payload;\n    },\n\n    setLoadingAuth(state, {\n      payload\n    }) {\n      state.loadingAuth = payload;\n    },\n\n    setSettingDetail(state, {\n      payload\n    }) {\n      state.settings.detail = _objectSpread(_objectSpread({}, state.settings.detail), payload);\n    },\n\n    setDefaultLanguage(state, {\n      payload\n    }) {\n      state.profile.default_language_id = payload;\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n}); // Actions\n\nexport const {\n  actions\n} = authSlice; // Saga actions\n\nexport const sagaLogin = createAction(`${name}/${actionTypes.LOGIN}`);\nexport const sagaGetProfile = createAction(`${name}/${actionTypes.GET_PROFILE}`);\nexport const sagaChangePassword = createAction(`${name}/${actionTypes.CHANGE_PASSWORD}`);\nexport const sagaGetSettings = createAction(`${name}/GET_SETTINGS`);\nexport const sagaSaveSettings = createAction(`${name}/SAVE_SETTINGS`);\nexport const sagaLogout = createAction(`${name}/${actionTypes.LOGOUT}`);\nexport const selectState = state => state.auth;\nexport const selectUnauthorized = createSelector(selectState, state => state.unauthorized);\nexport const selectProfile = createSelector(selectState, state => state.profile);\nexport const selectPwdDialogState = createSelector(selectState, state => state.pwdDialogState);\nexport const selectSettings = createSelector(selectState, state => state.settings);\nexport const selectSettingsParameters = createSelector(selectState, state => state.settings.initData.parameters);\nexport const selectLoadingAuth = createSelector(selectState, state => state.loadingAuth);\nexport default authSlice;","map":null,"metadata":{},"sourceType":"module"}