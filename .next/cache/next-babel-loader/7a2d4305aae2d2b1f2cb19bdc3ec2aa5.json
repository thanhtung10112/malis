{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\App\\\\TabHistoryLog\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useMemo, useEffect } from 'react';\nimport { Paper, TextField, Grid } from '@material-ui/core';\nimport { DataTable } from '@/components';\nimport _ from 'lodash';\nimport * as columnProperties from '@/utils/columnProperties';\nimport HttpService from '@/helper/HttpService';\n\nconst AppTabHistoryLog = props => {\n  const {\n    entityId,\n    tableHeight,\n    mode,\n    descriptionRows,\n    extraColumns,\n    entity,\n    onChange,\n    data,\n    isOpenDialog\n  } = props;\n  const httpService = new HttpService('');\n  const {\n    0: operationDetail,\n    1: setOperationDetail\n  } = useState('');\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const defaultColumns = useMemo(() => [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    field: 'operation_code',\n    headerName: 'Tr.',\n    width: 80\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    field: 'created_at',\n    headerName: 'Date Time',\n    flex: 0.6\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    field: 'created_by',\n    headerName: 'User',\n    width: 80\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    field: 'operation_description',\n    headerName: 'Description',\n    flex: 0.6\n  })], []);\n  const columns = [...defaultColumns, ...extraColumns];\n  useEffect(() => {\n    if (data.length === 0 && (_.isNil(isOpenDialog) || isOpenDialog)) {\n      getHistoryData();\n    }\n  }, [entityId, entity, data, isOpenDialog]); // reset history log if close the dialog\n\n  useEffect(() => {\n    if (_.isNil(isOpenDialog)) {\n      return;\n    }\n\n    if (!isOpenDialog && data.length > 0) {\n      onChange([]);\n    }\n  }, [data, isOpenDialog, onChange]);\n\n  const getHistoryData = async () => {\n    setLoading(true);\n\n    try {\n      const {\n        history_logs\n      } = await httpService.get('history', {\n        entity,\n        pk: entityId\n      });\n      onChange(history_logs);\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    setLoading(false);\n  };\n\n  const handleSelectOperation = params => {\n    const id = params.id;\n\n    const operation = _.find(data, {\n      id\n    });\n\n    setOperationDetail((operation === null || operation === void 0 ? void 0 : operation.changelogs) || '');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"history\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: mode === 'vertical' ? 12 : 7,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          children: /*#__PURE__*/_jsxDEV(DataTable, {\n            rows: data,\n            columns: columns,\n            tableHeight: tableHeight,\n            loading: loading,\n            onRowClick: handleSelectOperation,\n            hideFooter: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: mode === 'vertical' ? 12 : 5,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          multiline: true,\n          rows: descriptionRows,\n          value: operationDetail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\nAppTabHistoryLog.defaultProps = {\n  tableHeight: 350,\n  mode: 'vertical',\n  descriptionRows: 7,\n  extraColumns: []\n};\nexport default AppTabHistoryLog;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/App/TabHistoryLog/index.tsx"],"names":["useState","useMemo","useEffect","Paper","TextField","Grid","DataTable","_","columnProperties","HttpService","AppTabHistoryLog","props","entityId","tableHeight","mode","descriptionRows","extraColumns","entity","onChange","data","isOpenDialog","httpService","operationDetail","setOperationDetail","loading","setLoading","defaultColumns","defaultProperties","field","headerName","width","flex","columns","length","isNil","getHistoryData","history_logs","get","pk","error","console","handleSelectOperation","params","id","operation","find","changelogs","defaultProps"],"mappings":"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","sourcesContent":["import { useState, useMemo, useEffect } from 'react'\n\nimport { Paper, TextField, Grid } from '@material-ui/core'\nimport { DataTable } from '@/components'\n\nimport _ from 'lodash'\nimport * as columnProperties from '@/utils/columnProperties'\nimport HttpService from '@/helper/HttpService'\n\nimport type { TabHistoryProps } from './type'\nimport type { GridColumns, GridRowParams } from '@material-ui/data-grid'\nimport type { HistoryLog } from '@/types/Common'\n\nconst AppTabHistoryLog: React.FC<TabHistoryProps> = (props) => {\n  const { entityId, tableHeight, mode, descriptionRows, extraColumns, entity, onChange, data, isOpenDialog } = props\n\n  const httpService = new HttpService('')\n\n  const [operationDetail, setOperationDetail] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const defaultColumns = useMemo<GridColumns>(\n    () => [\n      {\n        ...columnProperties.defaultProperties,\n        field: 'operation_code',\n        headerName: 'Tr.',\n        width: 80\n      },\n      {\n        ...columnProperties.defaultProperties,\n        field: 'created_at',\n        headerName: 'Date Time',\n        flex: 0.6\n      },\n      {\n        ...columnProperties.defaultProperties,\n        field: 'created_by',\n        headerName: 'User',\n        width: 80\n      },\n      {\n        ...columnProperties.defaultProperties,\n        field: 'operation_description',\n        headerName: 'Description',\n        flex: 0.6\n      }\n    ],\n    []\n  )\n\n  const columns = [...defaultColumns, ...extraColumns]\n\n  useEffect(() => {\n    if (data.length === 0 && (_.isNil(isOpenDialog) || isOpenDialog)) {\n      getHistoryData()\n    }\n  }, [entityId, entity, data, isOpenDialog])\n\n  // reset history log if close the dialog\n  useEffect(() => {\n    if (_.isNil(isOpenDialog)) {\n      return\n    }\n    if (!isOpenDialog && data.length > 0) {\n      onChange([])\n    }\n  }, [data, isOpenDialog, onChange])\n\n  const getHistoryData = async () => {\n    setLoading(true)\n    try {\n      const { history_logs }: any = await httpService.get('history', { entity, pk: entityId })\n      onChange(history_logs as HistoryLog[])\n    } catch (error) {\n      console.error('error', '>>>', error)\n    }\n    setLoading(false)\n  }\n\n  const handleSelectOperation = (params: GridRowParams) => {\n    const id = params.id as number\n    const operation = _.find(data, { id })\n    setOperationDetail(operation?.changelogs || '')\n  }\n\n  return (\n    <div className=\"history\">\n      <Grid container spacing={2}>\n        <Grid item xs={mode === 'vertical' ? 12 : 7}>\n          <Paper>\n            <DataTable\n              rows={data}\n              columns={columns}\n              tableHeight={tableHeight}\n              loading={loading}\n              onRowClick={handleSelectOperation}\n              hideFooter\n            />\n          </Paper>\n        </Grid>\n        <Grid item xs={mode === 'vertical' ? 12 : 5}>\n          <TextField multiline rows={descriptionRows} value={operationDetail} />\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nAppTabHistoryLog.defaultProps = {\n  tableHeight: 350,\n  mode: 'vertical',\n  descriptionRows: 7,\n  extraColumns: []\n}\n\nexport default AppTabHistoryLog\n"]},"metadata":{},"sourceType":"module"}