{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice, createSelector, createAction } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nexport var name = 'drawing';\nexport var resetState = createAction(\"\".concat(name, \"/\").concat(actionTypes.RESET_STATE));\nexport var initialState = {\n  drawingGroupId: -1,\n  dataList: [],\n  detail: {\n    job_id: null,\n    drawing_id: '',\n    revision: 'A',\n    drawing_format: null,\n    drawing_purpose: null,\n    file_prefix: null,\n    file_type: null,\n    associated_documents: [],\n    customer_id: '',\n    additional_attributes: {},\n    descriptions: [],\n    exclude_from_customer: false,\n    exclude_from_other: false,\n    exclude_from_supplier: false,\n    item_list: [],\n    is_detail_drawing: false,\n    is_drawing: true,\n    is_other_document: false,\n    is_schematic: false,\n    is_specification: false\n  },\n  dialogState: {\n    open: false,\n    loading: false,\n    tab: 0,\n    historyLogs: []\n  },\n  initDataForList: {\n    drawing_groups: [{\n      description: 'All',\n      group_id: null,\n      children: []\n    }],\n    jobs: [],\n    permissions: {\n      drawing: null\n    },\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  initDataForCE: {\n    parameters: {\n      DWAT: [],\n      DWPU: [],\n      // drawing purpose\n      FPRE: [],\n      // file name prefix\n      FTYP: [],\n      // file type\n      PLFO: [],\n      // format\n      PLLA: [],\n      // descriptions\n      PLAT: [] // extended properties\n\n    },\n    wiki_page: ''\n  },\n  revisionDialog: {\n    open: false,\n    loading: false,\n    detail: {\n      new_revision: '',\n      reason: '',\n      description: ''\n    }\n  },\n  componentList: []\n};\nvar drawing = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    setDataList: function setDataList(state, _ref) {\n      var payload = _ref.payload;\n      state.dataList = payload;\n    },\n    setDialogState: function setDialogState(state, _ref2) {\n      var payload = _ref2.payload;\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n    setDialogStateOpen: function setDialogStateOpen(state, _ref3) {\n      var payload = _ref3.payload;\n      state.dialogState.open = payload;\n    },\n    setDialogStateLoading: function setDialogStateLoading(state, _ref4) {\n      var payload = _ref4.payload;\n      state.dialogState.loading = payload;\n    },\n    setDialogStateTab: function setDialogStateTab(state, _ref5) {\n      var payload = _ref5.payload;\n      state.dialogState.tab = payload;\n    },\n    setInitDataForList: function setInitDataForList(state, _ref6) {\n      var payload = _ref6.payload;\n      state.initDataForList = payload;\n    },\n    setPermissions: function setPermissions(state, _ref7) {\n      var payload = _ref7.payload;\n      state.initDataForList.permissions.drawing = payload;\n    },\n    setInitDataForCE: function setInitDataForCE(state, _ref8) {\n      var payload = _ref8.payload;\n      state.initDataForCE = payload;\n    },\n    setHistoryLogs: function setHistoryLogs(state, _ref9) {\n      var payload = _ref9.payload;\n      state.dialogState.historyLogs = payload;\n    },\n    setDetail: function setDetail(state, _ref10) {\n      var payload = _ref10.payload;\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n    setDrawingGroupId: function setDrawingGroupId(state, _ref11) {\n      var payload = _ref11.payload;\n      state.drawingGroupId = payload;\n    },\n    resetDetail: function resetDetail(state, _ref12) {\n      var userJob = _ref12.payload.userJob;\n      var detailDefaultValue = getDefaultValues(state.initDataForCE.parameters, {\n        drawing_purpose: 'DWPU',\n        file_prefix: 'FPRE',\n        file_type: 'FTYP',\n        drawing_format: 'PLFO'\n      }, initialState.detail);\n      detailDefaultValue.job_id = userJob.value > -1 ? userJob.value : null;\n      state.componentList = initialState.componentList;\n      state.detail = _objectSpread({}, detailDefaultValue);\n      state.dialogState.tab = 0;\n    },\n    setRevisionDialogOpen: function setRevisionDialogOpen(state, _ref13) {\n      var payload = _ref13.payload;\n      state.revisionDialog.open = payload;\n    },\n    setRevisionDialogLoading: function setRevisionDialogLoading(state, _ref14) {\n      var payload = _ref14.payload;\n      state.revisionDialog.loading = payload;\n    },\n    setRevisionDialogDetail: function setRevisionDialogDetail(state, _ref15) {\n      var payload = _ref15.payload;\n      state.revisionDialog.detail = _objectSpread(_objectSpread({}, state.revisionDialog.detail), payload);\n    },\n    resetRevisionDialogDetail: function resetRevisionDialogDetail(state) {\n      state.revisionDialog.detail = _objectSpread({}, initialState.revisionDialog.detail);\n    },\n    setComponentList: function setComponentList(state, _ref16) {\n      var payload = _ref16.payload;\n      state.componentList = payload;\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n}); // Actions\n\nvar actions = drawing.actions; // Saga actions\n\nexport { actions };\nexport var sagaGetList = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_LIST));\nexport var sagaOpenCreateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_CREATE_DIALOG));\nexport var sagaOpenUpdateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_UPDATE_DIALOG));\nexport var sagaOpenCreatePartDialog = createAction(\"\".concat(name, \"/OPEN_CREATE_PART_DIALOG\"));\nexport var sagaChangeUserJob = createAction(\"\".concat(name, \"/\").concat(actionTypes.CHANGE_USER_JOB));\nexport var sagaCloseDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.CLOSE_DIALOG));\nexport var sagaCreate = createAction(\"\".concat(name, \"/\").concat(actionTypes.CREATE));\nexport var sagaUpdate = createAction(\"\".concat(name, \"/\").concat(actionTypes.UPDATE));\nexport var sagaOpenRevDialog = createAction(\"\".concat(name, \"/OPEN_REV_DIALOG\"));\nexport var sagaSaveNewRev = createAction(\"\".concat(name, \"/SAVE_NEW_REV\"));\nexport var sagaGetDrawingPartList = createAction(\"\".concat(name, \"/GET_DRAWING_PART_LIST\")); // Selectors\n\nvar selectState = function selectState(state) {\n  return state[name];\n};\n\nexport var selectDialogState = createSelector(selectState, function (state) {\n  return state.dialogState;\n});\nexport var selectDataList = createSelector(selectState, function (state) {\n  return state.dataList;\n});\nexport var selectPermissions = createSelector(selectState, function (state) {\n  return state.initDataForList.permissions.drawing;\n});\nexport var selectDrawingGroups = createSelector(selectState, function (_ref17) {\n  var initDataForList = _ref17.initDataForList;\n  var drawing_groups = initDataForList.drawing_groups;\n  return drawing_groups[0];\n});\nexport var selectDetail = createSelector(selectState, function (_ref18) {\n  var detail = _ref18.detail;\n  return detail;\n});\nexport var selectInitDataForList = createSelector(selectState, function (state) {\n  return state.initDataForList;\n});\nexport var selectInitDataForCE = createSelector(selectState, function (_ref19) {\n  var initDataForCE = _ref19.initDataForCE;\n  return initDataForCE;\n});\nexport var selectParameters = createSelector(selectState, function (_ref20) {\n  var initDataForCE = _ref20.initDataForCE;\n  return initDataForCE.parameters;\n});\nexport var selectDrawingGroupId = createSelector(selectState, function (_ref21) {\n  var drawingGroupId = _ref21.drawingGroupId;\n  return drawingGroupId;\n});\nexport var selectRevisionDialog = createSelector(selectState, function (state) {\n  return state.revisionDialog;\n});\nexport var selectComponentList = createSelector(selectState, function (state) {\n  return state.componentList;\n});\nexport default drawing;","map":null,"metadata":{},"sourceType":"module"}