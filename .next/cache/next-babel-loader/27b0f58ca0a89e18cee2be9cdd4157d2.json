{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction } from '@reduxjs/toolkit';\nexport const name = 'advancedFilter';\nexport const resetState = createAction(name + '/RESET_STATE');\nexport const initialState = {\n  isOpen: false,\n  isEditMode: false,\n  isOpenFilterDetail: false,\n  isExpanedSection: false,\n  permissions: {\n    update_system_default_presets: false\n  },\n  systemPreset: {\n    id: null,\n    name: ''\n  },\n  defaultFilter: {\n    id: null,\n    name: '',\n    entity: '',\n    is_system_default: false,\n    where_conditions: null,\n    sort_conditions: null\n  },\n  filterPresetList: [],\n  filterType: 'own',\n  initData: {\n    columns: [],\n    comparators: [],\n    sortOptions: [],\n    logicalOperators: []\n  },\n  filterDetail: {\n    name: '',\n    entity: '',\n    is_shared: false,\n    is_system_default: false,\n    is_user_default: false,\n    sort_conditions: null,\n    where_conditions: null\n  },\n  saveAsForm: {\n    open: false,\n    clearError: false,\n    error: ''\n  },\n  afForm: {\n    clearError: false,\n    error: ''\n  },\n  loading: {\n    table: false,\n    dialog: false,\n    section: false\n  }\n};\nconst advancedFilter = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setOpenAdvanceSearch(state, action) {\n      state.isOpen = action.payload;\n    },\n\n    setDefaultFilter(state, action) {\n      state.defaultFilter = _objectSpread(_objectSpread({}, state.defaultFilter), action.payload);\n    },\n\n    setFilterPresetList(state, action) {\n      state.filterPresetList = action.payload;\n    },\n\n    setFilterType(state, action) {\n      state.filterType = action.payload;\n    },\n\n    setOpenFilterDetail(state, action) {\n      state.isOpenFilterDetail = action.payload;\n    },\n\n    setEditMode(state, action) {\n      state.isEditMode = action.payload;\n    },\n\n    setInitData(state, action) {\n      state.initData = action.payload;\n    },\n\n    setFilterDetail(state, action) {\n      state.filterDetail = _objectSpread(_objectSpread({}, state.filterDetail), action.payload);\n    },\n\n    setExpandedSection(state, action) {\n      state.isExpanedSection = action.payload;\n    },\n\n    setPermissions(state, action) {\n      state.permissions = action.payload;\n    },\n\n    setSystemPreset(state, action) {\n      state.systemPreset = action.payload;\n    },\n\n    setSaveAsForm(state, action) {\n      state.saveAsForm = _objectSpread(_objectSpread({}, state.saveAsForm), action.payload);\n    },\n\n    setAfForm(state, action) {\n      state.afForm = _objectSpread(_objectSpread({}, state.afForm), action.payload);\n    },\n\n    setLoadingTable(state, action) {\n      state.loading.table = action.payload;\n    },\n\n    setLoadingDialog(state, action) {\n      state.loading.dialog = action.payload;\n    },\n\n    setLoadingSection(state, {\n      payload\n    }) {\n      state.loading.section = payload;\n    },\n\n    resetFilterDetail(state, {\n      payload\n    }) {\n      state.filterDetail = {\n        name: '',\n        entity: payload,\n        is_shared: false,\n        is_system_default: false,\n        is_user_default: false,\n        sort_conditions: [],\n        where_conditions: {\n          conjunction: 'AND',\n          type: 'group',\n          conditions: []\n        }\n      };\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n});\nexport const create = createAction(name + '/CREATE');\nexport const getList = createAction(name + '/GET_LIST');\nexport const clearDefaultFilter = createAction(name + '/CLEAR_DEFAULT_FILTER');\nexport const getDefaultFilter = createAction(name + '/GET_DEFAULT_FILTER');\nexport const changeFilterType = createAction(name + '/CHANGE_FILTER_TYPE');\nexport const open = createAction(name + '/OPEN');\nexport const apply = createAction(name + '/APPLY');\nexport const close = createAction(name + '/CLOSE');\nexport const remove = createAction(name + '/REMOVE');\nexport const getDetail = createAction(name + '/GET_DETAIL');\nexport const update = createAction(name + '/UPDATE');\nexport const share = createAction(name + '/SHARE');\nexport const saveAs = createAction(name + '/SAVE_AS');\nexport const {\n  setOpenAdvanceSearch,\n  setDefaultFilter,\n  setFilterPresetList,\n  setFilterType,\n  setOpenFilterDetail,\n  setEditMode,\n  setInitData,\n  setFilterDetail,\n  setExpandedSection,\n  resetFilterDetail,\n  setPermissions,\n  setSystemPreset,\n  setSaveAsForm,\n  setAfForm,\n  setLoadingDialog,\n  setLoadingTable,\n  setLoadingSection\n} = advancedFilter.actions; // Selector\n\nexport const advanceSearchSelector = state => state.advancedFilter;\nexport const selectEditMode = state => state.advancedFilter.isEditMode;\nexport const selectDefaultFilter = state => state.advancedFilter.defaultFilter;\nexport const selectFilterType = state => state.advancedFilter.filterType;\nexport const selectIsExpanedSection = state => state.advancedFilter.isExpanedSection;\nexport const selectColumn = state => state.advancedFilter.initData.columns;\nexport const selectComparator = state => state.advancedFilter.initData.comparators;\nexport const selectSortOptions = state => state.advancedFilter.initData.sortOptions;\nexport const selectFilterDetail = state => state.advancedFilter.filterDetail;\nexport const selectConditionTree = state => state.advancedFilter.filterDetail.where_conditions;\nexport const selectSortConditions = state => state.advancedFilter.filterDetail.sort_conditions;\nexport const selectUserDefault = state => state.advancedFilter.filterDetail.is_user_default;\nexport const selectFilterDetailName = state => state.advancedFilter.filterDetail.name;\nexport const selectListData = state => state.advancedFilter.filterPresetList;\nexport const selectPermissions = state => state.advancedFilter.permissions;\nexport const selectSystemPreset = state => state.advancedFilter.systemPreset;\nexport const selectOpenAdvanceSearch = state => state.advancedFilter.isOpen;\nexport const selectAfForm = state => state.advancedFilter.afForm;\nexport const selectSaveAsForm = state => state.advancedFilter.saveAsForm;\nexport const selectLoading = state => state.advancedFilter.loading;\nexport const selectFilterData = state => {\n  const {\n    where_conditions: whereConditions,\n    sort_conditions: sortConditions\n  } = state.advancedFilter.defaultFilter;\n  const where_conditions = whereConditions ? JSON.stringify(whereConditions) : null;\n  const sort_conditions = sortConditions ? JSON.stringify(sortConditions) : null;\n  return {\n    where_conditions,\n    sort_conditions\n  };\n};\nexport default advancedFilter.reducer;","map":null,"metadata":{},"sourceType":"module"}