{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { takeEvery, put, takeLatest, putResolve } from 'redux-saga/effects';\nimport { call, select, all } from 'typed-redux-saga';\nimport immer from 'immer';\nimport Router from 'next/router';\nimport parameterApi from '@/apis/parameter.api';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport { parameterStore, advancedFilterActions, commonStore, summaryReportActions } from '@/store/reducers';\n\nfunction* fetchInitDataForList() {\n  const data = yield call(parameterApi.getInitDataForList);\n  yield put(parameterStore.actions.setInitDataForList(data));\n}\n\nfunction* fetchInitDataForCE() {\n  const {\n    param_type_id\n  } = Router.query;\n\n  const _yield$call = yield call(parameterApi.getInitDataForCE, {\n    param_type_id\n  }),\n        {\n    permissions\n  } = _yield$call,\n        response = _objectWithoutProperties(_yield$call, [\"permissions\"]);\n\n  yield all([put(parameterStore.actions.setPermissions(permissions)), put(parameterStore.actions.setInitDataForCE(response)), put(parameterStore.actions.setDetail({\n    parameter_type_id: param_type_id\n  }))]);\n}\n\nfunction* fetchList() {\n  const {\n    param_type_id\n  } = Router.query;\n  const {\n    tableState,\n    searchQuery,\n    filterData\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData)\n  });\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(parameterApi.getList, param_type_id, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery\n  }, filterData));\n  yield all([put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  })), put(parameterStore.actions.setData(data.parameters)), put(parameterStore.actions.setParameterType(data.parameter_type))]);\n}\n\nfunction* fetchDetail(id) {\n  const {\n    parameter\n  } = yield call(parameterApi.getDetail, id);\n  const {\n    is_multilingual\n  } = yield* select(parameterStore.selectInitDataForCE);\n  const formatParameter = immer(parameter, draft => {\n    if (is_multilingual) {\n      draft.descriptions = draft.multilingual_descriptions;\n      delete draft.multilingual_descriptions;\n    }\n  });\n  yield put(parameterStore.actions.setDetail(formatParameter));\n}\n\nfunction* getList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForList);\n    const viewPermission = yield* select(parameterStore.selectViewPermission);\n\n    if (viewPermission) {\n      yield call(fetchList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* openCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    yield put(parameterStore.actions.setDialogState({\n      open: true,\n      editMode: false\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* executeOperation({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      operation,\n      parameters\n    } = payload;\n    const data = yield call(parameterApi.executeOperation, operation, parameters);\n    yield call(fetchList);\n\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data));\n      yield put(summaryReportActions.setOpen(true));\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message));\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* closeDialog() {\n  try {\n    yield putResolve(parameterStore.actions.setDialogStateOpen(false));\n    yield call(getList);\n    yield all([put(parameterStore.actions.setDialogStateEditMode(false)), put(parameterStore.actions.resetLocationDetail())]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n}\n\nfunction* create({\n  payload\n}) {\n  yield put(parameterStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      message\n    } = yield call(parameterApi.create, payload);\n    yield put(commonStore.actions.setSuccessMessage(message));\n    yield put(parameterStore.actions.resetLocationDetail());\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(parameterStore.actions.setDialogStateLoading(false));\n}\n\nfunction* openUpdateDialog({\n  payload: id\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchInitDataForCE);\n    yield call(fetchDetail, id);\n    yield put(parameterStore.actions.setDialogState({\n      editMode: true,\n      open: true\n    }));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* update({\n  payload\n}) {\n  yield put(parameterStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      message\n    } = yield call(parameterApi.update, payload.id, payload.formData);\n    yield call(closeDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(parameterStore.actions.setDialogStateLoading(false));\n}\n\nfunction* parameterSaga() {\n  yield takeEvery(parameterStore.extraActions.getList, getList);\n  yield takeLatest(parameterStore.extraActions.executeOperation, executeOperation);\n  yield takeEvery(parameterStore.extraActions.openCreateDialog, openCreateDialog);\n  yield takeEvery(parameterStore.extraActions.closeDialog, closeDialog);\n  yield takeLatest(parameterStore.extraActions.create, create);\n  yield takeLatest(parameterStore.extraActions.openUpdateDialog, openUpdateDialog);\n  yield takeLatest(parameterStore.extraActions.update, update);\n}\n\nexport default parameterSaga;","map":null,"metadata":{},"sourceType":"module"}