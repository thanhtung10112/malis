{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Drawing\\\\TabParts.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport useStyles from './styles';\nimport { useDispatch } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport { Paper, Link } from '@material-ui/core';\nimport { DataTable, CreateIcon, DeleteIcon, useConfirm, AppButton, DialogPart } from '@/components';\nimport _ from 'lodash';\nimport drawingApi from '@/apis/drawing.api';\nimport partApi from '@/apis/part.api';\nimport { defaultProperties, rightColumn } from '@/utils/columnProperties';\nimport { drawingStore, partStore, commonStore, summaryReportActions } from '@/store/reducers';\nimport { isAssemblyByDpn } from '@/utils/isAssembly';\n\nconst TabComponent = () => {\n  const classes = useStyles();\n  const {\n    confirm\n  } = useConfirm();\n  const {\n    0: selectedRows,\n    1: setSelectedRows\n  } = useState([]);\n  const drawingForm = useFormContext();\n  const watchItemList = drawingForm.watch('item_list', []);\n  const watchId = drawingForm.watch('id', null);\n  const dispatch = useDispatch();\n\n  const handleOpenComponentDialog = partEntity => () => {\n    dispatch(drawingStore.sagaOpenCreatePartDialog(partEntity));\n  };\n\n  const handleSelectRows = ({\n    selectionModel\n  }) => {\n    setSelectedRows(selectionModel);\n  };\n\n  const buildDescription = () => {\n    if (selectedRows.length > 1) {\n      return `Are you sure you want to delete ${selectedRows.length} selected parts?`;\n    }\n\n    return `Are you sure you want to delete ${selectedRows.length} selected part?`;\n  };\n\n  const deleteParts = async () => {\n    dispatch(drawingStore.actions.setDialogStateLoading(true));\n\n    try {\n      const parts = _.map(selectedRows, partId => {\n        const {\n          dpn,\n          id\n        } = _.find(watchItemList, {\n          id: partId\n        });\n\n        return {\n          entity_id: dpn,\n          id\n        };\n      });\n\n      const data = await partApi.executeOperation('delete', parts);\n\n      if (data.failed_count > 0) {\n        dispatch(summaryReportActions.setReportData(data));\n        dispatch(summaryReportActions.setOpen(true));\n      } else {\n        dispatch(commonStore.actions.setSuccessMessage(data.message));\n      }\n\n      const {\n        drawing\n      } = await drawingApi.getDetail(watchId);\n      drawingForm.setValue('item_list', drawing.item_list);\n      setSelectedRows([]);\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error));\n    }\n\n    dispatch(drawingStore.actions.setDialogStateLoading(false));\n  };\n\n  const handleDeleteParts = async () => {\n    const description = buildDescription();\n    const result = await confirm({\n      description\n    });\n\n    if (result === 'OK') {\n      deleteParts();\n    }\n  };\n\n  const handleOpenPartDialog = (id, dpn) => event => {\n    event.preventDefault();\n    const entity = isAssemblyByDpn(dpn) ? 'assembly' : 'item';\n    dispatch(partStore.sagaOpenUpdateDialog({\n      id,\n      entity\n    }));\n  };\n\n  const handleClosePartDialog = async () => {\n    setSelectedRows([]);\n    dispatch(drawingStore.actions.setDialogStateLoading(true));\n\n    try {\n      const {\n        drawing\n      } = await drawingApi.getDetail(watchId);\n      drawingForm.setValue('item_list', drawing.item_list);\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error));\n    }\n\n    dispatch(drawingStore.actions.setDialogStateLoading(false));\n  };\n\n  const newButtonDropdown = [{\n    label: 'Item',\n    onClick: handleOpenComponentDialog('item')\n  }, {\n    label: 'Assembly',\n    onClick: handleOpenComponentDialog('assembly')\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttonGroupRoot,\n      children: [/*#__PURE__*/_jsxDEV(AppButton, {\n        startIcon: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 31\n        }, this),\n        item: newButtonDropdown,\n        children: \"New\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AppButton, {\n        startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 31\n        }, this),\n        onClick: handleDeleteParts,\n        disabled: selectedRows.length === 0,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 1,\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        rows: watchItemList,\n        checkboxSelection: true,\n        selectionModel: selectedRows,\n        onSelectionModelChange: handleSelectRows,\n        onCellClick: (params, event) => {\n          if (['dpn', 'reference_to'].includes(params.field)) {\n            event.stopPropagation();\n          }\n        },\n        columns: [_objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'dpn',\n          headerName: 'Item',\n          flex: 0.2,\n\n          renderCell(params) {\n            const {\n              value,\n              id\n            } = params;\n            return /*#__PURE__*/_jsxDEV(Link, {\n              href: \"#\",\n              onClick: handleOpenPartDialog(id, value),\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 19\n            }, this);\n          }\n\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'reference_to',\n          headerName: 'Referenced Part Number',\n          flex: 0.2,\n\n          renderCell(params) {\n            const {\n              value,\n              row\n            } = params;\n            return /*#__PURE__*/_jsxDEV(Link, {\n              href: \"#\",\n              onClick: handleOpenPartDialog(row.id_ref, value),\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this);\n          }\n\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'description',\n          headerName: 'Description',\n          flex: 0.2\n        }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), rightColumn), {}, {\n          field: 'mass',\n          headerName: 'Mass (kg)',\n          flex: 0.1\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'raw_unit',\n          headerName: 'Unit',\n          flex: 0.1\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'material',\n          headerName: 'Material',\n          flex: 0.1\n        })],\n        hideFooter: true,\n        tableHeight: 385\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogPart, {\n      onClose: handleClosePartDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default TabComponent;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Drawing/TabParts.tsx"],"names":["useState","useStyles","useDispatch","useFormContext","Paper","Link","DataTable","CreateIcon","DeleteIcon","useConfirm","AppButton","DialogPart","_","drawingApi","partApi","defaultProperties","rightColumn","drawingStore","partStore","commonStore","summaryReportActions","isAssemblyByDpn","TabComponent","classes","confirm","selectedRows","setSelectedRows","drawingForm","watchItemList","watch","watchId","dispatch","handleOpenComponentDialog","partEntity","sagaOpenCreatePartDialog","handleSelectRows","selectionModel","buildDescription","length","deleteParts","actions","setDialogStateLoading","parts","map","partId","dpn","id","find","entity_id","data","executeOperation","failed_count","setReportData","setOpen","setSuccessMessage","message","drawing","getDetail","setValue","item_list","error","setError","handleDeleteParts","description","result","handleOpenPartDialog","event","preventDefault","entity","sagaOpenUpdateDialog","handleClosePartDialog","newButtonDropdown","label","onClick","buttonGroupRoot","params","includes","field","stopPropagation","headerName","flex","renderCell","value","row","id_ref"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AAEA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,UAAhC,EAA4CC,UAA5C,EAAwDC,SAAxD,EAAmEC,UAAnE,QAAqF,cAArF;AAEA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SAASC,iBAAT,EAA4BC,WAA5B,QAA+C,0BAA/C;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,WAAlC,EAA+CC,oBAA/C,QAA2E,kBAA3E;AACA,SAASC,eAAT,QAAgC,oBAAhC;;AAKA,MAAMC,YAAsB,GAAG,MAAM;AACnC,QAAMC,OAAO,GAAGtB,SAAS,EAAzB;AACA,QAAM;AAAEuB,IAAAA;AAAF,MAAcf,UAAU,EAA9B;AAEA,QAAM;AAAA,OAACgB,YAAD;AAAA,OAAeC;AAAf,MAAkC1B,QAAQ,CAAW,EAAX,CAAhD;AAEA,QAAM2B,WAAW,GAAGxB,cAAc,EAAlC;AACA,QAAMyB,aAAa,GAAGD,WAAW,CAACE,KAAZ,CAAkB,WAAlB,EAA+B,EAA/B,CAAtB;AACA,QAAMC,OAAO,GAAGH,WAAW,CAACE,KAAZ,CAAkB,IAAlB,EAAwB,IAAxB,CAAhB;AAEA,QAAME,QAAQ,GAAG7B,WAAW,EAA5B;;AAEA,QAAM8B,yBAAyB,GAAIC,UAAD,IAA4B,MAAM;AAClEF,IAAAA,QAAQ,CAACd,YAAY,CAACiB,wBAAb,CAAsCD,UAAtC,CAAD,CAAR;AACD,GAFD;;AAIA,QAAME,gBAAgB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAwB;AAC/CV,IAAAA,eAAe,CAACU,cAAD,CAAf;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAIZ,YAAY,CAACa,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,aAAQ,mCAAkCb,YAAY,CAACa,MAAO,kBAA9D;AACD;;AACD,WAAQ,mCAAkCb,YAAY,CAACa,MAAO,iBAA9D;AACD,GALD;;AAOA,QAAMC,WAAW,GAAG,YAAY;AAC9BR,IAAAA,QAAQ,CAACd,YAAY,CAACuB,OAAb,CAAqBC,qBAArB,CAA2C,IAA3C,CAAD,CAAR;;AACA,QAAI;AACF,YAAMC,KAAyB,GAAG9B,CAAC,CAAC+B,GAAF,CAAMlB,YAAN,EAAqBmB,MAAD,IAAY;AAChE,cAAM;AAAEC,UAAAA,GAAF;AAAOC,UAAAA;AAAP,YAAclC,CAAC,CAACmC,IAAF,CAAOnB,aAAP,EAAsB;AAAEkB,UAAAA,EAAE,EAAEF;AAAN,SAAtB,CAApB;;AACA,eAAO;AAAEI,UAAAA,SAAS,EAAEH,GAAb;AAAkBC,UAAAA;AAAlB,SAAP;AACD,OAHiC,CAAlC;;AAIA,YAAMG,IAAI,GAAG,MAAMnC,OAAO,CAACoC,gBAAR,CAAyB,QAAzB,EAAmCR,KAAnC,CAAnB;;AACA,UAAIO,IAAI,CAACE,YAAL,GAAoB,CAAxB,EAA2B;AACzBpB,QAAAA,QAAQ,CAACX,oBAAoB,CAACgC,aAArB,CAAmCH,IAAnC,CAAD,CAAR;AACAlB,QAAAA,QAAQ,CAACX,oBAAoB,CAACiC,OAArB,CAA6B,IAA7B,CAAD,CAAR;AACD,OAHD,MAGO;AACLtB,QAAAA,QAAQ,CAACZ,WAAW,CAACqB,OAAZ,CAAoBc,iBAApB,CAAsCL,IAAI,CAACM,OAA3C,CAAD,CAAR;AACD;;AACD,YAAM;AAAEC,QAAAA;AAAF,UAAc,MAAM3C,UAAU,CAAC4C,SAAX,CAAqB3B,OAArB,CAA1B;AACAH,MAAAA,WAAW,CAAC+B,QAAZ,CAAqB,WAArB,EAAkCF,OAAO,CAACG,SAA1C;AACAjC,MAAAA,eAAe,CAAC,EAAD,CAAf;AACD,KAfD,CAeE,OAAOkC,KAAP,EAAc;AACd7B,MAAAA,QAAQ,CAACZ,WAAW,CAACqB,OAAZ,CAAoBqB,QAApB,CAA6BD,KAA7B,CAAD,CAAR;AACD;;AACD7B,IAAAA,QAAQ,CAACd,YAAY,CAACuB,OAAb,CAAqBC,qBAArB,CAA2C,KAA3C,CAAD,CAAR;AACD,GArBD;;AAuBA,QAAMqB,iBAAiB,GAAG,YAAY;AACpC,UAAMC,WAAW,GAAG1B,gBAAgB,EAApC;AACA,UAAM2B,MAAM,GAAG,MAAMxC,OAAO,CAAC;AAC3BuC,MAAAA;AAD2B,KAAD,CAA5B;;AAGA,QAAIC,MAAM,KAAK,IAAf,EAAqB;AACnBzB,MAAAA,WAAW;AACZ;AACF,GARD;;AAUA,QAAM0B,oBAAoB,GAAG,CAACnB,EAAD,EAAaD,GAAb,KAA8BqB,KAAD,IAAW;AACnEA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,MAAM,GAAG/C,eAAe,CAACwB,GAAD,CAAf,GAAuB,UAAvB,GAAoC,MAAnD;AACAd,IAAAA,QAAQ,CAACb,SAAS,CAACmD,oBAAV,CAA+B;AAAEvB,MAAAA,EAAF;AAAMsB,MAAAA;AAAN,KAA/B,CAAD,CAAR;AACD,GAJD;;AAMA,QAAME,qBAAqB,GAAG,YAAY;AACxC5C,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAK,IAAAA,QAAQ,CAACd,YAAY,CAACuB,OAAb,CAAqBC,qBAArB,CAA2C,IAA3C,CAAD,CAAR;;AACA,QAAI;AACF,YAAM;AAAEe,QAAAA;AAAF,UAAc,MAAM3C,UAAU,CAAC4C,SAAX,CAAqB3B,OAArB,CAA1B;AACAH,MAAAA,WAAW,CAAC+B,QAAZ,CAAqB,WAArB,EAAkCF,OAAO,CAACG,SAA1C;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACd7B,MAAAA,QAAQ,CAACZ,WAAW,CAACqB,OAAZ,CAAoBqB,QAApB,CAA6BD,KAA7B,CAAD,CAAR;AACD;;AACD7B,IAAAA,QAAQ,CAACd,YAAY,CAACuB,OAAb,CAAqBC,qBAArB,CAA2C,KAA3C,CAAD,CAAR;AACD,GAVD;;AAYA,QAAM8B,iBAAiB,GAAG,CACxB;AACEC,IAAAA,KAAK,EAAE,MADT;AAEEC,IAAAA,OAAO,EAAEzC,yBAAyB,CAAC,MAAD;AAFpC,GADwB,EAKxB;AACEwC,IAAAA,KAAK,EAAE,UADT;AAEEC,IAAAA,OAAO,EAAEzC,yBAAyB,CAAC,UAAD;AAFpC,GALwB,CAA1B;AAWA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAET,OAAO,CAACmD,eAAxB;AAAA,8BACE,QAAC,SAAD;AAAW,QAAA,SAAS,eAAE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBAAtB;AAAsC,QAAA,IAAI,EAAEH,iBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,SAAD;AAAW,QAAA,SAAS,eAAE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBAAtB;AAAsC,QAAA,OAAO,EAAET,iBAA/C;AAAkE,QAAA,QAAQ,EAAErC,YAAY,CAACa,MAAb,KAAwB,CAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAE,CAAlB;AAAA,6BACE,QAAC,SAAD;AACE,QAAA,IAAI,EAAEV,aADR;AAEE,QAAA,iBAAiB,MAFnB;AAGE,QAAA,cAAc,EAAEH,YAHlB;AAIE,QAAA,sBAAsB,EAAEU,gBAJ1B;AAKE,QAAA,WAAW,EAAE,CAACwC,MAAD,EAAST,KAAT,KAAmB;AAC9B,cAAI,CAAC,KAAD,EAAQ,cAAR,EAAwBU,QAAxB,CAAiCD,MAAM,CAACE,KAAxC,CAAJ,EAAoD;AAClDX,YAAAA,KAAK,CAACY,eAAN;AACD;AACF,SATH;AAUE,QAAA,OAAO,EAAE,iCAEF/D,iBAFE;AAGL8D,UAAAA,KAAK,EAAE,KAHF;AAILE,UAAAA,UAAU,EAAE,MAJP;AAKLC,UAAAA,IAAI,EAAE,GALD;;AAMLC,UAAAA,UAAU,CAACN,MAAD,EAAS;AACjB,kBAAM;AAAEO,cAAAA,KAAF;AAASpC,cAAAA;AAAT,gBAAgB6B,MAAtB;AACA,gCACE,QAAC,IAAD;AAAM,cAAA,IAAI,EAAC,GAAX;AAAe,cAAA,OAAO,EAAEV,oBAAoB,CAACnB,EAAD,EAAeoC,KAAf,CAA5C;AAAA,wBACGA;AADH;AAAA;AAAA;AAAA;AAAA,oBADF;AAKD;;AAbI,4CAgBFnE,iBAhBE;AAiBL8D,UAAAA,KAAK,EAAE,cAjBF;AAkBLE,UAAAA,UAAU,EAAE,wBAlBP;AAmBLC,UAAAA,IAAI,EAAE,GAnBD;;AAoBLC,UAAAA,UAAU,CAACN,MAAD,EAAS;AACjB,kBAAM;AAAEO,cAAAA,KAAF;AAASC,cAAAA;AAAT,gBAAiBR,MAAvB;AACA,gCACE,QAAC,IAAD;AAAM,cAAA,IAAI,EAAC,GAAX;AAAe,cAAA,OAAO,EAAEV,oBAAoB,CAACkB,GAAG,CAACC,MAAL,EAAaF,KAAb,CAA5C;AAAA,wBACGA;AADH;AAAA;AAAA;AAAA;AAAA,oBADF;AAKD;;AA3BI,4CA8BFnE,iBA9BE;AA+BL8D,UAAAA,KAAK,EAAE,aA/BF;AAgCLE,UAAAA,UAAU,EAAE,aAhCP;AAiCLC,UAAAA,IAAI,EAAE;AAjCD,0DAoCFjE,iBApCE,GAqCFC,WArCE;AAsCL6D,UAAAA,KAAK,EAAE,MAtCF;AAuCLE,UAAAA,UAAU,EAAE,WAvCP;AAwCLC,UAAAA,IAAI,EAAE;AAxCD,4CA2CFjE,iBA3CE;AA4CL8D,UAAAA,KAAK,EAAE,UA5CF;AA6CLE,UAAAA,UAAU,EAAE,MA7CP;AA8CLC,UAAAA,IAAI,EAAE;AA9CD,4CAiDFjE,iBAjDE;AAkDL8D,UAAAA,KAAK,EAAE,UAlDF;AAmDLE,UAAAA,UAAU,EAAE,UAnDP;AAoDLC,UAAAA,IAAI,EAAE;AApDD,WAVX;AAiEE,QAAA,UAAU,MAjEZ;AAkEE,QAAA,WAAW,EAAE;AAlEf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YATF,eA+EE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEV;AAArB;AAAA;AAAA;AAAA;AAAA,YA/EF;AAAA,kBADF;AAmFD,CA5KD;;AA8KA,eAAehD,YAAf","sourcesContent":["import { useState } from 'react'\nimport useStyles from './styles'\nimport { useDispatch } from 'react-redux'\nimport { useFormContext } from 'react-hook-form'\n\nimport { Paper, Link } from '@material-ui/core'\nimport { DataTable, CreateIcon, DeleteIcon, useConfirm, AppButton, DialogPart } from '@/components'\n\nimport _ from 'lodash'\nimport drawingApi from '@/apis/drawing.api'\nimport partApi from '@/apis/part.api'\nimport { defaultProperties, rightColumn } from '@/utils/columnProperties'\nimport { drawingStore, partStore, commonStore, summaryReportActions } from '@/store/reducers'\nimport { isAssemblyByDpn } from '@/utils/isAssembly'\n\nimport type { PartEntity } from '@/types/Part'\nimport { PayloadOperation } from '@/types/Common'\n\nconst TabComponent: React.FC = () => {\n  const classes = useStyles()\n  const { confirm } = useConfirm()\n\n  const [selectedRows, setSelectedRows] = useState<number[]>([])\n\n  const drawingForm = useFormContext()\n  const watchItemList = drawingForm.watch('item_list', [])\n  const watchId = drawingForm.watch('id', null)\n\n  const dispatch = useDispatch()\n\n  const handleOpenComponentDialog = (partEntity: PartEntity) => () => {\n    dispatch(drawingStore.sagaOpenCreatePartDialog(partEntity))\n  }\n\n  const handleSelectRows = ({ selectionModel }) => {\n    setSelectedRows(selectionModel)\n  }\n\n  const buildDescription = () => {\n    if (selectedRows.length > 1) {\n      return `Are you sure you want to delete ${selectedRows.length} selected parts?`\n    }\n    return `Are you sure you want to delete ${selectedRows.length} selected part?`\n  }\n\n  const deleteParts = async () => {\n    dispatch(drawingStore.actions.setDialogStateLoading(true))\n    try {\n      const parts: PayloadOperation[] = _.map(selectedRows, (partId) => {\n        const { dpn, id } = _.find(watchItemList, { id: partId })\n        return { entity_id: dpn, id }\n      })\n      const data = await partApi.executeOperation('delete', parts)\n      if (data.failed_count > 0) {\n        dispatch(summaryReportActions.setReportData(data))\n        dispatch(summaryReportActions.setOpen(true))\n      } else {\n        dispatch(commonStore.actions.setSuccessMessage(data.message))\n      }\n      const { drawing } = await drawingApi.getDetail(watchId)\n      drawingForm.setValue('item_list', drawing.item_list)\n      setSelectedRows([])\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error))\n    }\n    dispatch(drawingStore.actions.setDialogStateLoading(false))\n  }\n\n  const handleDeleteParts = async () => {\n    const description = buildDescription()\n    const result = await confirm({\n      description\n    })\n    if (result === 'OK') {\n      deleteParts()\n    }\n  }\n\n  const handleOpenPartDialog = (id: number, dpn: string) => (event) => {\n    event.preventDefault()\n    const entity = isAssemblyByDpn(dpn) ? 'assembly' : 'item'\n    dispatch(partStore.sagaOpenUpdateDialog({ id, entity }))\n  }\n\n  const handleClosePartDialog = async () => {\n    setSelectedRows([])\n    dispatch(drawingStore.actions.setDialogStateLoading(true))\n    try {\n      const { drawing } = await drawingApi.getDetail(watchId)\n      drawingForm.setValue('item_list', drawing.item_list)\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error))\n    }\n    dispatch(drawingStore.actions.setDialogStateLoading(false))\n  }\n\n  const newButtonDropdown = [\n    {\n      label: 'Item',\n      onClick: handleOpenComponentDialog('item')\n    },\n    {\n      label: 'Assembly',\n      onClick: handleOpenComponentDialog('assembly')\n    }\n  ]\n\n  return (\n    <>\n      <div className={classes.buttonGroupRoot}>\n        <AppButton startIcon={<CreateIcon />} item={newButtonDropdown}>\n          New\n        </AppButton>\n        <AppButton startIcon={<DeleteIcon />} onClick={handleDeleteParts} disabled={selectedRows.length === 0}>\n          Remove\n        </AppButton>\n      </div>\n      <Paper elevation={1}>\n        <DataTable\n          rows={watchItemList}\n          checkboxSelection\n          selectionModel={selectedRows}\n          onSelectionModelChange={handleSelectRows}\n          onCellClick={(params, event) => {\n            if (['dpn', 'reference_to'].includes(params.field)) {\n              event.stopPropagation()\n            }\n          }}\n          columns={[\n            {\n              ...defaultProperties,\n              field: 'dpn',\n              headerName: 'Item',\n              flex: 0.2,\n              renderCell(params) {\n                const { value, id } = params\n                return (\n                  <Link href=\"#\" onClick={handleOpenPartDialog(id as number, value as string)}>\n                    {value}\n                  </Link>\n                )\n              }\n            },\n            {\n              ...defaultProperties,\n              field: 'reference_to',\n              headerName: 'Referenced Part Number',\n              flex: 0.2,\n              renderCell(params) {\n                const { value, row } = params\n                return (\n                  <Link href=\"#\" onClick={handleOpenPartDialog(row.id_ref, value as string)}>\n                    {value}\n                  </Link>\n                )\n              }\n            },\n            {\n              ...defaultProperties,\n              field: 'description',\n              headerName: 'Description',\n              flex: 0.2\n            },\n            {\n              ...defaultProperties,\n              ...rightColumn,\n              field: 'mass',\n              headerName: 'Mass (kg)',\n              flex: 0.1\n            },\n            {\n              ...defaultProperties,\n              field: 'raw_unit',\n              headerName: 'Unit',\n              flex: 0.1\n            },\n            {\n              ...defaultProperties,\n              field: 'material',\n              headerName: 'Material',\n              flex: 0.1\n            }\n          ]}\n          hideFooter\n          tableHeight={385}\n        />\n      </Paper>\n      <DialogPart onClose={handleClosePartDialog} />\n    </>\n  )\n}\n\nexport default TabComponent\n"]},"metadata":{},"sourceType":"module"}