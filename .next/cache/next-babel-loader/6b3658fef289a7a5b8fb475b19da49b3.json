{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { TextField } from '@material-ui/core';\nimport { GRID_CELL_EDIT_EXIT } from '@material-ui/data-grid';\nimport { FormControllerErrorMessage } from '@/components/index';\nimport clsx from 'clsx';\nimport * as yup from 'yup';\nimport _ from 'lodash';\nimport useStyles from '../styles';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nfunction DataTableTextField(props) {\n  var _form$errors$name;\n\n  const classes = useStyles();\n\n  const {\n    className,\n    onChangeValue,\n    params,\n    rules,\n    type\n  } = props,\n        rest = _objectWithoutProperties(props, [\"className\", \"onChangeValue\", \"params\", \"rules\", \"type\"]);\n\n  const {\n    api,\n    id,\n    field,\n    value,\n    error\n  } = params;\n  const [oldValue, setOldValue] = React.useState('');\n  const validationSchema = React.useMemo(() => {\n    if (_.isNil(rules)) {\n      return yup.object({\n        name: yup.string().nullable()\n      });\n    }\n\n    return yup.object({\n      name: rules\n    });\n  }, [rules]);\n  const form = useForm({\n    defaultValues: {\n      name: value\n    },\n    mode: 'onChange',\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  });\n  const watchValue = form.watch('name', '');\n  const {\n    errors\n  } = form.formState;\n  React.useEffect(() => {\n    setOldValue(value);\n  }, []);\n  React.useEffect(() => {\n    api.setEditCellProps({\n      id,\n      field,\n      props: {\n        value: watchValue,\n        error: Boolean(errors.name)\n      }\n    });\n  }, [watchValue, errors, api, field, id, error]);\n  React.useEffect(() => {\n    return api.subscribeEvent(GRID_CELL_EDIT_EXIT, () => {\n      if (!error && String(oldValue) !== String(watchValue)) {\n        onChangeValue(id, watchValue, field);\n      }\n    });\n  }, [api, watchValue, error]);\n  return /*#__PURE__*/_jsx(FormControllerErrorMessage, {\n    open: Boolean(form.errors.name),\n    title: (_form$errors$name = form.errors.name) === null || _form$errors$name === void 0 ? void 0 : _form$errors$name.message,\n    children: /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({}, rest), {}, {\n      autoFocus: true,\n      className: clsx(className, classes.root, form.errors.name && classes.textFieldError),\n      name: \"name\",\n      inputRef: form.register\n    }))\n  });\n}\n\nDataTableTextField.defaultProps = {\n  type: 'string'\n};\nexport default DataTableTextField;","map":null,"metadata":{},"sourceType":"module"}