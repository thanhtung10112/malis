{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction } from '@reduxjs/toolkit';\nexport const resetState = createAction('makeAList/RESET_STATE');\nexport const presetDetail = {\n  id: null,\n  name: '',\n  entity: '',\n  description: '',\n  is_user_default: false,\n  is_shared: false,\n  is_system_default: false,\n  columns_displayed: [],\n  sort_conditions: [],\n  where_conditions: {\n    conjunction: 'AND',\n    type: 'group',\n    conditions: []\n  },\n  ignore_case: false,\n  distinct: false,\n  created_by: '',\n  created_at: '',\n  updated_by: '',\n  updated_at: ''\n};\nexport const systemPreset = {\n  id: null,\n  name: ''\n};\nexport const permissions = {\n  update_system_default_presets: false\n};\nexport const initialState = {\n  isOpen: false,\n  isEditMode: false,\n  entity: '',\n  systemPreset,\n  presetDetail,\n  presetDefault: presetDetail,\n  presetList: [],\n  permissions,\n  filterType: 'own',\n  initData: {\n    columns: [],\n    comparators: [],\n    logicalOperators: [],\n    sortOptions: []\n  },\n  loading: {\n    table: false,\n    dialog: false\n  },\n  saveAsForm: {\n    open: false,\n    clearError: false,\n    error: ''\n  },\n  malForm: {\n    clearError: false,\n    error: ''\n  }\n};\nconst makeAListReducer = createSlice({\n  name: 'makeAList',\n  initialState,\n  reducers: {\n    setOpen(state, action) {\n      state.isOpen = action.payload;\n    },\n\n    setIsEditMode(state, action) {\n      state.isEditMode = action.payload;\n    },\n\n    setPresetDetail(state, action) {\n      state.presetDetail = _objectSpread(_objectSpread({}, state.presetDetail), action.payload);\n    },\n\n    resetPresetDetail(state) {\n      state.presetDetail = _objectSpread(_objectSpread({}, presetDetail), {}, {\n        entity: state.presetDetail.entity\n      });\n    },\n\n    setPresetList(state, action) {\n      state.presetList = action.payload;\n    },\n\n    setFilterType(state, action) {\n      state.filterType = action.payload;\n    },\n\n    setInitData(state, action) {\n      state.initData = action.payload;\n    },\n\n    setSystemPreset(state, action) {\n      state.systemPreset = action.payload;\n    },\n\n    setPresetDefault(state, action) {\n      state.presetDefault = action.payload;\n    },\n\n    setPermissions(state, action) {\n      state.permissions = action.payload;\n    },\n\n    setLoadingTable(state, action) {\n      state.loading.table = action.payload;\n    },\n\n    setLoadingDialog(state, action) {\n      state.loading.dialog = action.payload;\n    },\n\n    setSaveAsForm(state, action) {\n      state.saveAsForm = _objectSpread(_objectSpread({}, state.saveAsForm), action.payload);\n    },\n\n    setMalForm(state, action) {\n      state.malForm = _objectSpread(_objectSpread({}, state.malForm), action.payload);\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n});\nexport const {\n  setOpen,\n  setIsEditMode,\n  setPresetDetail,\n  resetPresetDetail,\n  setPresetList,\n  setFilterType,\n  setInitData,\n  setSystemPreset,\n  setPresetDefault,\n  setPermissions,\n  setLoadingTable,\n  setSaveAsForm,\n  setLoadingDialog,\n  setMalForm\n} = makeAListReducer.actions;\nexport const open = createAction('makeAList/OPEN');\nexport const create = createAction('makeAList/CREATE');\nexport const getList = createAction('makeAList/GET_LIST');\nexport const getDetail = createAction('makeAList/GET_DETAIL');\nexport const getInitData = createAction('makeAList/GET_INIT_DATA');\nexport const share = createAction('makeAList/SHARE');\nexport const update = createAction('makeAList/UPDATE');\nexport const remove = createAction('makeAList/REMOVE');\nexport const clearDefault = createAction('makeAList/CLEAR_DEFAULT');\nexport const exportMakeAList = createAction('makeAList/EXPORT');\nexport const changeFilterType = createAction('makeAList/CHANGE_FILTER_TYPE');\nexport const saveAs = createAction('makeAList/SAVE_AS');\nexport const stopMakeAList = createAction('makeAList/STOP');\nexport const selectIsOpen = state => state.makeAList.isOpen;\nexport const selectIsEditMode = state => state.makeAList.isEditMode;\nexport const selectPresetDetail = state => state.makeAList.presetDetail;\nexport const selectColumnDisplay = state => state.makeAList.presetDetail.columns_displayed;\nexport const selectWhereConditions = state => state.makeAList.presetDetail.where_conditions;\nexport const selectSortConditions = state => state.makeAList.presetDetail.sort_conditions;\nexport const selectPresetList = state => state.makeAList.presetList;\nexport const selectPresetDefault = state => state.makeAList.presetDefault;\nexport const selectSystemPreset = state => state.makeAList.systemPreset;\nexport const selectFilterType = state => state.makeAList.filterType;\nexport const selectPermissions = state => state.makeAList.permissions;\nexport const selectEntity = state => state.makeAList.entity;\nexport const selectColumnsData = state => state.makeAList.initData.columns;\nexport const selectComparatorsData = state => state.makeAList.initData.comparators;\nexport const selectLogicalOperatorsData = state => state.makeAList.initData.logicalOperators;\nexport const selectSortOptionsData = state => state.makeAList.initData.sortOptions;\nexport const selectLoadingTable = state => state.makeAList.loading.table;\nexport const selectLoadingDialog = state => state.makeAList.loading.dialog;\nexport const selectSaveAsForm = state => state.makeAList.saveAsForm;\nexport const selectMalForm = state => state.makeAList.malForm;\nexport default makeAListReducer.reducer;","map":null,"metadata":{},"sourceType":"module"}