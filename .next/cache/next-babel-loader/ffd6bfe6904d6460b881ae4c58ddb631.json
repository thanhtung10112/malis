{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '@/styles/page/layout';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport { useTranslation } from 'next-i18next';\nimport useGetData from '@/hooks/useGetData';\nimport { Link } from '@material-ui/core';\nimport { AppLayout, EditIcon, CreateIcon, AppAutocompleteStyled, DeleteIcon, SaveIcon, MakeAListIcon, DialogTag, useConfirm, AppAutocompleteStyledAsync, DialogDrawingCreateEdit, DialogPart } from '@/components';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport { tagStore, commonStore, drawingStore } from '@/store/reducers';\nimport { defaultProperties, iconColumn } from '@/utils/columnProperties';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nimport { defaultTagInitDataForCE, defaultTagDetail } from '@/utils/defaultValues';\n\nconst Specifications_Page = () => {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation('element');\n  const {\n    confirm\n  } = useConfirm();\n  const {\n    getInitDataForCE,\n    getGeneratedCode,\n    getDetail\n  } = useGetData('elements');\n  const {\n    0: openDialog,\n    1: setOpenDialog\n  } = useState(false);\n  const {\n    0: initDataForCE,\n    1: setInitDataForCE\n  } = useState(defaultTagInitDataForCE);\n  const {\n    0: tagDetail,\n    1: setTagDetail\n  } = useState(defaultTagDetail);\n  const breadcrumbData = useMemo(() => [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Drawings',\n    href: '/drawings'\n  }, {\n    label: 'Tags Management',\n    href: '/tags'\n  }], []);\n  const dispatch = useDispatch();\n  const permissions = useSelector(tagStore.selectPermissions);\n  const userJob = useSelector(commonStore.selectUserValueJob);\n  const {\n    wiki_page,\n    column_tooltips,\n    jobs: jobOptions\n  } = useSelector(tagStore.selectInitDataForList);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const dataList = useSelector(tagStore.selectDataList);\n  const userDrawing = useSelector(commonStore.selectUserValueDrawing);\n  useEffect(() => {\n    return () => dispatch(commonStore.actions.resetUserValue());\n  }, []);\n  useEffect(() => {\n    const schematicValue = userDrawing.value > 0 ? userDrawing : null;\n    setTagDetail(currentState => immer(currentState, draft => {\n      draft.schematic_id = schematicValue;\n    }));\n  }, [userDrawing]);\n  useEffect(() => {\n    setTagDetail(currentState => immer(currentState, draft => {\n      draft.job_id = userJob.value;\n    }));\n  }, [userJob]);\n\n  const resetDetail = () => {\n    setTagDetail(currentState => immer(defaultTagDetail, draft => {\n      draft.schematic_id = currentState.schematic_id;\n      draft.job_id = currentState.job_id;\n    }));\n  };\n\n  const handleOpenCreateDialog = async () => {\n    dispatch(commonStore.actions.setLoadingPage(true));\n\n    try {\n      const resInitDataForCE = await getInitDataForCE();\n      setInitDataForCE(resInitDataForCE);\n\n      if (userDrawing.value > 0) {\n        const generatedCode = await getGeneratedCode({\n          drawing_id: userDrawing.value\n        });\n        setTagDetail(currentState => immer(currentState, draft => {\n          draft.element_id = generatedCode;\n        }));\n      }\n\n      setOpenDialog(true);\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    dispatch(commonStore.actions.setLoadingPage(false));\n  };\n\n  const handleOpenUpdateDialog = id => async () => {\n    dispatch(commonStore.actions.setLoadingPage(true));\n\n    try {\n      const resInitDataForCE = await getInitDataForCE();\n      const resDetail = await getDetail(id);\n      setInitDataForCE(resInitDataForCE);\n      setTagDetail(immer(resDetail, draft => {\n        draft.schematic_id = resDetail.related_schematic;\n        draft.part_id = resDetail.related_part;\n      }));\n      setOpenDialog(true);\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    dispatch(commonStore.actions.setLoadingPage(false));\n  };\n\n  const handleChangeUserJob = (event, optionValue) => {\n    dispatch(tagStore.sagaChangeUserJob(optionValue));\n  };\n\n  const handleChangeUserDrawing = (event, optionValue) => {\n    dispatch(tagStore.sagaChangeUserDrawing(optionValue));\n  };\n\n  const handleDeleteTags = async () => {\n    const description = getMessageConfirm(t, 'element', selectedRows, 'delete');\n    const result = await confirm({\n      description\n    });\n\n    if (result === 'OK') {\n      const tags = _.map(selectedRows, partId => {\n        const {\n          schematic_id,\n          id\n        } = _.find(dataList, {\n          id: partId\n        });\n\n        return {\n          entity_id: schematic_id,\n          id\n        };\n      });\n\n      dispatch(tagStore.sagaRemove(tags));\n    }\n  };\n\n  const handleOpenDrawingDialog = schematicId => () => {\n    dispatch(drawingStore.sagaOpenUpdateDialog(schematicId));\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n    resetDetail();\n    dispatch(tagStore.sagaGetList());\n  };\n\n  const columns = useMemo(() => [_objectSpread(_objectSpread(_objectSpread({}, defaultProperties), iconColumn), {}, {\n    description: column_tooltips.edit,\n    field: 'id',\n    headerName: 'Edit',\n    renderCell: params => {\n      return /*#__PURE__*/_jsx(EditIcon, {\n        onClick: handleOpenUpdateDialog(params.value)\n      });\n    }\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.schematic_id,\n    field: 'schematic_id',\n    headerName: 'Schematic #',\n    flex: 0.15,\n\n    renderCell(params) {\n      const {\n        value,\n        row\n      } = params;\n      return /*#__PURE__*/_jsx(Link, {\n        href: \"#\",\n        onClick: handleOpenDrawingDialog(row.schematic_pk_id),\n        children: value\n      });\n    }\n\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.tag,\n    field: 'tag',\n    headerName: 'Tag #',\n    flex: 0.15\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.part_id,\n    field: 'part_id',\n    headerName: 'Part #',\n    flex: 0.2\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.description,\n    headerName: 'Description',\n    flex: 0.6,\n    field: 'description'\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.rfq_id,\n    field: 'rfq_id',\n    headerName: 'RFQ #',\n    width: 80\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.rfo_id,\n    field: 'rfo_id',\n    headerName: 'RFO  #',\n    width: 80\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.puco_id,\n    field: 'puco',\n    headerName: 'PuCo',\n    width: 80\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.order_id,\n    field: 'order_id',\n    headerName: 'Order  #',\n    width: 120\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.box_nr,\n    field: 'box_nr',\n    headerName: 'BoxNr',\n    width: 80\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.cnt_nr,\n    field: 'cnt_nr',\n    headerName: 'CntNr',\n    width: 80\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.package_id,\n    field: 'package_id',\n    headerName: 'Package #',\n    width: 80\n  })], []);\n  const buttonsPage = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n    onClick: handleOpenCreateDialog,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create) || userJob.value < 0 || !(userJob === null || userJob === void 0 ? void 0 : userJob.value)\n  }, {\n    label: t('common:button.save'),\n    startIcon: /*#__PURE__*/_jsx(SaveIcon, {}),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.edit)\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n    onClick: handleDeleteTags,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.delete) || selectedRows.length === 0\n  }, {\n    label: t('common:button.make_a_list'),\n    startIcon: /*#__PURE__*/_jsx(MakeAListIcon, {})\n  }];\n\n  const Dialogs = /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(DialogTag, {\n      open: openDialog,\n      initData: initDataForCE,\n      detail: tagDetail,\n      onClose: handleCloseDialog\n    }), /*#__PURE__*/_jsx(DialogDrawingCreateEdit, {}), /*#__PURE__*/_jsx(DialogPart, {})]\n  });\n\n  const Options = /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(AppAutocompleteStyled, {\n      className: classes.controlAutocomplete,\n      width: 200,\n      label: \"Jobs\",\n      options: jobOptions,\n      value: userJob,\n      renderOption: option => option.description,\n      primaryKeyOption: \"value\",\n      onChange: handleChangeUserJob\n    }), /*#__PURE__*/_jsx(AppAutocompleteStyledAsync, {\n      disabled: !(userJob === null || userJob === void 0 ? void 0 : userJob.value),\n      width: 250,\n      label: \"Schematics\",\n      className: classes.controlAutocomplete,\n      compName: \"drawing_list\",\n      additionalData: {\n        limit_to_job: userJob.value,\n        include_all_drawings_option: true\n      },\n      onChange: handleChangeUserDrawing,\n      value: userDrawing,\n      defaultOptions: [commonStore.initialState.userValue.drawing]\n    })]\n  });\n\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: \"element\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: wiki_page,\n    searchProps: {\n      width: 320\n    },\n    buttons: buttonsPage,\n    permissions: permissions,\n    tableProps: {\n      columns\n    },\n    Dialogs: Dialogs,\n    Options: Options\n  });\n};\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'element', 'make_a_list', 'advanced_filter', 'drawing', 'item', 'assembly']);\nexport default Specifications_Page;","map":null,"metadata":{},"sourceType":"module"}