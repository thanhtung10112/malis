{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\pages\\\\currencies.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '@/styles/page/layout';\nimport { useTranslation } from 'next-i18next';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport { DialogCurrencyCreateEdit, useConfirm, confirmConstant, AppLayout, EditIcon, CreateIcon, EnableIcon, DisableIcon, DeleteIcon, AppAutocompleteStyled } from '@/components';\nimport { currencyStore, commonStore } from '@/store/reducers';\nimport clsx from 'clsx';\nimport * as columnProperties from '@/utils/columnProperties';\nimport * as currency from '@/utils/currency';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nexport default function Currencies() {\n  const {\n    t\n  } = useTranslation('currency');\n  const classes = useStyles();\n  const breadcrumbData = [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Basic Options',\n    href: '/jobs'\n  }, {\n    label: 'Currencies Management',\n    href: '/currencies'\n  }];\n  const {\n    confirm\n  } = useConfirm();\n  const dispatch = useDispatch();\n  const {\n    base_currency_list,\n    user_base_currency,\n    column_tooltips\n  } = useSelector(currencyStore.selectInitDataForList);\n  const permissions = useSelector(currencyStore.selectPermissions);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const initDataForList = useSelector(currencyStore.selectInitDataForList);\n  const isEmptySelectedRows = selectedRows.length <= 0;\n\n  const onChangeBaseCurrency = (event, optionValue) => {\n    dispatch(commonStore.actions.setTableState({\n      page: 1\n    }));\n    dispatch(currencyStore.sagaChangeUserCurrency(optionValue));\n  };\n\n  const onOpenCreateDialog = () => {\n    dispatch(currencyStore.sagaOpenCreateDialog());\n  };\n\n  const onOpenUpdateDialog = id => () => {\n    dispatch(currencyStore.sagaOpenUpdateDialog(id));\n  };\n\n  const onExecuteActions = operation => async () => {\n    const description = getMessageConfirm(t, 'currency', selectedRows, operation);\n    const result = await confirm({\n      description\n    });\n\n    if (result === confirmConstant.actionTypes.OK) {\n      dispatch(commonStore.sagaExecuteOperation({\n        entity: 'currency',\n        operation,\n        operationList: selectedRows\n      }));\n    }\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    field: 'id',\n    headerName: 'Edit',\n    description: column_tooltips.edit,\n    renderCell: param => {\n      return /*#__PURE__*/_jsxDEV(EditIcon, {\n        onClick: onOpenUpdateDialog(param.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 16\n      }, this);\n    }\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.currency_id,\n    field: 'currency_id',\n    headerName: 'Code'\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.description,\n    field: 'description',\n    headerName: 'Description',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.rightColumn), {}, {\n    description: column_tooltips.multiplier,\n    field: 'multiplier',\n    headerName: 'Currency Multiplier',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.numberColumn), {}, {\n    description: column_tooltips.rate,\n    field: 'rate',\n    headerName: 'Rate',\n    flex: 0.05,\n\n    valueFormatter(params) {\n      return currency.format(params.value, {\n        precision: 6\n      });\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.rightColumn), {}, {\n    description: column_tooltips.round_to,\n    field: 'round_to',\n    headerName: 'Round to',\n    sortable: false,\n    disableColumnMenu: true,\n    flex: 0.05\n  }), _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.rightColumn), columnProperties.iconColumn), {}, {\n    description: column_tooltips.status,\n    field: 'status',\n    headerName: 'Status',\n    renderCell: param => param.value ? /*#__PURE__*/_jsxDEV(EnableIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 45\n    }, this) : /*#__PURE__*/_jsxDEV(DisableIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 62\n    }, this)\n  })];\n  const buttons = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 18\n    }, this),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create),\n    onClick: onOpenCreateDialog\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 18\n    }, this),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.delete),\n    onClick: onExecuteActions('delete')\n  }, {\n    label: t('common:button.enable'),\n    startIcon: /*#__PURE__*/_jsxDEV(EnableIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 18\n    }, this),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable),\n    onClick: onExecuteActions('enable')\n  }, {\n    label: t('common:button.disable'),\n    startIcon: /*#__PURE__*/_jsxDEV(DisableIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 18\n    }, this),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable),\n    onClick: onExecuteActions('disable')\n  }];\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    entity: \"currency\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: initDataForList.wiki_page,\n    permissions: permissions,\n    Dialogs: /*#__PURE__*/_jsxDEV(DialogCurrencyCreateEdit, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 16\n    }, this),\n    Options: /*#__PURE__*/_jsxDEV(AppAutocompleteStyled, {\n      width: 180,\n      label: \"Base currency\",\n      className: classes.controlAutocomplete,\n      options: base_currency_list,\n      value: user_base_currency,\n      getOptionLabel: option => option.currency_id,\n      onChange: onChangeBaseCurrency\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this),\n    buttons: buttons,\n    tableProps: {\n      className: classes.currencyTable,\n      columns: columns,\n\n      getRowClassName(params) {\n        return clsx({\n          homeCurrency: !params.row.base_currency\n        });\n      },\n\n      isRowSelectable(params) {\n        return Boolean(params.row.base_currency);\n      }\n\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\nexport const getServerSideProps = useAuthMiddleware(['common', 'currency', 'advanced_filter']);","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/pages/currencies.tsx"],"names":["useDispatch","useSelector","useStyles","useTranslation","useAuthMiddleware","DialogCurrencyCreateEdit","useConfirm","confirmConstant","AppLayout","EditIcon","CreateIcon","EnableIcon","DisableIcon","DeleteIcon","AppAutocompleteStyled","currencyStore","commonStore","clsx","columnProperties","currency","getMessageConfirm","Currencies","t","classes","breadcrumbData","label","href","confirm","dispatch","base_currency_list","user_base_currency","column_tooltips","selectInitDataForList","permissions","selectPermissions","selectedRows","selectSelectedRows","initDataForList","isEmptySelectedRows","length","onChangeBaseCurrency","event","optionValue","actions","setTableState","page","sagaChangeUserCurrency","onOpenCreateDialog","sagaOpenCreateDialog","onOpenUpdateDialog","id","sagaOpenUpdateDialog","onExecuteActions","operation","description","result","actionTypes","OK","sagaExecuteOperation","entity","operationList","columns","defaultProperties","iconColumn","field","headerName","edit","renderCell","param","value","currency_id","flex","rightColumn","multiplier","numberColumn","rate","valueFormatter","params","format","precision","round_to","sortable","disableColumnMenu","status","buttons","startIcon","disabled","create","onClick","delete","disable_enable","wiki_page","controlAutocomplete","option","className","currencyTable","getRowClassName","homeCurrency","row","base_currency","isRowSelectable","Boolean","getServerSideProps"],"mappings":";;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AAEA,SACEC,wBADF,EAEEC,UAFF,EAGEC,eAHF,EAIEC,SAJF,EAKEC,QALF,EAMEC,UANF,EAOEC,UAPF,EAQEC,WARF,EASEC,UATF,EAUEC,qBAVF,QAWO,cAXP;AAaA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,kBAA3C;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAO,KAAKC,gBAAZ,MAAkC,0BAAlC;AACA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AAKA,eAAe,SAASC,UAAT,GAAsB;AACnC,QAAM;AAAEC,IAAAA;AAAF,MAAQnB,cAAc,CAAC,UAAD,CAA5B;AAEA,QAAMoB,OAAO,GAAGrB,SAAS,EAAzB;AAEA,QAAMsB,cAAc,GAAG,CACrB;AAAEC,IAAAA,KAAK,EAAE,MAAT;AAAiBC,IAAAA,IAAI,EAAE;AAAvB,GADqB,EAErB;AAAED,IAAAA,KAAK,EAAE,eAAT;AAA0BC,IAAAA,IAAI,EAAE;AAAhC,GAFqB,EAGrB;AAAED,IAAAA,KAAK,EAAE,uBAAT;AAAkCC,IAAAA,IAAI,EAAE;AAAxC,GAHqB,CAAvB;AAMA,QAAM;AAAEC,IAAAA;AAAF,MAAcrB,UAAU,EAA9B;AAEA,QAAMsB,QAAQ,GAAG5B,WAAW,EAA5B;AACA,QAAM;AAAE6B,IAAAA,kBAAF;AAAsBC,IAAAA,kBAAtB;AAA0CC,IAAAA;AAA1C,MAA8D9B,WAAW,CAACc,aAAa,CAACiB,qBAAf,CAA/E;AACA,QAAMC,WAAW,GAAGhC,WAAW,CAACc,aAAa,CAACmB,iBAAf,CAA/B;AACA,QAAMC,YAAY,GAAGlC,WAAW,CAACe,WAAW,CAACoB,kBAAb,CAAhC;AACA,QAAMC,eAAe,GAAGpC,WAAW,CAACc,aAAa,CAACiB,qBAAf,CAAnC;AACA,QAAMM,mBAAmB,GAAGH,YAAY,CAACI,MAAb,IAAuB,CAAnD;;AAEA,QAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,WAAR,KAAsC;AACjEd,IAAAA,QAAQ,CAACZ,WAAW,CAAC2B,OAAZ,CAAoBC,aAApB,CAAkC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAlC,CAAD,CAAR;AACAjB,IAAAA,QAAQ,CAACb,aAAa,CAAC+B,sBAAd,CAAqCJ,WAArC,CAAD,CAAR;AACD,GAHD;;AAKA,QAAMK,kBAAkB,GAAG,MAAM;AAC/BnB,IAAAA,QAAQ,CAACb,aAAa,CAACiC,oBAAd,EAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,kBAAkB,GAAIC,EAAD,IAAgB,MAAM;AAC/CtB,IAAAA,QAAQ,CAACb,aAAa,CAACoC,oBAAd,CAAmCD,EAAnC,CAAD,CAAR;AACD,GAFD;;AAIA,QAAME,gBAAgB,GAAIC,SAAD,IAAkC,YAAY;AACrE,UAAMC,WAAW,GAAGlC,iBAAiB,CAACE,CAAD,EAAI,UAAJ,EAAgBa,YAAhB,EAA8BkB,SAA9B,CAArC;AACA,UAAME,MAAM,GAAG,MAAM5B,OAAO,CAAC;AAAE2B,MAAAA;AAAF,KAAD,CAA5B;;AACA,QAAIC,MAAM,KAAKhD,eAAe,CAACiD,WAAhB,CAA4BC,EAA3C,EAA+C;AAC7C7B,MAAAA,QAAQ,CACNZ,WAAW,CAAC0C,oBAAZ,CAAiC;AAC/BC,QAAAA,MAAM,EAAE,UADuB;AAE/BN,QAAAA,SAF+B;AAG/BO,QAAAA,aAAa,EAAEzB;AAHgB,OAAjC,CADM,CAAR;AAOD;AACF,GAZD;;AAcA,QAAM0B,OAAoB,GAAG,+CAEtB3C,gBAAgB,CAAC4C,iBAFK,GAGtB5C,gBAAgB,CAAC6C,UAHK;AAIzBC,IAAAA,KAAK,EAAE,IAJkB;AAKzBC,IAAAA,UAAU,EAAE,MALa;AAMzBX,IAAAA,WAAW,EAAEvB,eAAe,CAACmC,IANJ;AAOzBC,IAAAA,UAAU,EAAGC,KAAD,IAAW;AACrB,0BAAO,QAAC,QAAD;AAAU,QAAA,OAAO,EAAEnB,kBAAkB,CAACmB,KAAK,CAACC,KAAP;AAArC;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AATwB,sCAYtBnD,gBAAgB,CAAC4C,iBAZK;AAazBR,IAAAA,WAAW,EAAEvB,eAAe,CAACuC,WAbJ;AAczBN,IAAAA,KAAK,EAAE,aAdkB;AAezBC,IAAAA,UAAU,EAAE;AAfa,sCAkBtB/C,gBAAgB,CAAC4C,iBAlBK;AAmBzBR,IAAAA,WAAW,EAAEvB,eAAe,CAACuB,WAnBJ;AAoBzBU,IAAAA,KAAK,EAAE,aApBkB;AAqBzBC,IAAAA,UAAU,EAAE,aArBa;AAsBzBM,IAAAA,IAAI,EAAE;AAtBmB,oDAyBtBrD,gBAAgB,CAAC4C,iBAzBK,GA0BtB5C,gBAAgB,CAACsD,WA1BK;AA2BzBlB,IAAAA,WAAW,EAAEvB,eAAe,CAAC0C,UA3BJ;AA4BzBT,IAAAA,KAAK,EAAE,YA5BkB;AA6BzBC,IAAAA,UAAU,EAAE,qBA7Ba;AA8BzBM,IAAAA,IAAI,EAAE;AA9BmB,oDAiCtBrD,gBAAgB,CAAC4C,iBAjCK,GAkCtB5C,gBAAgB,CAACwD,YAlCK;AAmCzBpB,IAAAA,WAAW,EAAEvB,eAAe,CAAC4C,IAnCJ;AAoCzBX,IAAAA,KAAK,EAAE,MApCkB;AAqCzBC,IAAAA,UAAU,EAAE,MArCa;AAsCzBM,IAAAA,IAAI,EAAE,IAtCmB;;AAuCzBK,IAAAA,cAAc,CAACC,MAAD,EAAS;AACrB,aAAO1D,QAAQ,CAAC2D,MAAT,CAAgBD,MAAM,CAACR,KAAvB,EAA8B;AAAEU,QAAAA,SAAS,EAAE;AAAb,OAA9B,CAAP;AACD;;AAzCwB,oDA4CtB7D,gBAAgB,CAAC4C,iBA5CK,GA6CtB5C,gBAAgB,CAACsD,WA7CK;AA8CzBlB,IAAAA,WAAW,EAAEvB,eAAe,CAACiD,QA9CJ;AA+CzBhB,IAAAA,KAAK,EAAE,UA/CkB;AAgDzBC,IAAAA,UAAU,EAAE,UAhDa;AAiDzBgB,IAAAA,QAAQ,EAAE,KAjDe;AAkDzBC,IAAAA,iBAAiB,EAAE,IAlDM;AAmDzBX,IAAAA,IAAI,EAAE;AAnDmB,kEAsDtBrD,gBAAgB,CAAC4C,iBAtDK,GAuDtB5C,gBAAgB,CAACsD,WAvDK,GAwDtBtD,gBAAgB,CAAC6C,UAxDK;AAyDzBT,IAAAA,WAAW,EAAEvB,eAAe,CAACoD,MAzDJ;AA0DzBnB,IAAAA,KAAK,EAAE,QA1DkB;AA2DzBC,IAAAA,UAAU,EAAE,QA3Da;AA4DzBE,IAAAA,UAAU,EAAGC,KAAD,IAAYA,KAAK,CAACC,KAAN,gBAAc,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAAd,gBAA+B,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AA5D9B,KAA7B;AAgEA,QAAMe,OAAO,GAAG,CACd;AACE3D,IAAAA,KAAK,EAAEH,CAAC,CAAC,mBAAD,CADV;AAEE+D,IAAAA,SAAS,eAAE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAFb;AAGEC,IAAAA,QAAQ,EAAE,EAACrD,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEsD,MAAd,CAHZ;AAIEC,IAAAA,OAAO,EAAEzC;AAJX,GADc,EAOd;AACEtB,IAAAA,KAAK,EAAEH,CAAC,CAAC,sBAAD,CADV;AAEE+D,IAAAA,SAAS,eAAE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAFb;AAGEC,IAAAA,QAAQ,EAAEhD,mBAAmB,IAAI,EAACL,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEwD,MAAd,CAHnC;AAIED,IAAAA,OAAO,EAAEpC,gBAAgB,CAAC,QAAD;AAJ3B,GAPc,EAad;AACE3B,IAAAA,KAAK,EAAEH,CAAC,CAAC,sBAAD,CADV;AAEE+D,IAAAA,SAAS,eAAE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAFb;AAGEC,IAAAA,QAAQ,EAAEhD,mBAAmB,IAAI,EAACL,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEyD,cAAd,CAHnC;AAIEF,IAAAA,OAAO,EAAEpC,gBAAgB,CAAC,QAAD;AAJ3B,GAbc,EAmBd;AACE3B,IAAAA,KAAK,EAAEH,CAAC,CAAC,uBAAD,CADV;AAEE+D,IAAAA,SAAS,eAAE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAFb;AAGEC,IAAAA,QAAQ,EAAEhD,mBAAmB,IAAI,EAACL,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEyD,cAAd,CAHnC;AAIEF,IAAAA,OAAO,EAAEpC,gBAAgB,CAAC,SAAD;AAJ3B,GAnBc,CAAhB;AA2BA,sBACE,QAAC,SAAD;AACE,IAAA,MAAM,EAAC,UADT;AAEE,IAAA,WAAW,EAAE5B,cAFf;AAGE,IAAA,QAAQ,EAAEa,eAAe,CAACsD,SAH5B;AAIE,IAAA,WAAW,EAAE1D,WAJf;AAKE,IAAA,OAAO,eAAE,QAAC,wBAAD;AAAA;AAAA;AAAA;AAAA,YALX;AAME,IAAA,OAAO,eACL,QAAC,qBAAD;AACE,MAAA,KAAK,EAAE,GADT;AAEE,MAAA,KAAK,EAAC,eAFR;AAGE,MAAA,SAAS,EAAEV,OAAO,CAACqE,mBAHrB;AAIE,MAAA,OAAO,EAAE/D,kBAJX;AAKE,MAAA,KAAK,EAAEC,kBALT;AAME,MAAA,cAAc,EAAG+D,MAAD,IAAYA,MAAM,CAACvB,WANrC;AAOE,MAAA,QAAQ,EAAE9B;AAPZ;AAAA;AAAA;AAAA;AAAA,YAPJ;AAiBE,IAAA,OAAO,EAAE4C,OAjBX;AAkBE,IAAA,UAAU,EAAE;AACVU,MAAAA,SAAS,EAAEvE,OAAO,CAACwE,aADT;AAEVlC,MAAAA,OAAO,EAAEA,OAFC;;AAGVmC,MAAAA,eAAe,CAACnB,MAAD,EAAS;AACtB,eAAO5D,IAAI,CAAC;AAAEgF,UAAAA,YAAY,EAAE,CAACpB,MAAM,CAACqB,GAAP,CAAWC;AAA5B,SAAD,CAAX;AACD,OALS;;AAMVC,MAAAA,eAAe,CAACvB,MAAD,EAAS;AACtB,eAAOwB,OAAO,CAACxB,MAAM,CAACqB,GAAP,CAAWC,aAAZ,CAAd;AACD;;AARS;AAlBd;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD;AAED,OAAO,MAAMG,kBAAkB,GAAGlG,iBAAiB,CAAC,CAAC,QAAD,EAAW,UAAX,EAAuB,iBAAvB,CAAD,CAA5C","sourcesContent":["import { useDispatch, useSelector } from 'react-redux'\nimport useStyles from '@/styles/page/layout'\nimport { useTranslation } from 'next-i18next'\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware'\n\nimport {\n  DialogCurrencyCreateEdit,\n  useConfirm,\n  confirmConstant,\n  AppLayout,\n  EditIcon,\n  CreateIcon,\n  EnableIcon,\n  DisableIcon,\n  DeleteIcon,\n  AppAutocompleteStyled\n} from '@/components'\n\nimport { currencyStore, commonStore } from '@/store/reducers'\n\nimport clsx from 'clsx'\n\nimport * as columnProperties from '@/utils/columnProperties'\nimport * as currency from '@/utils/currency'\nimport getMessageConfirm from '@/utils/getMessageConfirm'\n\nimport type { GridColumns } from '@material-ui/data-grid'\nimport type { BaseCurrency, CurrencyOperation } from '@/types/Currency'\n\nexport default function Currencies() {\n  const { t } = useTranslation('currency')\n\n  const classes = useStyles()\n\n  const breadcrumbData = [\n    { label: 'Home', href: '/' },\n    { label: 'Basic Options', href: '/jobs' },\n    { label: 'Currencies Management', href: '/currencies' }\n  ]\n\n  const { confirm } = useConfirm()\n\n  const dispatch = useDispatch()\n  const { base_currency_list, user_base_currency, column_tooltips } = useSelector(currencyStore.selectInitDataForList)\n  const permissions = useSelector(currencyStore.selectPermissions)\n  const selectedRows = useSelector(commonStore.selectSelectedRows)\n  const initDataForList = useSelector(currencyStore.selectInitDataForList)\n  const isEmptySelectedRows = selectedRows.length <= 0\n\n  const onChangeBaseCurrency = (event, optionValue: BaseCurrency) => {\n    dispatch(commonStore.actions.setTableState({ page: 1 }))\n    dispatch(currencyStore.sagaChangeUserCurrency(optionValue))\n  }\n\n  const onOpenCreateDialog = () => {\n    dispatch(currencyStore.sagaOpenCreateDialog())\n  }\n\n  const onOpenUpdateDialog = (id: number) => () => {\n    dispatch(currencyStore.sagaOpenUpdateDialog(id))\n  }\n\n  const onExecuteActions = (operation: CurrencyOperation) => async () => {\n    const description = getMessageConfirm(t, 'currency', selectedRows, operation)\n    const result = await confirm({ description })\n    if (result === confirmConstant.actionTypes.OK) {\n      dispatch(\n        commonStore.sagaExecuteOperation({\n          entity: 'currency',\n          operation,\n          operationList: selectedRows\n        })\n      )\n    }\n  }\n\n  const columns: GridColumns = [\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.iconColumn,\n      field: 'id',\n      headerName: 'Edit',\n      description: column_tooltips.edit,\n      renderCell: (param) => {\n        return <EditIcon onClick={onOpenUpdateDialog(param.value as number)} />\n      }\n    },\n    {\n      ...columnProperties.defaultProperties,\n      description: column_tooltips.currency_id,\n      field: 'currency_id',\n      headerName: 'Code'\n    },\n    {\n      ...columnProperties.defaultProperties,\n      description: column_tooltips.description,\n      field: 'description',\n      headerName: 'Description',\n      flex: 0.1\n    },\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.rightColumn,\n      description: column_tooltips.multiplier,\n      field: 'multiplier',\n      headerName: 'Currency Multiplier',\n      flex: 0.1\n    },\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.numberColumn,\n      description: column_tooltips.rate,\n      field: 'rate',\n      headerName: 'Rate',\n      flex: 0.05,\n      valueFormatter(params) {\n        return currency.format(params.value, { precision: 6 })\n      }\n    },\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.rightColumn,\n      description: column_tooltips.round_to,\n      field: 'round_to',\n      headerName: 'Round to',\n      sortable: false,\n      disableColumnMenu: true,\n      flex: 0.05\n    },\n    {\n      ...columnProperties.defaultProperties,\n      ...columnProperties.rightColumn,\n      ...columnProperties.iconColumn,\n      description: column_tooltips.status,\n      field: 'status',\n      headerName: 'Status',\n      renderCell: (param) => (param.value ? <EnableIcon /> : <DisableIcon />)\n    }\n  ]\n\n  const buttons = [\n    {\n      label: t('common:button.new'),\n      startIcon: <CreateIcon />,\n      disabled: !permissions?.create,\n      onClick: onOpenCreateDialog\n    },\n    {\n      label: t('common:button.delete'),\n      startIcon: <DeleteIcon />,\n      disabled: isEmptySelectedRows || !permissions?.delete,\n      onClick: onExecuteActions('delete')\n    },\n    {\n      label: t('common:button.enable'),\n      startIcon: <EnableIcon />,\n      disabled: isEmptySelectedRows || !permissions?.disable_enable,\n      onClick: onExecuteActions('enable')\n    },\n    {\n      label: t('common:button.disable'),\n      startIcon: <DisableIcon />,\n      disabled: isEmptySelectedRows || !permissions?.disable_enable,\n      onClick: onExecuteActions('disable')\n    }\n  ]\n\n  return (\n    <AppLayout\n      entity=\"currency\"\n      breadcrumbs={breadcrumbData}\n      wikiPage={initDataForList.wiki_page}\n      permissions={permissions}\n      Dialogs={<DialogCurrencyCreateEdit />}\n      Options={\n        <AppAutocompleteStyled\n          width={180}\n          label=\"Base currency\"\n          className={classes.controlAutocomplete}\n          options={base_currency_list}\n          value={user_base_currency}\n          getOptionLabel={(option) => option.currency_id}\n          onChange={onChangeBaseCurrency}\n        />\n      }\n      buttons={buttons}\n      tableProps={{\n        className: classes.currencyTable,\n        columns: columns,\n        getRowClassName(params) {\n          return clsx({ homeCurrency: !params.row.base_currency })\n        },\n        isRowSelectable(params) {\n          return Boolean(params.row.base_currency)\n        }\n      }}\n    />\n  )\n}\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'currency', 'advanced_filter'])\n"]},"metadata":{},"sourceType":"module"}