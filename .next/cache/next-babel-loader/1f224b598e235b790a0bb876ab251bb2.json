{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport HttpService from '@/helper/HttpService';\nimport { singular } from 'pluralize';\n\nfunction useGetData(entity, query = {}) {\n  const http = useMemo(() => new HttpService(entity), [entity]);\n\n  const getInitDataForCE = async (params = {}) => {\n    try {\n      const response = await http.getInitDataForCE(_objectSpread(_objectSpread({}, query), params));\n      return response;\n    } catch (error) {\n      console.error('error', '>>>', error);\n      return error;\n    }\n  };\n\n  const getGeneratedCode = async query => {\n    try {\n      const {\n        generated_code\n      } = await http.getGeneratedCode(query);\n      return generated_code;\n    } catch (error) {\n      console.error('error', '>>>', error);\n      return error;\n    }\n  };\n\n  const getDetail = async id => {\n    try {\n      const response = await http.getDetail(id);\n      const singularEntity = singular(entity);\n      return response[singularEntity];\n    } catch (error) {\n      console.error('error', '>>>', error);\n      return error;\n    }\n  };\n\n  const postCreate = async data => {\n    try {\n      const response = await http.create(data);\n      return response;\n    } catch (error) {\n      console.error('error', '>>>', error);\n      return error;\n    }\n  };\n\n  const putUpdate = async (id, data) => {\n    try {\n      const response = await http.update(id, data);\n      return response;\n    } catch (error) {\n      console.error('error', '>>>', error);\n      return error;\n    }\n  };\n\n  return {\n    getInitDataForCE,\n    getDetail,\n    getGeneratedCode,\n    postCreate,\n    putUpdate\n  };\n}\n\nexport default useGetData;","map":null,"metadata":{},"sourceType":"module"}