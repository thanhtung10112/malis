{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport var name = 'specification';\nexport var resetState = createAction(\"\".concat(name, \"/\").concat(actionTypes.RESET_STATE));\nexport var specificationDetail = {\n  job_id: null,\n  drawing_id: null,\n  descriptions: [],\n  spec_id: null,\n  additional_attributes: {}\n};\nvar initialState = {\n  initDataForList: {\n    jobs: [],\n    permissions: {\n      specification: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  dataList: [],\n  dialogState: {\n    open: false,\n    loading: false,\n    tab: 0,\n    historyLogs: []\n  },\n  initDataForCE: {\n    parameters: {\n      PLLA: [],\n      SSAT: []\n    },\n    wiki_page: ''\n  },\n  detail: specificationDetail\n};\nvar specificationSlice = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    setInitDataForList: function setInitDataForList(state, _ref) {\n      var payload = _ref.payload;\n      state.initDataForList = payload;\n    },\n    setInitDataForCE: function setInitDataForCE(state, _ref2) {\n      var payload = _ref2.payload;\n      state.initDataForCE = payload;\n    },\n    setDataList: function setDataList(state, _ref3) {\n      var payload = _ref3.payload;\n      state.dataList = payload;\n    },\n    setHistoryLogs: function setHistoryLogs(state, _ref4) {\n      var payload = _ref4.payload;\n      state.dialogState.historyLogs = payload;\n    },\n    setDialogState: function setDialogState(state, _ref5) {\n      var payload = _ref5.payload;\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n    setDialogStateOpen: function setDialogStateOpen(state, _ref6) {\n      var payload = _ref6.payload;\n      state.dialogState.open = payload;\n    },\n    setDialogStateLoading: function setDialogStateLoading(state, _ref7) {\n      var payload = _ref7.payload;\n      state.dialogState.loading = payload;\n    },\n    setDetail: function setDetail(state, _ref8) {\n      var payload = _ref8.payload;\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n    resetDetail: function resetDetail(state, _ref9) {\n      var payload = _ref9.payload;\n      var userJob = payload.userJob;\n      state.detail = _objectSpread(_objectSpread({}, initialState.detail), {}, {\n        job_id: userJob.value\n      });\n    },\n    setDialogStateTab: function setDialogStateTab(state, _ref10) {\n      var payload = _ref10.payload;\n      state.dialogState.tab = payload;\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n});\nvar actions = specificationSlice.actions; // Saga actions\n\nexport { actions };\nexport var sagaGetList = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_LIST));\nexport var sagaOpenCreateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_CREATE_DIALOG));\nexport var sagaOpenUpdateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_UPDATE_DIALOG));\nexport var sagaCloseDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.CLOSE_DIALOG));\nexport var sagaChangeUserJob = createAction(\"\".concat(name, \"/\").concat(actionTypes.CHANGE_USER_JOB));\nexport var sagaChangeUserDrawing = createAction(\"\".concat(name, \"/\").concat(actionTypes.CHANGE_USER_DRAWING));\nexport var sagaGenerateCode = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_GENERATE_CODE));\nexport var sagaRemove = createAction(\"\".concat(name, \"/\").concat(actionTypes.REMOVE));\nexport var sagaUpdate = createAction(\"\".concat(name, \"/\").concat(actionTypes.UPDATE));\nexport var sagaCreate = createAction(\"\".concat(name, \"/\").concat(actionTypes.CREATE));\nexport var sagaOpenDrawingDialog = createAction(\"\".concat(name, \"/OPEN_DRAWING_DIALOG\")); // Selectors\n\nexport var selectState = function selectState(state) {\n  return state[name];\n};\nexport var selectInitDataForList = createSelector(selectState, function (state) {\n  return state.initDataForList;\n});\nexport var selectInitDataForCE = createSelector(selectState, function (state) {\n  return state.initDataForCE;\n});\nexport var selectPermissions = createSelector(selectState, function (state) {\n  return state.initDataForList.permissions.specification;\n});\nexport var selectDialogState = createSelector(selectState, function (state) {\n  return state.dialogState;\n});\nexport var selectParameters = createSelector(selectState, function (_ref11) {\n  var initDataForCE = _ref11.initDataForCE;\n  return initDataForCE.parameters;\n});\nexport var selectDetail = createSelector(selectState, function (state) {\n  return state.detail;\n});\nexport var selectDataList = createSelector(selectState, function (state) {\n  return state.dataList;\n});\nexport default specificationSlice;","map":null,"metadata":{},"sourceType":"module"}