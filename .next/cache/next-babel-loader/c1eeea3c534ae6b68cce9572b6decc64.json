{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, createSlice, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport var name = 'common';\nexport var resetState = createAction(\"\".concat(name, \"/\").concat(actionTypes.RESET_STATE));\nexport var initialState = {\n  searchQuery: '',\n  entity: '',\n  loading: {\n    table: false,\n    page: false\n  },\n  tableState: {\n    page: 1,\n    per_page: 100,\n    total_items: 0\n  },\n  messageState: {\n    message: '',\n    status: 'success',\n    display: false\n  },\n  editRows: [],\n  currentLanguage: {\n    value: null,\n    // primary key\n    description: '',\n    properties: {},\n    is_default: false,\n    parameter_id: '',\n    id: null,\n    // primary key\n    status: false\n  },\n  selectedRows: [],\n  userValue: {\n    drawing: {\n      description: '',\n      entity_id: 'All',\n      value: -1\n    },\n    job: {\n      description: '',\n      value: null\n    }\n  }\n};\nvar commonSlice = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    setSearchQuery: function setSearchQuery(state, _ref) {\n      var payload = _ref.payload;\n      state.searchQuery = payload;\n    },\n    setEntity: function setEntity(state, _ref2) {\n      var payload = _ref2.payload;\n      state.entity = payload;\n    },\n    setLoadingTable: function setLoadingTable(state, _ref3) {\n      var payload = _ref3.payload;\n      state.loading.table = payload;\n    },\n    setLoadingPage: function setLoadingPage(state, _ref4) {\n      var payload = _ref4.payload;\n      state.loading.page = payload;\n    },\n    setTableState: function setTableState(state, _ref5) {\n      var payload = _ref5.payload;\n      state.tableState = _objectSpread(_objectSpread({}, state.tableState), payload);\n    },\n    setErrorMessage: function setErrorMessage(state, action) {\n      state.messageState.message = action.payload;\n      state.messageState.status = 'error';\n      state.messageState.display = true;\n    },\n    setSuccessMessage: function setSuccessMessage(state, action) {\n      state.messageState.message = action.payload;\n      state.messageState.status = 'success';\n      state.messageState.display = true;\n    },\n    setDisplayMessage: function setDisplayMessage(state, action) {\n      state.messageState.display = action.payload;\n    },\n    setEditRows: function setEditRows(state, _ref6) {\n      var payload = _ref6.payload;\n      state.editRows = payload;\n    },\n    setUserValueDrawing: function setUserValueDrawing(state, _ref7) {\n      var payload = _ref7.payload;\n      state.userValue.drawing = payload;\n    },\n    setUserValueJob: function setUserValueJob(state, _ref8) {\n      var payload = _ref8.payload;\n      state.userValue.job = payload;\n    },\n    resetUserValue: function resetUserValue(state) {\n      state.userValue = initialState.userValue;\n    },\n    setSelectedRows: function setSelectedRows(state, _ref9) {\n      var payload = _ref9.payload;\n      state.selectedRows = payload;\n    },\n    resetMessageState: function resetMessageState(state) {\n      state.messageState = initialState.messageState;\n    },\n    setCurrentLanguage: function setCurrentLanguage(state, _ref10) {\n      var payload = _ref10.payload;\n      state.currentLanguage = payload;\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n}); // Selectors\n\nexport var selectState = function selectState(state) {\n  return state[name];\n};\nexport var selectSearchQuery = createSelector(selectState, function (state) {\n  return state.searchQuery;\n});\nexport var selectEntity = createSelector(selectState, function (state) {\n  return state.entity;\n});\nexport var selectLoading = createSelector(selectState, function (state) {\n  return state.loading;\n});\nexport var selectTableState = createSelector(selectState, function (state) {\n  return state.tableState;\n});\nexport var selectMessageState = createSelector(selectState, function (state) {\n  return state.messageState;\n});\nexport var selectUserValueDrawing = createSelector(selectState, function (state) {\n  return state.userValue.drawing;\n});\nexport var selectUserValueJob = createSelector(selectState, function (state) {\n  return state.userValue.job;\n});\nexport var selectEditRows = createSelector(selectState, function (state) {\n  return state.editRows;\n});\nexport var selectSelectedRows = createSelector(selectState, function (state) {\n  return state.selectedRows;\n});\nexport var selectCurrentLanguage = createSelector(selectState, function (state) {\n  return state.currentLanguage;\n});\nvar actions = commonSlice.actions; // Saga actions\n\nexport { actions };\nexport var sagaExecuteOperation = createAction(\"\".concat(name, \"/\").concat(actionTypes.EXECUTE_OPERATION));\nexport var sagaGetHistoryLogs = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_HISTORY));\nexport var sagaUpdateMultiple = createAction(\"\".concat(name, \"/\").concat(actionTypes.UPDATE_MULTIPLE));\nexport var sagaCancelBackgroundJob = createAction(\"\".concat(name, \"/CANCEL_BACKGROUND_JOB\"));\nexport default commonSlice;","map":null,"metadata":{},"sourceType":"module"}