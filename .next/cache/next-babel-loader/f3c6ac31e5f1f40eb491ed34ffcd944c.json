{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { FormControl, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport * as _ from 'lodash'; // column name and sort condition DD and value fields\n\nfunction ColumnOptions({\n  columnOptions,\n  condition: currentCondition,\n  conditionData,\n  disabled\n}) {\n  // trick for forcing rerender\n  const {\n    1: setValue\n  } = useState(0);\n\n  const forceRerender = () => {\n    setValue(value => value + 1);\n  };\n\n  const filterColumnOptions = (options, state) => {\n    const selectedColumns = conditionData.map(cond => cond.id);\n\n    const new_options = _.filter(options, op => {\n      var _op$id, _op$description;\n\n      return !selectedColumns.includes(op.id) && (((_op$id = op.id) === null || _op$id === void 0 ? void 0 : _op$id.toLowerCase().includes(state.inputValue.toLowerCase())) || ((_op$description = op.description) === null || _op$description === void 0 ? void 0 : _op$description.toLowerCase().includes(state.inputValue.toLowerCase())));\n    });\n\n    return new_options;\n  };\n\n  const onSelectedColumnChange = selectedColumn => {\n    currentCondition.id = selectedColumn.id;\n    forceRerender();\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(FormControl, {\n      style: {\n        marginRight: '0.5rem'\n      },\n      children: /*#__PURE__*/_jsx(Autocomplete, {\n        options: columnOptions,\n        value: _.find(columnOptions, {\n          id: currentCondition.id\n        }),\n        getOptionLabel: option => option.description // getOptionSelected={(option) => option.}\n        ,\n        style: {\n          width: '15rem'\n        },\n        disableClearable: true,\n        filterOptions: (options, state) => filterColumnOptions(options, state),\n        renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({}, params), {}, {\n          variant: \"outlined\",\n          size: \"small\"\n        })),\n        onChange: (e, selectedColumn) => onSelectedColumnChange(selectedColumn),\n        disabled: disabled\n      })\n    })\n  });\n}\n\nexport default ColumnOptions;","map":null,"metadata":{},"sourceType":"module"}