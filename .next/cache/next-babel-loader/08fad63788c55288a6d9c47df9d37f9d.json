{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport jsCurrency from 'currency.js';\nimport _ from 'lodash';\n\nclass AppNumber {\n  static buildOptions(options) {\n    return _objectSpread(_objectSpread({}, this._defaultOptions), options);\n  }\n\n  static format(value, options = {}) {\n    return jsCurrency(value, this.buildOptions(options)).format();\n  }\n\n  static convertToInstance(value, options = {}) {\n    return jsCurrency(value, options);\n  }\n\n  static convertToNumber(value, options = {}) {\n    return this.convertToInstance(value, options).value;\n  }\n\n  static isNumber(value) {\n    if (_.size(value) === 0) {\n      return false;\n    }\n\n    const formatValue = _.toNumber(value);\n\n    return !_.isNaN(formatValue) && _.isNumber(formatValue);\n  }\n\n  static isNumberFormat(value) {\n    const originValue = this.convertToNumber(value);\n    return this.isNumber(originValue);\n  }\n\n  static isPositiveNumber(value) {\n    const formatValue = this.convertToNumber(value);\n    return formatValue > -1;\n  }\n\n  static isNegativeNumber(value) {\n    return !this.isPositiveNumber(value);\n  }\n\n}\n\n_defineProperty(AppNumber, \"_defaultOptions\", {\n  separator: ' ',\n  decimal: '.',\n  symbol: ''\n});\n\nexport default AppNumber;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/helper/AppNumber.ts"],"names":["jsCurrency","_","AppNumber","buildOptions","options","_defaultOptions","format","value","convertToInstance","convertToNumber","isNumber","size","formatValue","toNumber","isNaN","isNumberFormat","originValue","isPositiveNumber","isNegativeNumber","separator","decimal","symbol"],"mappings":";;;;;;AAAA,OAAOA,UAAP,MAAoC,aAApC;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,MAAMC,SAAN,CAAgB;AAOd,SAAeC,YAAf,CAA4BC,OAA5B,EAAuD;AACrD,2CACK,KAAKC,eADV,GAEKD,OAFL;AAID;;AAED,SAAOE,MAAP,CAAcC,KAAd,EAAqBH,OAAO,GAAG,EAA/B,EAA8C;AAC5C,WAAOJ,UAAU,CAACO,KAAD,EAAQ,KAAKJ,YAAL,CAAkBC,OAAlB,CAAR,CAAV,CAA8CE,MAA9C,EAAP;AACD;;AAED,SAAOE,iBAAP,CAAyBD,KAAzB,EAAgCH,OAAO,GAAG,EAA1C,EAAyD;AACvD,WAAOJ,UAAU,CAACO,KAAD,EAAQH,OAAR,CAAjB;AACD;;AAED,SAAOK,eAAP,CAAuBF,KAAvB,EAA8BH,OAAO,GAAG,EAAxC,EAAuD;AACrD,WAAO,KAAKI,iBAAL,CAAuBD,KAAvB,EAA8BH,OAA9B,EAAuCG,KAA9C;AACD;;AAED,SAAOG,QAAP,CAAgBH,KAAhB,EAAuB;AACrB,QAAIN,CAAC,CAACU,IAAF,CAAOJ,KAAP,MAAkB,CAAtB,EAAyB;AACvB,aAAO,KAAP;AACD;;AACD,UAAMK,WAAW,GAAGX,CAAC,CAACY,QAAF,CAAWN,KAAX,CAApB;;AACA,WAAO,CAACN,CAAC,CAACa,KAAF,CAAQF,WAAR,CAAD,IAAyBX,CAAC,CAACS,QAAF,CAAWE,WAAX,CAAhC;AACD;;AAED,SAAOG,cAAP,CAAsBR,KAAtB,EAA6B;AAC3B,UAAMS,WAAW,GAAG,KAAKP,eAAL,CAAqBF,KAArB,CAApB;AACA,WAAO,KAAKG,QAAL,CAAcM,WAAd,CAAP;AACD;;AAED,SAAOC,gBAAP,CAAwBV,KAAxB,EAA+B;AAC7B,UAAMK,WAAW,GAAG,KAAKH,eAAL,CAAqBF,KAArB,CAApB;AACA,WAAOK,WAAW,GAAG,CAAC,CAAtB;AACD;;AAED,SAAOM,gBAAP,CAAwBX,KAAxB,EAA+B;AAC7B,WAAO,CAAC,KAAKU,gBAAL,CAAsBV,KAAtB,CAAR;AACD;;AA9Ca;;gBAAVL,S,qBAC6B;AAC/BiB,EAAAA,SAAS,EAAE,GADoB;AAE/BC,EAAAA,OAAO,EAAE,GAFsB;AAG/BC,EAAAA,MAAM,EAAE;AAHuB,C;;AAgDnC,eAAenB,SAAf","sourcesContent":["import jsCurrency, { Options } from 'currency.js'\nimport _ from 'lodash'\n\nclass AppNumber {\n  private static _defaultOptions = {\n    separator: ' ',\n    decimal: '.',\n    symbol: ''\n  }\n\n  private static buildOptions(options: Partial<Options>) {\n    return {\n      ...this._defaultOptions,\n      ...options\n    }\n  }\n\n  static format(value, options = {} as Options) {\n    return jsCurrency(value, this.buildOptions(options)).format()\n  }\n\n  static convertToInstance(value, options = {} as Options) {\n    return jsCurrency(value, options)\n  }\n\n  static convertToNumber(value, options = {} as Options) {\n    return this.convertToInstance(value, options).value\n  }\n\n  static isNumber(value) {\n    if (_.size(value) === 0) {\n      return false\n    }\n    const formatValue = _.toNumber(value)\n    return !_.isNaN(formatValue) && _.isNumber(formatValue)\n  }\n\n  static isNumberFormat(value) {\n    const originValue = this.convertToNumber(value)\n    return this.isNumber(originValue)\n  }\n\n  static isPositiveNumber(value) {\n    const formatValue = this.convertToNumber(value)\n    return formatValue > -1\n  }\n\n  static isNegativeNumber(value) {\n    return !this.isPositiveNumber(value)\n  }\n}\n\nexport default AppNumber\n"]},"metadata":{},"sourceType":"module"}