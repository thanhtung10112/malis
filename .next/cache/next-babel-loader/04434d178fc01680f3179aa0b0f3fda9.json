{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { useTranslation } from 'next-i18next';\nimport { format as formatDate } from 'date-fns';\nimport { TreeItem } from '@material-ui/lab';\nimport { AddCircle, Cancel } from '@material-ui/icons';\nimport { Menu, MenuItem, IconButton, ButtonGroup, Tooltip } from '@material-ui/core';\nimport { Unless } from 'react-if';\nimport { v1 as uuidv1 } from 'uuid';\nimport ConditionRule from './ConditionRule';\nimport ConjunctionOptions from './ConjunctionOptions';\nimport useStyles from '../styles'; // The condition group component, which can contain other rules or groups\n\nfunction ConditionGroup({\n  columnOptions,\n  comparatorOptions,\n  conjunctionOptions,\n  level,\n  groupData,\n  parent: parentGroup,\n  forceParentRerender,\n  disabled,\n  maxLevel\n}) {\n  const {\n    0: anchorEl,\n    1: setAnchorEl\n  } = useState(null);\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation(['advanced_filter']); // trick for forcing rerender\n\n  const {\n    1: setValue\n  } = useState(0);\n\n  const forceRerender = () => {\n    setValue(value => value + 1);\n  };\n\n  const groupConditions = [];\n\n  for (const condition of groupData.conditions) {\n    if (condition.type === 'rule') {\n      groupConditions.push( /*#__PURE__*/_jsx(ConditionRule, {\n        ruleData: condition,\n        parent: groupData,\n        forceParentRerender: forceRerender,\n        columnOptions: columnOptions,\n        comparatorOptions: comparatorOptions,\n        disabled: disabled\n      }, condition.condition_id));\n    } else {\n      // condition.type === \"group\"\n      groupConditions.push( /*#__PURE__*/_jsx(ConditionGroup, {\n        maxLevel: maxLevel,\n        groupData: condition,\n        level: level + 1,\n        parent: groupData,\n        forceParentRerender: forceRerender,\n        columnOptions: columnOptions,\n        comparatorOptions: comparatorOptions,\n        conjunctionOptions: conjunctionOptions,\n        disabled: disabled\n      }, condition.condition_id));\n    }\n  } // Some neccessary functions\n\n\n  const openAddMenu = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const closeAddMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const handleAddOptions = type => () => {\n    if (type === 'rule') {\n      const newRule = {\n        type: 'rule',\n        id: columnOptions[0].id,\n        condition_id: uuidv1()\n      };\n\n      switch (columnOptions[0].column_type) {\n        case 'string':\n          newRule.value = '';\n          newRule.comparator = 'ilike';\n          break;\n\n        case 'number':\n          newRule.value = 0;\n          newRule.comparator = 'eq';\n          break;\n\n        case 'date':\n          newRule.value = formatDate(new Date(), 'yyyy-MM-dd');\n          newRule.comparator = 'eq';\n          break;\n\n        case 'datetime':\n          newRule.value = formatDate(new Date(), 'yyyy-MM-dd HH:mm');\n          newRule.comparator = 'eq';\n          break;\n\n        case 'predefined_value':\n          newRule.value = [];\n          newRule.comparator = 'in';\n          newRule.value_as_string = columnOptions[0].value_as_string;\n          break;\n\n        case 'boolean':\n          newRule.value = false;\n          newRule.comparator = 'eq';\n          break;\n      }\n\n      groupData.conditions.push(newRule);\n    } else {\n      // type = \"group\"\n      groupData.conditions.push({\n        conjunction: conjunctionOptions[0].value,\n        type: 'group',\n        conditions: [],\n        condition_id: uuidv1()\n      });\n    }\n\n    closeAddMenu();\n  };\n\n  const removeGroup = group_condition_id => () => {\n    const newParentGroupConditions = parentGroup.conditions.filter(cond => cond.condition_id !== group_condition_id);\n    parentGroup.conditions = newParentGroupConditions;\n    forceParentRerender();\n  };\n\n  const handleGroupConjunctionChange = value => {\n    groupData.conjunction = value;\n    forceParentRerender();\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(TreeItem, {\n      nodeId: \"group\",\n      style: {\n        borderLeft: level === 0 ? '' : '1px #D8D8D8 dashed',\n        marginLeft: level === 0 ? '' : '1.65rem',\n        marginTop: level === 0 ? '' : '0.5rem'\n      },\n      label: /*#__PURE__*/_jsxs(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsx(ConjunctionOptions, {\n          conjunctionOptions: conjunctionOptions,\n          value: groupData.conjunction,\n          onGroupConjunctionChange: handleGroupConjunctionChange,\n          disabled: disabled\n        }), /*#__PURE__*/_jsxs(Unless, {\n          condition: disabled,\n          children: [/*#__PURE__*/_jsxs(ButtonGroup, {\n            className: classes.buttonGroup,\n            size: \"small\",\n            children: [/*#__PURE__*/_jsx(IconButton, {\n              \"aria-label\": \"Add\",\n              \"aria-controls\": \"add-menu\",\n              \"aria-haspopup\": \"true\",\n              onClick: openAddMenu,\n              children: /*#__PURE__*/_jsx(AddCircle, {\n                className: classes.iconButton\n              })\n            }), /*#__PURE__*/_jsx(Unless, {\n              condition: level === 0,\n              children: /*#__PURE__*/_jsx(Tooltip, {\n                title: t('tooltip.condition_remove_group'),\n                children: /*#__PURE__*/_jsx(IconButton, {\n                  onClick: removeGroup(groupData.condition_id),\n                  children: /*#__PURE__*/_jsx(Cancel, {\n                    className: classes.iconButton\n                  })\n                })\n              })\n            })]\n          }), /*#__PURE__*/_jsxs(Menu, {\n            id: \"add-menu\",\n            anchorEl: anchorEl,\n            keepMounted: true,\n            open: Boolean(anchorEl),\n            onClose: closeAddMenu,\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              onClick: handleAddOptions('rule'),\n              children: t('condition_group.add_rule')\n            }), /*#__PURE__*/_jsx(Unless, {\n              condition: level >= maxLevel,\n              children: /*#__PURE__*/_jsx(MenuItem, {\n                onClick: handleAddOptions('group'),\n                children: t('condition_group.add_group')\n              })\n            })]\n          })]\n        })]\n      }),\n      children: groupConditions\n    })\n  });\n}\n\nexport default ConditionGroup;","map":null,"metadata":{},"sourceType":"module"}