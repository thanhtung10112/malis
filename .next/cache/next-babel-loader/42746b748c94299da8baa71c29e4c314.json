{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useMemo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'next-i18next';\nimport useStyles from './styles';\nimport { Grid, Button, Paper, Tooltip, Checkbox, Typography } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { Backup as BackupIcon, HighlightOffOutlined as HighlightOffOutlinedIcon } from '@material-ui/icons';\nimport { DataTable, FormControllerTextField, DataTableTextField, SectionTimezone, DialogMain, CreateIcon, DeleteIcon, DataTableAutocomplete, AppAutocomplete, AppImageField, BtnHelp, FormControllerNumberField } from '@/components';\nimport { Unless, When } from 'react-if';\nimport immer from 'immer';\nimport _ from 'lodash';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as columnProperties from '@/utils/columnProperties';\nimport getValidationSchema from './validationSchema';\nimport { removalProperties } from '@/utils/constant';\nimport { equivalenceStore } from '@/store/reducers';\n\nfunction StandardEquivalenceCreateEdit() {\n  var _equivalenceForm$erro, _equivalenceForm$erro2, _equivalenceForm$erro3;\n\n  const {\n    t\n  } = useTranslation('equivalence');\n  const validationSchema = useMemo(() => getValidationSchema(t), []);\n  const equivalenceForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  });\n  const watchEquivalentStandards = equivalenceForm.watch('standards', []);\n  const watchImage = equivalenceForm.watch('image', '');\n  let refFileInput = null;\n\n  const setInputELement = element => {\n    refFileInput = element;\n  };\n\n  const {\n    0: selectedRows,\n    1: setSelectedRows\n  } = useState([]);\n  const {\n    0: idUploadImage,\n    1: setIdUploadImage\n  } = useState('');\n  const {\n    0: selectedStandards,\n    1: setSelectedStandards\n  } = useState([]);\n  const dispatch = useDispatch();\n  const dialogState = useSelector(equivalenceStore.selectDialogState);\n  const equivalenceType = useSelector(equivalenceStore.selectEquivalenceType);\n  const equivalenceDetail = useSelector(equivalenceStore.selectDetail);\n  const {\n    parameters,\n    wiki_page\n  } = useSelector(equivalenceStore.selectInitDataForCE);\n  const permissions = useSelector(equivalenceStore.selectPermissions);\n\n  const isCreating = _.isNil(equivalenceDetail.id);\n\n  const classes = useStyles({\n    editMode: !isCreating\n  });\n  const standardErrorMessage = useMemo(() => {\n    const {\n      errors\n    } = equivalenceForm;\n\n    if (!errors.standards) {\n      return '';\n    }\n\n    errors.standards = errors.standards.filter(err => err);\n    return _.get(errors, 'standards[0].organization.message') || _.get(errors, 'standards[0].standard.message');\n  }, [equivalenceForm.errors.standards]);\n  const title = useMemo(() => {\n    const action = isCreating ? 'Create' : 'Update';\n    const type = equivalenceType === 'manufacturing_standard' ? 'Manufacturing Standards Equivalence' : 'Material Standards Equivalence';\n    return `${action} ${type}`;\n  }, [isCreating, equivalenceType]);\n  useEffect(() => {\n    equivalenceForm.reset(_objectSpread({}, equivalenceDetail));\n  }, [equivalenceDetail]);\n\n  const onCloseDialog = () => {\n    dispatch(equivalenceStore.sagaCloseDialog());\n    equivalenceForm.clearErrors();\n  };\n\n  const getStandard = value => {\n    const option = _.find(parameters.PLNO, {\n      value\n    });\n\n    return option;\n  };\n\n  const onSelectStandard = (event, valueOptions) => {\n    setSelectedStandards(valueOptions);\n  };\n\n  const onAddEquivalentStandards = () => {\n    const standards = _.map(selectedStandards, item => ({\n      organization: item.value,\n      standard: '',\n      preferred: false,\n      image: null\n    }));\n\n    equivalenceForm.setValue('standards', [...watchEquivalentStandards, ...standards]);\n    setSelectedStandards([]);\n  };\n\n  const onSelectRows = ({\n    selectionModel\n  }) => {\n    setSelectedRows(selectionModel);\n  };\n\n  const onRemoveEquivalentStandards = () => {\n    const removalItems = _.filter(watchEquivalentStandards, item => !selectedRows.includes(item.organization));\n\n    equivalenceForm.setValue('standards', removalItems);\n    setSelectedRows([]);\n  };\n\n  const onChangePreferred = organization => (event, checked) => {\n    const newStandards = immer(watchEquivalentStandards, draft => {\n      const index = _.findIndex(watchEquivalentStandards, {\n        organization\n      });\n\n      draft[index].preferred = checked;\n    });\n    equivalenceForm.setValue('standards', newStandards);\n  };\n\n  const onChangeStandard = async (organization, value) => {\n    const newStandards = immer(watchEquivalentStandards, draft => {\n      const index = _.findIndex(watchEquivalentStandards, {\n        organization\n      });\n\n      draft[index].standard = value;\n    });\n    equivalenceForm.setValue('standards', newStandards);\n    equivalenceForm.errors.standards && (await equivalenceForm.trigger('standards'));\n  };\n\n  const onChangeOrganization = id => async (event, organization) => {\n    const newStandards = immer(watchEquivalentStandards, draft => {\n      const index = _.findIndex(draft, {\n        organization: id\n      });\n\n      if (index !== -1) {\n        draft[index].organization = organization.value;\n      }\n    });\n    equivalenceForm.setValue('standards', newStandards);\n  };\n\n  const onChangeFiles = event => {\n    const {\n      files\n    } = event.target;\n    equivalenceForm.setValue('standards', immer(watchEquivalentStandards, draft => {\n      const index = _.findIndex(watchEquivalentStandards, {\n        id: idUploadImage\n      });\n\n      draft[index].image = files[0];\n    }));\n  };\n\n  const filterOrganizationOption = options => _.differenceWith(options, watchEquivalentStandards, (option, standard) => option.value === standard.organization);\n\n  const onClickToUploadImage = id => () => {\n    setIdUploadImage(id);\n    refFileInput.value = '';\n    refFileInput.click();\n  };\n\n  const onRemoveImage = id => event => {\n    event.stopPropagation();\n    equivalenceForm.setValue('standards', immer(watchEquivalentStandards, draft => {\n      const index = _.findIndex(watchEquivalentStandards, {\n        id\n      });\n\n      draft[index].image = '';\n    }));\n  };\n\n  const onSubmitForm = equivalenceForm.handleSubmit(data => {\n    data.equiv_type = equivalenceType === 'manufacturing_standard' ? 1 : 0;\n\n    const payload = _.omit(data, [...removalProperties]);\n\n    const formData = new FormData();\n\n    if (payload.image && payload.image instanceof File) {\n      formData.append('equiv_image', payload.image);\n    }\n\n    delete payload.image;\n    const std_for_remove_img = [];\n\n    for (const std of payload.standards) {\n      if (std.image && std.image instanceof File) {\n        formData.append(`std_${std.organization}`, std.image);\n      } else {\n        // formData.append(`std_${std.organization}`, null as File)\n        std_for_remove_img.push(std.organization);\n      }\n\n      delete std.image;\n    }\n\n    formData.append('equiv_info', JSON.stringify(_objectSpread(_objectSpread({}, payload), {}, {\n      standards_for_remove_img: std_for_remove_img\n    })));\n\n    if (isCreating) {\n      dispatch(equivalenceStore.sagaCreate(formData));\n    } else {\n      dispatch(equivalenceStore.sagaUpdate({\n        id: data.id,\n        formData\n      }));\n    }\n  });\n\n  const onGetNextCode = () => {\n    const currentValues = equivalenceForm.getValues();\n    dispatch(equivalenceStore.sagaGetNextCode(currentValues));\n  };\n\n  const handleChangeImage = async image => {\n    equivalenceForm.setValue('image', image.file);\n    await equivalenceForm.trigger('image');\n  };\n\n  return /*#__PURE__*/_jsx(DialogMain, {\n    open: dialogState.open,\n    maxWidth: \"md\",\n    loading: dialogState.loading,\n    onOk: onSubmitForm,\n    onClose: onCloseDialog,\n    title: /*#__PURE__*/_jsx(BtnHelp, {\n      title: title,\n      href: wiki_page\n    }),\n    height: isCreating ? 500 : 540,\n    classes: {\n      paperWidthMd: classes.paperRoot\n    },\n    okText: isCreating ? t('common:button.create') : t('common:button.update'),\n    okButtonProps: {\n      disabled: dialogState.loading || !(permissions === null || permissions === void 0 ? void 0 : permissions.edit) && !isCreating\n    },\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      className: classes.gridMarginTop,\n      children: [/*#__PURE__*/_jsx(When, {\n        condition: Boolean((_equivalenceForm$erro = equivalenceForm.errors) === null || _equivalenceForm$erro === void 0 ? void 0 : _equivalenceForm$erro.standards),\n        children: /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(Alert, {\n            severity: \"error\",\n            children: standardErrorMessage\n          })\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 9,\n        spacing: 2,\n        children: /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            spacing: 3,\n            children: /*#__PURE__*/_jsx(FormControllerNumberField, {\n              label: \"Equivalence #\",\n              name: \"equiv_id\",\n              control: equivalenceForm.control,\n              required: true,\n              decimalScale: 0,\n              fixedDecimalScale: false,\n              generateCode: true,\n              disabled: !isCreating,\n              loading: dialogState.loading,\n              onGenerateCode: onGetNextCode\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(FormControllerTextField, {\n              required: true,\n              label: \"Description\",\n              name: \"description\",\n              control: equivalenceForm.control\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 3,\n        style: {\n          height: 88\n        },\n        children: /*#__PURE__*/_jsx(AppImageField, {\n          image: watchImage,\n          onChange: handleChangeImage,\n          error: ((_equivalenceForm$erro2 = equivalenceForm.errors.image) === null || _equivalenceForm$erro2 === void 0 ? void 0 : _equivalenceForm$erro2.message) || ''\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 9,\n        children: /*#__PURE__*/_jsx(AppAutocomplete, {\n          label: \"Equivalent standards per organization\",\n          value: selectedStandards,\n          multiple: true,\n          limitTags: 2,\n          disableCloseOnSelect: true,\n          options: parameters.PLNO,\n          renderOption: option => option.description,\n          filterOptions: filterOrganizationOption,\n          onChange: onSelectStandard\n        })\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 3,\n        children: [/*#__PURE__*/_jsx(Button, {\n          startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n          onClick: onAddEquivalentStandards,\n          disabled: selectedStandards.length === 0,\n          style: {\n            textTransform: 'capitalize'\n          },\n          children: \"Add\"\n        }), /*#__PURE__*/_jsx(Button, {\n          startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n          onClick: onRemoveEquivalentStandards,\n          disabled: selectedRows.length <= 0,\n          style: {\n            textTransform: 'capitalize'\n          },\n          children: \"Remove\"\n        })]\n      }), /*#__PURE__*/_jsx(\"input\", {\n        type: \"file\",\n        onChange: onChangeFiles,\n        ref: setInputELement,\n        className: classes.input,\n        accept: ['image/png', 'image/jpg', 'image/jpeg'].join(',')\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsx(Paper, {\n          children: /*#__PURE__*/_jsx(DataTable, {\n            tableHeight: ((_equivalenceForm$erro3 = equivalenceForm.errors) === null || _equivalenceForm$erro3 === void 0 ? void 0 : _equivalenceForm$erro3.standards) ? 263 : 335,\n            hideFooter: true,\n            checkboxSelection: true,\n            disableColumnMenu: true,\n            disableSelectionOnClick: true,\n            rows: watchEquivalentStandards,\n            selectionModel: selectedRows,\n            getRowId: param => param.organization,\n            onSelectionModelChange: onSelectRows,\n            columns: [_objectSpread(_objectSpread({}, columnProperties.editCell('Organization')), {}, {\n              sortable: false,\n              field: 'organization',\n              headerName: 'Organization',\n              flex: 0.5,\n\n              valueGetter(params) {\n                const value = getStandard(params.value);\n                return value;\n              },\n\n              valueFormatter(params) {\n                var _params$value;\n\n                return (_params$value = params.value) === null || _params$value === void 0 ? void 0 : _params$value.description;\n              },\n\n              renderEditCell(params) {\n                return /*#__PURE__*/_jsx(DataTableAutocomplete, {\n                  params: params,\n                  options: parameters.PLNO,\n                  onChange: onChangeOrganization(params.id),\n                  filterOptions: filterOrganizationOption\n                });\n              }\n\n            }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Standard')), {}, {\n              field: 'standard',\n              flex: 0.4,\n\n              renderEditCell(params) {\n                return /*#__PURE__*/_jsx(DataTableTextField, {\n                  params: params,\n                  onChangeValue: onChangeStandard\n                });\n              }\n\n            }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n              field: 'preferred',\n              headerName: 'Preferred',\n              width: 100,\n              align: 'center',\n              headerAlign: 'center',\n\n              renderCell(params) {\n                return /*#__PURE__*/_jsx(Checkbox, {\n                  color: \"primary\",\n                  style: {\n                    padding: 0\n                  },\n                  checked: params.value,\n                  onChange: onChangePreferred(params.id)\n                });\n              }\n\n            }), {\n              field: 'image',\n              headerName: 'Image',\n              sortable: false,\n              width: 150,\n              align: 'center',\n              headerAlign: 'center',\n\n              renderCell(params) {\n                if (params.value) {\n                  return /*#__PURE__*/_jsx(Tooltip, {\n                    title: /*#__PURE__*/_jsx(\"img\", {\n                      src: params.value instanceof File ? URL.createObjectURL(params.value) : params.value,\n                      style: {\n                        height: '150px'\n                      }\n                    }),\n                    placement: \"top-end\",\n                    children: /*#__PURE__*/_jsxs(\"div\", {\n                      style: {\n                        display: 'flex'\n                      },\n                      onClick: onClickToUploadImage(params.id),\n                      children: [/*#__PURE__*/_jsx(Typography, {\n                        noWrap: true,\n                        component: \"div\",\n                        style: {\n                          width: 100\n                        },\n                        children: params.value.name || params.value\n                      }), /*#__PURE__*/_jsx(HighlightOffOutlinedIcon, {\n                        onClick: onRemoveImage(params.id)\n                      })]\n                    })\n                  });\n                }\n\n                return /*#__PURE__*/_jsx(Tooltip, {\n                  title: \"Only PNG, JPG, JPEG files are allowed!\",\n                  children: /*#__PURE__*/_jsx(\"div\", {\n                    style: {\n                      display: 'flex',\n                      alignItems: 'center'\n                    },\n                    onClick: onClickToUploadImage(params.id),\n                    children: /*#__PURE__*/_jsx(BackupIcon, {\n                      style: {\n                        color: '#0A65FF'\n                      }\n                    })\n                  })\n                });\n              }\n\n            }]\n          })\n        }), /*#__PURE__*/_jsx(Unless, {\n          condition: isCreating,\n          children: /*#__PURE__*/_jsx(SectionTimezone, {\n            value: equivalenceDetail\n          })\n        })]\n      })]\n    })\n  });\n}\n\nexport default StandardEquivalenceCreateEdit;","map":null,"metadata":{},"sourceType":"module"}