{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '@/styles/page/layout';\nimport { useTranslation } from 'next-i18next';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport { DialogCurrencyCreateEdit, useConfirm, confirmConstant, AppLayout, EditIcon, CreateIcon, EnableIcon, DisableIcon, DeleteIcon, AppAutocompleteStyled } from '@/components';\nimport { currencyStore, commonStore } from '@/store/reducers';\nimport clsx from 'clsx';\nimport * as columnProperties from '@/utils/columnProperties';\nimport * as currency from '@/utils/currency';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nexport default function Currencies() {\n  const {\n    t\n  } = useTranslation('currency');\n  const classes = useStyles();\n  const breadcrumbData = [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Basic Options',\n    href: '/jobs'\n  }, {\n    label: 'Currencies Management',\n    href: '/currencies'\n  }];\n  const {\n    confirm\n  } = useConfirm();\n  const dispatch = useDispatch();\n  const {\n    base_currency_list,\n    user_base_currency,\n    column_tooltips\n  } = useSelector(currencyStore.selectInitDataForList);\n  const permissions = useSelector(currencyStore.selectPermissions);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const initDataForList = useSelector(currencyStore.selectInitDataForList);\n  const isEmptySelectedRows = selectedRows.length <= 0;\n\n  const onChangeBaseCurrency = (event, optionValue) => {\n    dispatch(commonStore.actions.setTableState({\n      page: 1\n    }));\n    dispatch(currencyStore.sagaChangeUserCurrency(optionValue));\n  };\n\n  const onOpenCreateDialog = () => {\n    dispatch(currencyStore.sagaOpenCreateDialog());\n  };\n\n  const onOpenUpdateDialog = id => () => {\n    dispatch(currencyStore.sagaOpenUpdateDialog(id));\n  };\n\n  const onExecuteActions = operation => async () => {\n    const description = getMessageConfirm(t, 'currency', selectedRows, operation);\n    const result = await confirm({\n      description\n    });\n\n    if (result === confirmConstant.actionTypes.OK) {\n      dispatch(commonStore.sagaExecuteOperation({\n        entity: 'currency',\n        operation,\n        operationList: selectedRows\n      }));\n    }\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    field: 'id',\n    headerName: 'Edit',\n    description: column_tooltips.edit,\n    renderCell: param => {\n      return /*#__PURE__*/_jsx(EditIcon, {\n        onClick: onOpenUpdateDialog(param.value)\n      });\n    }\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.currency_id,\n    field: 'currency_id',\n    headerName: 'Code'\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.description,\n    field: 'description',\n    headerName: 'Description',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.rightColumn), {}, {\n    description: column_tooltips.multiplier,\n    field: 'multiplier',\n    headerName: 'Currency Multiplier',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.numberColumn), {}, {\n    description: column_tooltips.rate,\n    field: 'rate',\n    headerName: 'Rate',\n    flex: 0.05,\n\n    valueFormatter(params) {\n      return currency.format(params.value, {\n        precision: 6\n      });\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.rightColumn), {}, {\n    description: column_tooltips.round_to,\n    field: 'round_to',\n    headerName: 'Round to',\n    sortable: false,\n    disableColumnMenu: true,\n    flex: 0.05\n  }), _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.rightColumn), columnProperties.iconColumn), {}, {\n    description: column_tooltips.status,\n    field: 'status',\n    headerName: 'Status',\n    renderCell: param => param.value ? /*#__PURE__*/_jsx(EnableIcon, {}) : /*#__PURE__*/_jsx(DisableIcon, {})\n  })];\n  const buttons = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create),\n    onClick: onOpenCreateDialog\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.delete),\n    onClick: onExecuteActions('delete')\n  }, {\n    label: t('common:button.enable'),\n    startIcon: /*#__PURE__*/_jsx(EnableIcon, {}),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable),\n    onClick: onExecuteActions('enable')\n  }, {\n    label: t('common:button.disable'),\n    startIcon: /*#__PURE__*/_jsx(DisableIcon, {}),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable),\n    onClick: onExecuteActions('disable')\n  }];\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: \"currency\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: initDataForList.wiki_page,\n    permissions: permissions,\n    Dialogs: /*#__PURE__*/_jsx(DialogCurrencyCreateEdit, {}),\n    Options: /*#__PURE__*/_jsx(AppAutocompleteStyled, {\n      width: 180,\n      label: \"Base currency\",\n      className: classes.controlAutocomplete,\n      options: base_currency_list,\n      value: user_base_currency,\n      getOptionLabel: option => option.currency_id,\n      onChange: onChangeBaseCurrency\n    }),\n    buttons: buttons,\n    tableProps: {\n      className: classes.currencyTable,\n      columns: columns,\n\n      getRowClassName(params) {\n        return clsx({\n          homeCurrency: !params.row.base_currency\n        });\n      },\n\n      isRowSelectable(params) {\n        return Boolean(params.row.base_currency);\n      }\n\n    }\n  });\n}\nexport const getServerSideProps = useAuthMiddleware(['common', 'currency', 'advanced_filter']);","map":null,"metadata":{},"sourceType":"module"}