{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport { Grid, Typography } from '@material-ui/core';\nimport { DialogLocationCreateEdit, useConfirm, confirmConstant, AppLayout, MakeAListIcon, StatisticIcon, EnableIcon, DisableIcon, EditIcon, DeleteIcon, CreateIcon } from '@/components';\nimport { makeAListActions, commonStore, locationStore } from '@/store/reducers';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nimport * as columnProperties from '@/utils/columnProperties';\n\nfunction Locations() {\n  const {\n    t\n  } = useTranslation('location');\n  const {\n    confirm\n  } = useConfirm();\n  const breadcrumbData = useMemo(() => [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Basic Options',\n    href: '/jobs'\n  }, {\n    label: 'Locations Management',\n    href: '/locations'\n  }], []);\n  const dispatch = useDispatch();\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const permissions = useSelector(locationStore.selectPermissions);\n  const {\n    wiki_page,\n    column_tooltips\n  } = useSelector(locationStore.selectInitDataForList);\n  const isEmptySelectedRows = selectedRows.length <= 0;\n\n  const handleOpenUpdateDialog = id => () => {\n    dispatch(locationStore.sagaOpenUpdateDialog(id));\n  };\n\n  const handleOpenCreateDialog = () => {\n    dispatch(locationStore.sagaOpenCreateDialog());\n  };\n\n  const onOpenMakeAList = () => {\n    dispatch(makeAListActions.open());\n  };\n\n  const handleExecuteOperation = operation => async () => {\n    const description = getMessageConfirm(t, 'location', selectedRows, operation);\n    const result = await confirm({\n      description\n    });\n\n    if (result === confirmConstant.actionTypes.OK) {\n      dispatch(commonStore.sagaExecuteOperation({\n        entity: 'location',\n        operation,\n        operationList: selectedRows\n      }));\n    }\n  };\n\n  const columns = useMemo(() => [_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    field: 'id',\n    headerName: 'Edit',\n    description: column_tooltips.edit,\n    renderCell: param => {\n      return /*#__PURE__*/_jsx(EditIcon, {\n        onClick: handleOpenUpdateDialog(param.value)\n      });\n    }\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.location_id,\n    field: 'location_id',\n    headerName: 'Code',\n    renderCell: param => /*#__PURE__*/_jsx(\"span\", {\n      children: param.value\n    })\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.name,\n    field: 'name',\n    headerName: 'Name',\n    flex: 0.2\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.location_type_raw,\n    field: 'location_type_raw',\n    headerName: 'Type'\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.office,\n    field: 'office',\n    headerName: 'Office',\n    flex: 0.2,\n    renderCell: param => {\n      const {\n        row\n      } = param;\n      return /*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxs(Grid, {\n          item: true,\n          xs: 6,\n          children: [/*#__PURE__*/_jsxs(Typography, {\n            variant: \"caption\",\n            noWrap: true,\n            display: \"block\",\n            children: [\"Address 1: \", row.office_address1]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            variant: \"caption\",\n            noWrap: true,\n            display: \"block\",\n            children: [\"Address 2: \", row.office_address2]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            variant: \"caption\",\n            noWrap: true,\n            display: \"block\",\n            children: [\"Email: \", row.office_email]\n          })]\n        }), /*#__PURE__*/_jsxs(Grid, {\n          item: true,\n          xs: 6,\n          children: [/*#__PURE__*/_jsxs(Typography, {\n            variant: \"caption\",\n            noWrap: true,\n            display: \"block\",\n            children: [\"City: \", row.office_city]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            variant: \"caption\",\n            noWrap: true,\n            display: \"block\",\n            children: [\"Zip: \", row.office_zip]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            variant: \"caption\",\n            noWrap: true,\n            display: \"block\",\n            children: [\"Phone: \", row.office_phone]\n          })]\n        })]\n      });\n    }\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.specialties,\n    field: 'specialties',\n    headerName: 'Specialties',\n    flex: 0.08\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.orders,\n    field: 'orders',\n    headerName: 'Orders'\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.status,\n    field: 'status',\n    headerName: 'Status',\n    renderCell: param => param.value ? /*#__PURE__*/_jsx(EnableIcon, {}) : /*#__PURE__*/_jsx(DisableIcon, {})\n  })], [permissions]);\n  const buttons = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create),\n    onClick: handleOpenCreateDialog\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.delete),\n    onClick: handleExecuteOperation('delete')\n  }, {\n    label: t('common:button.enable'),\n    startIcon: /*#__PURE__*/_jsx(EnableIcon, {}),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable),\n    onClick: handleExecuteOperation('enable')\n  }, {\n    label: t('common:button.disable'),\n    startIcon: /*#__PURE__*/_jsx(DisableIcon, {}),\n    disabled: isEmptySelectedRows || !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable),\n    onClick: handleExecuteOperation('disable')\n  }, {\n    label: t('common:button.make_a_list'),\n    startIcon: /*#__PURE__*/_jsx(MakeAListIcon, {}),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.make_a_list),\n    onClick: onOpenMakeAList\n  }, {\n    label: t('common:button.statistic'),\n    startIcon: /*#__PURE__*/_jsx(StatisticIcon, {}),\n    disabled: true\n  }];\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: \"location\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: wiki_page,\n    buttons: buttons,\n    permissions: permissions,\n    Dialogs: /*#__PURE__*/_jsx(DialogLocationCreateEdit, {}),\n    tableProps: {\n      columns: columns,\n      rowHeight: 65\n    }\n  });\n}\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'location', 'make_a_list', 'advanced_filter']);\nexport default Locations;","map":null,"metadata":{},"sourceType":"module"}