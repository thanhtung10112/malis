{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\AdvancedFilter\\\\ConditionTree\\\\ConditionRule.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useTranslation } from 'next-i18next';\nimport * as _ from 'lodash';\nimport { format as formatDate } from 'date-fns';\nimport { TreeItem } from '@material-ui/lab';\nimport { Cancel } from '@material-ui/icons';\nimport { IconButton, ButtonGroup, Tooltip } from '@material-ui/core';\nimport ColumnOptions from './ColumnOptions';\nimport ComparatorOptions from './ComparatorOptions';\nimport ConditionValue from './ConditionValue';\nimport { Unless } from 'react-if';\nimport useStyles from '../styles'; // A condition rule, which contains columns DD, comparators DD and value filed\n\nfunction ConditionRule(_ref) {\n  _s();\n\n  var ruleData = _ref.ruleData,\n      parentGroup = _ref.parent,\n      forceParentRerender = _ref.forceParentRerender,\n      columnOptions = _ref.columnOptions,\n      comparatorOptions = _ref.comparatorOptions,\n      disabled = _ref.disabled;\n\n  var _useTranslation = useTranslation(['advanced_filter']),\n      t = _useTranslation.t;\n\n  var classes = useStyles(); // trick for forcing rerender\n\n  var _useState = useState(0),\n      setValue = _useState[1];\n\n  var forceRerender = function forceRerender() {\n    setValue(function (value) {\n      return value + 1;\n    });\n  };\n\n  var removeRule = function removeRule(condition_id) {\n    return function () {\n      var newParentGroupConditions = parentGroup.conditions.filter(function (cond) {\n        return cond.condition_id !== condition_id;\n      });\n      parentGroup.conditions = newParentGroupConditions;\n      forceParentRerender();\n    };\n  };\n\n  var handleColumnNameChange = function handleColumnNameChange(value) {\n    var selectedColumn = _.find(columnOptions, {\n      id: value\n    });\n\n    ruleData.id = selectedColumn.id;\n    ruleData.column_type = selectedColumn.column_type;\n\n    switch (ruleData.column_type) {\n      case 'string':\n        ruleData.value = '';\n        ruleData.comparator = 'ilike';\n        break;\n\n      case 'number':\n        ruleData.value = 0;\n        ruleData.comparator = 'eq';\n        break;\n\n      case 'date':\n        ruleData.value = formatDate(new Date(), 'yyyy-MM-dd');\n        ruleData.comparator = 'eq';\n        break;\n\n      case 'datetime':\n        ruleData.value = formatDate(new Date(), 'yyyy-MM-dd HH:mm');\n        ruleData.comparator = 'eq';\n        break;\n\n      case 'predefined_value':\n        ruleData.value = [];\n        ruleData.comparator = 'in';\n        ruleData.value_as_string = selectedColumn.value_as_string;\n        break;\n\n      case 'boolean':\n        ruleData.value = false;\n        ruleData.comparator = 'eq';\n        break;\n    }\n\n    forceRerender();\n  };\n\n  var handleComparatorChange = function handleComparatorChange(newComparator) {\n    ruleData.comparator = newComparator;\n    forceRerender();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TreeItem, {\n      nodeId: \"root\",\n      onLabelClick: function onLabelClick(event) {\n        return event.preventDefault();\n      },\n      style: {\n        borderLeft: '1px #D8D8D8 dashed',\n        marginLeft: '1.6rem',\n        marginTop: '0.5rem'\n      },\n      label: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(ColumnOptions, {\n          options: columnOptions,\n          value: ruleData.id,\n          onColumnNameChange: handleColumnNameChange,\n          disabled: disabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ComparatorOptions, {\n          rules: ruleData,\n          columnOptions: columnOptions,\n          options: comparatorOptions,\n          disabled: disabled,\n          onComparatorChange: handleComparatorChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConditionValue, {\n          rules: ruleData,\n          columnOptions: columnOptions,\n          disabled: disabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Unless, {\n          condition: disabled,\n          children: /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: t('tooltip.condition_remove_rule'),\n            children: /*#__PURE__*/_jsxDEV(ButtonGroup, {\n              className: classes.buttonGroup,\n              size: \"small\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: removeRule(ruleData.condition_id),\n                children: /*#__PURE__*/_jsxDEV(Cancel, {\n                  className: classes.iconButton\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ConditionRule, \"bq4KNiqWOU8mYJ9+JHO9VVquK/s=\", false, function () {\n  return [useTranslation, useStyles];\n});\n\n_c = ConditionRule;\nexport default ConditionRule;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConditionRule\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/AdvancedFilter/ConditionTree/ConditionRule.tsx"],"names":["useState","useTranslation","_","format","formatDate","TreeItem","Cancel","IconButton","ButtonGroup","Tooltip","ColumnOptions","ComparatorOptions","ConditionValue","Unless","useStyles","ConditionRule","ruleData","parentGroup","parent","forceParentRerender","columnOptions","comparatorOptions","disabled","t","classes","setValue","forceRerender","value","removeRule","condition_id","newParentGroupConditions","conditions","filter","cond","handleColumnNameChange","selectedColumn","find","id","column_type","comparator","Date","value_as_string","handleComparatorChange","newComparator","event","preventDefault","borderLeft","marginLeft","marginTop","display","alignItems","buttonGroup","iconButton"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { useTranslation } from 'next-i18next'\n\nimport * as _ from 'lodash'\n\nimport { format as formatDate } from 'date-fns'\n\nimport { TreeItem } from '@material-ui/lab'\nimport { Cancel } from '@material-ui/icons'\n\nimport { IconButton, ButtonGroup, Tooltip } from '@material-ui/core'\n\nimport ColumnOptions from './ColumnOptions'\nimport ComparatorOptions from './ComparatorOptions'\nimport ConditionValue from './ConditionValue'\n\nimport { Unless } from 'react-if'\n\nimport useStyles from '../styles'\n\n// A condition rule, which contains columns DD, comparators DD and value filed\n\nfunction ConditionRule({\n  ruleData,\n  parent: parentGroup,\n  forceParentRerender,\n  columnOptions,\n  comparatorOptions,\n  disabled\n}) {\n  const { t } = useTranslation(['advanced_filter'])\n  const classes = useStyles()\n  // trick for forcing rerender\n  const [, setValue] = useState(0)\n  const forceRerender = () => {\n    setValue((value) => value + 1)\n  }\n\n  const removeRule = (condition_id) => () => {\n    const newParentGroupConditions = parentGroup.conditions.filter((cond) => cond.condition_id !== condition_id)\n    parentGroup.conditions = newParentGroupConditions\n    forceParentRerender()\n  }\n\n  const handleColumnNameChange = (value) => {\n    const selectedColumn = _.find(columnOptions, { id: value })\n    ruleData.id = selectedColumn.id\n    ruleData.column_type = selectedColumn.column_type\n\n    switch (ruleData.column_type) {\n      case 'string':\n        ruleData.value = ''\n        ruleData.comparator = 'ilike'\n        break\n      case 'number':\n        ruleData.value = 0\n        ruleData.comparator = 'eq'\n        break\n      case 'date':\n        ruleData.value = formatDate(new Date(), 'yyyy-MM-dd')\n        ruleData.comparator = 'eq'\n        break\n      case 'datetime':\n        ruleData.value = formatDate(new Date(), 'yyyy-MM-dd HH:mm')\n        ruleData.comparator = 'eq'\n        break\n      case 'predefined_value':\n        ruleData.value = []\n        ruleData.comparator = 'in'\n        ruleData.value_as_string = selectedColumn.value_as_string\n        break\n      case 'boolean':\n        ruleData.value = false\n        ruleData.comparator = 'eq'\n        break\n    }\n\n    forceRerender()\n  }\n\n  const handleComparatorChange = (newComparator) => {\n    ruleData.comparator = newComparator\n    forceRerender()\n  }\n\n  return (\n    <>\n      <TreeItem\n        nodeId=\"root\"\n        onLabelClick={(event) => event.preventDefault()}\n        style={{\n          borderLeft: '1px #D8D8D8 dashed',\n          marginLeft: '1.6rem',\n          marginTop: '0.5rem'\n        }}\n        label={\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <ColumnOptions\n              options={columnOptions}\n              value={ruleData.id}\n              onColumnNameChange={handleColumnNameChange}\n              disabled={disabled}\n            />\n            <ComparatorOptions\n              rules={ruleData}\n              columnOptions={columnOptions}\n              options={comparatorOptions}\n              disabled={disabled}\n              onComparatorChange={handleComparatorChange}\n            />\n            <ConditionValue rules={ruleData} columnOptions={columnOptions} disabled={disabled} />\n\n            <Unless condition={disabled}>\n              <Tooltip title={t('tooltip.condition_remove_rule')}>\n                <ButtonGroup className={classes.buttonGroup} size=\"small\">\n                  <IconButton onClick={removeRule(ruleData.condition_id)}>\n                    <Cancel className={classes.iconButton} />\n                  </IconButton>\n                </ButtonGroup>\n              </Tooltip>\n            </Unless>\n          </div>\n        }\n      />\n    </>\n  )\n}\n\nexport default ConditionRule\n"]},"metadata":{},"sourceType":"module"}