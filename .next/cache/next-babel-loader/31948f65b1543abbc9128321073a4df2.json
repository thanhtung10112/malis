{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport isEmpty from 'lodash/isEmpty';\nimport cookies from 'js-cookie';\nconst domain = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:5000/';\n\nclass Http {\n  get(path, query) {\n    const options = {};\n    const requestUrl = domain + path;\n\n    if (isEmpty(query) === false) {\n      options.params = query;\n    }\n\n    const token = cookies.get('token');\n\n    if (isEmpty(token) === false) {\n      options.headers = {\n        Authorization: `Bearer ${token}`\n      };\n    }\n\n    return axios.get(requestUrl, options);\n  }\n\n  post(path, data, headers = {}) {\n    const requestUrl = domain + path;\n    const token = cookies.get('token');\n    let options = {};\n\n    if (isEmpty(token) === false) {\n      options = {\n        headers: _objectSpread({\n          Authorization: `Bearer ${token}`\n        }, headers)\n      };\n    }\n\n    return axios.post(requestUrl, data, options);\n  }\n\n  put(path, data, query, headers = {}) {\n    let requestUrl = domain + path;\n\n    if (isEmpty(query) === false) {\n      requestUrl += this.queryStringBuilder(query);\n    }\n\n    const token = cookies.get('token');\n    let options = {};\n\n    if (isEmpty(token) === false) {\n      options = {\n        headers: _objectSpread({\n          Authorization: `Bearer ${token}`\n        }, headers)\n      };\n    }\n\n    return axios.put(requestUrl, data, options);\n  }\n\n  delete(path, data, query) {\n    let requestUrl = domain + path;\n\n    if (isEmpty(query) === false) {\n      requestUrl += this.queryStringBuilder(query);\n    }\n\n    const token = cookies.get('token');\n    let options = {};\n\n    if (isEmpty(token) === false) {\n      options = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n    }\n\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      data\n    });\n    return axios.delete(requestUrl, options);\n  }\n\n  queryStringBuilder(query) {\n    const str = [];\n\n    for (const p in query) {\n      const value = p + '=' + query[p];\n      str.push(value);\n    }\n\n    return '?' + str.join('&');\n  }\n\n}\n\nexport default new Http();","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/utils/Http.ts"],"names":["axios","isEmpty","cookies","domain","process","env","NEXT_PUBLIC_BACKEND_URL","Http","get","path","query","options","requestUrl","params","token","headers","Authorization","post","data","put","queryStringBuilder","delete","str","p","value","push","join"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport isEmpty from 'lodash/isEmpty'\nimport cookies from 'js-cookie'\n\nconst domain = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:5000/'\n\nclass Http {\n  get<T = any>(path: string, query?) {\n    const options: any = {}\n    const requestUrl = domain + path\n    if (isEmpty(query) === false) {\n      options.params = query\n    }\n    const token: string = cookies.get('token')\n    if (isEmpty(token) === false) {\n      options.headers = {\n        Authorization: `Bearer ${token}`\n      }\n    }\n    return axios.get<T>(requestUrl, options)\n  }\n\n  post<T = any, P = any>(path: string, data: P, headers = {}) {\n    const requestUrl = domain + path\n    const token: string = cookies.get('token')\n    let options = {}\n    if (isEmpty(token) === false) {\n      options = {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          ...headers\n        }\n      }\n    }\n    return axios.post<T>(requestUrl, data, options)\n  }\n\n  put<T = any>(path: string, data, query?, headers = {}) {\n    let requestUrl = domain + path\n    if (isEmpty(query) === false) {\n      requestUrl += this.queryStringBuilder(query)\n    }\n    const token: string = cookies.get('token')\n    let options = {}\n    if (isEmpty(token) === false) {\n      options = {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          ...headers\n        }\n      }\n    }\n    return axios.put<T>(requestUrl, data, options)\n  }\n\n  delete<T = any>(path: string, data, query?) {\n    let requestUrl = domain + path\n    if (isEmpty(query) === false) {\n      requestUrl += this.queryStringBuilder(query)\n    }\n    const token: string = cookies.get('token')\n    let options = {}\n    if (isEmpty(token) === false) {\n      options = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n    options = { ...options, data }\n    return axios.delete<T>(requestUrl, options)\n  }\n\n  queryStringBuilder(query): string {\n    const str = []\n    for (const p in query) {\n      const value = p + '=' + query[p]\n      str.push(value)\n    }\n    return '?' + str.join('&')\n  }\n}\n\nexport default new Http()\n"]},"metadata":{},"sourceType":"module"}