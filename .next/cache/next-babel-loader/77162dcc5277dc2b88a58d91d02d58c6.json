{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { actionTypes } from '@/utils/constant';\nexport var name = 'job';\nexport var resetState = createAction(\"\".concat(name, \"/\").concat(actionTypes.RESET_STATE));\nexport var transferListState = {\n  userAvailableList: [],\n  userGroup: [],\n  open: false\n};\nexport var jobDetail = {\n  job_id: '',\n  equipment_type: null,\n  language: null,\n  erection_site: null,\n  job_standard: [],\n  people_responsible: [],\n  squad_leader: [],\n  drawings_responsible: [],\n  contract_no: '',\n  contract_desc: '',\n  credit_letter: '',\n  logo: null,\n  additional_attributes: {},\n  job_currencies: [],\n  job_descriptions: [],\n  job_users: [],\n  job_expediting_dates: []\n};\nexport var initialState = {\n  dataList: [],\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: []\n  },\n  selectedJobCategory: {\n    description: '',\n    id: null,\n    parameter_id: ''\n  },\n  initDataForList: {\n    job_categories: [],\n    permissions: {\n      job: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  initDataForCE: {\n    currencies: [],\n    group_map: {\n      job_all: '',\n      job_drawing: '',\n      job_responsible: '',\n      job_squad_leader: ''\n    },\n    erection_sites: [],\n    parameters: {\n      EQTY: [],\n      JOAT: [],\n      PLLA: [],\n      PLNO: []\n    },\n    tooltip: '<span></span>',\n    job_template: jobDetail,\n    wiki_page: ''\n  },\n  transferListState: transferListState,\n  keyMapping: null,\n  detail: jobDetail\n};\nvar jobSlice = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    setDataList: function setDataList(state, _ref) {\n      var payload = _ref.payload;\n      state.dataList = payload;\n    },\n    setDialogState: function setDialogState(state, _ref2) {\n      var payload = _ref2.payload;\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n    setHistoryLogs: function setHistoryLogs(state, _ref3) {\n      var payload = _ref3.payload;\n      state.dialogState.historyLogs = payload;\n    },\n    setDialogStateOpen: function setDialogStateOpen(state, _ref4) {\n      var payload = _ref4.payload;\n      state.dialogState.open = payload;\n    },\n    setDialogStateLoading: function setDialogStateLoading(state, _ref5) {\n      var payload = _ref5.payload;\n      state.dialogState.loading = payload;\n    },\n    setInitDataForList: function setInitDataForList(state, _ref6) {\n      var payload = _ref6.payload;\n      state.initDataForList = payload;\n    },\n    setInitDataForCE: function setInitDataForCE(state, _ref7) {\n      var payload = _ref7.payload;\n      state.initDataForCE = payload;\n    },\n    setOpenTransferList: function setOpenTransferList(state, _ref8) {\n      var payload = _ref8.payload;\n      state.transferListState.open = payload;\n    },\n    setTransferUserAvailableList: function setTransferUserAvailableList(state, _ref9) {\n      var payload = _ref9.payload;\n      state.transferListState.userAvailableList = payload;\n    },\n    setTransferListUserGroup: function setTransferListUserGroup(state, _ref10) {\n      var payload = _ref10.payload;\n      state.transferListState.userGroup = payload;\n    },\n    setDetail: function setDetail(state, _ref11) {\n      var payload = _ref11.payload;\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n    setSelectedCategory: function setSelectedCategory(state, _ref12) {\n      var payload = _ref12.payload;\n      state.selectedJobCategory = payload;\n    },\n    setKeyMapping: function setKeyMapping(state, _ref13) {\n      var payload = _ref13.payload;\n      state.keyMapping = payload;\n    },\n    closeTransferList: function closeTransferList(state) {\n      state.transferListState = _objectSpread(_objectSpread({}, transferListState), {}, {\n        userGroup: state.transferListState.userGroup\n      });\n    },\n    setPermissions: function setPermissions(state, _ref14) {\n      var payload = _ref14.payload;\n      state.initDataForList.permissions.job = payload;\n    },\n    resetDetail: function resetDetail(state) {\n      var jobStandard = state.initDataForCE.parameters.PLNO.map(function (item) {\n        return _.pick(item, ['description', 'parameter_id', 'id']);\n      });\n      state.detail = _objectSpread(_objectSpread({}, jobDetail), {}, {\n        job_standard: jobStandard\n      });\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n}); // Actions\n\nvar actions = jobSlice.actions; // Saga actions\n\nexport { actions };\nexport var sagaGetList = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_LIST));\nexport var sagaOpenCreateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_CREATE_DIALOG));\nexport var sagaOpenUpdateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_UPDATE_DIALOG));\nexport var sagaCloseDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.CLOSE_DIALOG));\nexport var sagaCreate = createAction(\"\".concat(name, \"/\").concat(actionTypes.CREATE));\nexport var sagaUpdate = createAction(\"\".concat(name, \"/\").concat(actionTypes.UPDATE));\nexport var sagaGetUserGroupMapping = createAction(\"\".concat(name, \"/GET_USER_GROUP_MAPPING\")); // Selector\n\nexport var selectState = function selectState(state) {\n  return state[name];\n};\nexport var selectDataList = createSelector(selectState, function (state) {\n  return state.dataList;\n});\nexport var selectJobCategories = createSelector(selectState, function (state) {\n  return state.initDataForList.job_categories;\n});\nexport var selectPermissions = createSelector(selectState, function (state) {\n  return state.initDataForList.permissions.job;\n});\nexport var selectDialogState = createSelector(selectState, function (state) {\n  return state.dialogState;\n});\nexport var selectInitDataForCE = createSelector(selectState, function (state) {\n  return state.initDataForCE;\n});\nexport var selectTransferListState = createSelector(selectState, function (state) {\n  return state.transferListState;\n});\nexport var selectDetail = createSelector(selectState, function (state) {\n  return state.detail;\n});\nexport var selectKeyMapping = createSelector(selectState, function (state) {\n  return state.keyMapping;\n});\nexport var selectSelectedJobCategory = createSelector(selectState, function (state) {\n  return state.selectedJobCategory;\n});\nexport var selectInitDataForList = createSelector(selectState, function (state) {\n  return state.initDataForList;\n});\nexport default jobSlice;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/reducers/job.reducer.ts"],"names":["createSlice","createAction","createSelector","_","actionTypes","name","resetState","RESET_STATE","transferListState","userAvailableList","userGroup","open","jobDetail","job_id","equipment_type","language","erection_site","job_standard","people_responsible","squad_leader","drawings_responsible","contract_no","contract_desc","credit_letter","logo","additional_attributes","job_currencies","job_descriptions","job_users","job_expediting_dates","initialState","dataList","dialogState","loading","historyLogs","selectedJobCategory","description","id","parameter_id","initDataForList","job_categories","permissions","job","wiki_page","column_tooltips","initDataForCE","currencies","group_map","job_all","job_drawing","job_responsible","job_squad_leader","erection_sites","parameters","EQTY","JOAT","PLLA","PLNO","tooltip","job_template","keyMapping","detail","jobSlice","reducers","setDataList","state","payload","setDialogState","setHistoryLogs","setDialogStateOpen","setDialogStateLoading","setInitDataForList","setInitDataForCE","setOpenTransferList","setTransferUserAvailableList","setTransferListUserGroup","setDetail","setSelectedCategory","setKeyMapping","closeTransferList","setPermissions","resetDetail","jobStandard","map","item","pick","extraReducers","type","actions","sagaGetList","GET_LIST","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaCloseDialog","CLOSE_DIALOG","sagaCreate","CREATE","sagaUpdate","UPDATE","sagaGetUserGroupMapping","selectState","selectDataList","selectJobCategories","selectPermissions","selectDialogState","selectInitDataForCE","selectTransferListState","selectDetail","selectKeyMapping","selectSelectedJobCategory","selectInitDataForList"],"mappings":"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","sourcesContent":["import { createSlice, createAction, PayloadAction, createSelector } from '@reduxjs/toolkit'\nimport _ from 'lodash'\nimport { actionTypes } from '@/utils/constant'\n\nimport type { Entity, ParameterOption, HistoryLog } from '@/types/Common'\nimport type { RootReducerType } from './rootReducer'\nimport type {\n  JobItem,\n  JobDetail,\n  JobInitDataForCE,\n  UserGroupMapping,\n  JobKeyMapping,\n  JobPermissions,\n  JobInitDataForList\n} from '@/types/Job'\n\nexport const name: Entity = 'job'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const transferListState = {\n  userAvailableList: [] as UserGroupMapping[],\n  userGroup: [] as UserGroupMapping[],\n  open: false\n}\n\nexport const jobDetail: JobDetail = {\n  job_id: '',\n  equipment_type: null,\n  language: null,\n  erection_site: null,\n  job_standard: [],\n  people_responsible: [],\n  squad_leader: [],\n  drawings_responsible: [],\n  contract_no: '',\n  contract_desc: '',\n  credit_letter: '',\n  logo: null,\n  additional_attributes: {},\n  job_currencies: [],\n  job_descriptions: [],\n  job_users: [],\n  job_expediting_dates: []\n}\n\nexport const initialState = {\n  dataList: [] as JobItem[],\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: [] as HistoryLog[]\n  },\n  selectedJobCategory: {\n    description: '',\n    id: null,\n    parameter_id: ''\n  } as ParameterOption,\n  initDataForList: {\n    job_categories: [],\n    permissions: {\n      job: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as JobInitDataForList,\n  initDataForCE: {\n    currencies: [],\n    group_map: {\n      job_all: '',\n      job_drawing: '',\n      job_responsible: '',\n      job_squad_leader: ''\n    },\n    erection_sites: [],\n    parameters: {\n      EQTY: [],\n      JOAT: [],\n      PLLA: [],\n      PLNO: []\n    },\n    tooltip: '<span></span>',\n    job_template: jobDetail,\n    wiki_page: ''\n  } as JobInitDataForCE,\n  transferListState,\n  keyMapping: null as JobKeyMapping,\n  detail: jobDetail\n}\n\nconst jobSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, { payload }: PayloadAction<JobItem[]>) {\n      state.dataList = payload\n    },\n    setDialogState(state, { payload }: PayloadAction<Partial<typeof initialState.dialogState>>) {\n      state.dialogState = {\n        ...state.dialogState,\n        ...payload\n      }\n    },\n    setHistoryLogs(state, { payload }: PayloadAction<HistoryLog[]>) {\n      state.dialogState.historyLogs = payload\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setInitDataForList(state, { payload }: PayloadAction<JobInitDataForList>) {\n      state.initDataForList = payload\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<JobInitDataForCE>) {\n      state.initDataForCE = payload\n    },\n    setOpenTransferList(state, { payload }: PayloadAction<boolean>) {\n      state.transferListState.open = payload\n    },\n    setTransferUserAvailableList(state, { payload }: PayloadAction<UserGroupMapping[]>) {\n      state.transferListState.userAvailableList = payload\n    },\n    setTransferListUserGroup(state, { payload }: PayloadAction<UserGroupMapping[]>) {\n      state.transferListState.userGroup = payload\n    },\n    setDetail(state, { payload }) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    setSelectedCategory(state, { payload }: PayloadAction<ParameterOption>) {\n      state.selectedJobCategory = payload\n    },\n    setKeyMapping(state, { payload }: PayloadAction<JobKeyMapping>) {\n      state.keyMapping = payload\n    },\n    closeTransferList(state) {\n      state.transferListState = {\n        ...transferListState,\n        userGroup: state.transferListState.userGroup\n      }\n    },\n    setPermissions(state, { payload }: PayloadAction<JobPermissions>) {\n      state.initDataForList.permissions.job = payload\n    },\n    resetDetail(state) {\n      const jobStandard = state.initDataForCE.parameters.PLNO.map((item) =>\n        _.pick(item, ['description', 'parameter_id', 'id'])\n      ) as any\n      state.detail = {\n        ...jobDetail,\n        job_standard: jobStandard\n      }\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\n// Actions\nexport const { actions } = jobSlice\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaCreate = createAction<FormData>(`${name}/${actionTypes.CREATE}`)\nexport const sagaUpdate = createAction<{ id: number; formData: FormData }>(`${name}/${actionTypes.UPDATE}`)\nexport const sagaGetUserGroupMapping = createAction<string>(`${name}/GET_USER_GROUP_MAPPING`)\n\n// Selector\nexport const selectState = (state: RootReducerType) => state[name]\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\nexport const selectJobCategories = createSelector(selectState, (state) => state.initDataForList.job_categories)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.job)\n\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\nexport const selectInitDataForCE = createSelector(selectState, (state) => state.initDataForCE)\nexport const selectTransferListState = createSelector(selectState, (state) => state.transferListState)\n\nexport const selectDetail = createSelector(selectState, (state) => state.detail)\n\nexport const selectKeyMapping = createSelector(selectState, (state) => state.keyMapping)\n\nexport const selectSelectedJobCategory = createSelector(selectState, (state) => state.selectedJobCategory)\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\n\nexport default jobSlice\n"]},"metadata":{},"sourceType":"module"}