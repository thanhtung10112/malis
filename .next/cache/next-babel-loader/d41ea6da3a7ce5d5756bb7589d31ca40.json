{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\User\\\\TabJobs.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useMemo } from 'react';\nimport { useTranslation } from 'next-i18next';\nimport { useSelector } from 'react-redux';\nimport { useFormContext } from 'react-hook-form';\nimport { Grid, Typography, Button } from '@material-ui/core';\nimport { DataTable, DataTableTextField, AppTitle, CreateIcon, DeleteIcon, AppAutocomplete } from '@/components';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport * as columnProperties from '@/utils/columnProperties';\nimport { userStore } from '@/store/reducers';\n\nfunction TabJob() {\n  _s();\n\n  var _useTranslation = useTranslation('user'),\n      t = _useTranslation.t;\n\n  var userForm = useFormContext();\n  var watchUserJob = userForm.watch('job_access', []);\n\n  var _useState = useState([]),\n      selectedJobs = _useState[0],\n      setSelectedJobs = _useState[1];\n\n  var _useState2 = useState([]),\n      selectedRows = _useState2[0],\n      setSelectedRows = _useState2[1];\n\n  var _useSelector = useSelector(userStore.selectInitDataForCE),\n      jobOptions = _useSelector.jobs;\n\n  var jobsTabColumns = useMemo(function () {\n    return [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      field: 'job_raw_id',\n      headerName: 'Job #',\n      flex: 0.1\n    }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Note')), {}, {\n      field: 'note',\n      flex: 0.4,\n      renderEditCell: function renderEditCell(params) {\n        return /*#__PURE__*/_jsxDEV(DataTableTextField, {\n          params: params,\n          onChangeValue: onChangeJobNote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 18\n        }, this);\n      }\n    })];\n  }, []);\n\n  var onChangeSelectedJobs = function onChangeSelectedJobs(_, value) {\n    var newValue = value.map(function (item) {\n      return _objectSpread(_objectSpread({}, item), {}, {\n        note: ''\n      });\n    });\n    setSelectedJobs(newValue);\n  };\n\n  var onAddSelectedJobs = function onAddSelectedJobs() {\n    var _userForm$getValues = userForm.getValues(),\n        jobAccess = _userForm$getValues.job_access;\n\n    var newJobAccess = [].concat(_toConsumableArray(jobAccess), _toConsumableArray(selectedJobs));\n    userForm.setValue('job_access', newJobAccess);\n    setSelectedJobs([]);\n  };\n\n  var onSelectJobsTable = function onSelectJobsTable(_ref) {\n    var selectionModel = _ref.selectionModel;\n    setSelectedRows(selectionModel);\n  };\n\n  var onRemoveSelectedRows = function onRemoveSelectedRows() {\n    var _userForm$getValues2 = userForm.getValues(),\n        jobAccess = _userForm$getValues2.job_access;\n\n    var newJobAccess = jobAccess.filter(function (job) {\n      return !selectedRows.includes(job.job_id);\n    });\n    userForm.setValue('job_access', newJobAccess);\n    setSelectedRows([]);\n  };\n\n  var onChangeJobNote = function onChangeJobNote(job_id, value) {\n    var _userForm$getValues3 = userForm.getValues(),\n        jobAccess = _userForm$getValues3.job_access;\n\n    var newJobAccess = immer(jobAccess, function (draft) {\n      var index = _.findIndex(draft, {\n        job_id: job_id\n      });\n\n      draft[index].note = value;\n    });\n    userForm.setValue('job_access', newJobAccess);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    alignItems: \"center\",\n    spacing: 2,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        display: \"block\",\n        variant: \"body2\",\n        children: t('form.description.tab_job')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 9,\n      children: /*#__PURE__*/_jsxDEV(AppAutocomplete, {\n        label: \"Jobs\",\n        value: selectedJobs,\n        multiple: true,\n        limitTags: 4,\n        disableCloseOnSelect: true,\n        options: jobOptions,\n        renderOption: function renderOption(option) {\n          return option.job_raw_id;\n        },\n        getOptionSelected: function getOptionSelected(option, value) {\n          return option.job_id === value.job_id;\n        },\n        getOptionDisabled: function getOptionDisabled(option) {\n          return watchUserJob.some(function (item) {\n            return item.job_id === option.job_id;\n          });\n        },\n        onChange: onChangeSelectedJobs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 3,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 22\n        }, this),\n        variant: \"outlined\",\n        color: \"primary\",\n        fullWidth: true,\n        style: {\n          padding: 0\n        },\n        onClick: onAddSelectedJobs,\n        disabled: selectedJobs.length === 0,\n        children: t('common:button.add')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 9,\n      children: /*#__PURE__*/_jsxDEV(AppTitle, {\n        label: t('form.label.access_rights')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 3,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 22\n        }, this),\n        style: {\n          padding: 0\n        },\n        variant: \"outlined\",\n        color: \"primary\",\n        fullWidth: true,\n        onClick: onRemoveSelectedRows,\n        disabled: selectedRows.length <= 0,\n        children: t('common:button.remove')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        disableSelectionOnClick: true,\n        tableHeight: 355,\n        checkboxSelection: true,\n        rows: watchUserJob,\n        getRowId: function getRowId(params) {\n          return params.job_id;\n        },\n        selectionModel: selectedRows,\n        columns: jobsTabColumns,\n        onSelectionModelChange: onSelectJobsTable,\n        hideFooter: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TabJob, \"PH6s0AdARrrlj7RJg1Nmjdr3j4I=\", false, function () {\n  return [useTranslation, useFormContext, useSelector];\n});\n\n_c = TabJob;\nexport default TabJob;\n\nvar _c;\n\n$RefreshReg$(_c, \"TabJob\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/User/TabJobs.tsx"],"names":["useState","useMemo","useTranslation","useSelector","useFormContext","Grid","Typography","Button","DataTable","DataTableTextField","AppTitle","CreateIcon","DeleteIcon","AppAutocomplete","_","immer","columnProperties","userStore","TabJob","t","userForm","watchUserJob","watch","selectedJobs","setSelectedJobs","selectedRows","setSelectedRows","selectInitDataForCE","jobOptions","jobs","jobsTabColumns","defaultProperties","field","headerName","flex","editCell","renderEditCell","params","onChangeJobNote","onChangeSelectedJobs","value","newValue","map","item","note","onAddSelectedJobs","getValues","jobAccess","job_access","newJobAccess","setValue","onSelectJobsTable","selectionModel","onRemoveSelectedRows","filter","job","includes","job_id","draft","index","findIndex","option","job_raw_id","some","padding","length"],"mappings":"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","sourcesContent":["import { useState, useMemo } from 'react'\nimport { useTranslation } from 'next-i18next'\nimport { useSelector } from 'react-redux'\nimport { useFormContext } from 'react-hook-form'\n\nimport { Grid, Typography, Button } from '@material-ui/core'\n\nimport { DataTable, DataTableTextField, AppTitle, CreateIcon, DeleteIcon, AppAutocomplete } from '@/components'\n\nimport _ from 'lodash'\nimport immer from 'immer'\n\nimport * as columnProperties from '@/utils/columnProperties'\nimport { userStore } from '@/store/reducers'\n\nimport type { JobAccess, UserDetail } from '@/types/User'\n\nfunction TabJob() {\n  const { t } = useTranslation('user')\n\n  const userForm = useFormContext<UserDetail>()\n  const watchUserJob = userForm.watch('job_access', [])\n\n  const [selectedJobs, setSelectedJobs] = useState<JobAccess[]>([])\n  const [selectedRows, setSelectedRows] = useState<number[]>([])\n\n  const { jobs: jobOptions } = useSelector(userStore.selectInitDataForCE)\n\n  const jobsTabColumns = useMemo(\n    () => [\n      {\n        ...columnProperties.defaultProperties,\n        field: 'job_raw_id',\n        headerName: 'Job #',\n        flex: 0.1\n      },\n      {\n        ...columnProperties.defaultProperties,\n        ...columnProperties.editCell('Note'),\n        field: 'note',\n        flex: 0.4,\n        renderEditCell(params) {\n          return <DataTableTextField params={params} onChangeValue={onChangeJobNote} />\n        }\n      }\n    ],\n    []\n  )\n\n  const onChangeSelectedJobs = (_, value) => {\n    const newValue = value.map((item) => ({\n      ...item,\n      note: ''\n    }))\n    setSelectedJobs(newValue)\n  }\n\n  const onAddSelectedJobs = () => {\n    const { job_access: jobAccess } = userForm.getValues()\n    const newJobAccess = [...jobAccess, ...selectedJobs]\n    userForm.setValue('job_access', newJobAccess)\n    setSelectedJobs([])\n  }\n\n  const onSelectJobsTable = ({ selectionModel }) => {\n    setSelectedRows(selectionModel)\n  }\n\n  const onRemoveSelectedRows = () => {\n    const { job_access: jobAccess } = userForm.getValues()\n    const newJobAccess = jobAccess.filter((job) => !selectedRows.includes(job.job_id))\n    userForm.setValue('job_access', newJobAccess)\n    setSelectedRows([])\n  }\n\n  const onChangeJobNote = (job_id, value) => {\n    const { job_access: jobAccess } = userForm.getValues()\n    const newJobAccess = immer(jobAccess, (draft) => {\n      const index = _.findIndex(draft, { job_id })\n      draft[index].note = value\n    })\n    userForm.setValue('job_access', newJobAccess)\n  }\n\n  return (\n    <Grid container alignItems=\"center\" spacing={2}>\n      <Grid item xs={12}>\n        <Typography display=\"block\" variant=\"body2\">\n          {t('form.description.tab_job')}\n        </Typography>\n      </Grid>\n      <Grid item xs={9}>\n        <AppAutocomplete\n          label=\"Jobs\"\n          value={selectedJobs}\n          multiple\n          limitTags={4}\n          disableCloseOnSelect\n          options={jobOptions}\n          renderOption={(option) => option.job_raw_id}\n          getOptionSelected={(option, value) => option.job_id === value.job_id}\n          getOptionDisabled={(option) => watchUserJob.some((item) => item.job_id === option.job_id)}\n          onChange={onChangeSelectedJobs}\n        />\n      </Grid>\n\n      <Grid item xs={3}>\n        <Button\n          startIcon={<CreateIcon />}\n          variant=\"outlined\"\n          color=\"primary\"\n          fullWidth\n          style={{ padding: 0 }}\n          onClick={onAddSelectedJobs}\n          disabled={selectedJobs.length === 0}\n        >\n          {t('common:button.add')}\n        </Button>\n      </Grid>\n\n      <Grid item xs={9}>\n        <AppTitle label={t('form.label.access_rights')} />\n      </Grid>\n\n      <Grid item xs={3}>\n        <Button\n          startIcon={<DeleteIcon />}\n          style={{ padding: 0 }}\n          variant=\"outlined\"\n          color=\"primary\"\n          fullWidth\n          onClick={onRemoveSelectedRows}\n          disabled={selectedRows.length <= 0}\n        >\n          {t('common:button.remove')}\n        </Button>\n      </Grid>\n\n      <Grid item xs={12}>\n        <DataTable\n          disableSelectionOnClick\n          tableHeight={355}\n          checkboxSelection\n          rows={watchUserJob}\n          getRowId={(params) => params.job_id}\n          selectionModel={selectedRows}\n          columns={jobsTabColumns}\n          onSelectionModelChange={onSelectJobsTable}\n          hideFooter\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default TabJob\n"]},"metadata":{},"sourceType":"module"}