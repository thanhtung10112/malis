{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\AdvancedFilter\\\\FilterPresetList.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button, Checkbox, Typography, Tooltip } from '@material-ui/core';\nimport { DataTable, DataTableCellExpand, CreateIcon, CloseIcon, AppAutocompleteStyled } from '@/components/index';\nimport { Unless } from 'react-if';\nimport { useMemo, useState, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport useStyles from './styles';\nimport useStylesLayout from '@/styles/page/layout';\nimport clsx from 'clsx';\nimport { advancedFilterActions, commonStore } from '@/store/reducers';\nimport * as columnProperties from '@/utils/columnProperties';\n\nfunction FilterPresetList({\n  onChangeActiveTab\n}) {\n  // props.entity is the thing that you will pass to the backend to get the corresponding data for each module\n  const classes = useStyles();\n  const classesLayout = useStylesLayout();\n  const refDataGrid = useRef(null);\n  const {\n    0: idSelected,\n    1: setIdSelected\n  } = useState(null);\n  const dispatch = useDispatch();\n  const {\n    t\n  } = useTranslation(['common', 'advanced_filter']);\n  const defaultFilter = useSelector(advancedFilterActions.selectDefaultFilter);\n  const presetList = useSelector(advancedFilterActions.selectListData);\n  const filterType = useSelector(advancedFilterActions.selectFilterType);\n  const loading = useSelector(advancedFilterActions.selectLoading);\n  const entity = useSelector(commonStore.selectEntity);\n  const afPermissions = useSelector(advancedFilterActions.selectPermissions);\n  const filterDetail = useSelector(advancedFilterActions.selectFilterDetail);\n\n  const getOptionFilterList = () => {\n    const defaultOptions = [{\n      name: 'Owner',\n      value: 'own'\n    }, {\n      name: 'Shared',\n      value: 'shared'\n    }];\n\n    if (afPermissions.update_system_default_presets) {\n      defaultOptions.push({\n        name: 'System',\n        value: 'system'\n      });\n    }\n\n    return defaultOptions;\n  };\n\n  const filterOptions = useMemo(getOptionFilterList, [afPermissions.update_system_default_presets]);\n\n  const getColumnPresetList = () => {\n    const onwColumns = [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      field: 'name',\n      headerName: 'Name',\n      flex: 0.6\n    }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      headerName: 'Shared',\n      field: 'is_shared',\n\n      renderCell(params) {\n        if (!refDataGrid.current) {\n          refDataGrid.current = params.api;\n        }\n\n        const message = params.value ? t('advanced_filter:tooltip.unshare_checkbox') : t('advanced_filter:tooltip.share_checkbox');\n        return /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: message,\n          children: /*#__PURE__*/_jsxDEV(Checkbox, {\n            color: \"primary\",\n            checked: params.value,\n            onChange: onShareFilter(params.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this);\n      }\n\n    })];\n    const sharedColumns = [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      field: 'name',\n      headerName: 'Name',\n      flex: 0.6,\n\n      renderCell(params) {\n        if (!refDataGrid.current) {\n          refDataGrid.current = params.api;\n        }\n\n        return /*#__PURE__*/_jsxDEV(DataTableCellExpand, {\n          value: params.value,\n          width: params.colDef.width\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 18\n        }, this);\n      }\n\n    }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n      field: 'created_by',\n      headerName: t('advanced_filter:list.owner')\n    })];\n\n    if (filterType === 'own') {\n      return onwColumns;\n    }\n\n    return sharedColumns;\n  };\n\n  const columnsMyPreset = useMemo(getColumnPresetList, [filterType]);\n  useEffect(() => {\n    setIdSelected(filterDetail.id);\n  }, [filterDetail]);\n\n  const onChangeFilterType = (_, {\n    value\n  }) => {\n    dispatch(advancedFilterActions.changeFilterType(value));\n    onChangeActiveTab(null, 0);\n  };\n\n  const onCreateFilter = () => {\n    var _refDataGrid$current;\n\n    (_refDataGrid$current = refDataGrid.current) === null || _refDataGrid$current === void 0 ? void 0 : _refDataGrid$current.setSelectionModel([]);\n    dispatch(advancedFilterActions.setEditMode(false));\n    dispatch(advancedFilterActions.resetFilterDetail(entity));\n    onChangeActiveTab(null, 0);\n  };\n\n  const onClearUserDefault = () => {\n    var _refDataGrid$current2;\n\n    (_refDataGrid$current2 = refDataGrid.current) === null || _refDataGrid$current2 === void 0 ? void 0 : _refDataGrid$current2.setSelectionModel([]);\n    dispatch(advancedFilterActions.clearDefaultFilter());\n  };\n\n  const onSelectFilterDetail = id => () => {\n    var _refDataGrid$current3;\n\n    (_refDataGrid$current3 = refDataGrid.current) === null || _refDataGrid$current3 === void 0 ? void 0 : _refDataGrid$current3.setSelectionModel([]);\n    dispatch(advancedFilterActions.getDetail(id));\n  };\n\n  const onShareFilter = id => (_, is_shared) => {\n    const data = {\n      id,\n      is_shared\n    };\n    dispatch(advancedFilterActions.share(data));\n  };\n\n  const onSelectRowPresetDetail = params => {\n    onChangeActiveTab(null, 0);\n    onSelectFilterDetail(params.id)();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.filterListTopSection,\n      children: [/*#__PURE__*/_jsxDEV(AppAutocompleteStyled, {\n        primaryKeyOption: \"value\",\n        label: \"Preset List\",\n        options: filterOptions,\n        defaultValue: filterOptions[0],\n        onChange: onChangeFilterType,\n        renderOption: option => option.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 22\n        }, this),\n        className: clsx(classesLayout.buttonControl, 'new', classes.btnCreatePreset),\n        onClick: onCreateFilter,\n        style: {\n          background: '#0A65FF',\n          color: 'white'\n        },\n        children: \"New preset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      component: \"div\",\n      className: classes.wrapLabelFilter,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"strong\",\n        variant: \"body1\",\n        children: [t('advanced_filter:filter_presets.default_filter'), \"\\xA0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        component: \"span\",\n        variant: \"body1\",\n        className: classes.defaultFilterLink,\n        noWrap: true,\n        onClick: onSelectFilterDetail(defaultFilter.id),\n        children: defaultFilter.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Unless, {\n        condition: defaultFilter.is_system_default,\n        children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n          onClick: onClearUserDefault\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      loading: loading.table,\n      tableHeight: 370,\n      disableColumnMenu: true,\n      columns: columnsMyPreset,\n      rows: presetList,\n      hideFooter: true,\n      onRowClick: onSelectRowPresetDetail,\n      getRowClassName: params => clsx({\n        [classes.presetSelected]: params.id === idSelected\n      }),\n      onCellClick: (params, event) => {\n        if (params.field === 'is_shared') {\n          event.stopPropagation();\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nexport default FilterPresetList;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/AdvancedFilter/FilterPresetList.tsx"],"names":["Button","Checkbox","Typography","Tooltip","DataTable","DataTableCellExpand","CreateIcon","CloseIcon","AppAutocompleteStyled","Unless","useMemo","useState","useEffect","useRef","useDispatch","useSelector","useTranslation","useStyles","useStylesLayout","clsx","advancedFilterActions","commonStore","columnProperties","FilterPresetList","onChangeActiveTab","classes","classesLayout","refDataGrid","idSelected","setIdSelected","dispatch","t","defaultFilter","selectDefaultFilter","presetList","selectListData","filterType","selectFilterType","loading","selectLoading","entity","selectEntity","afPermissions","selectPermissions","filterDetail","selectFilterDetail","getOptionFilterList","defaultOptions","name","value","update_system_default_presets","push","filterOptions","getColumnPresetList","onwColumns","defaultProperties","field","headerName","flex","renderCell","params","current","api","message","onShareFilter","id","sharedColumns","colDef","width","columnsMyPreset","onChangeFilterType","_","changeFilterType","onCreateFilter","setSelectionModel","setEditMode","resetFilterDetail","onClearUserDefault","clearDefaultFilter","onSelectFilterDetail","getDetail","is_shared","data","share","onSelectRowPresetDetail","filterListTopSection","option","buttonControl","btnCreatePreset","background","color","wrapLabelFilter","defaultFilterLink","is_system_default","table","presetSelected","event","stopPropagation"],"mappings":"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","sourcesContent":["import { Button, Checkbox, Typography, Tooltip } from '@material-ui/core'\n\nimport { DataTable, DataTableCellExpand, CreateIcon, CloseIcon, AppAutocompleteStyled } from '@/components/index'\n\nimport { Unless } from 'react-if'\n\nimport { useMemo, useState, useEffect, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useTranslation } from 'next-i18next'\nimport useStyles from './styles'\nimport useStylesLayout from '@/styles/page/layout'\n\nimport clsx from 'clsx'\n\nimport { advancedFilterActions, commonStore } from '@/store/reducers'\nimport * as columnProperties from '@/utils/columnProperties'\n\nimport type { GridColumns, GridApi } from '@material-ui/data-grid'\n\nfunction FilterPresetList({ onChangeActiveTab }) {\n  // props.entity is the thing that you will pass to the backend to get the corresponding data for each module\n\n  const classes = useStyles()\n  const classesLayout = useStylesLayout()\n\n  const refDataGrid = useRef<GridApi>(null as any)\n\n  const [idSelected, setIdSelected] = useState<number>(null)\n\n  const dispatch = useDispatch()\n\n  const { t } = useTranslation(['common', 'advanced_filter'])\n\n  const defaultFilter = useSelector(advancedFilterActions.selectDefaultFilter)\n  const presetList = useSelector(advancedFilterActions.selectListData)\n  const filterType = useSelector(advancedFilterActions.selectFilterType)\n  const loading = useSelector(advancedFilterActions.selectLoading)\n  const entity = useSelector(commonStore.selectEntity)\n  const afPermissions = useSelector(advancedFilterActions.selectPermissions)\n  const filterDetail = useSelector(advancedFilterActions.selectFilterDetail)\n\n  const getOptionFilterList = () => {\n    const defaultOptions = [\n      {\n        name: 'Owner',\n        value: 'own'\n      },\n      {\n        name: 'Shared',\n        value: 'shared'\n      }\n    ]\n    if (afPermissions.update_system_default_presets) {\n      defaultOptions.push({\n        name: 'System',\n        value: 'system'\n      })\n    }\n    return defaultOptions\n  }\n\n  const filterOptions = useMemo(getOptionFilterList, [afPermissions.update_system_default_presets])\n\n  const getColumnPresetList = () => {\n    const onwColumns: GridColumns = [\n      {\n        ...columnProperties.defaultProperties,\n        field: 'name',\n        headerName: 'Name',\n        flex: 0.6\n      },\n      {\n        ...columnProperties.defaultProperties,\n        headerName: 'Shared',\n        field: 'is_shared',\n        renderCell(params) {\n          if (!refDataGrid.current) {\n            refDataGrid.current = params.api\n          }\n          const message = params.value\n            ? t('advanced_filter:tooltip.unshare_checkbox')\n            : t('advanced_filter:tooltip.share_checkbox')\n          return (\n            <Tooltip title={message}>\n              <Checkbox\n                color=\"primary\"\n                checked={params.value as boolean}\n                onChange={onShareFilter(params.id as number)}\n              />\n            </Tooltip>\n          )\n        }\n      }\n    ]\n    const sharedColumns: GridColumns = [\n      {\n        ...columnProperties.defaultProperties,\n        field: 'name',\n        headerName: 'Name',\n        flex: 0.6,\n        renderCell(params) {\n          if (!refDataGrid.current) {\n            refDataGrid.current = params.api\n          }\n          return <DataTableCellExpand value={params.value} width={params.colDef.width} />\n        }\n      },\n      {\n        ...columnProperties.defaultProperties,\n        field: 'created_by',\n        headerName: t('advanced_filter:list.owner')\n      }\n    ]\n    if (filterType === 'own') {\n      return onwColumns\n    }\n    return sharedColumns\n  }\n\n  const columnsMyPreset = useMemo(getColumnPresetList, [filterType])\n\n  useEffect(() => {\n    setIdSelected(filterDetail.id)\n  }, [filterDetail])\n\n  const onChangeFilterType = (_, { value }) => {\n    dispatch(advancedFilterActions.changeFilterType(value))\n    onChangeActiveTab(null, 0)\n  }\n\n  const onCreateFilter = () => {\n    refDataGrid.current?.setSelectionModel([])\n    dispatch(advancedFilterActions.setEditMode(false))\n    dispatch(advancedFilterActions.resetFilterDetail(entity))\n    onChangeActiveTab(null, 0)\n  }\n\n  const onClearUserDefault = () => {\n    refDataGrid.current?.setSelectionModel([])\n    dispatch(advancedFilterActions.clearDefaultFilter())\n  }\n\n  const onSelectFilterDetail = (id) => () => {\n    refDataGrid.current?.setSelectionModel([])\n    dispatch(advancedFilterActions.getDetail(id))\n  }\n\n  const onShareFilter = (id: number) => (_, is_shared: boolean) => {\n    const data = { id, is_shared }\n    dispatch(advancedFilterActions.share(data))\n  }\n\n  const onSelectRowPresetDetail = (params) => {\n    onChangeActiveTab(null, 0)\n    onSelectFilterDetail(params.id)()\n  }\n\n  return (\n    <>\n      <div className={classes.filterListTopSection}>\n        <AppAutocompleteStyled\n          primaryKeyOption=\"value\"\n          label=\"Preset List\"\n          options={filterOptions}\n          defaultValue={filterOptions[0]}\n          onChange={onChangeFilterType}\n          renderOption={(option) => option.name}\n        />\n        <Button\n          variant=\"contained\"\n          startIcon={<CreateIcon />}\n          className={clsx(classesLayout.buttonControl, 'new', classes.btnCreatePreset)}\n          onClick={onCreateFilter}\n          style={{ background: '#0A65FF', color: 'white' }}\n        >\n          New preset\n        </Button>\n      </div>\n\n      <Typography component=\"div\" className={classes.wrapLabelFilter}>\n        <Typography component=\"strong\" variant=\"body1\">\n          {t('advanced_filter:filter_presets.default_filter')}&nbsp;\n        </Typography>\n        <Typography\n          component=\"span\"\n          variant=\"body1\"\n          className={classes.defaultFilterLink}\n          noWrap\n          onClick={onSelectFilterDetail(defaultFilter.id)}\n        >\n          {defaultFilter.name}\n        </Typography>\n        <Unless condition={defaultFilter.is_system_default}>\n          <CloseIcon onClick={onClearUserDefault} />\n        </Unless>\n      </Typography>\n      <DataTable\n        loading={loading.table}\n        tableHeight={370}\n        disableColumnMenu\n        columns={columnsMyPreset}\n        rows={presetList}\n        hideFooter\n        onRowClick={onSelectRowPresetDetail}\n        getRowClassName={(params) => clsx({ [classes.presetSelected]: params.id === idSelected })}\n        onCellClick={(params, event) => {\n          if (params.field === 'is_shared') {\n            event.stopPropagation()\n          }\n        }}\n      />\n    </>\n  )\n}\n\nexport default FilterPresetList\n"]},"metadata":{},"sourceType":"module"}