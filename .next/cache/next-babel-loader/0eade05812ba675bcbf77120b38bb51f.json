{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport { format as formatDate } from 'date-fns';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nimport { DATE_FORMAT, actionTypes } from '@/utils/constant';\nexport const name = 'user';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nconst initialState = {\n  dataList: [],\n  initDataForList: {\n    permissions: {\n      user: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  initDataForCE: {\n    groups: [],\n    jobs: [],\n    parameters: {\n      PLLA: [],\n      PUCO: []\n    },\n    wiki_page: '',\n    timezones: []\n  },\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: []\n  },\n  resetPwdDialog: {\n    open: false,\n    loading: false\n  },\n  detail: {\n    user_id: '',\n    email: null,\n    puco: null,\n    first_name: '',\n    last_name: '',\n    time_zone: '',\n    user_abb: '',\n    login_page: '',\n    valid_from: formatDate(new Date(), DATE_FORMAT),\n    default_language: null,\n    valid_until: null,\n    groups: [],\n    job_access: [],\n    password: '',\n    confirm_password: ''\n  }\n};\nconst userSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      state.dialogState.historyLogs = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setPermissions(state, {\n      payload\n    }) {\n      state.initDataForList.permissions.user = payload;\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    setResetPwdDialog(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setResetPwdDialogOpen(state, {\n      payload\n    }) {\n      state.resetPwdDialog.open = payload;\n    },\n\n    setResetPwdDialogLoading(state, {\n      payload\n    }) {\n      state.resetPwdDialog.loading = payload;\n    },\n\n    resetDetail(state) {\n      const detailDefaultValue = getDefaultValues(state.initDataForCE, {\n        default_language: 'parameters.PLLA',\n        puco: 'parameters.PUCO',\n        time_zone: 'timezones'\n      }, initialState.detail);\n      state.detail = _objectSpread({}, detailDefaultValue);\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n}); // Actions\n\nexport const {\n  actions\n} = userSlice; // Saga actions\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaUpdate = createAction(`${name}/${actionTypes.UPDATE}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`);\nexport const sagaResetPassword = createAction(`${name}/RESET_PASSWORD`); // Selectors\n\nexport const selectState = state => state[name];\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport const selectPermissions = createSelector(selectState, state => state.initDataForList.permissions.user);\nexport const selectResetPwdDialog = createSelector(selectState, state => state.resetPwdDialog);\nexport const selectDetail = createSelector(selectState, state => state.detail);\nexport const selectInitDataForCE = createSelector(selectState, state => state.initDataForCE);\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport default userSlice;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/reducers/user.reducer.ts"],"names":["createSlice","createAction","createSelector","format","formatDate","getDefaultValues","DATE_FORMAT","actionTypes","name","resetState","RESET_STATE","initialState","dataList","initDataForList","permissions","user","wiki_page","column_tooltips","initDataForCE","groups","jobs","parameters","PLLA","PUCO","timezones","dialogState","open","loading","historyLogs","resetPwdDialog","detail","user_id","email","puco","first_name","last_name","time_zone","user_abb","login_page","valid_from","Date","default_language","valid_until","job_access","password","confirm_password","userSlice","reducers","setDataList","state","payload","setDialogState","setDialogStateOpen","setHistoryLogs","setDialogStateLoading","setInitDataForList","setPermissions","setInitDataForCE","setDetail","setResetPwdDialog","setResetPwdDialogOpen","setResetPwdDialogLoading","resetDetail","detailDefaultValue","extraReducers","type","actions","sagaGetList","GET_LIST","sagaCreate","CREATE","sagaUpdate","UPDATE","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaCloseDialog","CLOSE_DIALOG","sagaResetPassword","selectState","selectDialogState","selectDataList","selectPermissions","selectResetPwdDialog","selectDetail","selectInitDataForCE","selectInitDataForList"],"mappings":"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","sourcesContent":["import { createSlice, createAction, PayloadAction, createSelector } from '@reduxjs/toolkit'\nimport { format as formatDate } from 'date-fns'\nimport { getDefaultValues } from '@/utils/getDefaultValues'\nimport { DATE_FORMAT, actionTypes } from '@/utils/constant'\n\nimport type { UserItem, UserPermissions, UserInitDataForList, UserInitDataForCE, UserDetail } from '@/types/User'\nimport type { Entity, HistoryLog } from '@/types/Common'\nimport type { RootReducerType } from './rootReducer'\n\nexport const name: Entity = 'user'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nconst initialState = {\n  dataList: [] as UserItem[],\n  initDataForList: {\n    permissions: {\n      user: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as UserInitDataForList,\n  initDataForCE: {\n    groups: [],\n    jobs: [],\n    parameters: {\n      PLLA: [],\n      PUCO: []\n    },\n    wiki_page: '',\n    timezones: []\n  } as UserInitDataForCE,\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: [] as HistoryLog[]\n  },\n  resetPwdDialog: {\n    open: false,\n    loading: false\n  },\n  detail: {\n    user_id: '',\n    email: null,\n    puco: null,\n    first_name: '',\n    last_name: '',\n    time_zone: '',\n    user_abb: '',\n    login_page: '',\n    valid_from: formatDate(new Date(), DATE_FORMAT),\n    default_language: null,\n    valid_until: null,\n    groups: [],\n    job_access: [],\n    password: '',\n    confirm_password: ''\n  } as UserDetail\n}\n\nconst userSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, { payload }: PayloadAction<UserItem[]>) {\n      state.dataList = payload\n    },\n    setDialogState(state, { payload }: PayloadAction<Partial<typeof initialState.dialogState>>) {\n      state.dialogState = {\n        ...state.dialogState,\n        ...payload\n      }\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setHistoryLogs(state, { payload }: PayloadAction<HistoryLog[]>) {\n      state.dialogState.historyLogs = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setInitDataForList(state, { payload }: PayloadAction<UserInitDataForList>) {\n      state.initDataForList = payload\n    },\n    setPermissions(state, { payload }: PayloadAction<UserPermissions>) {\n      state.initDataForList.permissions.user = payload\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<UserInitDataForCE>) {\n      state.initDataForCE = payload\n    },\n    setDetail(state, { payload }: PayloadAction<Partial<UserDetail>>) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    setResetPwdDialog(state, { payload }: PayloadAction<Partial<typeof initialState.resetPwdDialog>>) {\n      state.dialogState = {\n        ...state.dialogState,\n        ...payload\n      }\n    },\n    setResetPwdDialogOpen(state, { payload }: PayloadAction<boolean>) {\n      state.resetPwdDialog.open = payload\n    },\n    setResetPwdDialogLoading(state, { payload }: PayloadAction<boolean>) {\n      state.resetPwdDialog.loading = payload\n    },\n    resetDetail(state) {\n      const detailDefaultValue = getDefaultValues(\n        state.initDataForCE,\n        {\n          default_language: 'parameters.PLLA',\n          puco: 'parameters.PUCO',\n          time_zone: 'timezones'\n        },\n        initialState.detail\n      )\n      state.detail = { ...detailDefaultValue }\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\n// Actions\nexport const { actions } = userSlice\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaCreate = createAction<UserDetail>(`${name}/${actionTypes.CREATE}`)\nexport const sagaUpdate = createAction<{ id: number; formData: UserDetail }>(`${name}/${actionTypes.UPDATE}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaResetPassword = createAction<{ password: string; confirm_password: string }>(`${name}/RESET_PASSWORD`)\n\n// Selectors\nexport const selectState = (state: RootReducerType) => state[name]\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.user)\n\nexport const selectResetPwdDialog = createSelector(selectState, (state) => state.resetPwdDialog)\n\nexport const selectDetail = createSelector(selectState, (state) => state.detail)\n\nexport const selectInitDataForCE = createSelector(selectState, (state) => state.initDataForCE)\n\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\n\nexport default userSlice\n"]},"metadata":{},"sourceType":"module"}