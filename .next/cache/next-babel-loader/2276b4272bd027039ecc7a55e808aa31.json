{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { takeEvery, put, putResolve } from 'redux-saga/effects';\nimport { select, call, all } from 'typed-redux-saga';\nimport { drawingStore, commonStore, advancedFilterActions, specificationStore, partStore, tagStore } from '@/store/reducers';\nimport _ from 'lodash';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nimport { fetchSpecificationDetail } from '@/store/saga/specification.saga';\nimport drawingApi from '@/apis/drawing.api';\nexport function* fetchDrawingInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n  const data = yield call(drawingApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  });\n\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {};\n  }\n\n  if (userJob.value === -1 || userJob.value === -2) {\n    data.selected_job = userJob;\n  }\n\n  yield put(commonStore.actions.setUserValueJob(data.selected_job));\n  yield put(drawingStore.actions.setInitDataForList(data));\n}\nexport function* fetchDrawingInitDataForCE(jobId = null) {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n\n  const _yield$call = yield call(drawingApi.getInitDataForCE, {\n    job_id_pk: jobId || userJob.value\n  }),\n        {\n    permissions,\n    user_job\n  } = _yield$call,\n        dataInit = _objectWithoutProperties(_yield$call, [\"permissions\", \"user_job\"]);\n\n  const detailDefaultValue = getDefaultValues(dataInit.parameters, {\n    drawing_purpose: 'DWPU',\n    file_prefix: 'FPRE',\n    file_type: 'FTYP',\n    drawing_format: 'PLFO'\n  }); // if you are in create mode, then set jobId for the assembly form\n\n  if (_.isNull(jobId)) {\n    detailDefaultValue.job_id = userJob.value;\n  }\n\n  if (!_.isNull(detailDefaultValue.drawing_purpose) && _.isNull(jobId)) {\n    const drawingPurpose = _.find(dataInit.parameters.DWPU, {\n      id: detailDefaultValue.drawing_purpose\n    });\n\n    const {\n      exclude_from\n    } = drawingPurpose === null || drawingPurpose === void 0 ? void 0 : drawingPurpose.properties;\n\n    if (_.isString(exclude_from) && _.size(exclude_from) > 0) {\n      const excludeList = {\n        C: 'exclude_from_customer',\n        O: 'exclude_from_other',\n        S: 'exclude_from_supplier'\n      };\n      const excludeFrom = exclude_from.split(';'); // C;O;S => [C, O, S]\n\n      _.forIn(excludeList, (value, key) => {\n        if (excludeFrom.includes(key)) {\n          detailDefaultValue[value] = true;\n        }\n      });\n    }\n  }\n\n  yield put(drawingStore.actions.setInitDataForCE(dataInit));\n  yield put(drawingStore.actions.setDetail(detailDefaultValue));\n  yield put(drawingStore.actions.setPermissions(permissions.drawing));\n}\nexport function* fetchDrawingList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData,\n    userJob,\n    drawingGroup\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    drawingGroup: select(drawingStore.selectDrawingGroupId)\n  });\n\n  if (!userJob.value) {\n    return;\n  }\n\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(drawingApi.getList, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    drawing_group_id: drawingGroup\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(drawingStore.actions.setDataList(data.drawings));\n}\nexport function* getDrawingList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchDrawingInitDataForList);\n    const permissions = yield* select(drawingStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchDrawingList);\n    }\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* openDrawingCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchDrawingInitDataForCE);\n    yield put(drawingStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* changeUserJob({\n  payload\n}) {\n  yield putResolve(commonStore.actions.setUserValueJob(payload));\n  yield call(getDrawingList);\n}\nexport function* createDrawing({\n  payload\n}) {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      message\n    } = yield call(drawingApi.create, payload);\n    const userJob = yield* select(commonStore.selectUserValueJob);\n    yield putResolve(drawingStore.actions.resetDetail({\n      userJob\n    }));\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(drawingStore.actions.setDialogStateTab(0))]);\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\nexport function* closeDrawingDialog() {\n  try {\n    const userJob = yield* select(commonStore.selectUserValueJob);\n    const entity = yield* select(commonStore.selectEntity);\n    const specDetail = yield* select(specificationStore.selectDetail);\n    yield putResolve(drawingStore.actions.setDialogStateOpen(false));\n\n    if (entity === 'specification') {\n      yield put(commonStore.actions.setLoadingPage(true));\n      const {\n        drawing_id\n      } = yield call(fetchSpecificationDetail, specDetail.id);\n      yield put(specificationStore.actions.setDetail({\n        drawing_id\n      }));\n      yield put(commonStore.actions.setLoadingPage(false));\n    } else if (entity === 'element') {\n      yield put(tagStore.sagaGetList());\n    } else {\n      yield call(getDrawingList);\n    }\n\n    yield put(drawingStore.actions.resetDetail({\n      userJob\n    }));\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n}\nexport function* openDrawingUpdateDialog({\n  payload: id\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      drawing\n    } = yield call(drawingApi.getDetail, id);\n    drawing.drawing_id = drawing.drawing_id.split(' ')[1];\n    yield call(fetchDrawingInitDataForCE, drawing.job_id);\n    yield putResolve(drawingStore.actions.setDetail(drawing));\n    yield put(drawingStore.actions.setDialogStateOpen(true));\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* updateDrawing({\n  payload\n}) {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      id,\n      drawing\n    } = payload;\n    const {\n      message\n    } = yield call(drawingApi.update, id, drawing);\n    yield call(closeDrawingDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\nexport function* openRevisionDialog({\n  payload\n}) {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const {\n      next_revision\n    } = yield call(drawingApi.getInitDataForRevise, payload);\n    yield putResolve(drawingStore.actions.setRevisionDialogDetail({\n      new_revision: next_revision\n    }));\n    yield put(drawingStore.actions.setRevisionDialogOpen(true));\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\nexport function* saveNewRev({\n  payload\n}) {\n  yield put(drawingStore.actions.setRevisionDialogLoading(true));\n\n  try {\n    const {\n      drawingId,\n      revision\n    } = payload;\n    const {\n      message\n    } = yield call(drawingApi.saveRevision, drawingId, revision);\n    yield put(drawingStore.actions.setRevisionDialogOpen(false));\n    yield call(closeDrawingDialog);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(drawingStore.actions.setRevisionDialogLoading(false));\n}\nexport function* openCreatePartDialog({\n  payload\n}) {\n  yield put(drawingStore.actions.setDialogStateLoading(true));\n\n  try {\n    const drawingDetail = yield* select(drawingStore.selectDetail);\n    yield putResolve(commonStore.actions.setUserValueDrawing({\n      description: '',\n      entity_id: drawingDetail.drawing_id,\n      value: drawingDetail.id\n    }));\n    yield put(partStore.sagaOpenCreateDialog(payload));\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false));\n}\n\nfunction* drawingSaga() {\n  yield takeEvery(drawingStore.sagaGetList, getDrawingList);\n  yield takeEvery(drawingStore.sagaOpenCreateDialog, openDrawingCreateDialog);\n  yield takeEvery(drawingStore.sagaChangeUserJob, changeUserJob);\n  yield takeEvery(drawingStore.sagaCreate, createDrawing);\n  yield takeEvery(drawingStore.sagaCloseDialog, closeDrawingDialog);\n  yield takeEvery(drawingStore.sagaOpenUpdateDialog, openDrawingUpdateDialog);\n  yield takeEvery(drawingStore.sagaUpdate, updateDrawing);\n  yield takeEvery(drawingStore.sagaOpenRevDialog, openRevisionDialog);\n  yield takeEvery(drawingStore.sagaSaveNewRev, saveNewRev);\n  yield takeEvery(drawingStore.sagaOpenCreatePartDialog, openCreatePartDialog);\n}\n\nexport default drawingSaga;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/saga/drawing.saga.ts"],"names":["takeEvery","put","putResolve","select","call","all","drawingStore","commonStore","advancedFilterActions","specificationStore","partStore","tagStore","_","getDefaultValues","fetchSpecificationDetail","drawingApi","fetchDrawingInitDataForList","userJob","selectUserValueJob","data","getInitDataForList","job_id_pk","value","isNull","selected_job","actions","setUserValueJob","setInitDataForList","fetchDrawingInitDataForCE","jobId","getInitDataForCE","permissions","user_job","dataInit","detailDefaultValue","parameters","drawing_purpose","file_prefix","file_type","drawing_format","job_id","drawingPurpose","find","DWPU","id","exclude_from","properties","isString","size","excludeList","C","O","S","excludeFrom","split","forIn","key","includes","setInitDataForCE","setDetail","setPermissions","drawing","fetchDrawingList","tableState","searchQuery","filterData","drawingGroup","selectTableState","selectSearchQuery","selectFilterData","selectDrawingGroupId","page","per_page","getList","s","drawing_group_id","setTableState","total_items","setDataList","drawings","getDrawingList","setLoadingPage","selectPermissions","view","error","setError","openDrawingCreateDialog","setDialogStateOpen","changeUserJob","payload","createDrawing","setDialogStateLoading","message","create","resetDetail","setSuccessMessage","setDialogStateTab","closeDrawingDialog","entity","selectEntity","specDetail","selectDetail","drawing_id","sagaGetList","openDrawingUpdateDialog","getDetail","updateDrawing","update","openRevisionDialog","next_revision","getInitDataForRevise","setRevisionDialogDetail","new_revision","setRevisionDialogOpen","saveNewRev","setRevisionDialogLoading","drawingId","revision","saveRevision","openCreatePartDialog","drawingDetail","setUserValueDrawing","description","entity_id","sagaOpenCreateDialog","drawingSaga","sagaChangeUserJob","sagaCreate","sagaCloseDialog","sagaOpenUpdateDialog","sagaUpdate","sagaOpenRevDialog","sagaSaveNewRev","sagaOpenCreatePartDialog"],"mappings":"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","sourcesContent":["import { takeEvery, put, putResolve } from 'redux-saga/effects'\nimport { select, call, all } from 'typed-redux-saga'\n\nimport {\n  drawingStore,\n  commonStore,\n  advancedFilterActions,\n  specificationStore,\n  partStore,\n  tagStore\n} from '@/store/reducers'\n\nimport _ from 'lodash'\nimport { getDefaultValues } from '@/utils/getDefaultValues'\n\nimport { fetchSpecificationDetail } from '@/store/saga/specification.saga'\n\nimport drawingApi from '@/apis/drawing.api'\n\nexport function* fetchDrawingInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob)\n  const data = yield call(drawingApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  })\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {}\n  }\n  if (userJob.value === -1 || userJob.value === -2) {\n    data.selected_job = userJob\n  }\n  yield put(commonStore.actions.setUserValueJob(data.selected_job))\n  yield put(drawingStore.actions.setInitDataForList(data))\n}\n\nexport function* fetchDrawingInitDataForCE(jobId = null) {\n  const userJob = yield* select(commonStore.selectUserValueJob)\n  const { permissions, user_job, ...dataInit } = yield call(drawingApi.getInitDataForCE, {\n    job_id_pk: jobId || userJob.value\n  })\n  const detailDefaultValue = getDefaultValues(dataInit.parameters, {\n    drawing_purpose: 'DWPU',\n    file_prefix: 'FPRE',\n    file_type: 'FTYP',\n    drawing_format: 'PLFO'\n  })\n  // if you are in create mode, then set jobId for the assembly form\n  if (_.isNull(jobId)) {\n    detailDefaultValue.job_id = userJob.value\n  }\n  if (!_.isNull(detailDefaultValue.drawing_purpose) && _.isNull(jobId)) {\n    const drawingPurpose = _.find(dataInit.parameters.DWPU, {\n      id: detailDefaultValue.drawing_purpose\n    })\n    const { exclude_from } = drawingPurpose?.properties\n    if (_.isString(exclude_from) && _.size(exclude_from) > 0) {\n      const excludeList = {\n        C: 'exclude_from_customer',\n        O: 'exclude_from_other',\n        S: 'exclude_from_supplier'\n      }\n      const excludeFrom = exclude_from.split(';') // C;O;S => [C, O, S]\n      _.forIn(excludeList, (value, key) => {\n        if (excludeFrom.includes(key)) {\n          detailDefaultValue[value] = true\n        }\n      })\n    }\n  }\n  yield put(drawingStore.actions.setInitDataForCE(dataInit))\n  yield put(drawingStore.actions.setDetail(detailDefaultValue))\n  yield put(drawingStore.actions.setPermissions(permissions.drawing))\n}\n\nexport function* fetchDrawingList() {\n  const { tableState, searchQuery, filterData, userJob, drawingGroup } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    drawingGroup: select(drawingStore.selectDrawingGroupId)\n  })\n  if (!userJob.value) {\n    return\n  }\n  const { page, per_page } = tableState\n  const data = yield call(drawingApi.getList, {\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    drawing_group_id: drawingGroup,\n    ...filterData\n  })\n  yield put(commonStore.actions.setTableState({ total_items: data.total_items }))\n  yield put(drawingStore.actions.setDataList(data.drawings))\n}\n\nexport function* getDrawingList() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchDrawingInitDataForList)\n    const permissions = yield* select(drawingStore.selectPermissions)\n    if (permissions?.view) {\n      yield call(fetchDrawingList)\n    }\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nexport function* openDrawingCreateDialog() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchDrawingInitDataForCE)\n    yield put(drawingStore.actions.setDialogStateOpen(true))\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nexport function* changeUserJob({ payload }: ReturnType<typeof drawingStore.sagaChangeUserJob>) {\n  yield putResolve(commonStore.actions.setUserValueJob(payload))\n  yield call(getDrawingList)\n}\n\nexport function* createDrawing({ payload }: ReturnType<typeof drawingStore.sagaCreate>) {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n  try {\n    const { message } = yield call(drawingApi.create, payload)\n    const userJob = yield* select(commonStore.selectUserValueJob)\n    yield putResolve(drawingStore.actions.resetDetail({ userJob }))\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(drawingStore.actions.setDialogStateTab(0))])\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nexport function* closeDrawingDialog() {\n  try {\n    const userJob = yield* select(commonStore.selectUserValueJob)\n    const entity = yield* select(commonStore.selectEntity)\n    const specDetail = yield* select(specificationStore.selectDetail)\n    yield putResolve(drawingStore.actions.setDialogStateOpen(false))\n    if (entity === 'specification') {\n      yield put(commonStore.actions.setLoadingPage(true))\n      const { drawing_id } = yield call(fetchSpecificationDetail, specDetail.id)\n      yield put(specificationStore.actions.setDetail({ drawing_id }))\n      yield put(commonStore.actions.setLoadingPage(false))\n    } else if (entity === 'element') {\n      yield put(tagStore.sagaGetList())\n    } else {\n      yield call(getDrawingList)\n    }\n    yield put(drawingStore.actions.resetDetail({ userJob }))\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n}\n\nexport function* openDrawingUpdateDialog({ payload: id }: ReturnType<typeof drawingStore.sagaOpenUpdateDialog>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const { drawing } = yield call(drawingApi.getDetail, id)\n    drawing.drawing_id = drawing.drawing_id.split(' ')[1]\n    yield call(fetchDrawingInitDataForCE, drawing.job_id)\n    yield putResolve(drawingStore.actions.setDetail(drawing))\n    yield put(drawingStore.actions.setDialogStateOpen(true))\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nexport function* updateDrawing({ payload }: ReturnType<typeof drawingStore.sagaUpdate>) {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n\n  try {\n    const { id, drawing } = payload\n    const { message } = yield call(drawingApi.update, id, drawing)\n    yield call(closeDrawingDialog)\n    yield put(commonStore.actions.setSuccessMessage(message))\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nexport function* openRevisionDialog({ payload }: ReturnType<typeof drawingStore.sagaOpenRevDialog>) {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n\n  try {\n    const { next_revision } = yield call(drawingApi.getInitDataForRevise, payload)\n    yield putResolve(\n      drawingStore.actions.setRevisionDialogDetail({\n        new_revision: next_revision\n      })\n    )\n    yield put(drawingStore.actions.setRevisionDialogOpen(true))\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nexport function* saveNewRev({ payload }: ReturnType<typeof drawingStore.sagaSaveNewRev>) {\n  yield put(drawingStore.actions.setRevisionDialogLoading(true))\n\n  try {\n    const { drawingId, revision } = payload\n    const { message } = yield call(drawingApi.saveRevision, drawingId, revision)\n    yield put(drawingStore.actions.setRevisionDialogOpen(false))\n    yield call(closeDrawingDialog)\n    yield put(commonStore.actions.setSuccessMessage(message))\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n\n  yield put(drawingStore.actions.setRevisionDialogLoading(false))\n}\n\nexport function* openCreatePartDialog({ payload }: ReturnType<typeof drawingStore.sagaOpenCreatePartDialog>) {\n  yield put(drawingStore.actions.setDialogStateLoading(true))\n  try {\n    const drawingDetail = yield* select(drawingStore.selectDetail)\n    yield putResolve(\n      commonStore.actions.setUserValueDrawing({\n        description: '',\n        entity_id: drawingDetail.drawing_id,\n        value: drawingDetail.id\n      })\n    )\n    yield put(partStore.sagaOpenCreateDialog(payload))\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n  yield put(drawingStore.actions.setDialogStateLoading(false))\n}\n\nfunction* drawingSaga() {\n  yield takeEvery(drawingStore.sagaGetList, getDrawingList)\n  yield takeEvery(drawingStore.sagaOpenCreateDialog, openDrawingCreateDialog)\n  yield takeEvery(drawingStore.sagaChangeUserJob, changeUserJob)\n  yield takeEvery(drawingStore.sagaCreate, createDrawing)\n  yield takeEvery(drawingStore.sagaCloseDialog, closeDrawingDialog)\n  yield takeEvery(drawingStore.sagaOpenUpdateDialog, openDrawingUpdateDialog)\n  yield takeEvery(drawingStore.sagaUpdate, updateDrawing)\n  yield takeEvery(drawingStore.sagaOpenRevDialog, openRevisionDialog)\n  yield takeEvery(drawingStore.sagaSaveNewRev, saveNewRev)\n  yield takeEvery(drawingStore.sagaOpenCreatePartDialog, openCreatePartDialog)\n}\n\nexport default drawingSaga\n"]},"metadata":{},"sourceType":"module"}