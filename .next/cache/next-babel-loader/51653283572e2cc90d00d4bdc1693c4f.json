{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useState, useEffect } from 'react';\nimport { Typography, Tooltip } from '@material-ui/core';\nimport { AppAutocomplete } from '@/components';\nimport _ from 'lodash';\nimport striptags from 'striptags';\nimport parseHTML from 'html-react-parser';\nimport isHTML from '@/utils/isHTML';\nimport HttpService from '@/helper/HttpService';\n\nconst AppAutocompleteAsync = props => {\n  const {\n    compName,\n    additionalData,\n    onChange,\n    defaultOptions\n  } = props,\n        autoCompleteProps = _objectWithoutProperties(props, [\"compName\", \"additionalData\", \"onChange\", \"defaultOptions\"]);\n\n  const httpService = new HttpService('');\n  const {\n    0: dataOptions,\n    1: setDataOptions\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: valueInput,\n    1: setValueInput\n  } = useState('');\n  useEffect(() => {\n    setDataOptions(defaultOptions);\n  }, [defaultOptions]);\n\n  const getOptionLabel = ({\n    description,\n    entity_id\n  }) => description ? `${entity_id} - ${description}` : entity_id;\n\n  const renderOption = ({\n    description,\n    entity_id\n  }) => {\n    if (!description) {\n      return entity_id;\n    }\n\n    if (isHTML(description)) {\n      const htmlContent = parseHTML(_.toString(description));\n      const pureContent = striptags(description);\n      return /*#__PURE__*/_jsx(Tooltip, {\n        title: htmlContent,\n        children: /*#__PURE__*/_jsx(Typography, {\n          noWrap: true,\n          children: `${entity_id} - ${pureContent}`\n        })\n      });\n    }\n\n    return /*#__PURE__*/_jsx(Typography, {\n      noWrap: true,\n      children: `${entity_id} - ${description}`\n    });\n  };\n\n  const handleInputDropdown = (event, value, reason) => {\n    if (reason === 'input') {\n      setValueInput(value);\n      setDataOptions([]);\n    }\n  };\n\n  const handleKeypress = async event => {\n    if (event.which === 13) {\n      setLoading(true);\n\n      try {\n        const data = await httpService.get('data_for_dd', {\n          comp_name: compName,\n          additional_data: JSON.stringify(additionalData),\n          s: valueInput\n        });\n        setDataOptions(data.data_for_dd);\n      } catch (error) {\n        console.error('error', '>>>', error);\n      }\n\n      setLoading(false);\n    }\n  };\n\n  const handleSelectOption = (event, option, reason, details) => {\n    onChange(event, option, reason, details);\n  };\n\n  return /*#__PURE__*/_jsx(AppAutocomplete, _objectSpread({\n    loading: loading,\n    options: dataOptions,\n    onInputChange: handleInputDropdown,\n    renderOption: renderOption,\n    getOptionLabel: getOptionLabel,\n    onChange: handleSelectOption,\n    onKeyPress: handleKeypress\n  }, autoCompleteProps));\n};\n\nAppAutocompleteAsync.defaultProps = {\n  additionalData: {},\n  defaultOptions: [],\n  disableClearable: true,\n  primaryKeyOption: 'value'\n};\nexport default AppAutocompleteAsync;","map":null,"metadata":{},"sourceType":"module"}