{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\pages\\\\specifications.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '@/styles/page/layout';\nimport { useTranslation } from 'next-i18next';\nimport { Grid, Tooltip } from '@material-ui/core';\nimport { AppLayout, EditIcon, CreateIcon, DialogSpecificationCE, AppAutocompleteStyled, DeleteIcon, useConfirm, DialogDrawingCreateEdit, DialogPart } from '@/components';\nimport { specificationStore, commonStore } from '@/store/reducers';\nimport { defaultProperties, iconColumn, descriptionsColumn } from '@/utils/columnProperties';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nimport parseHTML from 'html-react-parser';\nimport _ from 'lodash';\n\nvar SpecificationsPage = function SpecificationsPage() {\n  _s();\n\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation('specification'),\n      t = _useTranslation.t;\n\n  var _useConfirm = useConfirm(),\n      confirm = _useConfirm.confirm;\n\n  var breadcrumbData = useMemo(function () {\n    return [{\n      label: 'Home',\n      href: '/'\n    }, {\n      label: 'Drawings',\n      href: '/drawings'\n    }, {\n      label: 'Specifications Management',\n      href: '/specifications'\n    }];\n  }, []);\n  var dispatch = useDispatch();\n  var permissions = useSelector(specificationStore.selectPermissions);\n  var userJob = useSelector(commonStore.selectUserValueJob);\n  var selectedRows = useSelector(commonStore.selectSelectedRows);\n  var currentLang = useSelector(commonStore.selectCurrentLanguage);\n  var dataList = useSelector(specificationStore.selectDataList);\n\n  var _useSelector = useSelector(specificationStore.selectInitDataForList),\n      wiki_page = _useSelector.wiki_page,\n      column_tooltips = _useSelector.column_tooltips,\n      jobOptions = _useSelector.jobs;\n\n  useEffect(function () {\n    return function () {\n      return dispatch(commonStore.actions.resetUserValue());\n    };\n  }, []);\n\n  var handleOpenCreateDialog = function handleOpenCreateDialog() {\n    dispatch(specificationStore.sagaOpenCreateDialog());\n  };\n\n  var handleChangeUserJob = function handleChangeUserJob(event, optionValue) {\n    dispatch(specificationStore.sagaChangeUserJob(optionValue));\n  };\n\n  var handleOpenUpdateDialog = function handleOpenUpdateDialog(id) {\n    return function () {\n      dispatch(specificationStore.sagaOpenUpdateDialog(id));\n    };\n  };\n\n  var handleDeleteSpecifications = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var description, result, specs;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              description = getMessageConfirm(t, 'specification', selectedRows, 'delete');\n              _context.next = 3;\n              return confirm({\n                description: description\n              });\n\n            case 3:\n              result = _context.sent;\n\n              if (result === 'OK') {\n                specs = _.map(selectedRows, function (partId) {\n                  var _$find = _.find(dataList, {\n                    id: partId\n                  }),\n                      specification_id = _$find.specification_id,\n                      id = _$find.id;\n\n                  return {\n                    entity_id: specification_id,\n                    id: id\n                  };\n                });\n                dispatch(specificationStore.sagaRemove(specs));\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleDeleteSpecifications() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var columns = [_objectSpread(_objectSpread(_objectSpread({}, defaultProperties), iconColumn), {}, {\n    description: column_tooltips.edit,\n    field: 'id',\n    headerName: 'Edit',\n    renderCell: function renderCell(params) {\n      return /*#__PURE__*/_jsxDEV(EditIcon, {\n        onClick: handleOpenUpdateDialog(params.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 16\n      }, _this);\n    }\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.spec_id,\n    field: 'specification_id',\n    headerName: 'Document #',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), descriptionsColumn(currentLang)), {}, {\n    description: column_tooltips.description,\n    headerName: 'Description',\n    flex: 0.6,\n    renderCell: function renderCell(params) {\n      var value = params.value;\n      var description = parseHTML(value);\n      return /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: description,\n        classes: {\n          tooltip: classes.tooltip\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          style: {\n            whiteSpace: 'initial',\n            alignSelf: 'baseline',\n            lineHeight: 'initial'\n          },\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this);\n    }\n  })];\n  var buttonsPage = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 18\n    }, _this),\n    onClick: handleOpenCreateDialog,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create) || userJob.value < 0 || !(userJob === null || userJob === void 0 ? void 0 : userJob.value)\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 18\n    }, _this),\n    onClick: handleDeleteSpecifications,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions[\"delete\"]) || selectedRows.length === 0\n  }];\n\n  var Options = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AppAutocompleteStyled, {\n      className: classes.controlAutocomplete,\n      width: 200,\n      label: \"Jobs\",\n      options: jobOptions,\n      value: userJob,\n      renderOption: function renderOption(option) {\n        return option.description;\n      },\n      primaryKeyOption: \"value\",\n      onChange: handleChangeUserJob\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n\n  var Dialogs = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DialogSpecificationCE, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(DialogDrawingCreateEdit, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(DialogPart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    entity: \"specification\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: wiki_page,\n    searchProps: {\n      width: 320\n    },\n    buttons: buttonsPage,\n    permissions: permissions,\n    tableProps: {\n      columns: columns,\n      rowHeight: 150\n    },\n    Dialogs: Dialogs,\n    Options: Options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(SpecificationsPage, \"bbhIUHBiHjSdkkhPjH3YOsHaoPg=\", false, function () {\n  return [useStyles, useTranslation, useConfirm, useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = SpecificationsPage;\nexport var __N_SSP = true;\nexport default SpecificationsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpecificationsPage\");","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/pages/specifications.tsx"],"names":["useEffect","useMemo","useDispatch","useSelector","useStyles","useTranslation","Grid","Tooltip","AppLayout","EditIcon","CreateIcon","DialogSpecificationCE","AppAutocompleteStyled","DeleteIcon","useConfirm","DialogDrawingCreateEdit","DialogPart","specificationStore","commonStore","defaultProperties","iconColumn","descriptionsColumn","getMessageConfirm","parseHTML","_","SpecificationsPage","classes","t","confirm","breadcrumbData","label","href","dispatch","permissions","selectPermissions","userJob","selectUserValueJob","selectedRows","selectSelectedRows","currentLang","selectCurrentLanguage","dataList","selectDataList","selectInitDataForList","wiki_page","column_tooltips","jobOptions","jobs","actions","resetUserValue","handleOpenCreateDialog","sagaOpenCreateDialog","handleChangeUserJob","event","optionValue","sagaChangeUserJob","handleOpenUpdateDialog","id","sagaOpenUpdateDialog","handleDeleteSpecifications","description","result","specs","map","partId","find","specification_id","entity_id","sagaRemove","columns","edit","field","headerName","renderCell","params","value","spec_id","flex","tooltip","whiteSpace","alignSelf","lineHeight","buttonsPage","startIcon","onClick","disabled","create","length","Options","controlAutocomplete","option","Dialogs","width","rowHeight"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useStyles from '@/styles/page/layout'\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware'\nimport { useTranslation } from 'next-i18next'\n\nimport { Grid, Tooltip } from '@material-ui/core'\n\nimport {\n  AppLayout,\n  EditIcon,\n  CreateIcon,\n  DialogSpecificationCE,\n  AppAutocompleteStyled,\n  DeleteIcon,\n  useConfirm,\n  DialogDrawingCreateEdit,\n  DialogPart\n} from '@/components'\n\nimport { specificationStore, commonStore } from '@/store/reducers'\nimport { defaultProperties, iconColumn, descriptionsColumn } from '@/utils/columnProperties'\nimport getMessageConfirm from '@/utils/getMessageConfirm'\nimport parseHTML from 'html-react-parser'\nimport _ from 'lodash'\n\nimport type { GridColumns } from '@material-ui/data-grid'\nimport type { ParameterOption } from '@/types/Common'\n\nconst SpecificationsPage = () => {\n  const classes = useStyles()\n  const { t } = useTranslation('specification')\n  const { confirm } = useConfirm()\n\n  const breadcrumbData = useMemo(\n    () => [\n      { label: 'Home', href: '/' },\n      { label: 'Drawings', href: '/drawings' },\n      { label: 'Specifications Management', href: '/specifications' }\n    ],\n    []\n  )\n\n  const dispatch = useDispatch()\n  const permissions = useSelector(specificationStore.selectPermissions)\n  const userJob = useSelector(commonStore.selectUserValueJob)\n  const selectedRows = useSelector(commonStore.selectSelectedRows)\n  const currentLang = useSelector(commonStore.selectCurrentLanguage)\n  const dataList = useSelector(specificationStore.selectDataList)\n  const { wiki_page, column_tooltips, jobs: jobOptions } = useSelector(specificationStore.selectInitDataForList)\n\n  useEffect(() => {\n    return () => dispatch(commonStore.actions.resetUserValue())\n  }, [])\n\n  const handleOpenCreateDialog = () => {\n    dispatch(specificationStore.sagaOpenCreateDialog())\n  }\n\n  const handleChangeUserJob = (event, optionValue: ParameterOption) => {\n    dispatch(specificationStore.sagaChangeUserJob(optionValue))\n  }\n\n  const handleOpenUpdateDialog = (id: number) => () => {\n    dispatch(specificationStore.sagaOpenUpdateDialog(id))\n  }\n\n  const handleDeleteSpecifications = async () => {\n    const description = getMessageConfirm(t, 'specification', selectedRows, 'delete')\n    const result = await confirm({ description })\n    if (result === 'OK') {\n      const specs = _.map(selectedRows, (partId) => {\n        const { specification_id, id } = _.find(dataList, { id: partId })\n        return { entity_id: specification_id, id }\n      })\n      dispatch(specificationStore.sagaRemove(specs))\n    }\n  }\n\n  const columns: GridColumns = [\n    {\n      ...defaultProperties,\n      ...iconColumn,\n      description: column_tooltips.edit,\n      field: 'id',\n      headerName: 'Edit',\n      renderCell: (params) => {\n        return <EditIcon onClick={handleOpenUpdateDialog(params.value as number)} />\n      }\n    },\n    {\n      ...defaultProperties,\n      description: column_tooltips.spec_id,\n      field: 'specification_id',\n      headerName: 'Document #',\n      flex: 0.1\n    },\n    {\n      ...defaultProperties,\n      ...descriptionsColumn(currentLang),\n      description: column_tooltips.description,\n      headerName: 'Description',\n      flex: 0.6,\n      renderCell(params) {\n        const { value } = params\n        const description = parseHTML(value as string)\n        return (\n          <Tooltip title={description} classes={{ tooltip: classes.tooltip }}>\n            <Grid\n              container\n              spacing={2}\n              style={{\n                whiteSpace: 'initial',\n                alignSelf: 'baseline',\n                lineHeight: 'initial'\n              }}\n            >\n              <Grid item xs={12}>\n                {description}\n              </Grid>\n            </Grid>\n          </Tooltip>\n        )\n      }\n    }\n  ]\n\n  const buttonsPage = [\n    {\n      label: t('common:button.new'),\n      startIcon: <CreateIcon />,\n      onClick: handleOpenCreateDialog,\n      disabled: !permissions?.create || userJob.value < 0 || !userJob?.value\n    },\n    {\n      label: t('common:button.delete'),\n      startIcon: <DeleteIcon />,\n      onClick: handleDeleteSpecifications,\n      disabled: !permissions?.delete || selectedRows.length === 0\n    }\n  ]\n\n  const Options = (\n    <>\n      <AppAutocompleteStyled\n        className={classes.controlAutocomplete}\n        width={200}\n        label=\"Jobs\"\n        options={jobOptions}\n        value={userJob}\n        renderOption={(option) => option.description}\n        primaryKeyOption=\"value\"\n        onChange={handleChangeUserJob}\n      />\n    </>\n  )\n\n  const Dialogs = (\n    <>\n      <DialogSpecificationCE />\n      <DialogDrawingCreateEdit />\n      <DialogPart />\n    </>\n  )\n\n  return (\n    <AppLayout\n      entity=\"specification\"\n      breadcrumbs={breadcrumbData}\n      wikiPage={wiki_page}\n      searchProps={{\n        width: 320\n      }}\n      buttons={buttonsPage}\n      permissions={permissions}\n      tableProps={{\n        columns,\n        rowHeight: 150\n      }}\n      Dialogs={Dialogs}\n      Options={Options}\n    />\n  )\n}\n\nexport const getServerSideProps = useAuthMiddleware([\n  'common',\n  'specification',\n  'make_a_list',\n  'advanced_filter',\n  'drawing'\n])\n\nexport default SpecificationsPage\n"]},"metadata":{},"sourceType":"module"}