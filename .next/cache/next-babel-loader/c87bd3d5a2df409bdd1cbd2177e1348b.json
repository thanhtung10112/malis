{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\pages\\\\specifications.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '@/styles/page/layout';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport { useTranslation } from 'next-i18next';\nimport { Grid, Tooltip } from '@material-ui/core';\nimport { AppLayout, EditIcon, CreateIcon, DialogSpecificationCE, AppAutocompleteStyled, DeleteIcon, useConfirm, DialogDrawingCreateEdit } from '@/components';\nimport { specificationStore, commonStore } from '@/store/reducers';\nimport { defaultProperties, iconColumn, descriptionsColumn } from '@/utils/columnProperties';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nimport parseHTML from 'html-react-parser';\nimport _ from 'lodash';\n\nconst SpecificationsPage = () => {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation('specification');\n  const {\n    confirm\n  } = useConfirm();\n  const breadcrumbData = useMemo(() => [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Drawings',\n    href: '/drawings'\n  }, {\n    label: 'Specifications Management',\n    href: '/specifications'\n  }], []);\n  const dispatch = useDispatch();\n  const permissions = useSelector(specificationStore.selectPermissions);\n  const userJob = useSelector(commonStore.selectUserValueJob);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const currentLang = useSelector(commonStore.selectCurrentLanguage);\n  const dataList = useSelector(specificationStore.selectDataList);\n  const {\n    wiki_page,\n    column_tooltips,\n    jobs: jobOptions\n  } = useSelector(specificationStore.selectInitDataForList);\n  useEffect(() => {\n    return () => dispatch(commonStore.actions.resetUserValue());\n  }, []);\n\n  const handleOpenCreateDialog = () => {\n    dispatch(specificationStore.sagaOpenCreateDialog());\n  };\n\n  const handleChangeUserJob = (event, optionValue) => {\n    dispatch(specificationStore.sagaChangeUserJob(optionValue));\n  };\n\n  const handleOpenUpdateDialog = id => () => {\n    dispatch(specificationStore.sagaOpenUpdateDialog(id));\n  };\n\n  const handleDeleteSpecifications = async () => {\n    const description = getMessageConfirm(t, 'specification', selectedRows, 'delete');\n    const result = await confirm({\n      description\n    });\n\n    if (result === 'OK') {\n      const specs = _.map(selectedRows, partId => {\n        const {\n          specification_id,\n          id\n        } = _.find(dataList, {\n          id: partId\n        });\n\n        return {\n          entity_id: specification_id,\n          id\n        };\n      });\n\n      dispatch(specificationStore.sagaRemove(specs));\n    }\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, defaultProperties), iconColumn), {}, {\n    description: column_tooltips.edit,\n    field: 'id',\n    headerName: 'Edit',\n    renderCell: params => {\n      return /*#__PURE__*/_jsxDEV(EditIcon, {\n        onClick: handleOpenUpdateDialog(params.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 16\n      }, this);\n    }\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.spec_id,\n    field: 'specification_id',\n    headerName: 'Document #',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), descriptionsColumn(currentLang)), {}, {\n    description: column_tooltips.description,\n    headerName: 'Description',\n    flex: 0.6,\n\n    renderCell(params) {\n      const {\n        value\n      } = params;\n      const description = parseHTML(value);\n      return /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: description,\n        classes: {\n          tooltip: classes.tooltip\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          style: {\n            whiteSpace: 'initial',\n            alignSelf: 'baseline',\n            lineHeight: 'initial'\n          },\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this);\n    }\n\n  })];\n  const buttonsPage = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 18\n    }, this),\n    onClick: handleOpenCreateDialog,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create) || userJob.value < 0 || !(userJob === null || userJob === void 0 ? void 0 : userJob.value)\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 18\n    }, this),\n    onClick: handleDeleteSpecifications,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.delete) || selectedRows.length === 0\n  }];\n\n  const Options = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AppAutocompleteStyled, {\n      className: classes.controlAutocomplete,\n      width: 200,\n      label: \"Jobs\",\n      options: jobOptions,\n      value: userJob,\n      renderOption: option => option.description,\n      primaryKeyOption: \"value\",\n      onChange: handleChangeUserJob\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n\n  const Dialogs = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DialogSpecificationCE, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogDrawingCreateEdit, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    entity: \"specification\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: wiki_page,\n    searchProps: {\n      width: 320\n    },\n    buttons: buttonsPage,\n    permissions: permissions,\n    tableProps: {\n      columns,\n      rowHeight: 150\n    },\n    Dialogs: Dialogs,\n    Options: Options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'specification', 'make_a_list', 'advanced_filter', 'drawing', 'item', 'assembly', 'element', 'manufacturer']);\nexport default SpecificationsPage;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/pages/specifications.tsx"],"names":["useEffect","useMemo","useDispatch","useSelector","useStyles","useAuthMiddleware","useTranslation","Grid","Tooltip","AppLayout","EditIcon","CreateIcon","DialogSpecificationCE","AppAutocompleteStyled","DeleteIcon","useConfirm","DialogDrawingCreateEdit","specificationStore","commonStore","defaultProperties","iconColumn","descriptionsColumn","getMessageConfirm","parseHTML","_","SpecificationsPage","classes","t","confirm","breadcrumbData","label","href","dispatch","permissions","selectPermissions","userJob","selectUserValueJob","selectedRows","selectSelectedRows","currentLang","selectCurrentLanguage","dataList","selectDataList","wiki_page","column_tooltips","jobs","jobOptions","selectInitDataForList","actions","resetUserValue","handleOpenCreateDialog","sagaOpenCreateDialog","handleChangeUserJob","event","optionValue","sagaChangeUserJob","handleOpenUpdateDialog","id","sagaOpenUpdateDialog","handleDeleteSpecifications","description","result","specs","map","partId","specification_id","find","entity_id","sagaRemove","columns","edit","field","headerName","renderCell","params","value","spec_id","flex","tooltip","whiteSpace","alignSelf","lineHeight","buttonsPage","startIcon","onClick","disabled","create","delete","length","Options","controlAutocomplete","option","Dialogs","width","rowHeight","getServerSideProps"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useStyles from '@/styles/page/layout'\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware'\nimport { useTranslation } from 'next-i18next'\n\nimport { Grid, Tooltip } from '@material-ui/core'\n\nimport {\n  AppLayout,\n  EditIcon,\n  CreateIcon,\n  DialogSpecificationCE,\n  AppAutocompleteStyled,\n  DeleteIcon,\n  useConfirm,\n  DialogDrawingCreateEdit\n} from '@/components'\n\nimport { specificationStore, commonStore } from '@/store/reducers'\nimport { defaultProperties, iconColumn, descriptionsColumn } from '@/utils/columnProperties'\nimport getMessageConfirm from '@/utils/getMessageConfirm'\nimport parseHTML from 'html-react-parser'\nimport _ from 'lodash'\n\nimport type { GridColumns } from '@material-ui/data-grid'\nimport type { ParameterOption } from '@/types/Common'\n\nconst SpecificationsPage = () => {\n  const classes = useStyles()\n  const { t } = useTranslation('specification')\n  const { confirm } = useConfirm()\n\n  const breadcrumbData = useMemo(\n    () => [\n      { label: 'Home', href: '/' },\n      { label: 'Drawings', href: '/drawings' },\n      { label: 'Specifications Management', href: '/specifications' }\n    ],\n    []\n  )\n\n  const dispatch = useDispatch()\n  const permissions = useSelector(specificationStore.selectPermissions)\n  const userJob = useSelector(commonStore.selectUserValueJob)\n  const selectedRows = useSelector(commonStore.selectSelectedRows)\n  const currentLang = useSelector(commonStore.selectCurrentLanguage)\n  const dataList = useSelector(specificationStore.selectDataList)\n  const { wiki_page, column_tooltips, jobs: jobOptions } = useSelector(specificationStore.selectInitDataForList)\n\n  useEffect(() => {\n    return () => dispatch(commonStore.actions.resetUserValue())\n  }, [])\n\n  const handleOpenCreateDialog = () => {\n    dispatch(specificationStore.sagaOpenCreateDialog())\n  }\n\n  const handleChangeUserJob = (event, optionValue: ParameterOption) => {\n    dispatch(specificationStore.sagaChangeUserJob(optionValue))\n  }\n\n  const handleOpenUpdateDialog = (id: number) => () => {\n    dispatch(specificationStore.sagaOpenUpdateDialog(id))\n  }\n\n  const handleDeleteSpecifications = async () => {\n    const description = getMessageConfirm(t, 'specification', selectedRows, 'delete')\n    const result = await confirm({ description })\n    if (result === 'OK') {\n      const specs = _.map(selectedRows, (partId) => {\n        const { specification_id, id } = _.find(dataList, { id: partId })\n        return { entity_id: specification_id, id }\n      })\n      dispatch(specificationStore.sagaRemove(specs))\n    }\n  }\n\n  const columns: GridColumns = [\n    {\n      ...defaultProperties,\n      ...iconColumn,\n      description: column_tooltips.edit,\n      field: 'id',\n      headerName: 'Edit',\n      renderCell: (params) => {\n        return <EditIcon onClick={handleOpenUpdateDialog(params.value as number)} />\n      }\n    },\n    {\n      ...defaultProperties,\n      description: column_tooltips.spec_id,\n      field: 'specification_id',\n      headerName: 'Document #',\n      flex: 0.1\n    },\n    {\n      ...defaultProperties,\n      ...descriptionsColumn(currentLang),\n      description: column_tooltips.description,\n      headerName: 'Description',\n      flex: 0.6,\n      renderCell(params) {\n        const { value } = params\n        const description = parseHTML(value as string)\n        return (\n          <Tooltip title={description} classes={{ tooltip: classes.tooltip }}>\n            <Grid\n              container\n              spacing={2}\n              style={{\n                whiteSpace: 'initial',\n                alignSelf: 'baseline',\n                lineHeight: 'initial'\n              }}\n            >\n              <Grid item xs={12}>\n                {description}\n              </Grid>\n            </Grid>\n          </Tooltip>\n        )\n      }\n    }\n  ]\n\n  const buttonsPage = [\n    {\n      label: t('common:button.new'),\n      startIcon: <CreateIcon />,\n      onClick: handleOpenCreateDialog,\n      disabled: !permissions?.create || userJob.value < 0 || !userJob?.value\n    },\n    {\n      label: t('common:button.delete'),\n      startIcon: <DeleteIcon />,\n      onClick: handleDeleteSpecifications,\n      disabled: !permissions?.delete || selectedRows.length === 0\n    }\n  ]\n\n  const Options = (\n    <>\n      <AppAutocompleteStyled\n        className={classes.controlAutocomplete}\n        width={200}\n        label=\"Jobs\"\n        options={jobOptions}\n        value={userJob}\n        renderOption={(option) => option.description}\n        primaryKeyOption=\"value\"\n        onChange={handleChangeUserJob}\n      />\n    </>\n  )\n\n  const Dialogs = (\n    <>\n      <DialogSpecificationCE />\n      <DialogDrawingCreateEdit />\n    </>\n  )\n\n  return (\n    <AppLayout\n      entity=\"specification\"\n      breadcrumbs={breadcrumbData}\n      wikiPage={wiki_page}\n      searchProps={{\n        width: 320\n      }}\n      buttons={buttonsPage}\n      permissions={permissions}\n      tableProps={{\n        columns,\n        rowHeight: 150\n      }}\n      Dialogs={Dialogs}\n      Options={Options}\n    />\n  )\n}\n\nexport const getServerSideProps = useAuthMiddleware([\n  'common',\n  'specification',\n  'make_a_list',\n  'advanced_filter',\n  'drawing',\n  'item',\n  'assembly',\n  'element',\n  'manufacturer'\n])\n\nexport default SpecificationsPage\n"]},"metadata":{},"sourceType":"module"}