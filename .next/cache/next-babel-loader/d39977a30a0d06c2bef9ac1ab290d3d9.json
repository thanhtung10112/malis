{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport const name = 'equivalence';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nexport const dialogState = {\n  open: false,\n  loading: false\n};\nexport const equivalenceDetail = {\n  equiv_id: null,\n  description: '',\n  equiv_type: null,\n  image: '',\n  standards: []\n};\nexport const initialState = {\n  equivalenceType: '',\n  dialogState,\n  dataList: [],\n  initDataForList: {\n    permissions: {\n      manufacturing_standard: null,\n      material_standard: null\n    },\n    wiki_page: {\n      manufacturing_standard: '',\n      material_standard: ''\n    },\n    column_tooltips: {\n      manufacturing_standard: {},\n      material_standard: {}\n    }\n  },\n  initDataForCE: {\n    parameters: {\n      PLNO: []\n    },\n    next_code: 0,\n    wiki_page: ''\n  },\n  detail: equivalenceDetail\n};\nconst equivalenceSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setEquivalenceType(state, {\n      payload\n    }) {\n      state.equivalenceType = payload;\n    },\n\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    resetDetail(state) {\n      state.detail = _objectSpread({}, equivalenceDetail);\n    },\n\n    setNextCode(state, {\n      payload\n    }) {\n      state.initDataForCE.next_code = payload;\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n}); // Actions\n\nexport const {\n  actions\n} = equivalenceSlice; // Saga actions\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaUpdate = createAction(`${name}/${actionTypes.UPDATE}`);\nexport const sagaGetNextCode = createAction(`${name}/${actionTypes.GET_NEXT_CODE}`); // Selector\n\nexport const selectState = state => state[name];\nexport const selectEquivalenceType = createSelector(selectState, state => state.equivalenceType);\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport const selectDetail = createSelector(selectState, state => state.detail);\nexport const selectPermissions = createSelector(selectState, state => {\n  const {\n    initDataForList,\n    equivalenceType\n  } = state;\n\n  if (!equivalenceType) {\n    return null;\n  }\n\n  return initDataForList.permissions[equivalenceType];\n});\nexport const selectInitDataForCE = createSelector(selectState, state => state.initDataForCE);\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport default equivalenceSlice;","map":null,"metadata":{},"sourceType":"module"}