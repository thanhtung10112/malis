{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Part\\\\Item\\\\TabGeneral.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport { Button, Grid } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { FormControllerTextField, TableMultilingualDescription, FormControllerAutocomplete, AppAutocompleteAsync, SectionTimezone, AppAutocomplete, CopyIcon, DropdownIcon, FormControllerNumberField, useConfirm } from '@/components';\nimport DialogCopyItem from './DialogCopyItem';\nimport itemApi from '@/apis/item.api';\nimport partApi from '@/apis/part.api';\nimport { commonStore, partStore } from '@/store/reducers';\nimport _ from 'lodash';\nimport { itemMassFormat } from '@/utils/constant';\nimport { StatusCode } from '@/utils/StatusCode';\n\nvar TabGeneral = function TabGeneral() {\n  _s();\n\n  var _itemForm$errors$job_, _itemForm$errors$draw;\n\n  var _useTranslation = useTranslation('common'),\n      t = _useTranslation.t;\n\n  var _useConfirm = useConfirm(),\n      confirm = _useConfirm.confirm;\n\n  var _useState = useState(false),\n      openCopyItem = _useState[0],\n      setOpenCopyItem = _useState[1];\n\n  var _useState2 = useState([]),\n      defaultPartList = _useState2[0],\n      setDefaultPartList = _useState2[1];\n\n  var itemForm = useFormContext();\n  var itemFormData = itemForm.getValues();\n  var watchDrawingId = itemForm.watch('drawing_id', null);\n  var watchRefTo = itemForm.watch('reference_to', null);\n  var watchId = itemForm.watch('id', null);\n\n  var isCreating = _.isNil(watchId);\n\n  var dispatch = useDispatch();\n  var parameters = useSelector(partStore.selectParameters);\n  var userJob = useSelector(commonStore.selectUserValueJob);\n  var entity = useSelector(commonStore.selectEntity);\n\n  var getAdditionalDataPart = function getAdditionalDataPart() {\n    var data = {};\n    data.limit_to_job = userJob.value;\n\n    if (!_.isNil(watchDrawingId)) {\n      data.excluded_drawings = [watchDrawingId.value];\n    }\n\n    return data;\n  };\n\n  var additionalDataPart = getAdditionalDataPart();\n\n  var handleChangeDrawingId = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event, optionValue) {\n      var _yield$itemApi$getGen, generated_code;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setDefaultPartList([]);\n              dispatch(partStore.actions.setPartLoading(true));\n              itemForm.setValue('drawing_id', optionValue);\n              _context.prev = 3;\n              _context.next = 6;\n              return itemApi.getGenerateCode(optionValue.value);\n\n            case 6:\n              _yield$itemApi$getGen = _context.sent;\n              generated_code = _yield$itemApi$getGen.generated_code;\n              itemForm.setValue('dpn', generated_code);\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](3);\n              dispatch(commonStore.actions.setError(_context.t0));\n\n            case 14:\n              dispatch(partStore.actions.setPartLoading(false));\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 11]]);\n    }));\n\n    return function handleChangeDrawingId(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSetOpenCopyItem = function handleSetOpenCopyItem(isOpen) {\n    return function () {\n      if (_.isNull(watchRefTo)) {\n        setOpenCopyItem(isOpen);\n      }\n    };\n  };\n\n  var displayConfirmRefDialog = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return confirm({\n                title: 'Warning',\n                description: message,\n                buttons: [{\n                  label: 'Ok',\n                  action: 'OK'\n                }]\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function displayConfirmRefDialog(_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getPart = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(selectedPart) {\n      var _formData$drawing_id;\n\n      var formData, reqPayload, _yield$partApi$getRef, part, message, reference_to, _error$response, status, data;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              formData = itemForm.getValues();\n              reqPayload = {\n                selected_part: (selectedPart === null || selectedPart === void 0 ? void 0 : selectedPart.value) || null,\n                selected_drawing: (_formData$drawing_id = formData.drawing_id) === null || _formData$drawing_id === void 0 ? void 0 : _formData$drawing_id.value,\n                current_item: isCreating ? null : formData.id\n              };\n              dispatch(partStore.actions.setPartLoading(true));\n              _context3.prev = 3;\n              _context3.next = 6;\n              return partApi.getReferencedPart(reqPayload);\n\n            case 6:\n              _yield$partApi$getRef = _context3.sent;\n              part = _yield$partApi$getRef.part;\n              message = _yield$partApi$getRef.message;\n              reference_to = {\n                description: '',\n                entity_id: part.dpn,\n                value: part.id\n              };\n              itemForm.setValue('descriptions', part.descriptions);\n              itemForm.setValue('manufacturer_equiv', part.manufacturer_equiv_object);\n              itemForm.setValue('manufacturers', part.manufacturers);\n              itemForm.setValue('mass', part.mass);\n              itemForm.setValue('material_equiv', part.material_equiv_object);\n              itemForm.setValue('unit', part.unit);\n              itemForm.setValue('manufacturer_equiv_standards', part.manufacturer_equiv_standards);\n              itemForm.setValue('material_equiv_standards', part.material_equiv_standards);\n              itemForm.setValue('reference_to', reference_to);\n\n              if (selectedPart.value !== part.id) {\n                displayConfirmRefDialog(message);\n              } else {\n                dispatch(commonStore.actions.setSuccessMessage(message));\n              }\n\n              _context3.next = 26;\n              break;\n\n            case 22:\n              _context3.prev = 22;\n              _context3.t0 = _context3[\"catch\"](3);\n              _error$response = _context3.t0.response, status = _error$response.status, data = _error$response.data;\n\n              if (status === StatusCode.BAD_REQUEST) {\n                displayConfirmRefDialog(data.message);\n              }\n\n            case 26:\n              dispatch(partStore.actions.setPartLoading(false));\n\n            case 27:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[3, 22]]);\n    }));\n\n    return function getPart(_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleSelectPart = function handleSelectPart(event, optionValue, reason) {\n    if (reason === 'clear') {\n      itemForm.setValue('reference_to', null);\n    } else {\n      getPart(optionValue);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(AppAutocomplete, {\n              helperText: (_itemForm$errors$job_ = itemForm.errors.job_id) === null || _itemForm$errors$job_ === void 0 ? void 0 : _itemForm$errors$job_.message,\n              error: Boolean(itemForm.errors.job_id),\n              value: userJob,\n              popupIcon: null,\n              disabled: true,\n              label: \"Job\",\n              required: true,\n              primaryKeyOption: \"value\",\n              options: [],\n              renderOption: function renderOption(option) {\n                return option.description;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(AppAutocompleteAsync, {\n              popupIcon: entity === 'drawing' ? null : /*#__PURE__*/_jsxDEV(DropdownIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 58\n              }, _this),\n              helperText: (_itemForm$errors$draw = itemForm.errors.drawing_id) === null || _itemForm$errors$draw === void 0 ? void 0 : _itemForm$errors$draw.message,\n              error: Boolean(itemForm.errors.drawing_id),\n              disabled: !isCreating || entity === 'drawing',\n              value: watchDrawingId,\n              compName: \"drawing_list\",\n              additionalData: {\n                limit_to_job: userJob.value\n              },\n              required: true,\n              label: \"Drawing #\",\n              onChange: handleChangeDrawingId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 8,\n            children: /*#__PURE__*/_jsxDEV(FormControllerTextField, {\n              disabled: !isCreating,\n              control: itemForm.control,\n              name: \"dpn\",\n              required: true,\n              label: \"Item #\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              startIcon: /*#__PURE__*/_jsxDEV(CopyIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 28\n              }, _this),\n              style: {\n                padding: '0 4px',\n                textTransform: 'capitalize'\n              },\n              onClick: handleSetOpenCopyItem(true),\n              disabled: Boolean(watchRefTo),\n              children: t('button.copy_attribute')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(AppAutocompleteAsync, {\n              disabled: !watchDrawingId,\n              disableClearable: false,\n              value: watchRefTo,\n              compName: \"part_list\",\n              additionalData: additionalDataPart,\n              label: \"Reference Part Number\",\n              onChange: handleSelectPart,\n              defaultOptions: defaultPartList,\n              filterOptions: function filterOptions(options) {\n                if (_.isNil(options)) {\n                  return [];\n                }\n\n                if (isCreating) {\n                  return options;\n                }\n\n                return _.filter(options, function (option) {\n                  return option.value !== watchId;\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormControllerNumberField, {\n              control: itemForm.control,\n              name: \"mass\",\n              required: true,\n              label: \"Mass (kg)\",\n              disabled: Boolean(watchRefTo),\n              decimalScale: itemMassFormat.precision,\n              fixedDecimalScale: itemMassFormat.precision\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormControllerAutocomplete, {\n              control: itemForm.control,\n              name: \"unit\",\n              required: true,\n              label: \"Unit\",\n              primaryKeyOption: \"value\",\n              options: parameters.UNIT,\n              renderOption: function renderOption(option) {\n                return option.description;\n              },\n              disabled: Boolean(watchRefTo)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(When, {\n            condition: !isCreating,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              style: {\n                padding: 0\n              },\n              children: /*#__PURE__*/_jsxDEV(SectionTimezone, {\n                value: itemFormData\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 17\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(TableMultilingualDescription, {\n          disabled: Boolean(watchRefTo),\n          languageList: parameters.PLLA,\n          editMode: !isCreating,\n          name: \"descriptions\",\n          tableHeight: 290,\n          control: itemForm.control,\n          copyable: true,\n          copyDialogProps: {\n            checkboxesToSelect: [{\n              label: 'Drawing',\n              value: 'drawing_list',\n              entity: 'drawings'\n            }, {\n              label: 'Item/Assembly',\n              value: 'part_list',\n              entity: 'parts',\n              \"default\": true\n            }]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(DialogCopyItem, {\n      open: openCopyItem,\n      onClose: handleSetOpenCopyItem(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(TabGeneral, \"/p2fUcgfwVLBu1ZSIGELkz+1FgM=\", false, function () {\n  return [useTranslation, useConfirm, useFormContext, useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = TabGeneral;\nexport default TabGeneral;\n\nvar _c;\n\n$RefreshReg$(_c, \"TabGeneral\");","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Part/Item/TabGeneral.tsx"],"names":["useState","useFormContext","useSelector","useDispatch","useTranslation","Button","Grid","When","FormControllerTextField","TableMultilingualDescription","FormControllerAutocomplete","AppAutocompleteAsync","SectionTimezone","AppAutocomplete","CopyIcon","DropdownIcon","FormControllerNumberField","useConfirm","DialogCopyItem","itemApi","partApi","commonStore","partStore","_","itemMassFormat","StatusCode","TabGeneral","t","confirm","openCopyItem","setOpenCopyItem","defaultPartList","setDefaultPartList","itemForm","itemFormData","getValues","watchDrawingId","watch","watchRefTo","watchId","isCreating","isNil","dispatch","parameters","selectParameters","userJob","selectUserValueJob","entity","selectEntity","getAdditionalDataPart","data","limit_to_job","value","excluded_drawings","additionalDataPart","handleChangeDrawingId","event","optionValue","actions","setPartLoading","setValue","getGenerateCode","generated_code","setError","handleSetOpenCopyItem","isOpen","isNull","displayConfirmRefDialog","message","title","description","buttons","label","action","getPart","selectedPart","formData","reqPayload","selected_part","selected_drawing","drawing_id","current_item","id","getReferencedPart","part","reference_to","entity_id","dpn","descriptions","manufacturer_equiv_object","manufacturers","mass","material_equiv_object","unit","manufacturer_equiv_standards","material_equiv_standards","setSuccessMessage","response","status","BAD_REQUEST","handleSelectPart","reason","errors","job_id","Boolean","option","control","padding","textTransform","options","filter","precision","UNIT","PLLA","checkboxesToSelect"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { useFormContext } from 'react-hook-form'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useTranslation } from 'next-i18next'\n\nimport { Button, Grid } from '@material-ui/core'\nimport { When } from 'react-if'\nimport {\n  FormControllerTextField,\n  TableMultilingualDescription,\n  FormControllerAutocomplete,\n  AppAutocompleteAsync,\n  SectionTimezone,\n  AppAutocomplete,\n  CopyIcon,\n  DropdownIcon,\n  FormControllerNumberField,\n  useConfirm\n} from '@/components'\nimport DialogCopyItem from './DialogCopyItem'\n\nimport itemApi from '@/apis/item.api'\nimport partApi from '@/apis/part.api'\nimport { commonStore, partStore } from '@/store/reducers'\nimport _ from 'lodash'\nimport { itemMassFormat } from '@/utils/constant'\nimport { StatusCode } from '@/utils/StatusCode'\n\nimport type { ItemDetail } from '@/types/Item'\nimport type { DataForDropdown } from '@/types/Common'\nimport type { AutocompleteChangeReason } from '@material-ui/lab'\n\nconst TabGeneral: React.FC = () => {\n  const { t } = useTranslation('common')\n  const { confirm } = useConfirm()\n\n  const [openCopyItem, setOpenCopyItem] = useState(false)\n  const [defaultPartList, setDefaultPartList] = useState([])\n\n  const itemForm = useFormContext<ItemDetail>()\n  const itemFormData = itemForm.getValues()\n  const watchDrawingId = itemForm.watch('drawing_id', null)\n  const watchRefTo = itemForm.watch('reference_to', null)\n  const watchId = itemForm.watch('id', null)\n\n  const isCreating = _.isNil(watchId)\n\n  const dispatch = useDispatch()\n  const parameters = useSelector(partStore.selectParameters)\n  const userJob = useSelector(commonStore.selectUserValueJob)\n  const entity = useSelector(commonStore.selectEntity)\n\n  const getAdditionalDataPart = () => {\n    const data = {} as any\n    data.limit_to_job = userJob.value\n    if (!_.isNil(watchDrawingId)) {\n      data.excluded_drawings = [(watchDrawingId as DataForDropdown).value]\n    }\n    return data\n  }\n\n  const additionalDataPart = getAdditionalDataPart()\n\n  const handleChangeDrawingId = async (event, optionValue: DataForDropdown) => {\n    setDefaultPartList([])\n    dispatch(partStore.actions.setPartLoading(true))\n    itemForm.setValue('drawing_id', optionValue)\n    try {\n      const { generated_code } = await itemApi.getGenerateCode(optionValue.value)\n      itemForm.setValue('dpn', generated_code)\n    } catch (error) {\n      dispatch(commonStore.actions.setError(error))\n    }\n    dispatch(partStore.actions.setPartLoading(false))\n  }\n\n  const handleSetOpenCopyItem = (isOpen: boolean) => () => {\n    if (_.isNull(watchRefTo)) {\n      setOpenCopyItem(isOpen)\n    }\n  }\n\n  const displayConfirmRefDialog = async (message: string) => {\n    await confirm({\n      title: 'Warning',\n      description: message,\n      buttons: [{ label: 'Ok', action: 'OK' }]\n    })\n  }\n\n  const getPart = async (selectedPart: DataForDropdown) => {\n    const formData = itemForm.getValues()\n    const reqPayload = {\n      selected_part: selectedPart?.value || null,\n      selected_drawing: (formData.drawing_id as DataForDropdown)?.value,\n      current_item: isCreating ? null : formData.id\n    }\n    dispatch(partStore.actions.setPartLoading(true))\n    try {\n      const { part, message } = await partApi.getReferencedPart(reqPayload)\n      const reference_to = {\n        description: '',\n        entity_id: part.dpn,\n        value: part.id\n      }\n      itemForm.setValue('descriptions', part.descriptions)\n      itemForm.setValue('manufacturer_equiv', part.manufacturer_equiv_object)\n      itemForm.setValue('manufacturers', part.manufacturers)\n      itemForm.setValue('mass', part.mass)\n      itemForm.setValue('material_equiv', part.material_equiv_object)\n      itemForm.setValue('unit', part.unit)\n      itemForm.setValue('manufacturer_equiv_standards', part.manufacturer_equiv_standards)\n      itemForm.setValue('material_equiv_standards', part.material_equiv_standards)\n      itemForm.setValue('reference_to', reference_to)\n      if (selectedPart.value !== part.id) {\n        displayConfirmRefDialog(message)\n      } else {\n        dispatch(commonStore.actions.setSuccessMessage(message))\n      }\n    } catch (error) {\n      const { status, data } = error.response\n      if (status === StatusCode.BAD_REQUEST) {\n        displayConfirmRefDialog(data.message)\n      }\n    }\n    dispatch(partStore.actions.setPartLoading(false))\n  }\n\n  const handleSelectPart = (event, optionValue: DataForDropdown, reason: AutocompleteChangeReason) => {\n    if (reason === 'clear') {\n      itemForm.setValue('reference_to', null)\n    } else {\n      getPart(optionValue)\n    }\n  }\n\n  return (\n    <>\n      <Grid container spacing={2}>\n        <Grid item xs={6}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <AppAutocomplete\n                helperText={itemForm.errors.job_id?.message}\n                error={Boolean(itemForm.errors.job_id)}\n                value={userJob}\n                popupIcon={null}\n                disabled\n                label=\"Job\"\n                required\n                primaryKeyOption=\"value\"\n                options={[]}\n                renderOption={(option) => option.description}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <AppAutocompleteAsync\n                popupIcon={entity === 'drawing' ? null : <DropdownIcon />}\n                helperText={itemForm.errors.drawing_id?.message}\n                error={Boolean(itemForm.errors.drawing_id)}\n                disabled={!isCreating || entity === 'drawing'}\n                value={watchDrawingId}\n                compName=\"drawing_list\"\n                additionalData={{ limit_to_job: userJob.value }}\n                required\n                label=\"Drawing #\"\n                onChange={handleChangeDrawingId}\n              />\n            </Grid>\n            <Grid item xs={8}>\n              <FormControllerTextField\n                disabled={!isCreating}\n                control={itemForm.control}\n                name=\"dpn\"\n                required\n                label=\"Item #\"\n              />\n            </Grid>\n            <Grid item xs={4}>\n              <Button\n                startIcon={<CopyIcon />}\n                style={{ padding: '0 4px', textTransform: 'capitalize' }}\n                onClick={handleSetOpenCopyItem(true)}\n                disabled={Boolean(watchRefTo)}\n              >\n                {t('button.copy_attribute')}\n              </Button>\n            </Grid>\n            <Grid item xs={12}>\n              <AppAutocompleteAsync\n                disabled={!watchDrawingId}\n                disableClearable={false}\n                value={watchRefTo}\n                compName=\"part_list\"\n                additionalData={additionalDataPart}\n                label=\"Reference Part Number\"\n                onChange={handleSelectPart}\n                defaultOptions={defaultPartList}\n                filterOptions={(options) => {\n                  if (_.isNil(options)) {\n                    return []\n                  }\n                  if (isCreating) {\n                    return options\n                  }\n                  return _.filter(options, (option) => option.value !== watchId)\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControllerNumberField\n                control={itemForm.control}\n                name=\"mass\"\n                required\n                label=\"Mass (kg)\"\n                disabled={Boolean(watchRefTo)}\n                decimalScale={itemMassFormat.precision}\n                fixedDecimalScale={itemMassFormat.precision}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControllerAutocomplete\n                control={itemForm.control}\n                name=\"unit\"\n                required\n                label=\"Unit\"\n                primaryKeyOption=\"value\"\n                options={parameters.UNIT}\n                renderOption={(option) => option.description}\n                disabled={Boolean(watchRefTo)}\n              />\n            </Grid>\n            <When condition={!isCreating}>\n              <Grid item xs={12} style={{ padding: 0 }}>\n                <SectionTimezone value={itemFormData} />\n              </Grid>\n            </When>\n          </Grid>\n        </Grid>\n        <Grid item xs={6}>\n          <TableMultilingualDescription\n            disabled={Boolean(watchRefTo)}\n            languageList={parameters.PLLA}\n            editMode={!isCreating}\n            name=\"descriptions\"\n            tableHeight={290}\n            control={itemForm.control}\n            copyable\n            copyDialogProps={{\n              checkboxesToSelect: [\n                {\n                  label: 'Drawing',\n                  value: 'drawing_list',\n                  entity: 'drawings'\n                },\n                {\n                  label: 'Item/Assembly',\n                  value: 'part_list',\n                  entity: 'parts',\n                  default: true\n                }\n              ]\n            }}\n          />\n        </Grid>\n      </Grid>\n\n      <DialogCopyItem open={openCopyItem} onClose={handleSetOpenCopyItem(false)} />\n    </>\n  )\n}\n\nexport default TabGeneral\n"]},"metadata":{},"sourceType":"module"}