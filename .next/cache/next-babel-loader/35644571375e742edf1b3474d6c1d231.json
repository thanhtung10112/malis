{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Paper } from '@material-ui/core';\nimport clsx from 'clsx';\nimport useStyles from '../styles';\n\nfunction ConjunctionOptions(props) {\n  var classes = useStyles();\n  var currentValue = props.value;\n  var disabled = props.disabled;\n  var conjunctionOptions = props.conjunctionOptions; // take this from store\n\n  var handleConjunctionChange = function handleConjunctionChange(value) {\n    return function () {\n      props.onGroupConjunctionChange(value);\n    };\n  };\n\n  var menuItems = [];\n  var i = 0;\n\n  var _iterator = _createForOfIteratorHelper(conjunctionOptions),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var conj = _step.value;\n      menuItems.push( /*#__PURE__*/_jsx(\"div\", {\n        className: clsx(classes.conjuction, conj.value === currentValue && 'active'),\n        onClick: handleConjunctionChange(conj.value),\n        children: conj.description\n      }, \"\".concat(conj.value, \"-\").concat(i)));\n      i++;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(Paper, {\n      elevation: 1,\n      className: clsx(classes.conjuctionRoot, disabled && classes.disabled),\n      children: menuItems\n    })\n  });\n}\n\nexport default ConjunctionOptions;","map":null,"metadata":{},"sourceType":"module"}