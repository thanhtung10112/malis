{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\AdvancedFilter\\\\SortConditionList\\\\ColumnOptions.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { FormControl, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport * as _ from 'lodash'; // column name and sort condition DD and value fields\n\nfunction ColumnOptions(_ref) {\n  _s();\n\n  var _this = this;\n\n  var columnOptions = _ref.columnOptions,\n      currentCondition = _ref.condition,\n      conditionData = _ref.conditionData,\n      disabled = _ref.disabled;\n\n  // trick for forcing rerender\n  var _useState = useState(0),\n      setValue = _useState[1];\n\n  var forceRerender = function forceRerender() {\n    setValue(function (value) {\n      return value + 1;\n    });\n  };\n\n  var filterColumnOptions = function filterColumnOptions(options, state) {\n    var selectedColumns = conditionData.map(function (cond) {\n      return cond.id;\n    });\n\n    var new_options = _.filter(options, function (op) {\n      var _op$id, _op$description;\n\n      return !selectedColumns.includes(op.id) && (((_op$id = op.id) === null || _op$id === void 0 ? void 0 : _op$id.toLowerCase().includes(state.inputValue.toLowerCase())) || ((_op$description = op.description) === null || _op$description === void 0 ? void 0 : _op$description.toLowerCase().includes(state.inputValue.toLowerCase())));\n    });\n\n    return new_options;\n  };\n\n  var onSelectedColumnChange = function onSelectedColumnChange(selectedColumn) {\n    currentCondition.id = selectedColumn.id;\n    forceRerender();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      style: {\n        marginRight: '0.5rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        options: columnOptions,\n        value: _.find(columnOptions, {\n          id: currentCondition.id\n        }),\n        getOptionLabel: function getOptionLabel(option) {\n          return option.description;\n        } // getOptionSelected={(option) => option.}\n        ,\n        style: {\n          width: '15rem'\n        },\n        disableClearable: true,\n        filterOptions: function filterOptions(options, state) {\n          return filterColumnOptions(options, state);\n        },\n        renderInput: function renderInput(params) {\n          return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n            variant: \"outlined\",\n            size: \"small\"\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 36\n          }, _this);\n        },\n        onChange: function onChange(e, selectedColumn) {\n          return onSelectedColumnChange(selectedColumn);\n        },\n        disabled: disabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ColumnOptions, \"1qXTmAp8MY1p96ayC5CBvAOoOJs=\");\n\n_c = ColumnOptions;\nexport default ColumnOptions;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColumnOptions\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/AdvancedFilter/SortConditionList/ColumnOptions.tsx"],"names":["useState","FormControl","TextField","Autocomplete","_","ColumnOptions","columnOptions","currentCondition","condition","conditionData","disabled","setValue","forceRerender","value","filterColumnOptions","options","state","selectedColumns","map","cond","id","new_options","filter","op","includes","toLowerCase","inputValue","description","onSelectedColumnChange","selectedColumn","marginRight","find","option","width","params","e"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nimport { FormControl, TextField } from '@material-ui/core'\n\nimport { Autocomplete } from '@material-ui/lab'\n\nimport * as _ from 'lodash'\n\n// column name and sort condition DD and value fields\nfunction ColumnOptions({ columnOptions, condition: currentCondition, conditionData, disabled }) {\n  // trick for forcing rerender\n  const [, setValue] = useState(0)\n  const forceRerender = () => {\n    setValue((value) => value + 1)\n  }\n\n  const filterColumnOptions = (options, state) => {\n    const selectedColumns = conditionData.map((cond) => cond.id)\n    const new_options = _.filter(options, (op) => {\n      return (\n        !selectedColumns.includes(op.id) &&\n        (op.id?.toLowerCase().includes(state.inputValue.toLowerCase()) ||\n          op.description?.toLowerCase().includes(state.inputValue.toLowerCase()))\n      )\n    })\n    return new_options\n  }\n\n  const onSelectedColumnChange = (selectedColumn) => {\n    currentCondition.id = selectedColumn.id\n    forceRerender()\n  }\n\n  return (\n    <>\n      <FormControl style={{ marginRight: '0.5rem' }}>\n        <Autocomplete\n          options={columnOptions}\n          value={_.find(columnOptions, {\n            id: currentCondition.id\n          })}\n          getOptionLabel={(option) => option.description}\n          // getOptionSelected={(option) => option.}\n          style={{ width: '15rem' }}\n          disableClearable\n          filterOptions={(options, state) => filterColumnOptions(options, state)}\n          renderInput={(params) => <TextField {...params} variant=\"outlined\" size=\"small\" />}\n          onChange={(e, selectedColumn) => onSelectedColumnChange(selectedColumn)}\n          disabled={disabled}\n        />\n      </FormControl>\n    </>\n  )\n}\n\nexport default ColumnOptions\n"]},"metadata":{},"sourceType":"module"}