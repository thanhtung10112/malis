{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { useState } from 'react';\nimport { useTranslation } from 'next-i18next';\nimport { format as formatDate } from 'date-fns';\nimport { TreeItem } from '@material-ui/lab';\nimport { AddCircle, Cancel } from '@material-ui/icons';\nimport { Menu, MenuItem, IconButton, ButtonGroup, Tooltip } from '@material-ui/core';\nimport { Unless } from 'react-if';\nimport { v1 as uuidv1 } from 'uuid';\nimport ConditionRule from './ConditionRule';\nimport ConjunctionOptions from './ConjunctionOptions';\nimport useStyles from '../styles'; // The condition group component, which can contain other rules or groups\n\nfunction ConditionGroup(_ref) {\n  var columnOptions = _ref.columnOptions,\n      comparatorOptions = _ref.comparatorOptions,\n      conjunctionOptions = _ref.conjunctionOptions,\n      level = _ref.level,\n      groupData = _ref.groupData,\n      parentGroup = _ref.parent,\n      forceParentRerender = _ref.forceParentRerender,\n      disabled = _ref.disabled,\n      maxLevel = _ref.maxLevel;\n\n  var _useState = useState(null),\n      anchorEl = _useState[0],\n      setAnchorEl = _useState[1];\n\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(['advanced_filter']),\n      t = _useTranslation.t; // trick for forcing rerender\n\n\n  var _useState2 = useState(0),\n      setValue = _useState2[1];\n\n  var forceRerender = function forceRerender() {\n    setValue(function (value) {\n      return value + 1;\n    });\n  };\n\n  var groupConditions = [];\n\n  var _iterator = _createForOfIteratorHelper(groupData.conditions),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var condition = _step.value;\n\n      if (condition.type === 'rule') {\n        groupConditions.push( /*#__PURE__*/_jsx(ConditionRule, {\n          ruleData: condition,\n          parent: groupData,\n          forceParentRerender: forceRerender,\n          columnOptions: columnOptions,\n          comparatorOptions: comparatorOptions,\n          disabled: disabled\n        }, condition.condition_id));\n      } else {\n        // condition.type === \"group\"\n        groupConditions.push( /*#__PURE__*/_jsx(ConditionGroup, {\n          maxLevel: maxLevel,\n          groupData: condition,\n          level: level + 1,\n          parent: groupData,\n          forceParentRerender: forceRerender,\n          columnOptions: columnOptions,\n          comparatorOptions: comparatorOptions,\n          conjunctionOptions: conjunctionOptions,\n          disabled: disabled\n        }, condition.condition_id));\n      }\n    } // Some neccessary functions\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var openAddMenu = function openAddMenu(event) {\n    setAnchorEl(event.currentTarget);\n  };\n\n  var closeAddMenu = function closeAddMenu() {\n    setAnchorEl(null);\n  };\n\n  var handleAddOptions = function handleAddOptions(type) {\n    return function () {\n      if (type === 'rule') {\n        var newRule = {\n          type: 'rule',\n          id: columnOptions[0].id,\n          condition_id: uuidv1()\n        };\n\n        switch (columnOptions[0].column_type) {\n          case 'string':\n            newRule.value = '';\n            newRule.comparator = 'ilike';\n            break;\n\n          case 'number':\n            newRule.value = 0;\n            newRule.comparator = 'eq';\n            break;\n\n          case 'date':\n            newRule.value = formatDate(new Date(), 'yyyy-MM-dd');\n            newRule.comparator = 'eq';\n            break;\n\n          case 'datetime':\n            newRule.value = formatDate(new Date(), 'yyyy-MM-dd HH:mm');\n            newRule.comparator = 'eq';\n            break;\n\n          case 'predefined_value':\n            newRule.value = [];\n            newRule.comparator = 'in';\n            newRule.value_as_string = columnOptions[0].value_as_string;\n            break;\n\n          case 'boolean':\n            newRule.value = false;\n            newRule.comparator = 'eq';\n            break;\n        }\n\n        groupData.conditions.push(newRule);\n      } else {\n        // type = \"group\"\n        groupData.conditions.push({\n          conjunction: conjunctionOptions[0].value,\n          type: 'group',\n          conditions: [],\n          condition_id: uuidv1()\n        });\n      }\n\n      closeAddMenu();\n    };\n  };\n\n  var removeGroup = function removeGroup(group_condition_id) {\n    return function () {\n      var newParentGroupConditions = parentGroup.conditions.filter(function (cond) {\n        return cond.condition_id !== group_condition_id;\n      });\n      parentGroup.conditions = newParentGroupConditions;\n      forceParentRerender();\n    };\n  };\n\n  var handleGroupConjunctionChange = function handleGroupConjunctionChange(value) {\n    groupData.conjunction = value;\n    forceParentRerender();\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(TreeItem, {\n      nodeId: \"group\",\n      style: {\n        borderLeft: level === 0 ? '' : '1px #D8D8D8 dashed',\n        marginLeft: level === 0 ? '' : '1.65rem',\n        marginTop: level === 0 ? '' : '0.5rem'\n      },\n      label: /*#__PURE__*/_jsxs(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsx(ConjunctionOptions, {\n          conjunctionOptions: conjunctionOptions,\n          value: groupData.conjunction,\n          onGroupConjunctionChange: handleGroupConjunctionChange,\n          disabled: disabled\n        }), /*#__PURE__*/_jsxs(Unless, {\n          condition: disabled,\n          children: [/*#__PURE__*/_jsxs(ButtonGroup, {\n            className: classes.buttonGroup,\n            size: \"small\",\n            children: [/*#__PURE__*/_jsx(IconButton, {\n              \"aria-label\": \"Add\",\n              \"aria-controls\": \"add-menu\",\n              \"aria-haspopup\": \"true\",\n              onClick: openAddMenu,\n              children: /*#__PURE__*/_jsx(AddCircle, {\n                className: classes.iconButton\n              })\n            }), /*#__PURE__*/_jsx(Unless, {\n              condition: level === 0,\n              children: /*#__PURE__*/_jsx(Tooltip, {\n                title: t('tooltip.condition_remove_group'),\n                children: /*#__PURE__*/_jsx(IconButton, {\n                  onClick: removeGroup(groupData.condition_id),\n                  children: /*#__PURE__*/_jsx(Cancel, {\n                    className: classes.iconButton\n                  })\n                })\n              })\n            })]\n          }), /*#__PURE__*/_jsxs(Menu, {\n            id: \"add-menu\",\n            anchorEl: anchorEl,\n            keepMounted: true,\n            open: Boolean(anchorEl),\n            onClose: closeAddMenu,\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              onClick: handleAddOptions('rule'),\n              children: t('condition_group.add_rule')\n            }), /*#__PURE__*/_jsx(Unless, {\n              condition: level >= maxLevel,\n              children: /*#__PURE__*/_jsx(MenuItem, {\n                onClick: handleAddOptions('group'),\n                children: t('condition_group.add_group')\n              })\n            })]\n          })]\n        })]\n      }),\n      children: groupConditions\n    })\n  });\n}\n\nexport default ConditionGroup;","map":null,"metadata":{},"sourceType":"module"}