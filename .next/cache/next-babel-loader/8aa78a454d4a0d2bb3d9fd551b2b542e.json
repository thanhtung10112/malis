{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createElement as _createElement } from \"react\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useMemo, useEffect, useCallback } from 'react';\nimport { useRouter } from 'next/router';\nimport useStyles from './styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Head from 'next/head';\nimport { Paper, Grid } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { When, Unless } from 'react-if';\nimport { AdvancedFilter, MakeAList, AppBreadcrumb, MalisNoViewPermissionOnModule, Footer, DataTablePagination, DataTableLoadingOverlay, DataTableNoRowsOverlay, AppButton, DataTableColumnMenu, AppSearchBar } from '@/components';\nimport clsx from 'clsx';\nimport _ from 'lodash';\nimport { advancedFilterActions, commonStore, equivalenceStore } from '@/store/reducers';\nimport { createAction } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nimport { TABLE_HEIGHT_INCLUDE_FOOTER } from '@/styles/vars/size';\nimport AppNumber from '@/helper/AppNumber';\n\nconst Layout = props => {\n  const {\n    breadcrumbs,\n    buttons,\n    Dialogs,\n    Options,\n    tableProps,\n    exportable,\n    permissions,\n    searchProps,\n    filterable,\n    leftSection,\n    tableSection,\n    bottomSection,\n    tableHeight,\n    entity,\n    wikiPage\n  } = props;\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation();\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const equivalenceType = useSelector(equivalenceStore.selectEquivalenceType);\n  const isOpenAF = useSelector(advancedFilterActions.selectOpenAdvanceSearch);\n  const tableState = useSelector(commonStore.selectTableState);\n  const {\n    table: loadingTable\n  } = useSelector(commonStore.selectLoading);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const editRows = useSelector(commonStore.selectEditRows);\n  const entityApp = useMemo(() => {\n    if (entity === 'manufacturing_standard' || entity === 'material_standard') {\n      return 'equivalence';\n    }\n\n    return entity;\n  }, [entity]);\n  const headTitle = useMemo(() => {\n    if (!entityApp) {\n      return t('common:loading');\n    }\n\n    if (entityApp === 'equivalence') {\n      if (equivalenceType) {\n        return t(`${entityApp}:head_title_${equivalenceType}`);\n      }\n\n      return t('common:loading');\n    }\n\n    return t(`${entityApp}:head_title`);\n  }, [entityApp, equivalenceType]);\n  const dataList = useSelector(state => {\n    var _state$entityApp;\n\n    if (!entityApp) {\n      return [];\n    }\n\n    return ((_state$entityApp = state[entityApp]) === null || _state$entityApp === void 0 ? void 0 : _state$entityApp.dataList) || [];\n  });\n  const getListAction = useMemo(() => createAction(`${entityApp}/${actionTypes.GET_LIST}`), [entityApp]);\n  const resetStateAction = useMemo(() => createAction(`${entityApp}/${actionTypes.RESET_STATE}`), [entityApp]);\n  const openCreateDialogAct = useMemo(() => createAction(`${entityApp}/${actionTypes.OPEN_CREATE_DIALOG}`), [entityApp]);\n  const openUpdateDialogAct = useMemo(() => createAction(`${entityApp}/${actionTypes.OPEN_UPDATE_DIALOG}`), [entityApp]);\n  useEffect(() => {\n    if (!entity) {\n      return;\n    }\n\n    dispatch(commonStore.actions.setEntity(entity));\n    dispatch(getListAction());\n    return () => {\n      dispatch(resetStateAction());\n    };\n  }, [entity, resetStateAction, getListAction]);\n  useEffect(() => {\n    if (selectedRows.length > 0) {\n      dispatch(commonStore.actions.setSelectedRows([]));\n    }\n\n    if (editRows.length > 0) {\n      dispatch(commonStore.actions.setEditRows([]));\n    }\n  }, [dataList]);\n  useEffect(() => {\n    const {\n      id,\n      action\n    } = router.query;\n\n    if (AppNumber.isNumber(id) && action === 'update') {\n      dispatch(openUpdateDialogAct(router.query.id));\n    } else if (action === 'create') {\n      dispatch(openCreateDialogAct());\n    }\n  }, [entityApp, actionTypes, router.query.id, router.query.action]);\n  const renderButtons = useCallback(() => {\n    if (_.isArray(buttons)) {\n      return buttons.filter(button => !button.hide).map((_ref, index) => {\n        let {\n          label,\n          hide,\n          className\n        } = _ref,\n            buttonProps = _objectWithoutProperties(_ref, [\"label\", \"hide\", \"className\"]);\n\n        return /*#__PURE__*/_createElement(AppButton, _objectSpread(_objectSpread({}, buttonProps), {}, {\n          key: index,\n          className: clsx(className, classes.buttonControl)\n        }), label);\n      });\n    }\n\n    return /*#__PURE__*/_jsx(AppButton, _objectSpread(_objectSpread({}, buttons), {}, {\n      className: clsx(buttons === null || buttons === void 0 ? void 0 : buttons.className, classes.buttonControl),\n      children: buttons === null || buttons === void 0 ? void 0 : buttons.label\n    }));\n  }, [buttons]);\n\n  const handleChangePage = page => {\n    dispatch(commonStore.actions.setTableState({\n      page\n    }));\n    dispatch(getListAction());\n  };\n\n  const handleChangePerpage = per_page => {\n    dispatch(commonStore.actions.setTableState({\n      per_page\n    }));\n    handleChangePage(1);\n  };\n\n  const handleSearch = (event, query) => {\n    dispatch(commonStore.actions.setSearchQuery(query));\n    handleChangePage(1);\n  };\n\n  const handleSelectRows = ({\n    selectionModel\n  }) => {\n    dispatch(commonStore.actions.setSelectedRows(selectionModel));\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: headTitle\n      })\n    }), /*#__PURE__*/_jsx(AppBreadcrumb, {\n      items: breadcrumbs,\n      wikiPage: wikiPage\n    }), /*#__PURE__*/_jsxs(Paper, {\n      elevation: 1,\n      className: classes.main,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: classes.wrapControl,\n          children: [/*#__PURE__*/_jsx(AppSearchBar, _objectSpread(_objectSpread({\n            onSearch: handleSearch,\n            width: 500,\n            placeholder: t(`${entityApp}:search_placeholder`),\n            filterable: filterable\n          }, searchProps), {}, {\n            disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.view)\n          })), Options]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"\",\n          children: renderButtons()\n        })]\n      }), /*#__PURE__*/_jsx(When, {\n        condition: isOpenAF,\n        children: /*#__PURE__*/_jsx(AdvancedFilter, {})\n      }), /*#__PURE__*/_jsxs(When, {\n        condition: permissions === null || permissions === void 0 ? void 0 : permissions.view,\n        children: [/*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          style: {\n            height: tableHeight || TABLE_HEIGHT_INCLUDE_FOOTER,\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsx(Unless, {\n            condition: leftSection === null || leftSection === void 0 ? void 0 : leftSection.hide,\n            children: /*#__PURE__*/_jsx(Grid, _objectSpread(_objectSpread(_objectSpread({\n              item: true\n            }, leftSection.breakPoint), _.omit(leftSection, ['breakPoint', 'hide', 'Component'])), {}, {\n              children: leftSection.Component\n            }))\n          }), /*#__PURE__*/_jsx(Grid, _objectSpread(_objectSpread({\n            item: true\n          }, tableSection === null || tableSection === void 0 ? void 0 : tableSection.breakPoint), {}, {\n            children: /*#__PURE__*/_jsx(DataGrid, _objectSpread({\n              checkboxSelection: true,\n              loading: loadingTable,\n              rows: dataList,\n              headerHeight: 30,\n              rowHeight: 30,\n              hideFooter: true,\n              selectionModel: selectedRows,\n              onSelectionModelChange: handleSelectRows,\n              components: {\n                LoadingOverlay: DataTableLoadingOverlay,\n                NoRowsOverlay: DataTableNoRowsOverlay,\n                ColumnMenu: DataTableColumnMenu\n              },\n              onCellClick: (params, event) => {\n                if (params.field === 'id') {\n                  event.stopPropagation();\n                }\n              }\n            }, tableProps))\n          }))]\n        }), bottomSection, /*#__PURE__*/_jsx(DataTablePagination, {\n          countSelectedItems: selectedRows.length,\n          page: tableState.page,\n          perPage: tableState.per_page,\n          totalItems: tableState.total_items,\n          onChangePage: handleChangePage,\n          onChangePerPage: handleChangePerpage\n        }), /*#__PURE__*/_jsx(Footer, {})]\n      }), /*#__PURE__*/_jsx(When, {\n        condition: !_.isNil(permissions) && (permissions === null || permissions === void 0 ? void 0 : permissions.view) === false,\n        children: /*#__PURE__*/_jsx(MalisNoViewPermissionOnModule, {})\n      })]\n    }), Dialogs, /*#__PURE__*/_jsx(When, {\n      condition: exportable,\n      children: /*#__PURE__*/_jsx(MakeAList, {})\n    })]\n  });\n};\n\nLayout.defaultProps = {\n  filterable: true,\n  exportable: true,\n  permissions: null,\n  tableProps: {\n    columns: []\n  },\n  tableSection: {\n    breakPoint: {\n      xs: 12\n    }\n  },\n  leftSection: {}\n};\nexport default Layout;","map":null,"metadata":{},"sourceType":"module"}