{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Parameter\\\\TableAttributes.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Paper } from '@material-ui/core';\nimport { DataTableTextField, DialogCodeEditor, DataTableCellExpand, DataTable } from '@/components/index';\nimport { useController } from 'react-hook-form';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport * as columnProperties from '@/utils/columnProperties';\n\nfunction TableAttributes(props) {\n  _s();\n\n  var attributes = props.attributes,\n      parameterId = props.parameterId,\n      config = props.config,\n      formProps = _objectWithoutProperties(props, [\"attributes\", \"parameterId\", \"config\"]);\n\n  var attributeList = React.useMemo(function () {\n    if (_.isEmpty(attributes)) {\n      return [];\n    }\n\n    return attributes.split(';').map(function (attr) {\n      return {\n        attr: attr\n      };\n    });\n  }, [attributes]);\n\n  var _React$useState = React.useState({\n    isOpen: false,\n    value: '',\n    attribute: '',\n    mode: '',\n    guideline: ''\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      codeEditorState = _React$useState2[0],\n      setCodeEditorState = _React$useState2[1];\n\n  var _useController = useController(_objectSpread({}, formProps)),\n      field = _useController.field;\n\n  var getValueAttribute = function getValueAttribute(attr) {\n    var valueAttr = field.value[attr];\n    return valueAttr || '';\n  };\n\n  var isMarkdownField = function isMarkdownField(attr) {\n    var queryFields = ['columns_definition', 'pre_select_query', 'from_clause'];\n    return parameterId === 'TTIP' || parameterId === 'MKAL' && queryFields.includes(attr);\n  };\n\n  var onChangeAttr = function onChangeAttr(id, value) {\n    field.onChange(immer(field.value, function (draft) {\n      draft[id] = value;\n    }));\n  };\n\n  var handleDbClickToEdit = function handleDbClickToEdit(params, event) {\n    var attr = params.row.attr;\n\n    if (isMarkdownField(attr)) {\n      handleOpenCodeEditor(attr);\n      event.stopPropagation();\n    }\n  };\n\n  var handleOpenCodeEditor = function handleOpenCodeEditor(attr) {\n    setCodeEditorState(function (prevState) {\n      return immer(prevState, function (draft) {\n        var _config$attributes$at, _config$attributes$at2;\n\n        draft.value = getValueAttribute(attr);\n        draft.attribute = attr;\n        draft.mode = (config === null || config === void 0 ? void 0 : (_config$attributes$at = config.attributes[attr]) === null || _config$attributes$at === void 0 ? void 0 : _config$attributes$at.mode) || 'json';\n        draft.guideline = (config === null || config === void 0 ? void 0 : (_config$attributes$at2 = config.attributes[attr]) === null || _config$attributes$at2 === void 0 ? void 0 : _config$attributes$at2.guideline) || '(no guideline)';\n        draft.isOpen = true;\n      });\n    });\n  };\n\n  var onCodeEditorClose = function onCodeEditorClose() {\n    setCodeEditorState(function (prevState) {\n      return immer(prevState, function (draft) {\n        draft.isOpen = false;\n      });\n    });\n  };\n\n  var onCodeEditorConfirm = function onCodeEditorConfirm(value, attribute) {\n    field.onChange(immer(field.value, function (draft) {\n      draft[attribute] = value;\n    }));\n    onCodeEditorClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 1,\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        tableHeight: 200,\n        rows: attributeList,\n        hideFooter: true,\n        onCellDoubleClick: handleDbClickToEdit,\n        getRowId: function getRowId(params) {\n          return params.attr;\n        },\n        columns: [_objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n          field: 'attr',\n          headerName: 'Attribute',\n          sortable: false,\n          width: 150\n        }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Value')), {}, {\n          field: 'raw_value',\n          flex: 0.75,\n          valueGetter: function valueGetter(params) {\n            var attr = params.row.attr;\n            var value = getValueAttribute(attr);\n            return value;\n          },\n          renderEditCell: function renderEditCell(params) {\n            return /*#__PURE__*/_jsxDEV(DataTableTextField, {\n              params: params,\n              onChangeValue: onChangeAttr\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 24\n            }, this);\n          },\n          renderCell: function renderCell(params) {\n            var attr = params.row.attr;\n\n            if (isMarkdownField(attr)) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: params.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 26\n              }, this);\n            }\n\n            return /*#__PURE__*/_jsxDEV(DataTableCellExpand, {\n              value: params.value,\n              width: params.colDef.width\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 24\n            }, this);\n          }\n        })]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogCodeEditor, _objectSpread(_objectSpread({}, codeEditorState), {}, {\n      onClose: onCodeEditorClose,\n      onConfirm: onCodeEditorConfirm\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TableAttributes, \"uNs9k3G7xUMp4JMtr5hILh1/CK4=\", false, function () {\n  return [useController];\n});\n\n_c = TableAttributes;\nexport default TableAttributes;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableAttributes\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Parameter/TableAttributes.tsx"],"names":["React","Paper","DataTableTextField","DialogCodeEditor","DataTableCellExpand","DataTable","useController","_","immer","columnProperties","TableAttributes","props","attributes","parameterId","config","formProps","attributeList","useMemo","isEmpty","split","map","attr","useState","isOpen","value","attribute","mode","guideline","codeEditorState","setCodeEditorState","field","getValueAttribute","valueAttr","isMarkdownField","queryFields","includes","onChangeAttr","id","onChange","draft","handleDbClickToEdit","params","event","row","handleOpenCodeEditor","stopPropagation","prevState","onCodeEditorClose","onCodeEditorConfirm","defaultProperties","headerName","sortable","width","editCell","flex","valueGetter","renderEditCell","renderCell","colDef"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Paper } from '@material-ui/core'\n\nimport { DataTableTextField, DialogCodeEditor, DataTableCellExpand, DataTable } from '@/components/index'\n\nimport { useController } from 'react-hook-form'\n\nimport _ from 'lodash'\nimport immer from 'immer'\nimport * as columnProperties from '@/utils/columnProperties'\n\nimport type { Control } from 'react-hook-form'\n\ntype TableAttributesProps<T = any> = {\n  attributes: string\n  control: Control<T>\n  name: string\n  parameterId: string\n  config: any\n}\n\nfunction TableAttributes(props: TableAttributesProps) {\n  const { attributes, parameterId, config, ...formProps } = props\n\n  const attributeList = React.useMemo(() => {\n    if (_.isEmpty(attributes)) {\n      return []\n    }\n    return attributes.split(';').map((attr) => {\n      return { attr }\n    })\n  }, [attributes])\n\n  const [codeEditorState, setCodeEditorState] = React.useState({\n    isOpen: false,\n    value: '',\n    attribute: '',\n    mode: '',\n    guideline: ''\n  })\n\n  const { field } = useController({ ...formProps })\n\n  const getValueAttribute = (attr: string) => {\n    const valueAttr = field.value[attr]\n    return valueAttr || ''\n  }\n\n  const isMarkdownField = (attr: string) => {\n    const queryFields = ['columns_definition', 'pre_select_query', 'from_clause']\n    return parameterId === 'TTIP' || (parameterId === 'MKAL' && queryFields.includes(attr))\n  }\n\n  const onChangeAttr = (id, value) => {\n    field.onChange(\n      immer(field.value, (draft) => {\n        draft[id] = value\n      })\n    )\n  }\n\n  const handleDbClickToEdit = (params, event) => {\n    const { attr } = params.row\n    if (isMarkdownField(attr)) {\n      handleOpenCodeEditor(attr)\n      event.stopPropagation()\n    }\n  }\n\n  const handleOpenCodeEditor = (attr) => {\n    setCodeEditorState((prevState) =>\n      immer(prevState, (draft) => {\n        draft.value = getValueAttribute(attr)\n        draft.attribute = attr\n        draft.mode = config?.attributes[attr]?.mode || 'json'\n        draft.guideline = config?.attributes[attr]?.guideline || '(no guideline)'\n        draft.isOpen = true\n      })\n    )\n  }\n\n  const onCodeEditorClose = () => {\n    setCodeEditorState((prevState) =>\n      immer(prevState, (draft) => {\n        draft.isOpen = false\n      })\n    )\n  }\n\n  const onCodeEditorConfirm = (value, attribute) => {\n    field.onChange(\n      immer(field.value, (draft) => {\n        draft[attribute] = value\n      })\n    )\n    onCodeEditorClose()\n  }\n\n  return (\n    <>\n      <Paper elevation={1}>\n        <DataTable\n          tableHeight={200}\n          rows={attributeList}\n          hideFooter\n          onCellDoubleClick={handleDbClickToEdit}\n          getRowId={(params) => params.attr}\n          columns={[\n            {\n              ...columnProperties.defaultProperties,\n              field: 'attr',\n              headerName: 'Attribute',\n              sortable: false,\n              width: 150\n            },\n            {\n              ...columnProperties.defaultProperties,\n              ...columnProperties.editCell('Value'),\n              field: 'raw_value',\n              flex: 0.75,\n              valueGetter(params) {\n                const { attr } = params.row\n                const value = getValueAttribute(attr)\n                return value\n              },\n              renderEditCell(params) {\n                return <DataTableTextField params={params} onChangeValue={onChangeAttr} />\n              },\n              renderCell(params) {\n                const { attr } = params.row\n                if (isMarkdownField(attr)) {\n                  return <div>{params.value}</div>\n                }\n                return <DataTableCellExpand value={params.value} width={params.colDef.width} />\n              }\n            }\n          ]}\n        />\n      </Paper>\n      <DialogCodeEditor {...codeEditorState} onClose={onCodeEditorClose} onConfirm={onCodeEditorConfirm} />\n    </>\n  )\n}\n\nexport default TableAttributes\n"]},"metadata":{},"sourceType":"module"}