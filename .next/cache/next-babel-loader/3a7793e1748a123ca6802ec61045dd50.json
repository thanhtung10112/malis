{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useMemo, useEffect } from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { AppAutocompleteStyled, DialogBudgetCreateEdit, DataTableTextField, DialogBudgetImport, EditIcon, CreateIcon, DeleteIcon, MakeAListIcon, SaveIcon, AppLayout, DataTableNumberField } from '@/components';\nimport { useTranslation } from 'next-i18next';\nimport useStyles from '@/styles/page/layout';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useConfirm, confirmConstant } from '@/components/Dialog/Common/Confirmation';\nimport useAuthMiddleware from '@/hooks/useAuthMiddleware';\nimport clsx from 'clsx';\nimport _ from 'lodash';\nimport immer from 'immer';\nimport * as yup from 'yup';\nimport { budgetAmountFormat, unsaveDialogOptions } from '@/utils/constant';\nimport * as columnProperties from '@/utils/columnProperties';\nimport { budgetActions, commonStore, makeAListActions } from '@/store/reducers';\nimport { TABLE_HEIGHT_BUDGET } from '@/styles/vars/size';\nimport DialogRemindData from '@/components/Dialog/Module/Budget/RemindData';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\n\nfunction BudgetPage() {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation('budget');\n  const {\n    confirm\n  } = useConfirm();\n  const dispatch = useDispatch();\n  const dataList = useSelector(budgetActions.selectDataList);\n  const userJob = useSelector(budgetActions.selectUserJob);\n  const userPuco = useSelector(budgetActions.selectUserPuco);\n  const pucoList = useSelector(budgetActions.selectPucoList);\n  const jobList = useSelector(budgetActions.selectJobList);\n  const budgetSum = useSelector(budgetActions.selectBudgetSum);\n  const permissions = useSelector(budgetActions.selectPermissions);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n\n  const _useSelector = useSelector(budgetActions.selectInitDataForList),\n        {\n    column_tooltips\n  } = _useSelector,\n        initDataForList = _objectWithoutProperties(_useSelector, [\"column_tooltips\"]);\n\n  const editRows = useSelector(commonStore.selectEditRows);\n  const breadcrumbData = useMemo(() => [{\n    label: 'Home',\n    href: '/'\n  }, {\n    label: 'Basic Options',\n    href: '/jobs'\n  }, {\n    label: 'Budget Management',\n    href: '/budget'\n  }], []);\n  useEffect(() => {\n    dispatch(commonStore.actions.setEditRows([]));\n  }, [dataList]); // handle change value\n\n  const onChangeUserValue = value => async (event, option) => {\n    let result = '';\n\n    if (editRows.length > 0) {\n      result = await confirm(unsaveDialogOptions);\n    }\n\n    if (result !== 'cancel') {\n      dispatch(budgetActions.changeUserValue({\n        value,\n        option,\n        confirm: result\n      }));\n    }\n  };\n\n  const onOpenUpdateDialog = id => () => {\n    dispatch(budgetActions.openUpdateDialog(id));\n  };\n\n  const onOpenCreateDialog = () => {\n    dispatch(budgetActions.openCreateDialog());\n  };\n\n  const onOpenImportDialog = () => {\n    dispatch(budgetActions.setImportOpen(true));\n  };\n\n  const onSaveUpdateData = () => {\n    dispatch(commonStore.sagaUpdateMultiple({\n      entity: 'budget'\n    }));\n  };\n\n  const onDeleteBudgets = async () => {\n    const description = getMessageConfirm(t, 'budget', selectedRows, 'delete');\n    const result = await confirm({\n      description\n    });\n\n    if (result === confirmConstant.actionTypes.OK) {\n      dispatch(budgetActions.remove(selectedRows));\n    }\n  };\n\n  const onOpenMakeAList = () => {\n    dispatch(makeAListActions.open());\n  };\n\n  const onChangeEditRows = (budget_id_pk, value, field) => {\n    const newEditRows = immer(editRows, draft => {\n      const findIndex = _.findIndex(draft, {\n        budget_id_pk\n      });\n\n      const valueFormat = field === 'amount' ? Number(value) : value;\n\n      if (findIndex > -1) {\n        draft[findIndex][field] = valueFormat;\n      } else {\n        draft.push({\n          budget_id_pk,\n          [field]: valueFormat\n        });\n      }\n    });\n    dispatch(commonStore.actions.setEditRows(newEditRows));\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    description: column_tooltips.edit,\n    field: 'id',\n    headerName: 'Edit',\n\n    renderCell(params) {\n      return /*#__PURE__*/_jsx(EditIcon, {\n        onClick: onOpenUpdateDialog(params.value)\n      });\n    }\n\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.budget_id,\n    field: 'budget_id',\n    headerName: 'Cost Code',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.editCell('Description', permissions === null || permissions === void 0 ? void 0 : permissions.edit, column_tooltips.description)), {}, {\n    field: 'description',\n    flex: 0.3,\n\n    cellClassName(params) {\n      return clsx({\n        [classes.mark]: editRows.some(row => row.budget_id_pk === params.id && typeof row.description !== 'undefined')\n      });\n    },\n\n    renderEditCell(params) {\n      return /*#__PURE__*/_jsx(DataTableTextField, {\n        params: params,\n        rules: yup.string().max(513, 'Description must be less than 513 characters!'),\n        onChangeValue: onChangeEditRows\n      });\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.currency_id,\n    field: 'currency_id',\n    headerName: 'Currency',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.puco,\n    field: 'puco',\n    headerName: 'Puco',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.numberColumn), columnProperties.editCell('Amount', permissions === null || permissions === void 0 ? void 0 : permissions.edit, column_tooltips.amount)), {}, {\n    field: 'amount',\n    flex: 0.1,\n\n    cellClassName(params) {\n      return clsx({\n        [classes.mark]: editRows.some(row => row.budget_id_pk === params.id && typeof row.amount !== 'undefined')\n      });\n    },\n\n    renderEditCell(params) {\n      return /*#__PURE__*/_jsx(DataTableNumberField, {\n        params: params,\n        onChangeValue: onChangeEditRows,\n        rules: yup.number().nullable().required(t('validation_message.amount_required')).min(budgetAmountFormat.min, t('validation_message.amount_range')).max(budgetAmountFormat.max, t('validation_message.amount_range'))\n      });\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.numberColumn), {}, {\n    description: column_tooltips.used_in_rfq,\n    field: 'used_in_rfq',\n    headerName: 'Used In RFQ',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.numberColumn), {}, {\n    description: column_tooltips.left_in_rfq,\n    field: 'left_in_rfq',\n    headerName: 'Left In RFQ',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.numberColumn), {}, {\n    description: column_tooltips.used_in_order,\n    field: 'used_in_order',\n    headerName: 'Used In Order',\n    flex: 0.1\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.numberColumn), {}, {\n    description: column_tooltips.left_in_order,\n    field: 'left_in_order',\n    headerName: 'Left In Order',\n    flex: 0.1\n  })];\n\n  const Dialogs = /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(DialogBudgetCreateEdit, {}), /*#__PURE__*/_jsx(DialogBudgetImport, {}), /*#__PURE__*/_jsx(DialogRemindData, {})]\n  });\n\n  const Options = /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(AppAutocompleteStyled, {\n      width: 250,\n      label: \"Jobs\",\n      className: classes.controlAutocomplete,\n      options: jobList,\n      value: userJob,\n      renderOption: option => option.description,\n      primaryKeyOption: \"value\",\n      onChange: onChangeUserValue('job')\n    }), /*#__PURE__*/_jsx(AppAutocompleteStyled, {\n      disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.view),\n      width: 250,\n      label: \"Puco\",\n      className: classes.controlAutocomplete,\n      options: pucoList,\n      value: userPuco,\n      renderOption: option => option.description,\n      primaryKeyOption: \"value\",\n      onChange: onChangeUserValue('puco')\n    })]\n  });\n\n  const renderButtons = [{\n    label: t('common:button.new'),\n    disabled: Boolean(userJob.value) === false || !(permissions === null || permissions === void 0 ? void 0 : permissions.create) && !(permissions === null || permissions === void 0 ? void 0 : permissions.import),\n    startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n    item: [{\n      label: t('button.create'),\n      onClick: onOpenCreateDialog,\n      disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create)\n    }, {\n      label: t('form.title.import'),\n      onClick: onOpenImportDialog,\n      disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.import)\n    }]\n  }, {\n    label: t('common:button.delete'),\n    disabled: selectedRows.length <= 0 || !(permissions === null || permissions === void 0 ? void 0 : permissions.delete),\n    startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n    onClick: onDeleteBudgets\n  }, {\n    label: t('common:button.save'),\n    disabled: editRows.length <= 0 || !(permissions === null || permissions === void 0 ? void 0 : permissions.edit),\n    startIcon: /*#__PURE__*/_jsx(SaveIcon, {}),\n    onClick: onSaveUpdateData\n  }, {\n    label: t('common:button.make_a_list'),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.make_a_list),\n    startIcon: /*#__PURE__*/_jsx(MakeAListIcon, {}),\n    onClick: onOpenMakeAList\n  }];\n\n  const bottomSection = /*#__PURE__*/_jsx(\"div\", {\n    style: {\n      height: 35,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsx(DataGrid, {\n      disableSelectionOnClick: true,\n      disableColumnMenu: true,\n      checkboxSelection: true,\n      hideFooter: true,\n      columns: columns,\n      headerHeight: 0,\n      rowHeight: 35,\n      getRowClassName: () => classes.totalBudgetRow,\n      rows: [budgetSum],\n      onCellDoubleClick: (_, event) => {\n        event.stopPropagation();\n      }\n    })\n  });\n\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: \"budget\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: initDataForList.wiki_page,\n    permissions: permissions,\n    searchProps: {\n      width: 300\n    },\n    buttons: renderButtons,\n    Dialogs: Dialogs,\n    Options: Options,\n    tableProps: {\n      columns\n    },\n    bottomSection: bottomSection,\n    tableHeight: TABLE_HEIGHT_BUDGET\n  });\n}\n\nexport const getServerSideProps = useAuthMiddleware(['common', 'budget', 'make_a_list', 'advanced_filter']);\nexport default BudgetPage;","map":null,"metadata":{},"sourceType":"module"}