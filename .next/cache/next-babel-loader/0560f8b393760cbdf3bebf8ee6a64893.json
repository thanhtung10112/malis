{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { GRID_CELL_EDIT_EXIT } from '@material-ui/data-grid';\nimport { FormControllerErrorMessage, AppNumberField } from '@/components';\nimport clsx from 'clsx';\nimport * as yup from 'yup';\nimport _ from 'lodash';\nimport useStyles from '../styles';\nimport { useForm, useController } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nvar DataTableTextField = function DataTableTextField(props) {\n  var classes = useStyles();\n\n  var className = props.className,\n      onChangeValue = props.onChangeValue,\n      params = props.params,\n      rules = props.rules,\n      type = props.type,\n      rest = _objectWithoutProperties(props, [\"className\", \"onChangeValue\", \"params\", \"rules\", \"type\"]);\n\n  var api = params.api,\n      id = params.id,\n      field = params.field,\n      value = params.value,\n      error = params.error;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      oldValue = _React$useState2[0],\n      setOldValue = _React$useState2[1];\n\n  var validationSchema = React.useMemo(function () {\n    if (_.isNil(rules)) {\n      return yup.object({\n        name: yup.string().nullable()\n      });\n    }\n\n    return yup.object({\n      name: rules\n    });\n  }, [rules]);\n  var form = useForm({\n    defaultValues: {\n      name: value\n    },\n    mode: 'onChange',\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  });\n  var watchValue = form.watch('name', null);\n\n  var _useController = useController({\n    name: 'name',\n    control: form.control\n  }),\n      _useController$field = _useController.field,\n      onChangeControl = _useController$field.onChange,\n      valueControl = _useController$field.value,\n      invalid = _useController.meta.invalid;\n\n  React.useEffect(function () {\n    setOldValue(value);\n  }, []);\n  React.useEffect(function () {\n    api.setEditCellProps({\n      id: id,\n      field: field,\n      props: {\n        value: valueControl,\n        error: Boolean(invalid)\n      }\n    });\n  }, [valueControl, invalid, api, field, id, error]);\n  React.useEffect(function () {\n    return api.subscribeEvent(GRID_CELL_EDIT_EXIT, function () {\n      if (!error && String(oldValue) !== String(watchValue)) {\n        onChangeValue(id, watchValue, field);\n      }\n    });\n  }, [api, watchValue, error]);\n  return /*#__PURE__*/_jsx(FormControllerErrorMessage, {\n    open: Boolean(invalid),\n    title: invalid === null || invalid === void 0 ? void 0 : invalid.message,\n    children: /*#__PURE__*/_jsx(AppNumberField, _objectSpread(_objectSpread({}, rest), {}, {\n      value: valueControl,\n      autoFocus: true,\n      className: clsx(className, classes.root, invalid && classes.textFieldError),\n      name: \"name\",\n      onChange: function onChange(_ref) {\n        var floatValue = _ref.floatValue;\n        onChangeControl(floatValue);\n      }\n    }))\n  });\n};\n\nDataTableTextField.defaultProps = {\n  type: 'text'\n};\nexport default DataTableTextField;","map":null,"metadata":{},"sourceType":"module"}