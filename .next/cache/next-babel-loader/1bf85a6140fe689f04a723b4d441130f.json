{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Link } from '@material-ui/core';\nimport { DialogDrawingCreateEdit, AppLayout, CreateIcon, DeleteIcon, MakeAListIcon, DrawingTreeView, ExcludeIcon, CadIcon, SearchPageIcon, ContractIcon, ViewEditionIcon, CopyIcon, EditIcon, useConfirm, AppAutocompleteStyled, DialogPart, DialogMain } from '@/components';\nimport { useMemo, useEffect, useState } from 'react';\nimport { useTranslation } from 'next-i18next';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useStyles from '@/styles/page/layout';\nimport { drawingStore, commonStore } from '@/store/reducers';\nimport * as columnProperties from '@/utils/columnProperties';\nimport immer from 'immer';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\n\nfunction DrawingsPage() {\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation('drawing'),\n      t = _useTranslation.t;\n\n  var _useConfirm = useConfirm(),\n      confirm = _useConfirm.confirm;\n\n  var _useState = useState({\n    open: false,\n    content: ''\n  }),\n      fileTypeDialog = _useState[0],\n      setFileTypeDialog = _useState[1];\n\n  var dispatch = useDispatch();\n  var permissions = useSelector(drawingStore.selectPermissions);\n  var selectedRows = useSelector(commonStore.selectSelectedRows);\n  var userJob = useSelector(commonStore.selectUserValueJob);\n  var currentLang = useSelector(commonStore.selectCurrentLanguage);\n\n  var _useSelector = useSelector(drawingStore.selectInitDataForList),\n      jobOptions = _useSelector.jobs,\n      column_tooltips = _useSelector.column_tooltips,\n      wiki_page = _useSelector.wiki_page;\n\n  useEffect(function () {\n    return function () {\n      return dispatch(commonStore.actions.resetUserValue());\n    };\n  }, []);\n  var isAllJob = useMemo(function () {\n    return userJob.value < 0;\n  }, [userJob]);\n  var breadcrumbData = useMemo(function () {\n    return [{\n      label: 'Home',\n      href: '/'\n    }, {\n      label: 'Drawings',\n      href: '/drawings'\n    }, {\n      label: 'Drawings Management',\n      href: '/drawings'\n    }];\n  }, []);\n\n  var handleOpenFileType = function handleOpenFileType(windowPath) {\n    return function (event) {\n      event.preventDefault();\n      setFileTypeDialog({\n        open: true,\n        content: windowPath\n      });\n    };\n  };\n\n  var handleCloseFileTypeDialog = function handleCloseFileTypeDialog() {\n    setFileTypeDialog(function (currentState) {\n      return immer(currentState, function (draft) {\n        draft.open = false;\n      });\n    });\n  };\n\n  var columns = [_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    description: column_tooltips.edit,\n    field: 'id',\n    headerName: 'Edit',\n    renderCell: function renderCell(params) {\n      return /*#__PURE__*/_jsx(EditIcon, {\n        onClick: handleOpenUpdateDialog(params.id)\n      });\n    }\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    description: column_tooltips.copy,\n    field: 'copy',\n    headerName: 'Copy',\n    valueGetter: function valueGetter(params) {\n      return params.id;\n    },\n    renderCell: function renderCell() {\n      return /*#__PURE__*/_jsx(CopyIcon, {});\n    }\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips.drawing_id,\n    field: 'drawing_id',\n    headerName: 'Job Drawing',\n    width: 150\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.revision,\n    field: 'revision',\n    headerName: 'Rev',\n    width: 150\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.descriptionsColumn(currentLang)), {}, {\n    description: column_tooltips.descriptions,\n    flex: 0.3\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.raw_drawing_format,\n    field: 'raw_drawing_format',\n    headerName: 'Format',\n    width: 100\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.raw_drawing_purpose,\n    field: 'raw_drawing_purpose',\n    headerName: 'Purpose',\n    width: 100\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.part_id,\n    field: 'number_of_parts',\n    headerName: '# Parts',\n    width: 100\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.tag_id,\n    field: 'number_of_tags',\n    headerName: '# Tags',\n    width: 100\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.spec_id,\n    field: 'number_of_specs',\n    headerName: '# Specs',\n    width: 100\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.raw_file_prefix,\n    field: 'raw_file_prefix',\n    headerName: 'File Prefix',\n    width: 100\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips.raw_file_type,\n    field: 'raw_file_type',\n    headerName: 'File Type',\n    width: 100,\n    renderCell: function renderCell(params) {\n      var windows_path = params.row.windows_path;\n      return /*#__PURE__*/_jsx(Link, {\n        href: windows_path,\n        onClick: handleOpenFileType(windows_path),\n        children: params.value\n      });\n    }\n  })];\n\n  var handleOpenCreateDialog = function handleOpenCreateDialog() {\n    dispatch(drawingStore.sagaOpenCreateDialog());\n  };\n\n  var handleOpenUpdateDialog = function handleOpenUpdateDialog(id) {\n    return function () {\n      dispatch(drawingStore.sagaOpenUpdateDialog(id));\n    };\n  };\n\n  var handleChangeUserJob = function handleChangeUserJob(event, optionValue) {\n    dispatch(drawingStore.sagaChangeUserJob(optionValue));\n  };\n\n  var handleRemoveDrawings = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var description, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              description = getMessageConfirm(t, 'drawing', selectedRows, 'delete');\n              _context.next = 3;\n              return confirm({\n                description: description\n              });\n\n            case 3:\n              result = _context.sent;\n\n              if (result === 'OK') {\n                dispatch(commonStore.sagaExecuteOperation({\n                  entity: 'drawing',\n                  operationList: selectedRows,\n                  operation: 'delete'\n                }));\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleRemoveDrawings() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var renderButtons = [{\n    label: t('common:button.new'),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.view) || isAllJob || !(userJob === null || userJob === void 0 ? void 0 : userJob.value),\n    startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n    item: [{\n      label: 'Create New Drawing',\n      onClick: handleOpenCreateDialog\n    }, {\n      label: 'Copy Drawing',\n      disabled: true\n    }, {\n      label: 'Import Drawing',\n      disabled: true\n    }, {\n      label: 'Import Drawing Titles',\n      disabled: true\n    }]\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n    onClick: handleRemoveDrawings,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions[\"delete\"]) || selectedRows.length === 0 || isAllJob\n  }, {\n    label: 'Exclude',\n    startIcon: /*#__PURE__*/_jsx(ExcludeIcon, {}),\n    disabled: isAllJob\n  }, {\n    label: 'Export to CAD',\n    startIcon: /*#__PURE__*/_jsx(CadIcon, {}),\n    disabled: isAllJob\n  }, {\n    label: t('common:button.make_a_list'),\n    startIcon: /*#__PURE__*/_jsx(MakeAListIcon, {}),\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.make_a_list)\n  }, {\n    label: 'Parents search',\n    startIcon: /*#__PURE__*/_jsx(SearchPageIcon, {}),\n    disabled: isAllJob\n  }, {\n    label: 'View contract item',\n    startIcon: /*#__PURE__*/_jsx(ContractIcon, {}),\n    disabled: isAllJob\n  }, {\n    label: 'View edition',\n    startIcon: /*#__PURE__*/_jsx(ViewEditionIcon, {}),\n    disabled: isAllJob\n  }];\n\n  var Options = /*#__PURE__*/_jsx(AppAutocompleteStyled, {\n    width: 250,\n    primaryKeyOption: \"value\",\n    label: \"Jobs\",\n    className: classes.controlAutocomplete,\n    options: jobOptions,\n    value: userJob,\n    renderOption: function renderOption(option) {\n      return option.description;\n    },\n    onChange: handleChangeUserJob\n  });\n\n  var Dialogs = /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(DialogDrawingCreateEdit, {}), /*#__PURE__*/_jsx(DialogPart, {}), /*#__PURE__*/_jsx(DialogMain, {\n      open: fileTypeDialog.open,\n      title: \"Infomation\",\n      description: fileTypeDialog.content,\n      onClose: handleCloseFileTypeDialog\n    })]\n  });\n\n  var layoutLeftSection = {\n    Component: /*#__PURE__*/_jsx(DrawingTreeView, {}),\n    breakPoint: {\n      xs: 2\n    },\n    hide: isAllJob,\n    style: {\n      height: '100%',\n      overflowY: 'auto'\n    }\n  };\n  var tableSection = {\n    breakPoint: {\n      xs: isAllJob ? 12 : 10\n    }\n  };\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: \"drawing\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: wiki_page,\n    permissions: permissions,\n    searchProps: {\n      width: 300\n    },\n    buttons: renderButtons,\n    Dialogs: Dialogs,\n    Options: Options,\n    leftSection: layoutLeftSection,\n    tableSection: tableSection,\n    tableProps: {\n      columns: columns,\n      onCellClick: function onCellClick(params, event) {\n        if (['raw_file_type', 'id'].includes(params.field)) {\n          event.stopPropagation();\n        }\n      }\n    }\n  });\n}\n\nexport var __N_SSP = true;\nexport default DrawingsPage;","map":null,"metadata":{},"sourceType":"module"}