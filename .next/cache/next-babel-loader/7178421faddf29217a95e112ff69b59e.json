{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport const name = 'equivalence';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nexport const dialogState = {\n  open: false,\n  loading: false\n};\nexport const equivalenceDetail = {\n  equiv_id: null,\n  description: '',\n  equiv_type: null,\n  image: '',\n  standards: []\n};\nexport const initialState = {\n  equivalenceType: '',\n  dialogState,\n  dataList: [],\n  initDataForList: {\n    permissions: {\n      manufacturing_standard: null,\n      material_standard: null\n    },\n    wiki_page: {\n      manufacturing_standard: '',\n      material_standard: ''\n    },\n    column_tooltips: {\n      manufacturing_standard: {},\n      material_standard: {}\n    }\n  },\n  initDataForCE: {\n    parameters: {\n      PLNO: []\n    },\n    next_code: 0,\n    wiki_page: ''\n  },\n  detail: equivalenceDetail\n};\nconst equivalenceSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setEquivalenceType(state, {\n      payload\n    }) {\n      state.equivalenceType = payload;\n    },\n\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    resetDetail(state) {\n      state.detail = _objectSpread({}, equivalenceDetail);\n    },\n\n    setNextCode(state, {\n      payload\n    }) {\n      state.initDataForCE.next_code = payload;\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n}); // Actions\n\nexport const {\n  actions\n} = equivalenceSlice; // Saga actions\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaUpdate = createAction(`${name}/${actionTypes.UPDATE}`);\nexport const sagaGetNextCode = createAction(`${name}/${actionTypes.GET_NEXT_CODE}`); // Selector\n\nexport const selectState = state => state[name];\nexport const selectEquivalenceType = createSelector(selectState, state => state.equivalenceType);\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport const selectDetail = createSelector(selectState, state => state.detail);\nexport const selectPermissions = createSelector(selectState, state => {\n  const {\n    initDataForList,\n    equivalenceType\n  } = state;\n\n  if (!equivalenceType) {\n    return null;\n  }\n\n  return initDataForList.permissions[equivalenceType];\n});\nexport const selectInitDataForCE = createSelector(selectState, state => state.initDataForCE);\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport default equivalenceSlice;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/reducers/equivalence.reducer.ts"],"names":["createSlice","createAction","createSelector","actionTypes","name","resetState","RESET_STATE","dialogState","open","loading","equivalenceDetail","equiv_id","description","equiv_type","image","standards","initialState","equivalenceType","dataList","initDataForList","permissions","manufacturing_standard","material_standard","wiki_page","column_tooltips","initDataForCE","parameters","PLNO","next_code","detail","equivalenceSlice","reducers","setEquivalenceType","state","payload","setDialogState","setDialogStateOpen","setDialogStateLoading","setDataList","setDetail","setInitDataForCE","setInitDataForList","resetDetail","setNextCode","extraReducers","type","actions","sagaGetList","GET_LIST","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaCloseDialog","CLOSE_DIALOG","sagaCreate","CREATE","sagaUpdate","UPDATE","sagaGetNextCode","GET_NEXT_CODE","selectState","selectEquivalenceType","selectDialogState","selectDataList","selectDetail","selectPermissions","selectInitDataForCE","selectInitDataForList"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction, createAction, createSelector } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\n\nimport type { RootReducerType } from './rootReducer'\nimport type {\n  EquivalenceInitDataForList,\n  EquivalenceDetail,\n  EquivalenceInitDataForCE,\n  EquivalenceType\n} from '@/types/Equivalence'\n\nexport const name = 'equivalence'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const dialogState = {\n  open: false,\n  loading: false\n}\n\nexport const equivalenceDetail = {\n  equiv_id: null,\n  description: '',\n  equiv_type: null,\n  image: '',\n  standards: []\n} as EquivalenceDetail\n\nexport const initialState = {\n  equivalenceType: '' as EquivalenceType,\n  dialogState,\n  dataList: [],\n  initDataForList: {\n    permissions: {\n      manufacturing_standard: null,\n      material_standard: null\n    },\n    wiki_page: {\n      manufacturing_standard: '',\n      material_standard: ''\n    },\n    column_tooltips: {\n      manufacturing_standard: {},\n      material_standard: {}\n    }\n  } as EquivalenceInitDataForList,\n  initDataForCE: {\n    parameters: {\n      PLNO: []\n    },\n    next_code: 0,\n    wiki_page: ''\n  } as EquivalenceInitDataForCE,\n  detail: equivalenceDetail\n}\n\nconst equivalenceSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setEquivalenceType(state, { payload }: PayloadAction<EquivalenceType>) {\n      state.equivalenceType = payload\n    },\n    setDialogState(state, { payload }: PayloadAction<Partial<typeof initialState.dialogState>>) {\n      state.dialogState = {\n        ...state.dialogState,\n        ...payload\n      }\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setDataList(state, { payload }: PayloadAction<EquivalenceDetail[]>) {\n      state.dataList = payload\n    },\n    setDetail(state, { payload }: PayloadAction<Partial<EquivalenceDetail>>) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<EquivalenceInitDataForCE>) {\n      state.initDataForCE = payload\n    },\n    setInitDataForList(state, { payload }: PayloadAction<EquivalenceInitDataForList>) {\n      state.initDataForList = payload\n    },\n    resetDetail(state) {\n      state.detail = { ...equivalenceDetail }\n    },\n    setNextCode(state, { payload }: PayloadAction<number>) {\n      state.initDataForCE.next_code = payload\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\n// Actions\nexport const { actions } = equivalenceSlice\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaCreate = createAction<FormData>(`${name}/${actionTypes.CREATE}`)\nexport const sagaUpdate = createAction<{ id: number; formData: FormData }>(`${name}/${actionTypes.UPDATE}`)\nexport const sagaGetNextCode = createAction<EquivalenceDetail>(`${name}/${actionTypes.GET_NEXT_CODE}`)\n\n// Selector\nexport const selectState = (state: RootReducerType) => state[name]\nexport const selectEquivalenceType = createSelector(selectState, (state) => state.equivalenceType)\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\nexport const selectDetail = createSelector(selectState, (state) => state.detail)\nexport const selectPermissions = createSelector(selectState, (state) => {\n  const { initDataForList, equivalenceType } = state\n  if (!equivalenceType) {\n    return null\n  }\n  return initDataForList.permissions[equivalenceType]\n})\nexport const selectInitDataForCE = createSelector(selectState, (state) => state.initDataForCE)\n\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\n\nexport default equivalenceSlice\n"]},"metadata":{},"sourceType":"module"}