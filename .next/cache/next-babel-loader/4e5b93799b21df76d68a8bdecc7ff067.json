{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport var name = 'equivalence';\nexport var resetState = createAction(\"\".concat(name, \"/\").concat(actionTypes.RESET_STATE));\nexport var dialogState = {\n  open: false,\n  loading: false\n};\nexport var equivalenceDetail = {\n  equiv_id: null,\n  description: '',\n  equiv_type: null,\n  image: '',\n  standards: []\n};\nexport var initialState = {\n  equivalenceType: '',\n  dialogState: dialogState,\n  dataList: [],\n  initDataForList: {\n    permissions: {\n      manufacturing_standard: null,\n      material_standard: null\n    },\n    wiki_page: {\n      manufacturing_standard: '',\n      material_standard: ''\n    },\n    column_tooltips: {\n      manufacturing_standard: {},\n      material_standard: {}\n    }\n  },\n  initDataForCE: {\n    parameters: {\n      PLNO: []\n    },\n    next_code: 0,\n    wiki_page: ''\n  },\n  detail: equivalenceDetail\n};\nvar equivalenceSlice = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    setEquivalenceType: function setEquivalenceType(state, _ref) {\n      var payload = _ref.payload;\n      state.equivalenceType = payload;\n    },\n    setDialogState: function setDialogState(state, _ref2) {\n      var payload = _ref2.payload;\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n    setDialogStateOpen: function setDialogStateOpen(state, _ref3) {\n      var payload = _ref3.payload;\n      state.dialogState.open = payload;\n    },\n    setDialogStateLoading: function setDialogStateLoading(state, _ref4) {\n      var payload = _ref4.payload;\n      state.dialogState.loading = payload;\n    },\n    setDataList: function setDataList(state, _ref5) {\n      var payload = _ref5.payload;\n      state.dataList = payload;\n    },\n    setDetail: function setDetail(state, _ref6) {\n      var payload = _ref6.payload;\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n    setInitDataForCE: function setInitDataForCE(state, _ref7) {\n      var payload = _ref7.payload;\n      state.initDataForCE = payload;\n    },\n    setInitDataForList: function setInitDataForList(state, _ref8) {\n      var payload = _ref8.payload;\n      state.initDataForList = payload;\n    },\n    resetDetail: function resetDetail(state) {\n      state.detail = _objectSpread({}, equivalenceDetail);\n    },\n    setNextCode: function setNextCode(state, _ref9) {\n      var payload = _ref9.payload;\n      state.initDataForCE.next_code = payload;\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n}); // Actions\n\nvar actions = equivalenceSlice.actions; // Saga actions\n\nexport { actions };\nexport var sagaGetList = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_LIST));\nexport var sagaOpenCreateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_CREATE_DIALOG));\nexport var sagaOpenUpdateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_UPDATE_DIALOG));\nexport var sagaCloseDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.CLOSE_DIALOG));\nexport var sagaCreate = createAction(\"\".concat(name, \"/\").concat(actionTypes.CREATE));\nexport var sagaUpdate = createAction(\"\".concat(name, \"/\").concat(actionTypes.UPDATE));\nexport var sagaGetNextCode = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_NEXT_CODE)); // Selector\n\nexport var selectState = function selectState(state) {\n  return state[name];\n};\nexport var selectEquivalenceType = createSelector(selectState, function (state) {\n  return state.equivalenceType;\n});\nexport var selectDialogState = createSelector(selectState, function (state) {\n  return state.dialogState;\n});\nexport var selectDataList = createSelector(selectState, function (state) {\n  return state.dataList;\n});\nexport var selectDetail = createSelector(selectState, function (state) {\n  return state.detail;\n});\nexport var selectPermissions = createSelector(selectState, function (state) {\n  var initDataForList = state.initDataForList,\n      equivalenceType = state.equivalenceType;\n\n  if (!equivalenceType) {\n    return null;\n  }\n\n  return initDataForList.permissions[equivalenceType];\n});\nexport var selectInitDataForCE = createSelector(selectState, function (state) {\n  return state.initDataForCE;\n});\nexport var selectInitDataForList = createSelector(selectState, function (state) {\n  return state.initDataForList;\n});\nexport default equivalenceSlice;","map":null,"metadata":{},"sourceType":"module"}