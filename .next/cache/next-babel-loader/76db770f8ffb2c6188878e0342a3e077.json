{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport HttpService from '@/helper/HttpService';\nimport { singular } from 'pluralize';\n\nfunction useGetData(entity, query = {}) {\n  const http = useMemo(() => new HttpService(entity), [entity]);\n\n  const getInitDataForCE = async (params = {}) => {\n    try {\n      const response = await http.getInitDataForCE(_objectSpread(_objectSpread({}, query), params));\n      return response;\n    } catch (error) {\n      console.error('error', '>>>', error);\n      return error;\n    }\n  };\n\n  const getGeneratedCode = async query => {\n    try {\n      const {\n        generated_code\n      } = await http.getGeneratedCode(query);\n      return generated_code;\n    } catch (error) {\n      console.error('error', '>>>', error);\n      return error;\n    }\n  };\n\n  const getDetail = async id => {\n    try {\n      const response = await http.getDetail(id);\n      const singularEntity = singular(entity);\n      return response[singularEntity];\n    } catch (error) {\n      console.error('error', '>>>', error);\n      return error;\n    }\n  };\n\n  const postCreate = async data => {\n    try {\n      const response = await http.create(data);\n      return response;\n    } catch (error) {\n      console.error('error', '>>>', error);\n      return error;\n    }\n  };\n\n  const putUpdate = async (id, data) => {\n    try {\n      const response = await http.update(id, data);\n      return response;\n    } catch (error) {\n      console.error('error', '>>>', error);\n      return error;\n    }\n  };\n\n  return {\n    getInitDataForCE,\n    getDetail,\n    getGeneratedCode,\n    postCreate,\n    putUpdate\n  };\n}\n\nexport default useGetData;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/hooks/useGetData.ts"],"names":["useMemo","HttpService","singular","useGetData","entity","query","http","getInitDataForCE","params","response","error","console","getGeneratedCode","generated_code","getDetail","id","singularEntity","postCreate","data","create","putUpdate","update"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,QAAT,QAAyB,WAAzB;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAAoCC,KAAK,GAAG,EAA5C,EAAgD;AAC9C,QAAMC,IAAI,GAAGN,OAAO,CAAC,MAAM,IAAIC,WAAJ,CAAgBG,MAAhB,CAAP,EAAgC,CAACA,MAAD,CAAhC,CAApB;;AAEA,QAAMG,gBAAgB,GAAG,OAAOC,MAAM,GAAG,EAAhB,KAAuB;AAC9C,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMH,IAAI,CAACC,gBAAL,iCAA2BF,KAA3B,GAAqCG,MAArC,EAAvB;AACA,aAAOC,QAAP;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuB,KAAvB,EAA8BA,KAA9B;AACA,aAAOA,KAAP;AACD;AACF,GARD;;AAUA,QAAME,gBAAgB,GAAG,MAAOP,KAAP,IAAiB;AACxC,QAAI;AACF,YAAM;AAAEQ,QAAAA;AAAF,UAAqB,MAAMP,IAAI,CAACM,gBAAL,CAAsBP,KAAtB,CAAjC;AACA,aAAOQ,cAAP;AACD,KAHD,CAGE,OAAOH,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuB,KAAvB,EAA8BA,KAA9B;AACA,aAAOA,KAAP;AACD;AACF,GARD;;AAUA,QAAMI,SAAS,GAAG,MAAOC,EAAP,IAAsB;AACtC,QAAI;AACF,YAAMN,QAAQ,GAAG,MAAMH,IAAI,CAACQ,SAAL,CAAeC,EAAf,CAAvB;AACA,YAAMC,cAAc,GAAGd,QAAQ,CAACE,MAAD,CAA/B;AACA,aAAOK,QAAQ,CAACO,cAAD,CAAf;AACD,KAJD,CAIE,OAAON,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuB,KAAvB,EAA8BA,KAA9B;AACA,aAAOA,KAAP;AACD;AACF,GATD;;AAWA,QAAMO,UAAU,GAAG,MAAOC,IAAP,IAAgB;AACjC,QAAI;AACF,YAAMT,QAAQ,GAAG,MAAMH,IAAI,CAACa,MAAL,CAAYD,IAAZ,CAAvB;AACA,aAAOT,QAAP;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuB,KAAvB,EAA8BA,KAA9B;AACA,aAAOA,KAAP;AACD;AACF,GARD;;AAUA,QAAMU,SAAS,GAAG,OAAOL,EAAP,EAAmBG,IAAnB,KAA4B;AAC5C,QAAI;AACF,YAAMT,QAAQ,GAAG,MAAMH,IAAI,CAACe,MAAL,CAAYN,EAAZ,EAAgBG,IAAhB,CAAvB;AACA,aAAOT,QAAP;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuB,KAAvB,EAA8BA,KAA9B;AACA,aAAOA,KAAP;AACD;AACF,GARD;;AAUA,SAAO;AAAEH,IAAAA,gBAAF;AAAoBO,IAAAA,SAApB;AAA+BF,IAAAA,gBAA/B;AAAiDK,IAAAA,UAAjD;AAA6DG,IAAAA;AAA7D,GAAP;AACD;;AAED,eAAejB,UAAf","sourcesContent":["import { useMemo } from 'react'\n\nimport HttpService from '@/helper/HttpService'\nimport { singular } from 'pluralize'\n\nfunction useGetData(entity: string, query = {}) {\n  const http = useMemo(() => new HttpService(entity), [entity])\n\n  const getInitDataForCE = async (params = {}) => {\n    try {\n      const response = await http.getInitDataForCE({ ...query, ...params })\n      return response\n    } catch (error) {\n      console.error('error', '>>>', error)\n      return error\n    }\n  }\n\n  const getGeneratedCode = async (query) => {\n    try {\n      const { generated_code } = await http.getGeneratedCode(query)\n      return generated_code\n    } catch (error) {\n      console.error('error', '>>>', error)\n      return error\n    }\n  }\n\n  const getDetail = async (id: number) => {\n    try {\n      const response = await http.getDetail(id)\n      const singularEntity = singular(entity)\n      return response[singularEntity]\n    } catch (error) {\n      console.error('error', '>>>', error)\n      return error\n    }\n  }\n\n  const postCreate = async (data) => {\n    try {\n      const response = await http.create(data)\n      return response\n    } catch (error) {\n      console.error('error', '>>>', error)\n      return error\n    }\n  }\n\n  const putUpdate = async (id: number, data) => {\n    try {\n      const response = await http.update(id, data)\n      return response\n    } catch (error) {\n      console.error('error', '>>>', error)\n      return error\n    }\n  }\n\n  return { getInitDataForCE, getDetail, getGeneratedCode, postCreate, putUpdate }\n}\n\nexport default useGetData\n"]},"metadata":{},"sourceType":"module"}