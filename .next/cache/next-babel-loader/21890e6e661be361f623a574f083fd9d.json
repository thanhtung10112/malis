{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { TreeView } from '@material-ui/lab';\nimport ConditionGroup from './ConditionGroup';\n\nfunction ConditionTree(_ref) {\n  var columnOptions = _ref.columnOptions,\n      comparatorOptions = _ref.comparatorOptions,\n      conjunctionOptions = _ref.conjunctionOptions,\n      data = _ref.data,\n      disabled = _ref.disabled,\n      _ref$maxLevel = _ref.maxLevel,\n      maxLevel = _ref$maxLevel === void 0 ? 2 : _ref$maxLevel;\n\n  // Trick for forcing rerender\n  var _useState = useState(0),\n      setValue = _useState[1];\n\n  var forceRerender = function forceRerender() {\n    setValue(function (value) {\n      return value + 1;\n    });\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(TreeView, {\n      expanded: ['group'],\n      disableSelection: true,\n      children: /*#__PURE__*/_jsx(ConditionGroup, {\n        level: 0,\n        groupData: data,\n        parent: null,\n        forceParentRerender: forceRerender,\n        columnOptions: columnOptions,\n        comparatorOptions: comparatorOptions,\n        conjunctionOptions: conjunctionOptions,\n        disabled: disabled,\n        maxLevel: maxLevel\n      })\n    })\n  });\n}\n\nexport default ConditionTree;","map":null,"metadata":{},"sourceType":"module"}