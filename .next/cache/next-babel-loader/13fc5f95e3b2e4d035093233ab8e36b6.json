{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useCallback, useState, useEffect } from 'react';\nimport { Grid, Paper, RadioGroup, FormControlLabel, Radio } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { DialogMain, DataTable, AppAutocompleteAsync } from '@/components';\nimport { defaultProperties } from '@/utils/columnProperties';\nimport HttpService from '@/helper/HttpService';\nimport _ from 'lodash';\n\nvar DialogCopyDesc = function DialogCopyDesc(props) {\n  var open = props.open,\n      onClose = props.onClose,\n      compName = props.compName,\n      entity = props.entity,\n      descriptionValues = props.descriptionValues,\n      onChange = props.onChange,\n      checkboxesToSelect = props.checkboxesToSelect,\n      autocompleteProps = props.autocompleteProps;\n  var httpService = new HttpService('');\n\n  var _useState = useState([]),\n      selectedRows = _useState[0],\n      setSelectedRows = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      descriptionList = _useState3[0],\n      setDescriptionList = _useState3[1];\n\n  var _useState4 = useState({\n    entity: '',\n    compName: ''\n  }),\n      paramApi = _useState4[0],\n      setParamApi = _useState4[1];\n\n  var _useState5 = useState([]),\n      defaultOptions = _useState5[0],\n      setDefaultOptions = _useState5[1];\n\n  var isContainCheckboxes = checkboxesToSelect.length > 0;\n  useEffect(function () {\n    if (isContainCheckboxes) {\n      var defaultCheckbox = _.find(checkboxesToSelect, {\n        \"default\": true\n      });\n\n      defaultCheckbox && setParamApi({\n        entity: defaultCheckbox.entity,\n        compName: defaultCheckbox.value\n      });\n    } else {\n      setParamApi({\n        entity: entity,\n        compName: compName\n      });\n    }\n  }, [entity, compName, checkboxesToSelect, isContainCheckboxes]);\n\n  var fecthDescs = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n      var data, ids;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n              _context.next = 4;\n              return httpService.get(\"\".concat(paramApi.entity, \"/\").concat(id, \"/descriptions\"));\n\n            case 4:\n              data = _context.sent;\n              ids = data.descriptions.map(function (des) {\n                return des.id;\n              });\n              setDescriptionList(data.descriptions);\n              setSelectedRows(ids);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('error', '>>>', _context.t0);\n\n            case 13:\n              setLoading(false);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n\n    return function fecthDescs(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSelect = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event, option) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setSelectedRows([]);\n              _context2.next = 3;\n              return fecthDescs(option.value);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSelect(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleSelectRows = function handleSelectRows(_ref3) {\n    var selectionModel = _ref3.selectionModel;\n    setSelectedRows(selectionModel);\n  };\n\n  var handleCopyDescs = function handleCopyDescs() {\n    var descList = descriptionList.filter(function (desc) {\n      return selectedRows.includes(desc.id);\n    }).map(function (_ref4) {\n      var description = _ref4.description,\n          id = _ref4.id;\n      return {\n        language_id: id,\n        description: description\n      };\n    });\n\n    var mergeDescription = _.uniqBy([].concat(_toConsumableArray(descList), _toConsumableArray(descriptionValues)), 'language_id');\n\n    onChange(mergeDescription);\n    handleCloseDialog();\n  };\n\n  var handleCloseDialog = function handleCloseDialog() {\n    setDescriptionList([]);\n    setSelectedRows([]);\n    onClose();\n  };\n\n  var handleSelectModule = function handleSelectModule(_ref5) {\n    var entity = _ref5.entity,\n        value = _ref5.value;\n    return function () {\n      setParamApi({\n        entity: entity,\n        compName: value\n      });\n      setDefaultOptions([]);\n    };\n  };\n\n  var renderCheckboxesSelect = useCallback(function () {\n    return checkboxesToSelect.map(function (checkbox) {\n      return /*#__PURE__*/_jsx(FormControlLabel, {\n        value: checkbox.value,\n        control: /*#__PURE__*/_jsx(Radio, {\n          color: \"primary\",\n          onChange: handleSelectModule(checkbox)\n        }),\n        label: checkbox.label\n      }, checkbox.value);\n    });\n  }, [checkboxesToSelect, handleSelectModule]);\n  return /*#__PURE__*/_jsx(DialogMain, {\n    open: open,\n    title: \"Copy descriptions\",\n    fullWidth: true,\n    maxWidth: \"sm\",\n    loading: loading,\n    onOk: handleCopyDescs,\n    onClose: handleCloseDialog,\n    okText: \"Save\",\n    okButtonProps: {\n      disabled: selectedRows.length === 0 || loading\n    },\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      style: {\n        marginTop: 4\n      },\n      children: [/*#__PURE__*/_jsx(When, {\n        condition: isContainCheckboxes,\n        children: /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(RadioGroup, {\n            row: true,\n            \"aria-label\": \"position\",\n            name: \"position\",\n            defaultValue: \"top\",\n            value: paramApi.compName,\n            children: renderCheckboxesSelect()\n          })\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(AppAutocompleteAsync, _objectSpread({\n          disabled: !paramApi.compName,\n          compName: paramApi.compName,\n          onChange: handleSelect,\n          label: \"Copy descriptions from\",\n          defaultOptions: defaultOptions\n        }, autocompleteProps))\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(Paper, {\n          children: /*#__PURE__*/_jsx(DataTable, {\n            hideFooter: true,\n            tableHeight: 275,\n            rows: descriptionList,\n            checkboxSelection: true,\n            selectionModel: selectedRows,\n            onSelectionModelChange: handleSelectRows,\n            columns: [_objectSpread(_objectSpread({}, defaultProperties), {}, {\n              field: 'language_desc',\n              headerName: 'Language',\n              width: 130\n            }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n              field: 'description',\n              headerName: 'Description',\n              flex: 0.7\n            })]\n          })\n        })\n      })]\n    })\n  });\n};\n\nDialogCopyDesc.defaultProps = {\n  checkboxesToSelect: []\n};\nexport default DialogCopyDesc;","map":null,"metadata":{},"sourceType":"module"}