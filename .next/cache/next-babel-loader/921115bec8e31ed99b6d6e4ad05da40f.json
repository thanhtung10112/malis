{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '@/styles/page/layout';\nimport { useTranslation } from 'next-i18next';\nimport { AppLayout, EditIcon, DataTableCellExpand, CreateIcon, AppAutocompleteStyled, AppAutocompleteStyledAsync, DeleteIcon, useConfirm, DialogPart } from '@/components';\nimport { assemblyStore, commonStore, partStore } from '@/store/reducers';\nimport { defaultProperties, iconColumn, centerColumn, rightColumn, descriptionsColumn } from '@/utils/columnProperties';\nimport AppNumber from '@/helper/AppNumber';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nimport _ from 'lodash';\n\nvar AssembliesPage = function AssembliesPage() {\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation('assembly'),\n      t = _useTranslation.t;\n\n  var _useConfirm = useConfirm(),\n      confirm = _useConfirm.confirm;\n\n  var breadcrumbData = useMemo(function () {\n    return [{\n      label: 'Home',\n      href: '/'\n    }, {\n      label: 'Basic Options',\n      href: '/drawings'\n    }, {\n      label: 'Assemblies Management',\n      href: '/assemblies'\n    }];\n  }, []);\n  var dispatch = useDispatch();\n  var permissions = useSelector(assemblyStore.selectPermissions);\n\n  var _useSelector = useSelector(assemblyStore.selectInitDataForList),\n      column_tooltips = _useSelector.column_tooltips,\n      wiki_page = _useSelector.wiki_page,\n      initDataForList = _objectWithoutProperties(_useSelector, [\"column_tooltips\", \"wiki_page\"]);\n\n  var userJob = useSelector(commonStore.selectUserValueJob);\n  var userDrawing = useSelector(commonStore.selectUserValueDrawing);\n  var selectedRows = useSelector(commonStore.selectSelectedRows);\n  var currentLang = useSelector(commonStore.selectCurrentLanguage);\n  var dataList = useSelector(assemblyStore.selectDataList);\n  useEffect(function () {\n    return function () {\n      return dispatch(commonStore.actions.resetUserValue());\n    };\n  }, []);\n\n  var handleOpenCreateDialog = function handleOpenCreateDialog() {\n    dispatch(partStore.sagaOpenCreateDialog('assembly'));\n  };\n\n  var handleChangeUserJob = function handleChangeUserJob(event, optionValue) {\n    dispatch(assemblyStore.sagaChangeUserJob(optionValue));\n  };\n\n  var handleChangeUserDrawing = function handleChangeUserDrawing(event, optionValue) {\n    dispatch(assemblyStore.sagaChangeUserDrawing(optionValue));\n  };\n\n  var handleOpenUpdateDialog = function handleOpenUpdateDialog(id) {\n    return function () {\n      dispatch(partStore.sagaOpenUpdateDialog({\n        id: id,\n        entity: 'assembly'\n      }));\n    };\n  };\n\n  var handleDeleteAssemblies = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var description, result, parts;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              description = getMessageConfirm(t, 'assembly', selectedRows, 'delete');\n              _context.next = 3;\n              return confirm({\n                description: description\n              });\n\n            case 3:\n              result = _context.sent;\n\n              if (result === 'OK') {\n                parts = _.map(selectedRows, function (partId) {\n                  var _$find = _.find(dataList, {\n                    id: partId\n                  }),\n                      dpn = _$find.dpn,\n                      id = _$find.id;\n\n                  return {\n                    entity_id: dpn,\n                    id: id\n                  };\n                });\n                dispatch(assemblyStore.sagaRemove(parts));\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleDeleteAssemblies() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var columns = [_objectSpread(_objectSpread(_objectSpread({}, defaultProperties), iconColumn), {}, {\n    description: column_tooltips.edit,\n    field: 'id',\n    headerName: 'Edit',\n    renderCell: function renderCell(params) {\n      return /*#__PURE__*/_jsx(EditIcon, {\n        onClick: handleOpenUpdateDialog(params.value)\n      });\n    }\n  }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n    description: column_tooltips.dpn,\n    field: 'dpn',\n    headerName: 'Assembly #',\n    flex: 0.2\n  }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), descriptionsColumn(currentLang)), {}, {\n    description: column_tooltips.descriptions,\n    flex: 0.3\n  }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), rightColumn), {}, {\n    description: column_tooltips.mass,\n    headerName: 'Mass (kg)',\n    flex: 0.2,\n    field: 'mass',\n    renderCell: function renderCell(params) {\n      var value = AppNumber.format(params.value, {\n        precision: 4\n      });\n      return /*#__PURE__*/_jsx(DataTableCellExpand, {\n        value: value,\n        width: params.colDef.width\n      });\n    }\n  }), _objectSpread(_objectSpread(_objectSpread({}, defaultProperties), centerColumn), {}, {\n    description: column_tooltips.raw_unit,\n    field: 'raw_unit',\n    headerName: 'Unit'\n  })];\n  var buttonsPage = [{\n    label: t('common:button.new'),\n    startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n    onClick: handleOpenCreateDialog,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create) || userJob.value < 0 || !(userJob === null || userJob === void 0 ? void 0 : userJob.value)\n  }, {\n    label: t('common:button.delete'),\n    startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n    onClick: handleDeleteAssemblies,\n    disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions[\"delete\"]) || selectedRows.length === 0 || userJob.value < 0\n  }];\n\n  var Options = /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(AppAutocompleteStyled, {\n      className: classes.controlAutocomplete,\n      width: 200,\n      label: \"Jobs\",\n      options: initDataForList.jobs,\n      value: userJob,\n      renderOption: function renderOption(option) {\n        return option.description;\n      },\n      primaryKeyOption: \"value\",\n      onChange: handleChangeUserJob\n    }), /*#__PURE__*/_jsx(AppAutocompleteStyledAsync, {\n      disabled: !(userJob === null || userJob === void 0 ? void 0 : userJob.value),\n      width: 250,\n      label: \"Drawings\",\n      className: classes.controlAutocomplete,\n      compName: \"drawing_list\",\n      additionalData: {\n        limit_to_job: userJob.value,\n        include_all_drawings_option: true\n      },\n      onChange: handleChangeUserDrawing,\n      value: userDrawing,\n      defaultOptions: [commonStore.initialState.userValue.drawing]\n    })]\n  });\n\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: \"assembly\",\n    breadcrumbs: breadcrumbData,\n    wikiPage: wiki_page,\n    searchProps: {\n      width: 320\n    },\n    buttons: buttonsPage,\n    permissions: permissions,\n    tableProps: {\n      columns: columns\n    },\n    Dialogs: /*#__PURE__*/_jsx(DialogPart, {}),\n    Options: Options\n  });\n};\n\nexport var __N_SSP = true;\nexport default AssembliesPage;","map":null,"metadata":{},"sourceType":"module"}