{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Typography, Box } from '@material-ui/core';\nimport { ExpandMoreOutlined } from '@material-ui/icons';\nimport Popover from 'material-ui-popup-state/HoverPopover';\nimport useStyles from '../styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport { usePopupState, bindHover, bindPopover } from 'material-ui-popup-state/hooks';\nimport { useConfirm } from '@/components/Dialog/Common/Confirmation';\nimport clsx from 'clsx';\nimport { commonStore } from '@/store/reducers';\nimport { unsaveDialogOptions } from '@/utils/constant';\n\nfunction NavigationItem(props) {\n  var label = props.label,\n      links = props.links;\n  var router = useRouter();\n  var classes = useStyles();\n  var popupState = usePopupState({\n    variant: 'popover',\n    popupId: \"\".concat(label, \" - links\")\n  });\n\n  var _useConfirm = useConfirm(),\n      confirm = _useConfirm.confirm;\n\n  var dispatch = useDispatch();\n  var editRows = useSelector(commonStore.selectEditRows);\n  var entity = useSelector(commonStore.selectEntity);\n\n  var onRedirectPage = function onRedirectPage(href) {\n    return /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n                result = '';\n\n                if (!(editRows.length > 0)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 5;\n                return confirm(unsaveDialogOptions);\n\n              case 5:\n                result = _context.sent;\n\n              case 6:\n                if (result === '') {\n                  router.push(href);\n                } else if (result !== 'cancel') {\n                  dispatch(commonStore.sagaUpdateMultiple({\n                    entity: entity,\n                    href: href\n                  }));\n                }\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  };\n\n  var activeLink = links.some(function (link) {\n    return link.href === router.pathname;\n  });\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", _objectSpread(_objectSpread({\n      className: clsx(classes.navigationItem, _defineProperty({}, classes.active, activeLink))\n    }, bindHover(popupState)), {}, {\n      children: [/*#__PURE__*/_jsx(Typography, {\n        component: Box,\n        variant: \"body1\",\n        fontWeight: \"fontWeightMedium\",\n        className: classes.label,\n        children: label\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: classes.dropdownIcon,\n        children: /*#__PURE__*/_jsx(ExpandMoreOutlined, {})\n      })]\n    })), links && /*#__PURE__*/_jsx(Popover, _objectSpread(_objectSpread({}, bindPopover(popupState)), {}, {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      transformOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      disableRestoreFocus: true,\n      children: /*#__PURE__*/_jsx(\"ul\", {\n        className: classes.dropdownList,\n        children: links.map(function (link) {\n          return /*#__PURE__*/_jsx(\"li\", {\n            className: classes.dropdownItem,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              href: link.href,\n              onClick: onRedirectPage(link.href),\n              children: /*#__PURE__*/_jsx(Typography, {\n                variant: \"body1\",\n                component: \"div\",\n                children: /*#__PURE__*/_jsx(Box, {\n                  fontWeight: \"fontWeightMedium\",\n                  children: link.label\n                })\n              })\n            })\n          }, link.label + link.href);\n        })\n      })\n    }))]\n  });\n}\n\nexport default NavigationItem;","map":null,"metadata":{},"sourceType":"module"}