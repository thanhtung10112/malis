{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport { useForm } from 'react-hook-form';\nimport { userStore } from '@/store/reducers';\nimport { AppTabHistoryLog, DialogMain, FormControllerTabs, BtnHelp } from '@/components';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport _ from 'lodash';\nimport getValidationSchema from './validationSchema';\nimport TabGeneral from './TabGeneral';\nimport TabJobs from './TabJobs';\nimport TabGroups from './TabGroups';\n\nconst UserCreateEditDialog = () => {\n  const {\n    t\n  } = useTranslation('user');\n  const {\n    0: tab,\n    1: setTab\n  } = useState(0);\n  const dispatch = useDispatch();\n  const dialogState = useSelector(userStore.selectDialogState);\n  const userDetail = useSelector(userStore.selectDetail);\n  const permissions = useSelector(userStore.selectPermissions);\n  const {\n    wiki_page\n  } = useSelector(userStore.selectInitDataForCE);\n\n  const isCreating = _.isNil(userDetail.id);\n\n  const title = isCreating ? t('form.title.create_user') : t('form.title.update_user');\n  const validationSchema = useMemo(() => getValidationSchema(t, !isCreating), [isCreating]);\n  const userForm = useForm({\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  });\n  useEffect(() => {\n    userForm.reset(userDetail);\n    setTab(0);\n  }, [userDetail]);\n\n  const onChangeTab = (_, newValue) => {\n    setTab(newValue);\n  };\n\n  const onHandleSubmit = userForm.handleSubmit(formData => {\n    formData.groups = formData.groups.map(item => +item);\n    formData.job_access = formData.job_access.map(({\n      job_id,\n      note\n    }) => ({\n      job_id,\n      note: note || '' // server returns null but they do not allow send null to body req\n\n    }));\n\n    if (!formData.valid_from) {\n      formData.valid_from = null;\n    }\n\n    if (!formData.valid_until) {\n      formData.valid_until = null;\n    }\n\n    const payload = _.pick(formData, ['default_language', 'email', 'first_name', 'groups', 'job_access', 'last_name', 'puco', 'time_zone', 'user_abb', 'user_id', 'password', 'confirm_password', 'login_page', 'valid_from', 'valid_until']);\n\n    if (isCreating) {\n      dispatch(userStore.sagaCreate(payload));\n    } else {\n      dispatch(userStore.sagaUpdate({\n        id: formData.id,\n        formData: _.omit(payload, ['password', 'confirm_password', 'login_page'])\n      }));\n    }\n  });\n\n  const onCloseDialog = () => {\n    dispatch(userStore.sagaCloseDialog());\n    userForm.clearErrors();\n  };\n\n  const handleChangeHistoryLogs = data => {\n    dispatch(userStore.actions.setHistoryLogs(data));\n  };\n\n  const generalTab = {\n    label: 'General',\n    panel: /*#__PURE__*/_jsx(TabGeneral, {}),\n    errorKey: ['user_id', 'user_abb', 'first_name', 'last_name', 'password', 'confirm_password', 'email', 'time_zone', 'puco', 'default_language']\n  };\n  const groupsTab = {\n    label: t('form.tab.groups'),\n    panel: /*#__PURE__*/_jsx(TabGroups, {})\n  };\n  const jobsTab = {\n    label: t('form.tab.jobs'),\n    panel: /*#__PURE__*/_jsx(TabJobs, {})\n  };\n  const historyTab = {\n    label: t('common:tab.history'),\n    panel: /*#__PURE__*/_jsx(AppTabHistoryLog, {\n      isOpenDialog: dialogState.open,\n      data: dialogState.historyLogs,\n      onChange: handleChangeHistoryLogs,\n      entityId: userDetail.id,\n      tableHeight: 255,\n      entity: \"user\"\n    }),\n    disabled: isCreating\n  };\n  const tabs = [generalTab, groupsTab, jobsTab, historyTab];\n  return /*#__PURE__*/_jsx(DialogMain, {\n    open: dialogState.open,\n    title: /*#__PURE__*/_jsx(BtnHelp, {\n      title: title,\n      href: wiki_page\n    }),\n    height: 560,\n    onOk: onHandleSubmit,\n    onClose: onCloseDialog,\n    okText: isCreating ? t('common:button.create') : t('common:button.update'),\n    okButtonProps: {\n      disabled: dialogState.loading || !(permissions === null || permissions === void 0 ? void 0 : permissions.edit) && !isCreating\n    },\n    loading: dialogState.loading,\n    children: /*#__PURE__*/_jsx(FormControllerTabs, {\n      value: tab,\n      onChange: onChangeTab,\n      form: userForm,\n      tabs: tabs\n    })\n  });\n};\n\nexport default UserCreateEditDialog;","map":null,"metadata":{},"sourceType":"module"}