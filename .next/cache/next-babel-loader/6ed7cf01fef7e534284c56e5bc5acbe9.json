{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, put, call, putResolve } from 'redux-saga/effects';\nimport { select, all } from 'typed-redux-saga';\nimport _ from 'lodash';\nimport { tagStore, commonStore, advancedFilterActions, summaryReportActions } from '@/store/reducers';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport tagApi from '@/apis/tag.api';\n\nfunction* fetchTagDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n  const data = yield call(tagApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  });\n\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {};\n  }\n\n  yield put(commonStore.actions.setUserValueJob(data.selected_job));\n  yield put(tagStore.actions.setInitDataForList(data));\n}\n\nfunction* fetchTagList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData,\n    userJob,\n    userDrawing\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    userDrawing: select(commonStore.selectUserValueDrawing)\n  });\n\n  if (!userJob.value) {\n    return;\n  }\n\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(tagApi.getList, _objectSpread(_objectSpread({\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value\n  }, filterData), {}, {\n    drawing_id: userDrawing.value\n  }));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(tagStore.actions.setDataList(data.elements));\n}\n\nfunction* getTagList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchTagDataForList);\n    const permissions = yield* select(tagStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchTagList);\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* removeTag({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const data = yield call(tagApi.executeOperation, 'delete', payload);\n\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data));\n      yield put(summaryReportActions.setOpen(true));\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message));\n    }\n\n    yield call(fetchTagList);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* changeUserJob({\n  payload\n}) {\n  yield put(commonStore.actions.setUserValueJob(payload));\n  yield call(getTagList);\n}\n\nfunction* changeUserDrawing({\n  payload\n}) {\n  yield putResolve(commonStore.actions.setUserValueDrawing(payload));\n  yield call(getTagList);\n}\n\nfunction* tagSaga() {\n  yield takeEvery(tagStore.sagaGetList, getTagList);\n  yield takeEvery(tagStore.sagaRemove, removeTag);\n  yield takeEvery(tagStore.sagaChangeUserJob, changeUserJob);\n  yield takeEvery(tagStore.sagaChangeUserDrawing, changeUserDrawing);\n}\n\nexport default tagSaga;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/store/saga/tag.saga.ts"],"names":["takeEvery","put","call","putResolve","select","all","_","tagStore","commonStore","advancedFilterActions","summaryReportActions","errorSaga","tagApi","fetchTagDataForList","userJob","selectUserValueJob","data","getInitDataForList","job_id_pk","value","isNull","selected_job","actions","setUserValueJob","setInitDataForList","fetchTagList","tableState","searchQuery","filterData","userDrawing","selectTableState","selectSearchQuery","selectFilterData","selectUserValueDrawing","page","per_page","getList","s","job_id","drawing_id","setTableState","total_items","setDataList","elements","getTagList","setLoadingPage","permissions","selectPermissions","view","error","handleError","removeTag","payload","executeOperation","failed_count","setReportData","setOpen","setSuccessMessage","message","changeUserJob","changeUserDrawing","setUserValueDrawing","tagSaga","sagaGetList","sagaRemove","sagaChangeUserJob","sagaChangeUserDrawing"],"mappings":"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","sourcesContent":["import { takeEvery, put, call, putResolve } from 'redux-saga/effects'\nimport { select, all } from 'typed-redux-saga'\nimport _ from 'lodash'\n\nimport { tagStore, commonStore, advancedFilterActions, summaryReportActions } from '@/store/reducers'\nimport * as errorSaga from '@/store/saga/errorSaga'\n\nimport tagApi from '@/apis/tag.api'\n\nfunction* fetchTagDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob)\n  const data = yield call(tagApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  })\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {}\n  }\n  yield put(commonStore.actions.setUserValueJob(data.selected_job))\n  yield put(tagStore.actions.setInitDataForList(data))\n}\n\nfunction* fetchTagList() {\n  const { tableState, searchQuery, filterData, userJob, userDrawing } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    userDrawing: select(commonStore.selectUserValueDrawing)\n  })\n  if (!userJob.value) {\n    return\n  }\n  const { page, per_page } = tableState\n  const data = yield call(tagApi.getList, {\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    ...filterData,\n    drawing_id: userDrawing.value\n  })\n  yield put(commonStore.actions.setTableState({ total_items: data.total_items }))\n  yield put(tagStore.actions.setDataList(data.elements))\n}\n\nfunction* getTagList() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchTagDataForList)\n    const permissions = yield* select(tagStore.selectPermissions)\n    if (permissions?.view) {\n      yield call(fetchTagList)\n    }\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* removeTag({ payload }) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const data = yield call(tagApi.executeOperation, 'delete', payload)\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data))\n      yield put(summaryReportActions.setOpen(true))\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message))\n    }\n    yield call(fetchTagList)\n  } catch (error) {\n    yield errorSaga.handleError(error)\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* changeUserJob({ payload }: ReturnType<typeof tagStore.sagaChangeUserJob>) {\n  yield put(commonStore.actions.setUserValueJob(payload))\n  yield call(getTagList)\n}\n\nfunction* changeUserDrawing({ payload }: ReturnType<typeof tagStore.sagaChangeUserDrawing>) {\n  yield putResolve(commonStore.actions.setUserValueDrawing(payload))\n  yield call(getTagList)\n}\n\nfunction* tagSaga() {\n  yield takeEvery(tagStore.sagaGetList, getTagList)\n  yield takeEvery(tagStore.sagaRemove, removeTag)\n  yield takeEvery(tagStore.sagaChangeUserJob, changeUserJob)\n  yield takeEvery(tagStore.sagaChangeUserDrawing, changeUserDrawing)\n}\n\nexport default tagSaga\n"]},"metadata":{},"sourceType":"module"}