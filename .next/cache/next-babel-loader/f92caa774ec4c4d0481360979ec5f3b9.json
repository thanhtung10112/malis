{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\FormController\\\\PasswordField\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Tooltip, Typography, LinearProgress } from '@material-ui/core';\nimport { AppTextField } from '@/components/index';\nimport { useEffect, useState } from 'react';\nimport { useController } from 'react-hook-form';\nimport useStyles from './styles';\nimport _ from 'lodash';\nimport clsx from 'clsx';\nimport { regexes, regexSpecCharacters } from '@/utils/getPasswordYup';\n\nvar FormControllerPasswordField = function FormControllerPasswordField(props) {\n  _s();\n\n  var classes = useStyles();\n\n  var control = props.control,\n      name = props.name,\n      rules = props.rules,\n      textFieldProps = _objectWithoutProperties(props, [\"control\", \"name\", \"rules\"]);\n\n  var _useState = useState([]),\n      levelPw = _useState[0],\n      setLevelPw = _useState[1];\n\n  var _useController = useController({\n    name: name,\n    control: control\n  }),\n      _useController$field = _useController.field,\n      onChangeController = _useController$field.onChange,\n      valueController = _useController$field.value,\n      inputProps = _objectWithoutProperties(_useController$field, [\"onChange\", \"value\"]),\n      invalid = _useController.meta.invalid;\n\n  useEffect(function () {\n    var passedRegexes = [];\n\n    if (valueController.length > 0) {\n      regexes.forEach(function (regex) {\n        var isMatch = new RegExp(regex).test(valueController);\n        isMatch && passedRegexes.push(regex);\n      });\n    }\n\n    setLevelPw(passedRegexes);\n  }, [valueController]);\n\n  var handleChangeValue = function handleChangeValue(event) {\n    var value = event.target.value;\n    onChangeController(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n      title: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Password must have:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: clsx(classes.tooltipItem, {\n              active: valueController.length >= 8 && valueController.length <= 30\n            }),\n            children: \"8 - 30 characters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: clsx(classes.tooltipItem, {\n              active: levelPw.includes('[A-Z]')\n            }),\n            children: \"At least one uppercase letter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: clsx(classes.tooltipItem, {\n              active: levelPw.includes('[a-z]')\n            }),\n            children: \"At least one lowercase letter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: clsx(classes.tooltipItem, {\n              active: levelPw.includes('[0-9]')\n            }),\n            children: \"At least one number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: clsx(classes.tooltipItem, {\n              active: levelPw.includes(regexSpecCharacters)\n            }),\n            children: \"At least one special character\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true),\n      children: /*#__PURE__*/_jsxDEV(AppTextField, _objectSpread(_objectSpread(_objectSpread({}, inputProps), textFieldProps), {}, {\n        onChange: handleChangeValue,\n        error: Boolean(invalid),\n        helperText: invalid === null || invalid === void 0 ? void 0 : invalid.message,\n        value: _.isNil(valueController) ? '' : valueController\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      style: {\n        margin: '8px 0'\n      },\n      children: [\"Password Strength:\", ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n      variant: \"determinate\",\n      value: levelPw.length * 25,\n      color: levelPw.length > 2 ? 'primary' : 'secondary'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(FormControllerPasswordField, \"6NMMZpyd9irsekw6gMmoS54FwRs=\", false, function () {\n  return [useStyles, useController];\n});\n\n_c = FormControllerPasswordField;\nexport default FormControllerPasswordField;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormControllerPasswordField\");","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/FormController/PasswordField/index.tsx"],"names":["Tooltip","Typography","LinearProgress","AppTextField","useEffect","useState","useController","useStyles","_","clsx","regexes","regexSpecCharacters","FormControllerPasswordField","props","classes","control","name","rules","textFieldProps","levelPw","setLevelPw","field","onChangeController","onChange","valueController","value","inputProps","invalid","meta","passedRegexes","length","forEach","regex","isMatch","RegExp","test","push","handleChangeValue","event","target","tooltipItem","active","includes","Boolean","message","isNil","margin"],"mappings":"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","sourcesContent":["import { Tooltip, Typography, LinearProgress } from '@material-ui/core'\nimport { AppTextField } from '@/components/index'\n\nimport { useEffect, useState } from 'react'\nimport { useController } from 'react-hook-form'\nimport useStyles from './styles'\n\nimport _ from 'lodash'\nimport clsx from 'clsx'\nimport { regexes, regexSpecCharacters } from '@/utils/getPasswordYup'\n\nconst FormControllerPasswordField = (props) => {\n  const classes = useStyles()\n\n  const { control, name, rules, ...textFieldProps } = props\n\n  const [levelPw, setLevelPw] = useState<string[]>([])\n\n  const {\n    field: { onChange: onChangeController, value: valueController, ...inputProps },\n    meta: { invalid }\n  } = useController({\n    name,\n    control\n  })\n\n  useEffect(() => {\n    const passedRegexes = [] as string[]\n    if (valueController.length > 0) {\n      regexes.forEach((regex) => {\n        const isMatch = new RegExp(regex).test(valueController)\n        isMatch && passedRegexes.push(regex)\n      })\n    }\n    setLevelPw(passedRegexes)\n  }, [valueController])\n\n  const handleChangeValue = (event) => {\n    const { value } = event.target\n    onChangeController(value)\n  }\n\n  return (\n    <>\n      <Tooltip\n        title={\n          <>\n            <p>Password must have:</p>\n            <ul>\n              <li\n                className={clsx(classes.tooltipItem, {\n                  active: valueController.length >= 8 && valueController.length <= 30\n                })}\n              >\n                8 - 30 characters\n              </li>\n              <li\n                className={clsx(classes.tooltipItem, {\n                  active: levelPw.includes('[A-Z]')\n                })}\n              >\n                At least one uppercase letter\n              </li>\n              <li\n                className={clsx(classes.tooltipItem, {\n                  active: levelPw.includes('[a-z]')\n                })}\n              >\n                At least one lowercase letter\n              </li>\n              <li\n                className={clsx(classes.tooltipItem, {\n                  active: levelPw.includes('[0-9]')\n                })}\n              >\n                At least one number\n              </li>\n              <li\n                className={clsx(classes.tooltipItem, {\n                  active: levelPw.includes(regexSpecCharacters)\n                })}\n              >\n                At least one special character\n              </li>\n            </ul>\n          </>\n        }\n      >\n        <AppTextField\n          {...inputProps}\n          {...(textFieldProps as any)}\n          onChange={handleChangeValue}\n          error={Boolean(invalid)}\n          helperText={(invalid as any)?.message}\n          value={_.isNil(valueController) ? '' : valueController}\n        />\n      </Tooltip>\n      <Typography variant=\"body2\" color=\"textSecondary\" style={{ margin: '8px 0' }}>\n        Password Strength:{' '}\n      </Typography>\n      <LinearProgress\n        variant=\"determinate\"\n        value={levelPw.length * 25}\n        color={levelPw.length > 2 ? 'primary' : 'secondary'}\n      />\n    </>\n  )\n}\n\nexport default FormControllerPasswordField\n"]},"metadata":{},"sourceType":"module"}