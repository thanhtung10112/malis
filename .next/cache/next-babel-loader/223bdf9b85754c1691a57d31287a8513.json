{"ast":null,"code":"import { takeEvery, putResolve } from 'redux-saga/effects';\nimport { select, put, call } from 'typed-redux-saga';\nimport { createAction } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nimport _ from 'lodash';\nimport Router from 'next/router';\nimport HttpService from '@/helper/HttpService';\nimport { commonStore, summaryReportActions } from '@/store/reducers';\nimport commonApi from '@/apis/common.api';\nimport { plural } from 'pluralize';\n\nconst getApiUpdateMultiple = entity => {\n  const pluralEntity = plural(entity);\n  const api = new HttpService(pluralEntity);\n  return api.updateMultiple;\n};\n\nfunction* updateMultiple({\n  payload\n}) {\n  try {\n    const {\n      entity,\n      action,\n      payloadAction,\n      href\n    } = payload;\n    const api = getApiUpdateMultiple(entity);\n    const editRow = yield* select(commonStore.selectEditRows);\n    yield putResolve(commonStore.actions.setLoadingPage(true));\n    const data = yield call(api, editRow);\n    yield put(commonStore.actions.setSuccessMessage(data.message));\n    yield putResolve(commonStore.actions.setLoadingPage(false));\n\n    if (href) {\n      Router.push(href);\n    } else if (action && _.isFunction(action)) {\n      yield put(action(payloadAction));\n    } else if (entity) {\n      const getListAction = createAction(`${entity}/${actionTypes.GET_LIST}`);\n      yield put(getListAction());\n    }\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n}\n\nfunction* cancelBackgroundJob({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      message\n    } = yield call(commonApi.stopBackgroundJob, payload);\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction getExecuteOperationApi(entityParam) {\n  let entity = entityParam;\n\n  if (entity === 'manufacturing_standard' || entity === 'material_standard') {\n    entity = 'equivalence';\n  }\n\n  const pluralEntity = plural(entity);\n  const api = new HttpService(pluralEntity);\n  return api.executeOperation;\n}\n\nfunction* executeOperation({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      entity,\n      operation,\n      operationList\n    } = payload;\n    const apiReq = getExecuteOperationApi(entity);\n    const data = yield call(apiReq, operation, operationList);\n    yield putResolve(commonStore.actions.setLoadingPage(false));\n\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data));\n      yield put(summaryReportActions.setOpen(true));\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message));\n    }\n\n    const getListAction = createAction(`${entity}/${actionTypes.GET_LIST}`);\n    yield putResolve(getListAction());\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n}\n\nfunction* commonSaga() {\n  yield takeEvery(commonStore.sagaUpdateMultiple, updateMultiple);\n  yield takeEvery(commonStore.sagaCancelBackgroundJob, cancelBackgroundJob);\n  yield takeEvery(commonStore.sagaExecuteOperation, executeOperation);\n}\n\nexport default commonSaga;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/saga/common.saga.ts"],"names":["takeEvery","putResolve","select","put","call","createAction","actionTypes","_","Router","HttpService","commonStore","summaryReportActions","commonApi","plural","getApiUpdateMultiple","entity","pluralEntity","api","updateMultiple","payload","action","payloadAction","href","editRow","selectEditRows","actions","setLoadingPage","data","setSuccessMessage","message","push","isFunction","getListAction","GET_LIST","error","setError","cancelBackgroundJob","stopBackgroundJob","getExecuteOperationApi","entityParam","executeOperation","operation","operationList","apiReq","failed_count","setReportData","setOpen","commonSaga","sagaUpdateMultiple","sagaCancelBackgroundJob","sagaExecuteOperation"],"mappings":"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","sourcesContent":["import { takeEvery, putResolve } from 'redux-saga/effects'\nimport { select, put, call } from 'typed-redux-saga'\nimport { createAction } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\nimport _ from 'lodash'\nimport Router from 'next/router'\nimport HttpService from '@/helper/HttpService'\n\nimport { commonStore, summaryReportActions } from '@/store/reducers'\n\nimport commonApi from '@/apis/common.api'\n\nimport { plural } from 'pluralize'\n\nimport type { Entity } from '@/types/Common'\n\nconst getApiUpdateMultiple = (entity) => {\n  const pluralEntity = plural(entity)\n  const api = new HttpService(pluralEntity)\n  return api.updateMultiple\n}\n\nfunction* updateMultiple({ payload }) {\n  try {\n    const { entity, action, payloadAction, href } = payload\n    const api = getApiUpdateMultiple(entity)\n    const editRow = yield* select(commonStore.selectEditRows)\n    yield putResolve(commonStore.actions.setLoadingPage(true))\n    const data = yield call(api, editRow)\n    yield put(commonStore.actions.setSuccessMessage(data.message))\n    yield putResolve(commonStore.actions.setLoadingPage(false))\n    if (href) {\n      Router.push(href)\n    } else if (action && _.isFunction(action)) {\n      yield put(action(payloadAction))\n    } else if (entity) {\n      const getListAction = createAction(`${entity}/${actionTypes.GET_LIST}`)\n      yield put(getListAction())\n    }\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n}\n\nfunction* cancelBackgroundJob({ payload }: ReturnType<typeof commonStore.sagaCancelBackgroundJob>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const { message } = yield call(commonApi.stopBackgroundJob, payload)\n    yield put(commonStore.actions.setSuccessMessage(message))\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction getExecuteOperationApi(entityParam: Entity) {\n  let entity = entityParam\n  if (entity === 'manufacturing_standard' || entity === 'material_standard') {\n    entity = 'equivalence'\n  }\n  const pluralEntity = plural(entity)\n  const api = new HttpService(pluralEntity)\n  return api.executeOperation\n}\n\nfunction* executeOperation({ payload }: ReturnType<typeof commonStore.sagaExecuteOperation>) {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    const { entity, operation, operationList } = payload\n    const apiReq = getExecuteOperationApi(entity)\n    const data = yield call(apiReq, operation, operationList)\n    yield putResolve(commonStore.actions.setLoadingPage(false))\n    if (data.failed_count > 0) {\n      yield put(summaryReportActions.setReportData(data))\n      yield put(summaryReportActions.setOpen(true))\n    } else {\n      yield put(commonStore.actions.setSuccessMessage(data.message))\n    }\n    const getListAction = createAction(`${entity}/${actionTypes.GET_LIST}`)\n    yield putResolve(getListAction())\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n}\n\nfunction* commonSaga() {\n  yield takeEvery(commonStore.sagaUpdateMultiple, updateMultiple)\n  yield takeEvery(commonStore.sagaCancelBackgroundJob, cancelBackgroundJob)\n  yield takeEvery(commonStore.sagaExecuteOperation, executeOperation)\n}\n\nexport default commonSaga\n"]},"metadata":{},"sourceType":"module"}