{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { format as formatDate } from 'date-fns';\nimport { MuiPickersUtilsProvider, DatePicker, DateTimePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { FormControl, TextField, Switch } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport * as _ from 'lodash';\n\nfunction ConditionValue({\n  rules,\n  columnOptions,\n  disabled\n}) {\n  // const [selectedDate, handleDateChange] = useState(new Date());\n  // const columns = useSelector(advancedSearchActions.selectColumn) // take this from store\n  // const comparatorList = comparators // take this from store\n  // trick for forcing rerender\n  const {\n    1: setValue\n  } = useState(0);\n\n  const forceRerender = () => {\n    setValue(value => value + 1);\n  };\n\n  const selectedCol = _.find(columnOptions, {\n    id: rules.id\n  });\n\n  const handleValueChange = event => {\n    rules.value = event.target.value;\n    forceRerender();\n  };\n\n  const handleDateChange = value => {\n    rules.value = formatDate(value, 'yyyy-MM-dd');\n    forceRerender();\n  };\n\n  const handleDateTimeChange = value => {\n    rules.value = formatDate(value, 'yyyy-MM-dd HH:mm');\n    forceRerender();\n  };\n\n  const handleBooleanChange = () => {\n    rules.value = !rules.value;\n    forceRerender();\n  };\n\n  const onMultiSelectChange = selectedValues => {\n    rules.value = selectedValues.map(selected => selected.value);\n    forceRerender();\n  };\n\n  let valueComponent = /*#__PURE__*/_jsx(_Fragment, {});\n\n  if (['null', 'nnull'].includes(rules.comparator)) {\n    valueComponent = /*#__PURE__*/_jsx(_Fragment, {});\n  } else {\n    switch (selectedCol.column_type) {\n      case 'string':\n        rules.value = rules.value || '';\n        valueComponent = /*#__PURE__*/_jsx(TextField, {\n          variant: \"outlined\",\n          size: \"small\",\n          type: \"text\",\n          fullWidth: false,\n          value: rules.value,\n          onChange: handleValueChange,\n          style: {\n            width: '15rem'\n          },\n          disabled: disabled\n        });\n        break;\n\n      case 'number':\n        rules.value = rules.value || 0;\n        valueComponent = /*#__PURE__*/_jsx(TextField, {\n          variant: \"outlined\",\n          size: \"small\",\n          type: \"number\",\n          value: rules.value,\n          fullWidth: false,\n          onChange: handleValueChange,\n          style: {\n            width: '15rem'\n          },\n          disabled: disabled\n        });\n        break;\n\n      case 'boolean':\n        rules.value = rules.value || false;\n        valueComponent = /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(FormControl, {\n            style: {\n              marginTop: '0.5rem'\n            },\n            children: \"disable\"\n          }), /*#__PURE__*/_jsx(FormControl, {\n            style: {},\n            children: /*#__PURE__*/_jsx(Switch, {\n              checked: rules.value,\n              onClick: handleBooleanChange,\n              color: \"primary\",\n              inputProps: {\n                'aria-label': 'primary checkbox'\n              },\n              disabled: disabled\n            })\n          }), /*#__PURE__*/_jsx(FormControl, {\n            style: {\n              marginTop: '0.5rem'\n            },\n            children: \"enable\"\n          })]\n        });\n        break;\n\n      case 'date':\n        rules.value = rules.value || formatDate(new Date(), 'yyyy-MM-dd');\n        valueComponent = /*#__PURE__*/_jsx(MuiPickersUtilsProvider, {\n          utils: DateFnsUtils,\n          children: /*#__PURE__*/_jsx(DatePicker, {\n            value: rules.value,\n            inputVariant: \"outlined\",\n            size: \"small\",\n            onChange: handleDateChange,\n            animateYearScrolling: true,\n            format: \"yyyy-MM-dd\",\n            autoOk: true,\n            fullWidth: false,\n            style: {\n              width: '15rem'\n            },\n            disabled: disabled\n          })\n        });\n        break;\n\n      case 'datetime':\n        rules.value = rules.value || formatDate(new Date(), 'yyyy-MM-dd HH:mm');\n        valueComponent = /*#__PURE__*/_jsx(MuiPickersUtilsProvider, {\n          utils: DateFnsUtils,\n          children: /*#__PURE__*/_jsx(DateTimePicker, {\n            value: rules.value,\n            inputVariant: \"outlined\",\n            size: \"small\",\n            onChange: handleDateTimeChange,\n            animateYearScrolling: true,\n            format: \"yyyy-MM-dd HH:mm\",\n            ampm: false,\n            autoOk: true,\n            fullWidth: false,\n            style: {\n              width: '15rem'\n            },\n            disabled: disabled\n          })\n        });\n        break;\n\n      case 'predefined_value':\n        rules.value = rules.value || [];\n        valueComponent = /*#__PURE__*/_jsx(Autocomplete, {\n          multiple: true,\n          limitTags: 2,\n          value: rules.value.map(value => _.find(selectedCol.value_list, {\n            value\n          })),\n          size: \"small\",\n          style: {\n            width: '15rem'\n          },\n          options: selectedCol.value_list,\n          getOptionLabel: option => option.description,\n          disableClearable: true,\n          renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({}, params), {}, {\n            variant: \"outlined\",\n            size: \"small\"\n          })),\n          onChange: (e, selectedOptions) => onMultiSelectChange(selectedOptions),\n          disabled: disabled\n        });\n        break;\n\n      default:\n        valueComponent = /*#__PURE__*/_jsx(_Fragment, {});\n        break;\n    }\n  }\n\n  return valueComponent;\n}\n\nexport default ConditionValue;","map":null,"metadata":{},"sourceType":"module"}