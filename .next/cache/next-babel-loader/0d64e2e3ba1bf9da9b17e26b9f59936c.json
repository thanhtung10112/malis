{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { put, takeEvery } from 'redux-saga/effects';\nimport { call, all, select } from 'typed-redux-saga';\nimport _ from 'lodash';\nimport { setCookie } from 'nookies';\nimport { authStore, commonStore } from '@/store/reducers';\nimport * as errorSaga from '@/store/saga/errorSaga';\nimport authApi from '@/apis/auth.api';\nexport function* login({\n  payload\n}) {\n  yield put(authStore.actions.setLoading(true));\n\n  try {\n    const {\n      remember\n    } = payload,\n          loginData = _objectWithoutProperties(payload, [\"remember\"]);\n\n    const data = yield call(authApi.login, loginData);\n    yield put(authStore.actions.saveTokenLogin({\n      access_token: data.access_token,\n      redirect_to: data.redirect_to,\n      remember\n    }));\n  } catch (error) {\n    const {\n      response: {\n        data\n      }\n    } = error;\n    yield put(commonStore.actions.setErrorMessage(data.message));\n  }\n\n  yield put(authStore.actions.setLoading(false));\n}\nexport function* getProfile() {\n  yield put(authStore.actions.setLoadingAuth(true));\n\n  try {\n    const data = yield call(authApi.getProfile);\n    yield put(authStore.actions.setProfile(data));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(authStore.actions.setLoadingAuth(false));\n}\nexport function* changePassword({\n  payload\n}) {\n  yield put(authStore.actions.setPwDialogState({\n    loading: true\n  }));\n\n  try {\n    const {\n      message\n    } = yield call(authApi.changePassword, payload);\n    yield all([put(commonStore.actions.setSuccessMessage(message)), put(authStore.actions.setPwDialogState({\n      open: false\n    }))]);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(authStore.actions.setPwDialogState({\n    loading: false\n  }));\n}\nexport function* fetchSettingInitData() {\n  const data = yield call(authApi.getInitDataForSetting);\n  yield put(authStore.actions.setSettingInitData(data));\n}\nexport function* fetchSettings() {\n  const _yield$call = yield call(authApi.getSettings),\n        {\n    message,\n    success\n  } = _yield$call,\n        detail = _objectWithoutProperties(_yield$call, [\"message\", \"success\"]);\n\n  yield put(authStore.actions.setSettingDetail(detail));\n}\nexport function* getSettings() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchSettingInitData);\n    yield call(fetchSettings);\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction getPathHomePage(options, homePageId) {\n  var _homePage$properties;\n\n  const homePage = _.find(options, {\n    value: homePageId\n  });\n\n  return (homePage === null || homePage === void 0 ? void 0 : (_homePage$properties = homePage.properties) === null || _homePage$properties === void 0 ? void 0 : _homePage$properties.path) || '';\n}\n\nexport function* saveSettingsSaga({\n  payload\n}) {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    const {\n      message\n    } = yield call(authApi.saveSettings, payload);\n    const parameters = yield* select(authStore.selectSettingsParameters);\n    const homePagePath = getPathHomePage(parameters.PAGES, payload.home_page);\n\n    if (homePagePath) {\n      setCookie(null, 'redirect_to', homePagePath, {\n        maxAge: 60 * 60 * 24 * 365 // 1 day\n\n      });\n    }\n\n    yield put(authStore.actions.setDefaultLanguage(payload.default_language));\n    yield put(commonStore.actions.setSuccessMessage(message));\n  } catch (error) {\n    yield errorSaga.handleError(error);\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\nexport function* logout({\n  payload\n}) {\n  const entity = yield* select(commonStore.selectEntity);\n\n  if ((payload === null || payload === void 0 ? void 0 : payload.confirm) === 'save') {\n    yield put(commonStore.sagaUpdateMultiple({\n      entity: entity,\n      action: authStore.actions.logout\n    }));\n  } else {\n    yield put(authStore.actions.logout());\n  }\n}\n\nfunction* authSaga() {\n  yield takeEvery(authStore.sagaLogin, login);\n  yield takeEvery(authStore.sagaGetProfile, getProfile);\n  yield takeEvery(authStore.sagaChangePassword, changePassword);\n  yield takeEvery(authStore.sagaGetSettings, getSettings);\n  yield takeEvery(authStore.sagaSaveSettings, saveSettingsSaga);\n  yield takeEvery(authStore.sagaLogout, logout);\n}\n\nexport default authSaga;","map":null,"metadata":{},"sourceType":"module"}