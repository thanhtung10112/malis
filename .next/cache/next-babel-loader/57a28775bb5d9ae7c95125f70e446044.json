{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { serverSideTranslations } from 'next-i18next/serverSideTranslations';\nimport nookies from 'nookies';\nimport axios from 'axios';\nimport { StatusCode } from '@/utils/StatusCode';\n\nconst useAuthMiddleware = (locales = []) => async context => {\n  const cookies = nookies.get(context);\n  const {\n    resolvedUrl\n  } = context;\n\n  try {\n    await axios({\n      baseURL: process.env.NEXT_PUBLIC_BACKEND_URL,\n      method: 'GET',\n      url: '/health_check/protected',\n      headers: {\n        Authorization: `Bearer ${cookies.token}`\n      }\n    });\n  } catch (error) {\n    var _error$response;\n\n    if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === StatusCode.UNAUTHORIZED) {\n      nookies.destroy(context, 'token');\n      nookies.destroy(context, 'redirect_to');\n      nookies.destroy(context, 'current_job_id');\n      const destination = resolvedUrl === '/' ? `/login` : `/login?back_url=${encodeURIComponent(resolvedUrl)}`;\n      return {\n        redirect: {\n          destination\n        }\n      };\n    }\n  }\n\n  if (resolvedUrl === '/' && cookies.redirect_to) {\n    return {\n      redirect: {\n        destination: cookies.redirect_to\n      }\n    };\n  }\n\n  return {\n    props: _objectSpread({}, await serverSideTranslations(context.locale, locales))\n  };\n};\n\nexport default useAuthMiddleware;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/hooks/useAuthMiddleware.ts"],"names":["serverSideTranslations","nookies","axios","StatusCode","useAuthMiddleware","locales","context","cookies","get","resolvedUrl","baseURL","process","env","NEXT_PUBLIC_BACKEND_URL","method","url","headers","Authorization","token","error","response","status","UNAUTHORIZED","destroy","destination","encodeURIComponent","redirect","redirect_to","props","locale"],"mappings":";;;;;;AAAA,SAASA,sBAAT,QAAuC,qCAAvC;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,QAA2B,oBAA3B;;AAGA,MAAMC,iBAAiB,GACrB,CAACC,OAAiB,GAAG,EAArB,KACA,MAAOC,OAAP,IAA8C;AAC5C,QAAMC,OAAO,GAAGN,OAAO,CAACO,GAAR,CAAYF,OAAZ,CAAhB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAkBH,OAAxB;;AACA,MAAI;AACF,UAAMJ,KAAK,CAAC;AACVQ,MAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,uBADX;AAEVC,MAAAA,MAAM,EAAE,KAFE;AAGVC,MAAAA,GAAG,EAAE,yBAHK;AAIVC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASV,OAAO,CAACW,KAAM;AAAzC;AAJC,KAAD,CAAX;AAMD,GAPD,CAOE,OAAOC,KAAP,EAAc;AAAA;;AACd,QAAI,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEC,QAAP,oEAAiBC,MAAjB,MAA4BlB,UAAU,CAACmB,YAA3C,EAAyD;AACvDrB,MAAAA,OAAO,CAACsB,OAAR,CAAgBjB,OAAhB,EAAyB,OAAzB;AACAL,MAAAA,OAAO,CAACsB,OAAR,CAAgBjB,OAAhB,EAAyB,aAAzB;AACAL,MAAAA,OAAO,CAACsB,OAAR,CAAgBjB,OAAhB,EAAyB,gBAAzB;AACA,YAAMkB,WAAW,GAAGf,WAAW,KAAK,GAAhB,GAAuB,QAAvB,GAAkC,mBAAkBgB,kBAAkB,CAAChB,WAAD,CAAc,EAAxG;AACA,aAAO;AACLiB,QAAAA,QAAQ,EAAE;AACRF,UAAAA;AADQ;AADL,OAAP;AAKD;AACF;;AAED,MAAIf,WAAW,KAAK,GAAhB,IAAuBF,OAAO,CAACoB,WAAnC,EAAgD;AAC9C,WAAO;AACLD,MAAAA,QAAQ,EAAE;AACRF,QAAAA,WAAW,EAAEjB,OAAO,CAACoB;AADb;AADL,KAAP;AAKD;;AACD,SAAO;AACLC,IAAAA,KAAK,oBACC,MAAM5B,sBAAsB,CAACM,OAAO,CAACuB,MAAT,EAAiBxB,OAAjB,CAD7B;AADA,GAAP;AAKD,CAtCH;;AAwCA,eAAeD,iBAAf","sourcesContent":["import { serverSideTranslations } from 'next-i18next/serverSideTranslations'\nimport nookies from 'nookies'\nimport axios from 'axios'\n\nimport { StatusCode } from '@/utils/StatusCode'\nimport { GetServerSidePropsContext } from 'next'\n\nconst useAuthMiddleware =\n  (locales: string[] = []) =>\n  async (context: GetServerSidePropsContext) => {\n    const cookies = nookies.get(context)\n    const { resolvedUrl } = context\n    try {\n      await axios({\n        baseURL: process.env.NEXT_PUBLIC_BACKEND_URL,\n        method: 'GET',\n        url: '/health_check/protected',\n        headers: { Authorization: `Bearer ${cookies.token}` }\n      })\n    } catch (error) {\n      if (error?.response?.status === StatusCode.UNAUTHORIZED) {\n        nookies.destroy(context, 'token')\n        nookies.destroy(context, 'redirect_to')\n        nookies.destroy(context, 'current_job_id')\n        const destination = resolvedUrl === '/' ? `/login` : `/login?back_url=${encodeURIComponent(resolvedUrl)}`\n        return {\n          redirect: {\n            destination\n          }\n        }\n      }\n    }\n\n    if (resolvedUrl === '/' && cookies.redirect_to) {\n      return {\n        redirect: {\n          destination: cookies.redirect_to\n        }\n      }\n    }\n    return {\n      props: {\n        ...(await serverSideTranslations(context.locale, locales))\n      }\n    }\n  }\n\nexport default useAuthMiddleware\n"]},"metadata":{},"sourceType":"module"}