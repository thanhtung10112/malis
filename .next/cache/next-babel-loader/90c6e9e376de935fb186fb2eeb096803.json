{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Fersher\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\DataTable\\\\EditInline\\\\NumberField\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { GRID_CELL_EDIT_EXIT } from '@material-ui/data-grid';\nimport { FormControllerErrorMessage, AppNumberField } from '@/components';\nimport clsx from 'clsx';\nimport * as yup from 'yup';\nimport _ from 'lodash';\nimport useStyles from '../styles';\nimport { useForm, useController } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nvar DataTableTextField = function DataTableTextField(props) {\n  _s();\n\n  var classes = useStyles();\n\n  var className = props.className,\n      onChangeValue = props.onChangeValue,\n      params = props.params,\n      rules = props.rules,\n      type = props.type,\n      rest = _objectWithoutProperties(props, [\"className\", \"onChangeValue\", \"params\", \"rules\", \"type\"]);\n\n  var api = params.api,\n      id = params.id,\n      field = params.field,\n      value = params.value,\n      error = params.error;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      oldValue = _React$useState2[0],\n      setOldValue = _React$useState2[1];\n\n  var validationSchema = React.useMemo(function () {\n    if (_.isNil(rules)) {\n      return yup.object({\n        name: yup.string().nullable()\n      });\n    }\n\n    return yup.object({\n      name: rules\n    });\n  }, [rules]);\n  var form = useForm({\n    defaultValues: {\n      name: value\n    },\n    mode: 'onChange',\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  });\n  var watchValue = form.watch('name', null);\n\n  var _useController = useController({\n    name: 'name',\n    control: form.control\n  }),\n      _useController$field = _useController.field,\n      onChangeControl = _useController$field.onChange,\n      valueControl = _useController$field.value,\n      invalid = _useController.meta.invalid;\n\n  React.useEffect(function () {\n    setOldValue(value);\n  }, []);\n  React.useEffect(function () {\n    api.setEditCellProps({\n      id: id,\n      field: field,\n      props: {\n        value: valueControl,\n        error: Boolean(invalid)\n      }\n    });\n  }, [valueControl, invalid, api, field, id, error]);\n  React.useEffect(function () {\n    return api.subscribeEvent(GRID_CELL_EDIT_EXIT, function () {\n      if (!error && String(oldValue) !== String(watchValue)) {\n        onChangeValue(id, watchValue, field);\n      }\n    });\n  }, [api, watchValue, error]);\n  return /*#__PURE__*/_jsxDEV(FormControllerErrorMessage, {\n    open: Boolean(invalid),\n    title: invalid === null || invalid === void 0 ? void 0 : invalid.message,\n    children: /*#__PURE__*/_jsxDEV(AppNumberField, _objectSpread(_objectSpread({}, rest), {}, {\n      value: valueControl,\n      autoFocus: true,\n      className: clsx(className, classes.root, invalid && classes.textFieldError),\n      name: \"name\",\n      onChange: function onChange(_ref) {\n        var floatValue = _ref.floatValue;\n        onChangeControl(floatValue);\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(DataTableTextField, \"4xFa9FpIo0s2/P2sLd29DmkC/JY=\", false, function () {\n  return [useStyles, useForm, useController];\n});\n\n_c = DataTableTextField;\nDataTableTextField.defaultProps = {\n  type: 'text'\n};\nexport default DataTableTextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTableTextField\");","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/components/DataTable/EditInline/NumberField/index.tsx"],"names":["React","GRID_CELL_EDIT_EXIT","FormControllerErrorMessage","AppNumberField","clsx","yup","_","useStyles","useForm","useController","yupResolver","DataTableTextField","props","classes","className","onChangeValue","params","rules","type","rest","api","id","field","value","error","useState","oldValue","setOldValue","validationSchema","useMemo","isNil","object","name","string","nullable","form","defaultValues","mode","shouldUnregister","resolver","watchValue","watch","control","onChangeControl","onChange","valueControl","invalid","meta","useEffect","setEditCellProps","Boolean","subscribeEvent","String","message","root","textFieldError","floatValue","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { GridCellParams, GRID_CELL_EDIT_EXIT } from '@material-ui/data-grid'\n\nimport { FormControllerErrorMessage, AppNumberField } from '@/components'\n\nimport clsx from 'clsx'\nimport * as yup from 'yup'\nimport _ from 'lodash'\n\nimport useStyles from '../styles'\nimport { useForm, useController } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\n\nimport type { AppNumberFieldProps } from '@/components/App/NumberField/type'\n\nexport interface DataTableTextFieldProps extends Omit<AppNumberFieldProps, 'onChange'> {\n  params: GridCellParams\n  onChangeValue(id: any, value: any, field?: any): void\n  rules?: any\n}\n\nconst DataTableTextField: React.FC<DataTableTextFieldProps> = (props) => {\n  const classes = useStyles()\n\n  const { className, onChangeValue, params, rules, type, ...rest } = props\n  const { api, id, field, value, error }: any = params\n\n  const [oldValue, setOldValue] = React.useState('')\n\n  const validationSchema = React.useMemo(() => {\n    if (_.isNil(rules)) {\n      return yup.object({ name: yup.string().nullable() })\n    }\n    return yup.object({ name: rules })\n  }, [rules])\n\n  const form = useForm({\n    defaultValues: {\n      name: value\n    },\n    mode: 'onChange',\n    shouldUnregister: false,\n    resolver: yupResolver(validationSchema)\n  })\n  const watchValue = form.watch('name', null)\n\n  const {\n    field: { onChange: onChangeControl, value: valueControl },\n    meta: { invalid }\n  } = useController({\n    name: 'name',\n    control: form.control\n  })\n\n  React.useEffect(() => {\n    setOldValue(value)\n  }, [])\n\n  React.useEffect(() => {\n    api.setEditCellProps({\n      id,\n      field,\n      props: { value: valueControl, error: Boolean(invalid) }\n    })\n  }, [valueControl, invalid, api, field, id, error])\n\n  React.useEffect(() => {\n    return api.subscribeEvent(GRID_CELL_EDIT_EXIT, () => {\n      if (!error && String(oldValue) !== String(watchValue)) {\n        onChangeValue(id, watchValue, field)\n      }\n    })\n  }, [api, watchValue, error])\n\n  return (\n    <FormControllerErrorMessage open={Boolean(invalid)} title={(invalid as any)?.message}>\n      <AppNumberField\n        {...rest}\n        value={valueControl}\n        autoFocus\n        className={clsx(className, classes.root, invalid && classes.textFieldError)}\n        name=\"name\"\n        onChange={({ floatValue }) => {\n          onChangeControl(floatValue)\n        }}\n      />\n    </FormControllerErrorMessage>\n  )\n}\n\nDataTableTextField.defaultProps = {\n  type: 'text'\n}\n\nexport default DataTableTextField\n"]},"metadata":{},"sourceType":"module"}