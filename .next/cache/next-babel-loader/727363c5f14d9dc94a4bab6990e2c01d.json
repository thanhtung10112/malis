{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\Dialog\\\\Module\\\\Parameter\\\\CodeEditor.tsx\";\nimport { useEffect } from 'react';\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\nimport ReactMarkdown from 'react-markdown';\nimport beautify from 'js-beautify';\nimport { format as sqlFormatter } from 'sql-formatter';\nimport { Grid } from '@material-ui/core';\nimport { When } from 'react-if';\nimport { DialogMain } from '@/components';\n\nfunction DialogCodeEditor(props) {\n  useEffect(() => {\n    require('codemirror/mode/javascript/javascript');\n\n    require('codemirror/mode/sql/sql');\n  }, []);\n  const containGuideline = props.guideline !== '(no guideline)';\n  const jsBeautifier = beautify.js;\n  let codeValue = '';\n\n  if (props.attribute === 'columns_definition') {\n    codeValue = jsBeautifier(props.value);\n  } else {\n    codeValue = sqlFormatter(props.value, {\n      language: 'postgresql'\n    });\n  }\n\n  const onConfirm = () => {\n    props.onConfirm(codeValue, props.attribute);\n  };\n\n  const onClose = () => {\n    props.onClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(DialogMain, {\n    open: props.isOpen,\n    title: props.attribute,\n    onOk: onConfirm,\n    onClose: onClose,\n    closeText: \"Cancel\",\n    maxWidth: containGuideline ? 'lg' : 'md',\n    fullWidth: true,\n    enterToOk: false,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: containGuideline ? 6 : 12,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: '70vh',\n            overflow: 'auto'\n          },\n          children: /*#__PURE__*/_jsxDEV(CodeMirror, {\n            value: codeValue,\n            options: {\n              mode: props.attribute === 'columns_definition' ? 'javascript' : 'sql',\n              json: true,\n              lineWrapping: true,\n              lineNumbers: true\n            },\n            onChange: (editor, data, value) => {\n              codeValue = value;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(When, {\n        condition: containGuideline,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"markdown\",\n            style: {\n              overflow: 'auto',\n              height: '70vh'\n            },\n            children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n              children: props.guideline\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\nexport default DialogCodeEditor;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/Dialog/Module/Parameter/CodeEditor.tsx"],"names":["useEffect","UnControlled","CodeMirror","ReactMarkdown","beautify","format","sqlFormatter","Grid","When","DialogMain","DialogCodeEditor","props","require","containGuideline","guideline","jsBeautifier","js","codeValue","attribute","value","language","onConfirm","onClose","isOpen","height","overflow","mode","json","lineWrapping","lineNumbers","editor","data"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\nimport { UnControlled as CodeMirror } from 'react-codemirror2'\nimport ReactMarkdown from 'react-markdown'\n\nimport beautify from 'js-beautify'\nimport { format as sqlFormatter } from 'sql-formatter'\n\nimport { Grid } from '@material-ui/core'\nimport { When } from 'react-if'\n\nimport { DialogMain } from '@/components'\n\nfunction DialogCodeEditor(props) {\n  useEffect(() => {\n    require('codemirror/mode/javascript/javascript')\n    require('codemirror/mode/sql/sql')\n  }, [])\n\n  const containGuideline = props.guideline !== '(no guideline)'\n\n  const jsBeautifier = beautify.js\n\n  let codeValue = ''\n\n  if (props.attribute === 'columns_definition') {\n    codeValue = jsBeautifier(props.value)\n  } else {\n    codeValue = sqlFormatter(props.value, {\n      language: 'postgresql'\n    })\n  }\n\n  const onConfirm = () => {\n    props.onConfirm(codeValue, props.attribute)\n  }\n\n  const onClose = () => {\n    props.onClose()\n  }\n\n  return (\n    <DialogMain\n      open={props.isOpen}\n      title={props.attribute}\n      onOk={onConfirm}\n      onClose={onClose}\n      closeText=\"Cancel\"\n      maxWidth={containGuideline ? 'lg' : 'md'}\n      fullWidth\n      enterToOk={false}\n    >\n      <Grid container spacing={3}>\n        <Grid item xs={containGuideline ? 6 : 12}>\n          <div style={{ height: '70vh', overflow: 'auto' }}>\n            <CodeMirror\n              value={codeValue}\n              options={{\n                mode: props.attribute === 'columns_definition' ? 'javascript' : 'sql',\n                json: true,\n                lineWrapping: true,\n                lineNumbers: true\n              }}\n              onChange={(editor, data, value) => {\n                codeValue = value\n              }}\n            />\n          </div>\n        </Grid>\n        <When condition={containGuideline}>\n          <Grid item xs={6}>\n            <div className=\"markdown\" style={{ overflow: 'auto', height: '70vh' }}>\n              <ReactMarkdown>{props.guideline}</ReactMarkdown>\n            </div>\n          </Grid>\n        </When>\n      </Grid>\n    </DialogMain>\n  )\n}\n\nexport default DialogCodeEditor\n"]},"metadata":{},"sourceType":"module"}