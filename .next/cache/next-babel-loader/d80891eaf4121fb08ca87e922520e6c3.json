{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport useStyles from '@/styles/page/layout';\nimport { DialogEquivalenceCreateEdit, useConfirm, AppLayout, EditIcon, CreateIcon, DeleteIcon, EnableIcon, DisableIcon, MakeAListIcon } from '@/components';\nimport { Switch, Case, Default } from 'react-if';\nimport clsx from 'clsx';\nimport _ from 'lodash';\nimport { commonStore, equivalenceStore, makeAListActions } from '@/store/reducers';\nimport getMessageConfirm from '@/utils/getMessageConfirm';\nimport * as columnProperties from '@/utils/columnProperties';\n\nfunction LayoutEquivalence({\n  equivalenceType\n}) {\n  const getBreadcrumb = () => {\n    const originalBreadcrumb = [{\n      label: 'Home',\n      href: '/'\n    }, {\n      label: 'Basic Options',\n      href: '/jobs'\n    }];\n\n    if (equivalenceType === 'manufacturing_standard') {\n      originalBreadcrumb.push({\n        label: 'Manufacturing Standards Equivalences Management',\n        href: '/manufacturing_standards'\n      });\n    } else {\n      originalBreadcrumb.push({\n        label: 'Material Standards Equivalences Management',\n        href: '/material_standards'\n      });\n    }\n\n    return originalBreadcrumb;\n  };\n\n  const breadcrumbPage = useMemo(getBreadcrumb, [equivalenceType]);\n  const {\n    t\n  } = useTranslation('equivalence');\n  const {\n    confirm\n  } = useConfirm();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const permissions = useSelector(equivalenceStore.selectPermissions);\n  const selectedRows = useSelector(commonStore.selectSelectedRows);\n  const {\n    wiki_page,\n    column_tooltips\n  } = useSelector(equivalenceStore.selectInitDataForList);\n  useEffect(() => {\n    dispatch(equivalenceStore.actions.setEquivalenceType(equivalenceType));\n  }, [equivalenceType]);\n\n  const onOpenMakeAList = () => {\n    dispatch(makeAListActions.open());\n  };\n\n  const onSelectRows = ({\n    selectionModel\n  }) => {\n    const filterRows = selectionModel.filter(row => typeof row === 'number');\n    dispatch(commonStore.actions.setSelectedRows(filterRows));\n  };\n\n  const onOpenCreateDialog = () => {\n    dispatch(equivalenceStore.sagaOpenCreateDialog());\n  };\n\n  const onOpenUpdateDialog = id => () => {\n    dispatch(equivalenceStore.sagaOpenUpdateDialog(id));\n  };\n\n  const onExecuteActions = operation => async () => {\n    const description = getMessageConfirm(t, 'equivalence', selectedRows, operation);\n    const descriptionType = t(`${description}_${equivalenceType}`, {\n      length: selectedRows.length\n    });\n    const result = await confirm({\n      description: descriptionType\n    });\n\n    if (result === 'OK') {\n      dispatch(commonStore.sagaExecuteOperation({\n        operation,\n        operationList: selectedRows,\n        entity: 'equivalence'\n      }));\n    }\n  };\n\n  const columns = [_objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    description: column_tooltips[equivalenceType].edit,\n    field: 'id',\n    headerName: 'Edit',\n\n    renderCell(params) {\n      if (typeof params.id === 'number') {\n        return /*#__PURE__*/_jsx(EditIcon, {\n          onClick: onOpenUpdateDialog(params.value)\n        });\n      }\n\n      return /*#__PURE__*/_jsx(\"span\", {});\n    }\n\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips[equivalenceType].equiv_id,\n    field: 'equiv_id',\n    headerName: 'Equivalence #',\n    flex: 0.2\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips[equivalenceType].description,\n    field: 'description',\n    headerName: 'Description',\n    flex: 0.3\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips[equivalenceType].organization,\n    field: 'organization',\n    headerName: 'Organization',\n    flex: 0.15\n  }), _objectSpread(_objectSpread({}, columnProperties.defaultProperties), {}, {\n    description: column_tooltips[equivalenceType].standard,\n    field: 'standard',\n    headerName: 'Standard',\n    flex: 0.15\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.iconColumn), {}, {\n    description: column_tooltips[equivalenceType].preferred,\n    width: 100,\n    field: 'preferred',\n    headerName: 'Preferred',\n\n    renderCell(params) {\n      const {\n        preferred\n      } = params.row;\n      return /*#__PURE__*/_jsxs(Switch, {\n        children: [/*#__PURE__*/_jsx(Case, {\n          condition: _.isNull(preferred),\n          children: /*#__PURE__*/_jsx(\"span\", {})\n        }), /*#__PURE__*/_jsx(Case, {\n          condition: preferred,\n          children: /*#__PURE__*/_jsx(EnableIcon, {})\n        }), /*#__PURE__*/_jsx(Default, {\n          children: /*#__PURE__*/_jsx(DisableIcon, {})\n        })]\n      });\n    }\n\n  }), _objectSpread(_objectSpread(_objectSpread({}, columnProperties.defaultProperties), columnProperties.centerColumn), {}, {\n    description: column_tooltips[equivalenceType].status,\n    field: 'status',\n    headerName: 'Status',\n\n    renderCell(params) {\n      const {\n        status\n      } = params.row;\n      return /*#__PURE__*/_jsxs(Switch, {\n        children: [/*#__PURE__*/_jsx(Case, {\n          condition: _.isNull(status),\n          children: /*#__PURE__*/_jsx(\"span\", {})\n        }), /*#__PURE__*/_jsx(Case, {\n          condition: status,\n          children: /*#__PURE__*/_jsx(EnableIcon, {})\n        }), /*#__PURE__*/_jsx(Default, {\n          children: /*#__PURE__*/_jsx(DisableIcon, {})\n        })]\n      });\n    }\n\n  })];\n  return /*#__PURE__*/_jsx(AppLayout, {\n    entity: equivalenceType,\n    breadcrumbs: breadcrumbPage,\n    wikiPage: wiki_page[equivalenceType],\n    permissions: permissions,\n    buttons: [{\n      label: t('common:button.new'),\n      startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n      disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.create),\n      onClick: onOpenCreateDialog\n    }, {\n      label: t('common:button.delete'),\n      startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n      disabled: selectedRows.length <= 0 || !(permissions === null || permissions === void 0 ? void 0 : permissions.delete),\n      onClick: onExecuteActions('delete')\n    }, {\n      label: t('common:button.enable'),\n      startIcon: /*#__PURE__*/_jsx(EnableIcon, {}),\n      disabled: selectedRows.length <= 0 || !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable),\n      onClick: onExecuteActions('enable')\n    }, {\n      label: t('common:button.disable'),\n      startIcon: /*#__PURE__*/_jsx(DisableIcon, {}),\n      disabled: selectedRows.length <= 0 || !(permissions === null || permissions === void 0 ? void 0 : permissions.disable_enable),\n      onClick: onExecuteActions('disable')\n    }, {\n      label: t('common:button.make_a_list'),\n      startIcon: /*#__PURE__*/_jsx(MakeAListIcon, {}),\n      disabled: !(permissions === null || permissions === void 0 ? void 0 : permissions.make_a_list),\n      onClick: onOpenMakeAList\n    }],\n    tableProps: {\n      disableSelectionOnClick: true,\n      columns: columns,\n      getRowClassName: params => clsx({\n        [classes.equivalence]: _.isNumber(params.id),\n        [classes.standard]: !_.isNumber(params.id)\n      }),\n      onSelectionModelChange: onSelectRows\n    },\n    Dialogs: /*#__PURE__*/_jsx(DialogEquivalenceCreateEdit, {})\n  });\n}\n\nexport default LayoutEquivalence;","map":null,"metadata":{},"sourceType":"module"}