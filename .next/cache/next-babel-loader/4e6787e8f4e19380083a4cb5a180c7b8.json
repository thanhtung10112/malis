{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nexport var name = 'group';\nexport var resetState = createAction(\"\".concat(name, \"/\").concat(actionTypes.RESET_STATE));\nvar initialState = {\n  dataList: [],\n  detail: {\n    description: '',\n    group_id: '',\n    name: ''\n  },\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: []\n  },\n  initDataForList: {\n    permissions: {\n      group: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  groupPermissions: {\n    groups: [],\n    permissions: []\n  },\n  initDataForCE: {\n    wiki_page: ''\n  }\n};\nvar groupSlice = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    setDataList: function setDataList(state, action) {\n      state.dataList = action.payload;\n    },\n    setDialogState: function setDialogState(state, _ref) {\n      var payload = _ref.payload;\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n    setHistoryLogs: function setHistoryLogs(state, _ref2) {\n      var payload = _ref2.payload;\n      state.dialogState.historyLogs = payload;\n    },\n    setDialogStateOpen: function setDialogStateOpen(state, _ref3) {\n      var payload = _ref3.payload;\n      state.dialogState.open = payload;\n    },\n    setDialogStateLoading: function setDialogStateLoading(state, _ref4) {\n      var payload = _ref4.payload;\n      state.dialogState.loading = payload;\n    },\n    setDetail: function setDetail(state, _ref5) {\n      var payload = _ref5.payload;\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n    setGroupPermissions: function setGroupPermissions(state, action) {\n      state.groupPermissions.groups = action.payload.groups;\n      state.groupPermissions.permissions = action.payload.permissions;\n    },\n    setInitDataForList: function setInitDataForList(state, _ref6) {\n      var payload = _ref6.payload;\n      state.initDataForList = payload;\n    },\n    resetDetail: function resetDetail(state) {\n      state.detail = _objectSpread({}, initialState.detail);\n    },\n    setInitDataForCE: function setInitDataForCE(state, _ref7) {\n      var payload = _ref7.payload;\n      state.initDataForCE = payload;\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n});\nvar actions = groupSlice.actions; // Saga actions\n\nexport { actions };\nexport var sagaGetList = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_LIST));\nexport var sagaCreate = createAction(\"\".concat(name, \"/\").concat(actionTypes.CREATE));\nexport var sagaOpenCreateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_CREATE_DIALOG));\nexport var sagaOpenUpdateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_UPDATE_DIALOG));\nexport var sagaCloseDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.CLOSE_DIALOG));\nexport var sagaUpdate = createAction(\"\".concat(name, \"/\").concat(actionTypes.UPDATE)); // Permissions saga actions\n\nexport var sagaGetGroupPermissions = createAction(\"\".concat(name, \"/GET_PERMISSIONS\"));\nexport var sagaUpdateGroupPermissions = createAction(\"\".concat(name, \"/UPDATE_PERMISSIONS\")); // Selector\n\nexport var selectState = function selectState(state) {\n  return state[name];\n};\nexport var selectDataList = createSelector(selectState, function (state) {\n  return state.dataList;\n});\nexport var selectPermissions = createSelector(selectState, function (state) {\n  return state.initDataForList.permissions.group;\n});\nexport var selectDetail = createSelector(selectState, function (state) {\n  return state.detail;\n});\nexport var selectDialogState = createSelector(selectState, function (state) {\n  return state.dialogState;\n});\nexport var selectGroupPermissions = createSelector(selectState, function (group) {\n  return group.groupPermissions;\n});\nexport var selectInitDataForList = createSelector(selectState, function (state) {\n  return state.initDataForList;\n});\nexport var selectInitDataForCE = createSelector(selectState, function (state) {\n  return state.initDataForCE;\n});\nexport default groupSlice;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/reducers/group.reducer.ts"],"names":["createSlice","createAction","createSelector","actionTypes","name","resetState","RESET_STATE","initialState","dataList","detail","description","group_id","dialogState","open","loading","historyLogs","initDataForList","permissions","group","wiki_page","column_tooltips","groupPermissions","groups","initDataForCE","groupSlice","reducers","setDataList","state","action","payload","setDialogState","setHistoryLogs","setDialogStateOpen","setDialogStateLoading","setDetail","setGroupPermissions","setInitDataForList","resetDetail","setInitDataForCE","extraReducers","type","actions","sagaGetList","GET_LIST","sagaCreate","CREATE","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaCloseDialog","CLOSE_DIALOG","sagaUpdate","UPDATE","sagaGetGroupPermissions","sagaUpdateGroupPermissions","selectState","selectDataList","selectPermissions","selectDetail","selectDialogState","selectGroupPermissions","selectInitDataForList","selectInitDataForCE"],"mappings":"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","sourcesContent":["import { createSlice, createAction, PayloadAction, createSelector } from '@reduxjs/toolkit'\n\nimport { actionTypes } from '@/utils/constant'\n\nimport type { RootReducerType } from './rootReducer'\nimport type { Entity, HistoryLog } from '@/types/Common'\nimport type { GroupDetail, GroupInitDataForList, GroupInitDataForCE } from '@/types/Group'\n\nexport const name: Entity = 'group'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nconst initialState = {\n  dataList: [] as GroupDetail[],\n  detail: {\n    description: '',\n    group_id: '',\n    name: ''\n  } as GroupDetail,\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: [] as HistoryLog[]\n  },\n  initDataForList: {\n    permissions: {\n      group: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as GroupInitDataForList,\n  groupPermissions: {\n    groups: [],\n    permissions: []\n  },\n  initDataForCE: {\n    wiki_page: ''\n  } as GroupInitDataForCE\n}\n\nconst groupSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, action: PayloadAction<GroupDetail[]>) {\n      state.dataList = action.payload\n    },\n    setDialogState(state, { payload }: PayloadAction<Partial<typeof initialState.dialogState>>) {\n      state.dialogState = {\n        ...state.dialogState,\n        ...payload\n      }\n    },\n    setHistoryLogs(state, { payload }: PayloadAction<HistoryLog[]>) {\n      state.dialogState.historyLogs = payload\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setDetail(state, { payload }: PayloadAction<Partial<GroupDetail>>) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    setGroupPermissions(state, action: any) {\n      state.groupPermissions.groups = action.payload.groups\n      state.groupPermissions.permissions = action.payload.permissions\n    },\n    setInitDataForList(state, { payload }: PayloadAction<GroupInitDataForList>) {\n      state.initDataForList = payload\n    },\n    resetDetail(state) {\n      state.detail = { ...initialState.detail }\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<GroupInitDataForCE>) {\n      state.initDataForCE = payload\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n\nexport const { actions } = groupSlice\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaCreate = createAction<GroupDetail>(`${name}/${actionTypes.CREATE}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaUpdate = createAction<{ id: number; formData: GroupDetail }>(`${name}/${actionTypes.UPDATE}`)\n\n// Permissions saga actions\nexport const sagaGetGroupPermissions = createAction(`${name}/GET_PERMISSIONS`)\nexport const sagaUpdateGroupPermissions = createAction<any>(`${name}/UPDATE_PERMISSIONS`)\n\n// Selector\nexport const selectState = (state: RootReducerType) => state[name]\n\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.group)\nexport const selectDetail = createSelector(selectState, (state) => state.detail)\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\n\nexport const selectGroupPermissions = createSelector(selectState, (group) => group.groupPermissions)\n\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\n\nexport const selectInitDataForCE = createSelector(selectState, (state) => state.initDataForCE)\nexport default groupSlice\n"]},"metadata":{},"sourceType":"module"}