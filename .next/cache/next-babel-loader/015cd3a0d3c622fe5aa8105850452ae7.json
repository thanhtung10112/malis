{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createSelector, createAction } from '@reduxjs/toolkit';\nimport { actionTypes } from '@/utils/constant';\nimport { getDefaultValues } from '@/utils/getDefaultValues';\nexport const name = 'drawing';\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`);\nexport const initialState = {\n  drawingGroupId: -1,\n  dataList: [],\n  detail: {\n    job_id: null,\n    drawing_id: '',\n    revision: 'A',\n    drawing_format: null,\n    drawing_purpose: null,\n    file_prefix: null,\n    file_type: null,\n    associated_documents: [],\n    customer_id: '',\n    additional_attributes: {},\n    descriptions: [],\n    exclude_from_customer: false,\n    exclude_from_other: false,\n    exclude_from_supplier: false,\n    item_list: [],\n    tag_list: [],\n    is_detail_drawing: false,\n    is_drawing: true,\n    is_other_document: false,\n    is_schematic: false,\n    is_specification: false\n  },\n  dialogState: {\n    open: false,\n    loading: false,\n    tab: 0,\n    historyLogs: []\n  },\n  initDataForList: {\n    drawing_groups: [{\n      description: 'All',\n      group_id: null,\n      children: []\n    }],\n    jobs: [],\n    permissions: {\n      drawing: null\n    },\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  initDataForCE: {\n    parameters: {\n      DWAT: [],\n      DWPU: [],\n      // drawing purpose\n      FPRE: [],\n      // file name prefix\n      FTYP: [],\n      // file type\n      PLFO: [],\n      // format\n      PLLA: [],\n      // descriptions\n      PLAT: [] // extended properties\n\n    },\n    wiki_page: ''\n  },\n  revisionDialog: {\n    open: false,\n    loading: false,\n    detail: {\n      new_revision: '',\n      reason: '',\n      description: ''\n    }\n  }\n};\nconst drawing = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, {\n      payload\n    }) {\n      state.dataList = payload;\n    },\n\n    setDialogState(state, {\n      payload\n    }) {\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n\n    setDialogStateOpen(state, {\n      payload\n    }) {\n      state.dialogState.open = payload;\n    },\n\n    setDialogStateLoading(state, {\n      payload\n    }) {\n      state.dialogState.loading = payload;\n    },\n\n    setDialogStateTab(state, {\n      payload\n    }) {\n      state.dialogState.tab = payload;\n    },\n\n    setInitDataForList(state, {\n      payload\n    }) {\n      state.initDataForList = payload;\n    },\n\n    setPermissions(state, {\n      payload\n    }) {\n      state.initDataForList.permissions.drawing = payload;\n    },\n\n    setInitDataForCE(state, {\n      payload\n    }) {\n      state.initDataForCE = payload;\n    },\n\n    setHistoryLogs(state, {\n      payload\n    }) {\n      state.dialogState.historyLogs = payload;\n    },\n\n    setDetail(state, {\n      payload\n    }) {\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n\n    setDrawingGroupId(state, {\n      payload\n    }) {\n      state.drawingGroupId = payload;\n    },\n\n    resetDetail(state, {\n      payload: {\n        userJob\n      }\n    }) {\n      const detailDefaultValue = getDefaultValues(state.initDataForCE.parameters, {\n        drawing_purpose: 'DWPU',\n        file_prefix: 'FPRE',\n        file_type: 'FTYP',\n        drawing_format: 'PLFO'\n      }, initialState.detail);\n      detailDefaultValue.job_id = userJob.value > -1 ? userJob.value : null;\n      state.detail = _objectSpread({}, detailDefaultValue);\n      state.dialogState.tab = 0;\n    },\n\n    setRevisionDialogOpen(state, {\n      payload\n    }) {\n      state.revisionDialog.open = payload;\n    },\n\n    setRevisionDialogLoading(state, {\n      payload\n    }) {\n      state.revisionDialog.loading = payload;\n    },\n\n    setRevisionDialogDetail(state, {\n      payload\n    }) {\n      state.revisionDialog.detail = _objectSpread(_objectSpread({}, state.revisionDialog.detail), payload);\n    },\n\n    resetRevisionDialogDetail(state) {\n      state.revisionDialog.detail = _objectSpread({}, initialState.revisionDialog.detail);\n    }\n\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState;\n    }\n\n  }\n}); // Actions\n\nexport const {\n  actions\n} = drawing; // Saga actions\n\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`);\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`);\nexport const sagaOpenUpdateDialog = createAction(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`);\nexport const sagaOpenCreatePartDialog = createAction(`${name}/OPEN_CREATE_PART_DIALOG`);\nexport const sagaChangeUserJob = createAction(`${name}/${actionTypes.CHANGE_USER_JOB}`);\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`);\nexport const sagaCreate = createAction(`${name}/${actionTypes.CREATE}`);\nexport const sagaUpdate = createAction(`${name}/${actionTypes.UPDATE}`);\nexport const sagaOpenRevDialog = createAction(`${name}/OPEN_REV_DIALOG`);\nexport const sagaSaveNewRev = createAction(`${name}/SAVE_NEW_REV`); // Selectors\n\nconst selectState = state => state[name];\n\nexport const selectDialogState = createSelector(selectState, state => state.dialogState);\nexport const selectDataList = createSelector(selectState, state => state.dataList);\nexport const selectPermissions = createSelector(selectState, state => state.initDataForList.permissions.drawing);\nexport const selectDrawingGroups = createSelector(selectState, ({\n  initDataForList\n}) => {\n  const {\n    drawing_groups\n  } = initDataForList;\n  return drawing_groups[0];\n});\nexport const selectDetail = createSelector(selectState, ({\n  detail\n}) => detail);\nexport const selectInitDataForList = createSelector(selectState, state => state.initDataForList);\nexport const selectInitDataForCE = createSelector(selectState, ({\n  initDataForCE\n}) => initDataForCE);\nexport const selectParameters = createSelector(selectState, ({\n  initDataForCE\n}) => initDataForCE.parameters);\nexport const selectDrawingGroupId = createSelector(selectState, ({\n  drawingGroupId\n}) => drawingGroupId);\nexport const selectRevisionDialog = createSelector(selectState, state => state.revisionDialog);\nexport default drawing;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/reducers/drawing.reducer.ts"],"names":["createSlice","createSelector","createAction","actionTypes","getDefaultValues","name","resetState","RESET_STATE","initialState","drawingGroupId","dataList","detail","job_id","drawing_id","revision","drawing_format","drawing_purpose","file_prefix","file_type","associated_documents","customer_id","additional_attributes","descriptions","exclude_from_customer","exclude_from_other","exclude_from_supplier","item_list","tag_list","is_detail_drawing","is_drawing","is_other_document","is_schematic","is_specification","dialogState","open","loading","tab","historyLogs","initDataForList","drawing_groups","description","group_id","children","jobs","permissions","drawing","parameters","PLLA","wiki_page","column_tooltips","initDataForCE","DWAT","DWPU","FPRE","FTYP","PLFO","PLAT","revisionDialog","new_revision","reason","reducers","setDataList","state","payload","setDialogState","setDialogStateOpen","setDialogStateLoading","setDialogStateTab","setInitDataForList","setPermissions","setInitDataForCE","setHistoryLogs","setDetail","setDrawingGroupId","resetDetail","userJob","detailDefaultValue","value","setRevisionDialogOpen","setRevisionDialogLoading","setRevisionDialogDetail","resetRevisionDialogDetail","extraReducers","type","actions","sagaGetList","GET_LIST","sagaOpenCreateDialog","OPEN_CREATE_DIALOG","sagaOpenUpdateDialog","OPEN_UPDATE_DIALOG","sagaOpenCreatePartDialog","sagaChangeUserJob","CHANGE_USER_JOB","sagaCloseDialog","CLOSE_DIALOG","sagaCreate","CREATE","sagaUpdate","UPDATE","sagaOpenRevDialog","sagaSaveNewRev","selectState","selectDialogState","selectDataList","selectPermissions","selectDrawingGroups","selectDetail","selectInitDataForList","selectInitDataForCE","selectParameters","selectDrawingGroupId","selectRevisionDialog"],"mappings":"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","sourcesContent":["import { createSlice, createSelector, PayloadAction, createAction } from '@reduxjs/toolkit'\nimport { actionTypes } from '@/utils/constant'\nimport { getDefaultValues } from '@/utils/getDefaultValues'\n\nimport type { RootReducerType } from './rootReducer'\nimport type { Entity, HistoryLog, ParameterOption } from '@/types/Common'\nimport type {\n  DrawingInitDataForCE,\n  DrawingInitDataForList,\n  DrawingItem,\n  DrawingPermissions,\n  DrawingDetail,\n  RevisionDetail\n} from '@/types/Drawing'\nimport type { PartEntity } from '@/types/Part'\n\nexport const name: Entity = 'drawing'\nexport const resetState = createAction(`${name}/${actionTypes.RESET_STATE}`)\n\nexport const initialState = {\n  drawingGroupId: -1,\n  dataList: [] as DrawingItem[],\n  detail: {\n    job_id: null,\n    drawing_id: '',\n    revision: 'A',\n    drawing_format: null,\n    drawing_purpose: null,\n    file_prefix: null,\n    file_type: null,\n    associated_documents: [],\n    customer_id: '',\n    additional_attributes: {},\n    descriptions: [],\n    exclude_from_customer: false,\n    exclude_from_other: false,\n    exclude_from_supplier: false,\n    item_list: [],\n    tag_list: [],\n    is_detail_drawing: false,\n    is_drawing: true,\n    is_other_document: false,\n    is_schematic: false,\n    is_specification: false\n  } as DrawingDetail,\n  dialogState: {\n    open: false,\n    loading: false,\n    tab: 0,\n    historyLogs: [] as HistoryLog[]\n  },\n  initDataForList: {\n    drawing_groups: [{ description: 'All', group_id: null, children: [] }],\n    jobs: [],\n    permissions: {\n      drawing: null\n    },\n    parameters: {\n      PLLA: []\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  } as DrawingInitDataForList,\n  initDataForCE: {\n    parameters: {\n      DWAT: [],\n      DWPU: [], // drawing purpose\n      FPRE: [], // file name prefix\n      FTYP: [], // file type\n      PLFO: [], // format\n      PLLA: [], // descriptions\n      PLAT: [] // extended properties\n    },\n    wiki_page: ''\n  } as DrawingInitDataForCE,\n  revisionDialog: {\n    open: false,\n    loading: false,\n    detail: {\n      new_revision: '',\n      reason: '',\n      description: ''\n    } as RevisionDetail\n  }\n}\n\nconst drawing = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setDataList(state, { payload }: PayloadAction<DrawingItem[]>) {\n      state.dataList = payload\n    },\n    setDialogState(state, { payload }: PayloadAction<Partial<typeof initialState.dialogState>>) {\n      state.dialogState = {\n        ...state.dialogState,\n        ...payload\n      }\n    },\n    setDialogStateOpen(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.open = payload\n    },\n    setDialogStateLoading(state, { payload }: PayloadAction<boolean>) {\n      state.dialogState.loading = payload\n    },\n    setDialogStateTab(state, { payload }: PayloadAction<number>) {\n      state.dialogState.tab = payload\n    },\n    setInitDataForList(state, { payload }: PayloadAction<DrawingInitDataForList>) {\n      state.initDataForList = payload\n    },\n    setPermissions(state, { payload }: PayloadAction<DrawingPermissions>) {\n      state.initDataForList.permissions.drawing = payload\n    },\n    setInitDataForCE(state, { payload }: PayloadAction<DrawingInitDataForCE>) {\n      state.initDataForCE = payload\n    },\n    setHistoryLogs(state, { payload }: PayloadAction<HistoryLog[]>) {\n      state.dialogState.historyLogs = payload\n    },\n    setDetail(state, { payload }: PayloadAction<Partial<DrawingDetail>>) {\n      state.detail = {\n        ...state.detail,\n        ...payload\n      }\n    },\n    setDrawingGroupId(state, { payload }: PayloadAction<number>) {\n      state.drawingGroupId = payload\n    },\n    resetDetail(state, { payload: { userJob } }) {\n      const detailDefaultValue = getDefaultValues(\n        state.initDataForCE.parameters,\n        {\n          drawing_purpose: 'DWPU',\n          file_prefix: 'FPRE',\n          file_type: 'FTYP',\n          drawing_format: 'PLFO'\n        },\n        initialState.detail\n      )\n      detailDefaultValue.job_id = userJob.value > -1 ? userJob.value : null\n      state.detail = { ...detailDefaultValue }\n      state.dialogState.tab = 0\n    },\n    setRevisionDialogOpen(state, { payload }: PayloadAction<boolean>) {\n      state.revisionDialog.open = payload\n    },\n    setRevisionDialogLoading(state, { payload }: PayloadAction<boolean>) {\n      state.revisionDialog.loading = payload\n    },\n    setRevisionDialogDetail(state, { payload }: PayloadAction<Partial<RevisionDetail>>) {\n      state.revisionDialog.detail = {\n        ...state.revisionDialog.detail,\n        ...payload\n      }\n    },\n    resetRevisionDialogDetail(state) {\n      state.revisionDialog.detail = { ...initialState.revisionDialog.detail }\n    }\n  },\n  extraReducers: {\n    [resetState.type]() {\n      return initialState\n    }\n  }\n})\n// Actions\nexport const { actions } = drawing\n\n// Saga actions\nexport const sagaGetList = createAction(`${name}/${actionTypes.GET_LIST}`)\nexport const sagaOpenCreateDialog = createAction(`${name}/${actionTypes.OPEN_CREATE_DIALOG}`)\nexport const sagaOpenUpdateDialog = createAction<number>(`${name}/${actionTypes.OPEN_UPDATE_DIALOG}`)\nexport const sagaOpenCreatePartDialog = createAction<PartEntity>(`${name}/OPEN_CREATE_PART_DIALOG`)\nexport const sagaChangeUserJob = createAction<ParameterOption>(`${name}/${actionTypes.CHANGE_USER_JOB}`)\nexport const sagaCloseDialog = createAction(`${name}/${actionTypes.CLOSE_DIALOG}`)\nexport const sagaCreate = createAction<DrawingDetail>(`${name}/${actionTypes.CREATE}`)\nexport const sagaUpdate = createAction<{ id: number; drawing: DrawingDetail }>(`${name}/${actionTypes.UPDATE}`)\nexport const sagaOpenRevDialog = createAction<string>(`${name}/OPEN_REV_DIALOG`)\nexport const sagaSaveNewRev = createAction<{ revision: RevisionDetail; drawingId: number }>(`${name}/SAVE_NEW_REV`)\n\n// Selectors\nconst selectState = (state: RootReducerType) => state[name]\nexport const selectDialogState = createSelector(selectState, (state) => state.dialogState)\nexport const selectDataList = createSelector(selectState, (state) => state.dataList)\nexport const selectPermissions = createSelector(selectState, (state) => state.initDataForList.permissions.drawing)\nexport const selectDrawingGroups = createSelector(selectState, ({ initDataForList }) => {\n  const { drawing_groups } = initDataForList\n  return drawing_groups[0]\n})\n\nexport const selectDetail = createSelector(selectState, ({ detail }) => detail)\n\nexport const selectInitDataForList = createSelector(selectState, (state) => state.initDataForList)\n\nexport const selectInitDataForCE = createSelector(selectState, ({ initDataForCE }) => initDataForCE)\n\nexport const selectParameters = createSelector(selectState, ({ initDataForCE }) => initDataForCE.parameters)\n\nexport const selectDrawingGroupId = createSelector(selectState, ({ drawingGroupId }) => drawingGroupId)\n\nexport const selectRevisionDialog = createSelector(selectState, (state) => state.revisionDialog)\n\nexport default drawing\n"]},"metadata":{},"sourceType":"module"}