{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, put, call, putResolve } from 'redux-saga/effects';\nimport { select, all } from 'typed-redux-saga';\nimport _ from 'lodash';\nimport { assemblyStore, commonStore, advancedFilterActions } from '@/store/reducers';\nimport assemblyApi from '@/apis/assembly.api';\n\nfunction* fetchAssemblyInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob);\n  const data = yield call(assemblyApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  }); // when logged in as the fresh user, the API will not send the selected_job attribute\n  // then we will set selected_job as an empty object\n\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {};\n  } // the API will not send the selected_job attribute if you are in the all_job or all_standard mode,\n  // then we will set selected_job = current selected user job\n\n\n  if (userJob.value === -1 || userJob.value === -2) {\n    data.selected_job = userJob;\n  }\n\n  yield all([put(commonStore.actions.setUserValueJob(data.selected_job)), put(assemblyStore.actions.setInitDataForList(data))]);\n}\n\nfunction* fetchAssemblyList() {\n  const {\n    tableState,\n    searchQuery,\n    filterData,\n    userJob,\n    userDrawing\n  } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    userDrawing: select(commonStore.selectUserValueDrawing)\n  });\n\n  if (!userJob.value) {\n    return;\n  }\n\n  const {\n    page,\n    per_page\n  } = tableState;\n  const data = yield call(assemblyApi.getList, _objectSpread({\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    drawing_id: userDrawing.value\n  }, filterData));\n  yield put(commonStore.actions.setTableState({\n    total_items: data.total_items\n  }));\n  yield put(assemblyStore.actions.setDataList(data.assemblies));\n}\n\nfunction* getAssemblyList() {\n  yield put(commonStore.actions.setLoadingPage(true));\n\n  try {\n    yield call(fetchAssemblyInitDataForList);\n    const permissions = yield* select(assemblyStore.selectPermissions);\n\n    if (permissions === null || permissions === void 0 ? void 0 : permissions.view) {\n      yield call(fetchAssemblyList);\n    }\n  } catch (error) {\n    yield put(commonStore.actions.setError(error));\n  }\n\n  yield put(commonStore.actions.setLoadingPage(false));\n}\n\nfunction* changeUserJob({\n  payload\n}) {\n  yield all([put(commonStore.actions.setUserValueJob(payload)), put(commonStore.actions.setUserValueDrawing(commonStore.initialState.userValue.drawing))]);\n  yield call(getAssemblyList);\n}\n\nfunction* changeUserDrawing({\n  payload\n}) {\n  yield putResolve(commonStore.actions.setUserValueDrawing(payload));\n  yield call(getAssemblyList);\n}\n\nfunction* assemblySaga() {\n  yield takeEvery(assemblyStore.sagaGetList, getAssemblyList);\n  yield takeEvery(assemblyStore.sagaChangeUserJob, changeUserJob);\n  yield takeEvery(assemblyStore.sagaChangeUserDrawing, changeUserDrawing);\n}\n\nexport default assemblySaga;","map":{"version":3,"sources":["D:/Fersher/TTS_Reactjs/malis-3-frontend/src/store/saga/assembly.saga.ts"],"names":["takeEvery","put","call","putResolve","select","all","_","assemblyStore","commonStore","advancedFilterActions","assemblyApi","fetchAssemblyInitDataForList","userJob","selectUserValueJob","data","getInitDataForList","job_id_pk","value","isNull","selected_job","actions","setUserValueJob","setInitDataForList","fetchAssemblyList","tableState","searchQuery","filterData","userDrawing","selectTableState","selectSearchQuery","selectFilterData","selectUserValueDrawing","page","per_page","getList","s","job_id","drawing_id","setTableState","total_items","setDataList","assemblies","getAssemblyList","setLoadingPage","permissions","selectPermissions","view","error","setError","changeUserJob","payload","setUserValueDrawing","initialState","userValue","drawing","changeUserDrawing","assemblySaga","sagaGetList","sagaChangeUserJob","sagaChangeUserDrawing"],"mappings":"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","sourcesContent":["import { takeEvery, put, call, putResolve } from 'redux-saga/effects'\nimport { select, all } from 'typed-redux-saga'\nimport _ from 'lodash'\n\nimport { assemblyStore, commonStore, advancedFilterActions } from '@/store/reducers'\nimport assemblyApi from '@/apis/assembly.api'\n\nfunction* fetchAssemblyInitDataForList() {\n  const userJob = yield* select(commonStore.selectUserValueJob)\n  const data = yield call(assemblyApi.getInitDataForList, {\n    job_id_pk: userJob.value\n  })\n  // when logged in as the fresh user, the API will not send the selected_job attribute\n  // then we will set selected_job as an empty object\n  if (_.isNull(data.selected_job)) {\n    data.selected_job = {}\n  }\n  // the API will not send the selected_job attribute if you are in the all_job or all_standard mode,\n  // then we will set selected_job = current selected user job\n  if (userJob.value === -1 || userJob.value === -2) {\n    data.selected_job = userJob\n  }\n  yield all([\n    put(commonStore.actions.setUserValueJob(data.selected_job)),\n    put(assemblyStore.actions.setInitDataForList(data))\n  ])\n}\n\nfunction* fetchAssemblyList() {\n  const { tableState, searchQuery, filterData, userJob, userDrawing } = yield* all({\n    tableState: select(commonStore.selectTableState),\n    searchQuery: select(commonStore.selectSearchQuery),\n    filterData: select(advancedFilterActions.selectFilterData),\n    userJob: select(commonStore.selectUserValueJob),\n    userDrawing: select(commonStore.selectUserValueDrawing)\n  })\n  if (!userJob.value) {\n    return\n  }\n  const { page, per_page } = tableState\n  const data = yield call(assemblyApi.getList, {\n    per_page,\n    page,\n    s: searchQuery,\n    job_id: userJob.value,\n    drawing_id: userDrawing.value,\n    ...filterData\n  })\n  yield put(commonStore.actions.setTableState({ total_items: data.total_items }))\n  yield put(assemblyStore.actions.setDataList(data.assemblies))\n}\n\nfunction* getAssemblyList() {\n  yield put(commonStore.actions.setLoadingPage(true))\n  try {\n    yield call(fetchAssemblyInitDataForList)\n    const permissions = yield* select(assemblyStore.selectPermissions)\n    if (permissions?.view) {\n      yield call(fetchAssemblyList)\n    }\n  } catch (error) {\n    yield put(commonStore.actions.setError(error))\n  }\n  yield put(commonStore.actions.setLoadingPage(false))\n}\n\nfunction* changeUserJob({ payload }: ReturnType<typeof assemblyStore.sagaChangeUserJob>) {\n  yield all([\n    put(commonStore.actions.setUserValueJob(payload)),\n    put(commonStore.actions.setUserValueDrawing(commonStore.initialState.userValue.drawing))\n  ])\n  yield call(getAssemblyList)\n}\n\nfunction* changeUserDrawing({ payload }: ReturnType<typeof assemblyStore.sagaChangeUserDrawing>) {\n  yield putResolve(commonStore.actions.setUserValueDrawing(payload))\n  yield call(getAssemblyList)\n}\n\nfunction* assemblySaga() {\n  yield takeEvery(assemblyStore.sagaGetList, getAssemblyList)\n  yield takeEvery(assemblyStore.sagaChangeUserJob, changeUserJob)\n  yield takeEvery(assemblyStore.sagaChangeUserDrawing, changeUserDrawing)\n}\n\nexport default assemblySaga\n"]},"metadata":{},"sourceType":"module"}