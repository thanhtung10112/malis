{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport useStyles from './styles';\nimport useGetData from '@/hooks/useGetData';\nimport { useDispatch, useSelector } from 'react-redux'; // import { useTranslation } from 'next-i18next'\n\nimport { Paper, Link } from '@material-ui/core';\nimport { DataTable, CreateIcon, DeleteIcon, AppButton, DialogTag } from '@/components';\nimport immer from 'immer'; // import _ from 'lodash'\n\nimport { commonStore, drawingStore } from '@/store/reducers';\nimport { defaultTagInitDataForCE, defaultTagDetail } from '@/utils/defaultValues';\nimport { defaultProperties } from '@/utils/columnProperties'; // import getMessageConfirm from '@/utils/getMessageConfirm'\n\nconst TabTags = () => {\n  const classes = useStyles();\n  const {\n    getInitDataForCE,\n    getGeneratedCode,\n    getDetail\n  } = useGetData('elements');\n  const {\n    getDetail: getDrawingDetail\n  } = useGetData('drawings'); // const { confirm } = useConfirm()\n  // const { t } = useTranslation('element')\n\n  const {\n    0: openDialog,\n    1: setOpenDialog\n  } = useState(false);\n  const {\n    0: initDataForCE,\n    1: setInitDataForCE\n  } = useState(defaultTagInitDataForCE);\n  const {\n    0: tagDetail,\n    1: setTagDetail\n  } = useState(defaultTagDetail);\n  const {\n    0: selectedRows,\n    1: setSelectedRows\n  } = useState([]);\n  const drawingForm = useFormContext();\n  const watchTagsList = drawingForm.watch('tag_list', []) || [];\n  const watchId = drawingForm.watch('id', null);\n  const watchDrawing_id = drawingForm.watch('drawing_id', '');\n  const dispatch = useDispatch();\n  const userJob = useSelector(commonStore.selectUserValueJob);\n  const userDrawing = useSelector(commonStore.selectUserValueDrawing);\n  useEffect(() => {\n    const schematicValue = userDrawing.value > 0 ? userDrawing : null;\n    setTagDetail(currentState => immer(currentState, draft => {\n      draft.schematic_id = schematicValue;\n    }));\n  }, [userDrawing]);\n  useEffect(() => {\n    setTagDetail(currentState => immer(currentState, draft => {\n      draft.job_id = userJob.value;\n    }));\n  }, [userJob]);\n\n  const handleSelectRows = ({\n    selectionModel\n  }) => {\n    setSelectedRows(selectionModel);\n  };\n\n  const resetDetail = () => {\n    setTagDetail(currentState => immer(defaultTagDetail, draft => {\n      draft.schematic_id = currentState.schematic_id;\n      draft.job_id = currentState.job_id;\n    }));\n  };\n\n  const handleCloseDialog = async () => {\n    setOpenDialog(false);\n    dispatch(drawingStore.actions.setDialogStateLoading(true));\n\n    try {\n      const {\n        tag_list\n      } = await getDrawingDetail(watchId);\n      drawingForm.setValue('tag_list', tag_list);\n      resetDetail();\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    dispatch(drawingStore.actions.setDialogStateLoading(false));\n  };\n\n  const updateUserDrawing = () => {\n    dispatch(commonStore.actions.setUserValueDrawing({\n      entity_id: watchDrawing_id,\n      description: '',\n      value: watchId\n    }));\n  };\n\n  const handleOpenTagCreateDialog = async () => {\n    updateUserDrawing();\n    dispatch(commonStore.actions.setLoadingPage(true));\n\n    try {\n      const resInitDataForCE = await getInitDataForCE();\n      const generatedCode = await getGeneratedCode({\n        drawing_id: watchId\n      });\n      setInitDataForCE(resInitDataForCE);\n      setTagDetail(currentState => immer(currentState, draft => {\n        draft.element_id = generatedCode;\n      }));\n      setOpenDialog(true);\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    dispatch(commonStore.actions.setLoadingPage(false));\n  };\n\n  const handleOpenTagUpdateDialog = id => async event => {\n    event.preventDefault();\n    updateUserDrawing();\n    dispatch(commonStore.actions.setLoadingPage(true));\n\n    try {\n      const resInitDataForCE = await getInitDataForCE();\n      const resDetail = await getDetail(id);\n      setInitDataForCE(resInitDataForCE);\n      setTagDetail(immer(resDetail, draft => {\n        draft.schematic_id = resDetail.related_schematic;\n        draft.part_id = resDetail.related_part;\n      }));\n      setOpenDialog(true);\n    } catch (error) {\n      console.error('error', '>>>', error);\n    }\n\n    dispatch(commonStore.actions.setLoadingPage(false));\n  }; // const handleRemoveTags = async () => {\n  //   const description = getMessageConfirm(t, 'element', selectedRows, 'delete')\n  //   const result = await confirm({ description })\n  //   if (result === 'OK') {\n  //     const tags: PayloadOperation[] = _.map(selectedRows, (partId) => {\n  //       const { element_id, id } = _.find(watchTagsList, { id: partId })\n  //       return { entity_id: element_id, id }\n  //     })\n  //     // dispatch(tagStore.sagaRemove(tags))\n  //   }\n  // }\n\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: classes.buttonGroupRoot,\n      children: [/*#__PURE__*/_jsx(AppButton, {\n        startIcon: /*#__PURE__*/_jsx(CreateIcon, {}),\n        onClick: handleOpenTagCreateDialog,\n        children: \"New\"\n      }), /*#__PURE__*/_jsx(AppButton, {\n        startIcon: /*#__PURE__*/_jsx(DeleteIcon, {}),\n        disabled: selectedRows.length === 0,\n        children: \"Remove\"\n      })]\n    }), /*#__PURE__*/_jsx(Paper, {\n      elevation: 1,\n      children: /*#__PURE__*/_jsx(DataTable, {\n        rows: watchTagsList,\n        checkboxSelection: true,\n        selectionModel: selectedRows,\n        onSelectionModelChange: handleSelectRows,\n        onCellClick: (params, event) => {\n          if (['element_id'].includes(params.field)) {\n            event.stopPropagation();\n          }\n        },\n        columns: [_objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'element_id',\n          headerName: 'Element #',\n          flex: 0.15,\n\n          renderCell(params) {\n            const {\n              value,\n              id\n            } = params;\n            return /*#__PURE__*/_jsx(Link, {\n              href: \"#\",\n              onClick: handleOpenTagUpdateDialog(id),\n              children: value\n            });\n          }\n\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'tag',\n          headerName: 'Tag #',\n          flex: 0.15\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'related_part',\n          headerName: 'Part',\n          valueGetter: params => params.value.entity_id,\n          flex: 0.15\n        }), _objectSpread(_objectSpread({}, defaultProperties), {}, {\n          field: 'description',\n          headerName: 'Description',\n          flex: 0.6\n        })],\n        hideFooter: true,\n        tableHeight: 385\n      })\n    }), /*#__PURE__*/_jsx(DialogTag, {\n      open: openDialog,\n      initData: initDataForCE,\n      detail: tagDetail,\n      onClose: handleCloseDialog\n    })]\n  });\n};\n\nexport default TabTags;","map":null,"metadata":{},"sourceType":"module"}