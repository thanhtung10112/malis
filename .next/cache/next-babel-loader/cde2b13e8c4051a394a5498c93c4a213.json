{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice, createAction, createSelector } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { actionTypes } from '@/utils/constant';\nexport var name = 'job';\nexport var resetState = createAction(\"\".concat(name, \"/\").concat(actionTypes.RESET_STATE));\nexport var transferListState = {\n  userAvailableList: [],\n  userGroup: [],\n  open: false\n};\nexport var jobDetail = {\n  job_id: '',\n  equipment_type: null,\n  language: null,\n  erection_site: null,\n  job_standard: [],\n  people_responsible: [],\n  squad_leader: [],\n  drawings_responsible: [],\n  contract_no: '',\n  contract_desc: '',\n  credit_letter: '',\n  logo: null,\n  additional_attributes: {},\n  job_currencies: [],\n  job_descriptions: [],\n  job_users: [],\n  job_expediting_dates: []\n};\nexport var initialState = {\n  dataList: [],\n  dialogState: {\n    open: false,\n    loading: false,\n    historyLogs: []\n  },\n  selectedJobCategory: {\n    description: '',\n    id: null,\n    parameter_id: ''\n  },\n  initDataForList: {\n    job_categories: [],\n    permissions: {\n      job: null\n    },\n    wiki_page: '',\n    column_tooltips: {}\n  },\n  initDataForCE: {\n    currencies: [],\n    group_map: {\n      job_all: '',\n      job_drawing: '',\n      job_responsible: '',\n      job_squad_leader: ''\n    },\n    erection_sites: [],\n    parameters: {\n      EQTY: [],\n      JOAT: [],\n      PLLA: [],\n      PLNO: []\n    },\n    tooltip: '<span></span>',\n    job_template: jobDetail,\n    wiki_page: ''\n  },\n  transferListState: transferListState,\n  keyMapping: null,\n  detail: jobDetail\n};\nvar jobSlice = createSlice({\n  name: name,\n  initialState: initialState,\n  reducers: {\n    setDataList: function setDataList(state, _ref) {\n      var payload = _ref.payload;\n      state.dataList = payload;\n    },\n    setDialogState: function setDialogState(state, _ref2) {\n      var payload = _ref2.payload;\n      state.dialogState = _objectSpread(_objectSpread({}, state.dialogState), payload);\n    },\n    setHistoryLogs: function setHistoryLogs(state, _ref3) {\n      var payload = _ref3.payload;\n      state.dialogState.historyLogs = payload;\n    },\n    setDialogStateOpen: function setDialogStateOpen(state, _ref4) {\n      var payload = _ref4.payload;\n      state.dialogState.open = payload;\n    },\n    setDialogStateLoading: function setDialogStateLoading(state, _ref5) {\n      var payload = _ref5.payload;\n      state.dialogState.loading = payload;\n    },\n    setInitDataForList: function setInitDataForList(state, _ref6) {\n      var payload = _ref6.payload;\n      state.initDataForList = payload;\n    },\n    setInitDataForCE: function setInitDataForCE(state, _ref7) {\n      var payload = _ref7.payload;\n      state.initDataForCE = payload;\n    },\n    setOpenTransferList: function setOpenTransferList(state, _ref8) {\n      var payload = _ref8.payload;\n      state.transferListState.open = payload;\n    },\n    setTransferUserAvailableList: function setTransferUserAvailableList(state, _ref9) {\n      var payload = _ref9.payload;\n      state.transferListState.userAvailableList = payload;\n    },\n    setTransferListUserGroup: function setTransferListUserGroup(state, _ref10) {\n      var payload = _ref10.payload;\n      state.transferListState.userGroup = payload;\n    },\n    setDetail: function setDetail(state, _ref11) {\n      var payload = _ref11.payload;\n      state.detail = _objectSpread(_objectSpread({}, state.detail), payload);\n    },\n    setSelectedCategory: function setSelectedCategory(state, _ref12) {\n      var payload = _ref12.payload;\n      state.selectedJobCategory = payload;\n    },\n    setKeyMapping: function setKeyMapping(state, _ref13) {\n      var payload = _ref13.payload;\n      state.keyMapping = payload;\n    },\n    closeTransferList: function closeTransferList(state) {\n      state.transferListState = _objectSpread(_objectSpread({}, transferListState), {}, {\n        userGroup: state.transferListState.userGroup\n      });\n    },\n    setPermissions: function setPermissions(state, _ref14) {\n      var payload = _ref14.payload;\n      state.initDataForList.permissions.job = payload;\n    },\n    resetDetail: function resetDetail(state) {\n      var jobStandard = state.initDataForCE.parameters.PLNO.map(function (item) {\n        return _.pick(item, ['description', 'parameter_id', 'id']);\n      });\n      state.detail = _objectSpread(_objectSpread({}, jobDetail), {}, {\n        job_standard: jobStandard\n      });\n    }\n  },\n  extraReducers: _defineProperty({}, resetState.type, function () {\n    return initialState;\n  })\n}); // Actions\n\nvar actions = jobSlice.actions; // Saga actions\n\nexport { actions };\nexport var sagaGetList = createAction(\"\".concat(name, \"/\").concat(actionTypes.GET_LIST));\nexport var sagaOpenCreateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_CREATE_DIALOG));\nexport var sagaOpenUpdateDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.OPEN_UPDATE_DIALOG));\nexport var sagaCloseDialog = createAction(\"\".concat(name, \"/\").concat(actionTypes.CLOSE_DIALOG));\nexport var sagaCreate = createAction(\"\".concat(name, \"/\").concat(actionTypes.CREATE));\nexport var sagaUpdate = createAction(\"\".concat(name, \"/\").concat(actionTypes.UPDATE));\nexport var sagaGetUserGroupMapping = createAction(\"\".concat(name, \"/GET_USER_GROUP_MAPPING\")); // Selector\n\nexport var selectState = function selectState(state) {\n  return state[name];\n};\nexport var selectDataList = createSelector(selectState, function (state) {\n  return state.dataList;\n});\nexport var selectJobCategories = createSelector(selectState, function (state) {\n  return state.initDataForList.job_categories;\n});\nexport var selectPermissions = createSelector(selectState, function (state) {\n  return state.initDataForList.permissions.job;\n});\nexport var selectDialogState = createSelector(selectState, function (state) {\n  return state.dialogState;\n});\nexport var selectInitDataForCE = createSelector(selectState, function (state) {\n  return state.initDataForCE;\n});\nexport var selectTransferListState = createSelector(selectState, function (state) {\n  return state.transferListState;\n});\nexport var selectDetail = createSelector(selectState, function (state) {\n  return state.detail;\n});\nexport var selectKeyMapping = createSelector(selectState, function (state) {\n  return state.keyMapping;\n});\nexport var selectSelectedJobCategory = createSelector(selectState, function (state) {\n  return state.selectedJobCategory;\n});\nexport var selectInitDataForList = createSelector(selectState, function (state) {\n  return state.initDataForList;\n});\nexport default jobSlice;","map":null,"metadata":{},"sourceType":"module"}