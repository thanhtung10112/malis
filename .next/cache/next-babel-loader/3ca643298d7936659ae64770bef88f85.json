{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\TTS_Reactjs\\\\malis-3-frontend\\\\src\\\\components\\\\AdvancedFilter\\\\FilterDetails.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'next-i18next';\nimport { useForm } from 'react-hook-form';\nimport _ from 'lodash';\nimport { Button, Tab, Tabs, Checkbox, TextField, FormControlLabel, Typography, Grid, Tooltip } from '@material-ui/core';\nimport { FileCopy as FileCopyIcon, Edit as EditIcon, Save as SaveIcon, Delete as DeleteIcon, FilterList as FilterIcon, Close as CloseIcon } from '@material-ui/icons';\nimport { MalisPanel, DialogMain, useConfirm, confirmConstant, FormControllerTextField } from '@/components/index';\nimport { When, Unless } from 'react-if';\nimport ConditionTree from './ConditionTree';\nimport SortConditionList from './SortConditionList';\nimport useStyles from './styles';\nimport { authStore, advancedFilterActions, commonStore } from '@/store/reducers';\nexport const conjunctions = [{\n  description: 'AND',\n  value: 'AND'\n}, {\n  description: 'OR',\n  value: 'OR'\n}];\n\nfunction FilterDetails({\n  activeTab,\n  onChangeActiveTab\n}) {\n  var _saveAsForm$errors$sa;\n\n  // props.entity is the thing that you will pass to the backend to get the corresponding data for each module\n  const classes = useStyles();\n  const {\n    confirm\n  } = useConfirm();\n  const {\n    t\n  } = useTranslation(['common', 'advanced_filter']);\n  const dispatch = useDispatch();\n  const columnOptions = useSelector(advancedFilterActions.selectColumn);\n  const comparatorOptions = useSelector(advancedFilterActions.selectComparator);\n  const sortOptions = useSelector(advancedFilterActions.selectSortOptions);\n  const conditionTreeData = useSelector(advancedFilterActions.selectConditionTree);\n  const sortConditions = useSelector(advancedFilterActions.selectSortConditions);\n  const isUserDefault = useSelector(advancedFilterActions.selectUserDefault);\n  const filterName = useSelector(advancedFilterActions.selectFilterDetailName);\n  const isEditMode = useSelector(advancedFilterActions.selectEditMode);\n  const filterDetail = useSelector(advancedFilterActions.selectFilterDetail);\n  const permissions = useSelector(advancedFilterActions.selectPermissions);\n  const loading = useSelector(advancedFilterActions.selectLoading);\n  const afFormSelector = useSelector(advancedFilterActions.selectAfForm);\n  const saveAsFormSelector = useSelector(advancedFilterActions.selectSaveAsForm);\n  const userInfo = useSelector(authStore.selectProfile);\n  const isSharedMode = filterDetail.created_by && filterDetail.created_by !== userInfo.user_name;\n  const conjunctionOptions = conjunctions;\n  const treeData = useMemo(() => _.cloneDeep(conditionTreeData), [conditionTreeData]);\n  const sortData = useMemo(() => _.cloneDeep(sortConditions), [sortConditions]);\n  const saveAsForm = useForm({\n    defaultValues: {\n      save_as_name: ''\n    },\n    shouldUnregister: false\n  });\n  const afForm = useForm({\n    defaultValues: {\n      name: ''\n    },\n    shouldUnregister: false\n  });\n  const formValidation = {\n    name: {\n      required: {\n        value: true,\n        message: t('advanced_filter:validations.name_required')\n      },\n      maxLength: {\n        value: 80,\n        message: t('advanced_filter:validations.name_max_length')\n      }\n    }\n  };\n  useEffect(() => {\n    afForm.setValue('name', filterDetail.name);\n    afForm.clearErrors();\n  }, [filterDetail]);\n  useEffect(() => {\n    if (afFormSelector.error) {\n      afForm.setError('name', {\n        message: afFormSelector.error\n      });\n    }\n  }, [afFormSelector.error]);\n  useEffect(() => {\n    if (saveAsFormSelector.error) {\n      saveAsForm.setError('save_as_name', {\n        message: saveAsFormSelector.error\n      });\n    }\n  }, [saveAsFormSelector.error]);\n  useEffect(() => {\n    if (saveAsFormSelector.clearError) {\n      saveAsForm.clearErrors();\n    }\n  }, [saveAsFormSelector.clearError]);\n  useEffect(() => {\n    if (afFormSelector.clearError) {\n      afForm.clearErrors();\n    }\n  }, [afFormSelector.clearError]);\n  const onSubmitTreeData = afForm.handleSubmit(data => {\n    dispatch(advancedFilterActions.setFilterDetail(_objectSpread(_objectSpread({}, data), {}, {\n      where_conditions: treeData,\n      sort_conditions: sortData\n    })));\n\n    if (isEditMode) {\n      dispatch(advancedFilterActions.update());\n    } else {\n      dispatch(advancedFilterActions.create());\n    }\n\n    afForm.clearErrors();\n  });\n\n  const onSetDefaultFilter = (_, checked) => {\n    const nameTextBoxValue = afForm.getValues('name');\n    dispatch(advancedFilterActions.setFilterDetail({\n      name: nameTextBoxValue,\n      is_user_default: checked\n    }));\n  };\n\n  const onCloseAdvanceSearch = () => {\n    dispatch(advancedFilterActions.resetState());\n    dispatch(commonStore.actions.setTableState({\n      page: 1\n    }));\n    dispatch(advancedFilterActions.close());\n  };\n\n  const onDeleteFilter = async () => {\n    const title = t('advanced_filter:confirmation.title');\n    const description = t('advanced_filter:confirmation.message_delete');\n    const result = await confirm({\n      title,\n      description\n    });\n\n    if (result === confirmConstant.actionTypes.OK) {\n      dispatch(advancedFilterActions.remove());\n    }\n  };\n\n  const onSaveAsSharedFilter = () => {\n    dispatch(advancedFilterActions.setFilterDetail({\n      is_shared: false,\n      where_conditions: treeData,\n      sort_conditions: sortData\n    }));\n    dispatch(advancedFilterActions.setSaveAsForm({\n      open: true\n    }));\n    const copyName = `Copy of ${filterName}`;\n    saveAsForm.setValue('save_as_name', copyName);\n\n    if (copyName.length > formValidation.name.maxLength.value) {\n      saveAsForm.setError('save_as_name', {\n        type: 'manual',\n        message: formValidation.name.maxLength.message\n      });\n    }\n  };\n\n  const onSubmitToSaveAs = saveAsForm.handleSubmit(data => {\n    dispatch(advancedFilterActions.saveAs(data.save_as_name));\n  });\n\n  const onCloseSaveAsForm = () => {\n    saveAsForm.clearErrors();\n    saveAsForm.reset();\n    dispatch(advancedFilterActions.setSaveAsForm({\n      open: false\n    }));\n  };\n\n  const onApplyAdvanceSearch = () => {\n    const where_conditions = _.cloneDeep(treeData);\n\n    const sort_conditions = _.cloneDeep(sortData);\n\n    dispatch(advancedFilterActions.setDefaultFilter({\n      where_conditions,\n      sort_conditions\n    }));\n    dispatch(advancedFilterActions.apply());\n  };\n\n  const onUpdateSystemFilter = async () => {\n    const title = t('advanced_filter:confirmation.title_warning');\n    const description = t('advanced_filter:confirmation.description_warning');\n    const result = await confirm({\n      title,\n      description\n    });\n\n    if (result === confirmConstant.actionTypes.OK) {\n      dispatch(advancedFilterActions.setFilterDetail({\n        where_conditions: treeData,\n        sort_conditions: sortData\n      }));\n      dispatch(advancedFilterActions.update());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      alignItems: \"center\",\n      spacing: 2,\n      component: \"form\",\n      id: \"af-form\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 7,\n        children: /*#__PURE__*/_jsxDEV(FormControllerTextField, {\n          label: t('advanced_filter:filter_details.name_input'),\n          variant: \"outlined\",\n          name: \"name\",\n          required: true,\n          disabled: isSharedMode,\n          autoFocus: !isSharedMode,\n          control: afForm.control,\n          rules: formValidation.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Unless, {\n        condition: filterDetail.is_system_default,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 5,\n          style: {\n            padding: 0\n          },\n          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            disabled: false,\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              name: \"setAsDefault\",\n              color: \"primary\",\n              checked: isUserDefault,\n              onChange: onSetDefaultFilter,\n              className: classes.checkboxSetDefault\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this),\n            label: /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"span\",\n              variant: \"body2\",\n              children: t('advanced_filter:filter_details.set_as_default')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      value: activeTab,\n      onChange: onChangeActiveTab,\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        label: t('advanced_filter:filter_details.filter_tab')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: t('advanced_filter:filter_details.sort_tab')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MalisPanel, {\n      value: activeTab,\n      index: 0,\n      className: classes.tabPanel,\n      children: /*#__PURE__*/_jsxDEV(ConditionTree, {\n        columnOptions: columnOptions,\n        comparatorOptions: comparatorOptions,\n        conjunctionOptions: conjunctionOptions,\n        data: treeData,\n        maxLevel: 2,\n        disabled: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MalisPanel, {\n      value: activeTab,\n      index: 1,\n      className: classes.tabPanel,\n      children: /*#__PURE__*/_jsxDEV(SortConditionList, {\n        columnOptions: columnOptions,\n        sortOptions: sortOptions,\n        sortData: sortData,\n        disabled: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.wrapButtonGroup,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.wrapButtonLeft,\n        children: [/*#__PURE__*/_jsxDEV(When, {\n          condition: isSharedMode,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: onSaveAsSharedFilter,\n            startIcon: /*#__PURE__*/_jsxDEV(FileCopyIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 83\n            }, this),\n            children: t('common:button.save_as')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(When, {\n          condition: filterDetail.is_system_default && permissions.update_system_default_presets,\n          children: /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: t('advanced_filter:tooltip.update'),\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: onUpdateSystemFilter,\n              style: {\n                marginLeft: '5px'\n              },\n              children: t('common:button.update')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Unless, {\n          condition: isSharedMode,\n          children: /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: isEditMode ? t('advanced_filter:tooltip.update') : t('advanced_filter:tooltip.create'),\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              type: \"submit\",\n              form: \"af-form\",\n              onClick: onSubmitTreeData,\n              startIcon: isEditMode ? /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 41\n              }, this) : /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 56\n              }, this),\n              children: isEditMode ? t('common:button.update') : t('common:button.create')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(When, {\n          condition: !isSharedMode && isEditMode,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"default\",\n            style: {\n              marginLeft: '5px'\n            },\n            onClick: onDeleteFilter,\n            startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 26\n            }, this),\n            children: t('common:button.delete')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.wrapButtonRight,\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: t('advanced_filter:tooltip.apply'),\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: onApplyAdvanceSearch,\n            startIcon: /*#__PURE__*/_jsxDEV(FilterIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 83\n            }, this),\n            children: t('common:button.apply')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: t('advanced_filter:tooltip.close'),\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: onCloseAdvanceSearch,\n            startIcon: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 26\n            }, this),\n            variant: \"contained\",\n            style: {\n              marginLeft: 5\n            },\n            children: t('common:button.close')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogMain, {\n      open: saveAsFormSelector.open,\n      title: t('advanced_filter:confirmation.save_as_title'),\n      maxWidth: \"sm\",\n      loading: loading.dialog,\n      onOk: onSubmitToSaveAs,\n      okText: t('common:button.save'),\n      onClose: onCloseSaveAsForm,\n      closeText: t('common:button.cancel'),\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        style: {\n          marginTop: 8\n        },\n        name: \"save_as_name\",\n        label: t('advanced_filter:filter_details.name_input'),\n        autoFocus: true,\n        required: true,\n        error: Boolean(saveAsForm.errors.save_as_name),\n        helperText: (_saveAsForm$errors$sa = saveAsForm.errors.save_as_name) === null || _saveAsForm$errors$sa === void 0 ? void 0 : _saveAsForm$errors$sa.message,\n        inputRef: saveAsForm.register(formValidation.name)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nexport default FilterDetails;","map":{"version":3,"sources":["D:/TTS_Reactjs/malis-3-frontend/src/components/AdvancedFilter/FilterDetails.tsx"],"names":["useMemo","useEffect","useSelector","useDispatch","useTranslation","useForm","_","Button","Tab","Tabs","Checkbox","TextField","FormControlLabel","Typography","Grid","Tooltip","FileCopy","FileCopyIcon","Edit","EditIcon","Save","SaveIcon","Delete","DeleteIcon","FilterList","FilterIcon","Close","CloseIcon","MalisPanel","DialogMain","useConfirm","confirmConstant","FormControllerTextField","When","Unless","ConditionTree","SortConditionList","useStyles","authStore","advancedFilterActions","commonStore","conjunctions","description","value","FilterDetails","activeTab","onChangeActiveTab","classes","confirm","t","dispatch","columnOptions","selectColumn","comparatorOptions","selectComparator","sortOptions","selectSortOptions","conditionTreeData","selectConditionTree","sortConditions","selectSortConditions","isUserDefault","selectUserDefault","filterName","selectFilterDetailName","isEditMode","selectEditMode","filterDetail","selectFilterDetail","permissions","selectPermissions","loading","selectLoading","afFormSelector","selectAfForm","saveAsFormSelector","selectSaveAsForm","userInfo","selectProfile","isSharedMode","created_by","user_name","conjunctionOptions","treeData","cloneDeep","sortData","saveAsForm","defaultValues","save_as_name","shouldUnregister","afForm","name","formValidation","required","message","maxLength","setValue","clearErrors","error","setError","clearError","onSubmitTreeData","handleSubmit","data","setFilterDetail","where_conditions","sort_conditions","update","create","onSetDefaultFilter","checked","nameTextBoxValue","getValues","is_user_default","onCloseAdvanceSearch","resetState","actions","setTableState","page","close","onDeleteFilter","title","result","actionTypes","OK","remove","onSaveAsSharedFilter","is_shared","setSaveAsForm","open","copyName","length","type","onSubmitToSaveAs","saveAs","onCloseSaveAsForm","reset","onApplyAdvanceSearch","setDefaultFilter","apply","onUpdateSystemFilter","control","is_system_default","padding","checkboxSetDefault","tabPanel","wrapButtonGroup","wrapButtonLeft","update_system_default_presets","marginLeft","wrapButtonRight","dialog","marginTop","Boolean","errors","register"],"mappings":"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","sourcesContent":["import { useMemo, useEffect } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useTranslation } from 'next-i18next'\nimport { useForm } from 'react-hook-form'\n\nimport _ from 'lodash'\n\nimport { Button, Tab, Tabs, Checkbox, TextField, FormControlLabel, Typography, Grid, Tooltip } from '@material-ui/core'\n\nimport {\n  FileCopy as FileCopyIcon,\n  Edit as EditIcon,\n  Save as SaveIcon,\n  Delete as DeleteIcon,\n  FilterList as FilterIcon,\n  Close as CloseIcon\n} from '@material-ui/icons'\n\nimport { MalisPanel, DialogMain, useConfirm, confirmConstant, FormControllerTextField } from '@/components/index'\n\nimport { When, Unless } from 'react-if'\n\nimport ConditionTree from './ConditionTree'\nimport SortConditionList from './SortConditionList'\n\nimport useStyles from './styles'\n\nimport { authStore, advancedFilterActions, commonStore } from '@/store/reducers'\n\nexport const conjunctions = [\n  { description: 'AND', value: 'AND' },\n  { description: 'OR', value: 'OR' }\n]\n\nfunction FilterDetails({ activeTab, onChangeActiveTab }) {\n  // props.entity is the thing that you will pass to the backend to get the corresponding data for each module\n\n  const classes = useStyles()\n  const { confirm } = useConfirm()\n  const { t } = useTranslation(['common', 'advanced_filter'])\n\n  const dispatch = useDispatch()\n  const columnOptions = useSelector(advancedFilterActions.selectColumn)\n  const comparatorOptions = useSelector(advancedFilterActions.selectComparator)\n  const sortOptions = useSelector(advancedFilterActions.selectSortOptions)\n  const conditionTreeData = useSelector(advancedFilterActions.selectConditionTree)\n  const sortConditions = useSelector(advancedFilterActions.selectSortConditions)\n  const isUserDefault = useSelector(advancedFilterActions.selectUserDefault)\n  const filterName = useSelector(advancedFilterActions.selectFilterDetailName)\n  const isEditMode = useSelector(advancedFilterActions.selectEditMode)\n  const filterDetail = useSelector(advancedFilterActions.selectFilterDetail)\n  const permissions = useSelector(advancedFilterActions.selectPermissions)\n  const loading = useSelector(advancedFilterActions.selectLoading)\n\n  const afFormSelector = useSelector(advancedFilterActions.selectAfForm)\n  const saveAsFormSelector = useSelector(advancedFilterActions.selectSaveAsForm)\n\n  const userInfo = useSelector(authStore.selectProfile)\n\n  const isSharedMode = filterDetail.created_by && filterDetail.created_by !== userInfo.user_name\n\n  const conjunctionOptions = conjunctions\n\n  const treeData = useMemo(() => _.cloneDeep(conditionTreeData), [conditionTreeData])\n  const sortData = useMemo(() => _.cloneDeep(sortConditions), [sortConditions])\n\n  const saveAsForm = useForm({\n    defaultValues: { save_as_name: '' },\n    shouldUnregister: false\n  })\n  const afForm = useForm({\n    defaultValues: { name: '' },\n    shouldUnregister: false\n  })\n\n  const formValidation = {\n    name: {\n      required: {\n        value: true,\n        message: t('advanced_filter:validations.name_required')\n      },\n      maxLength: {\n        value: 80,\n        message: t('advanced_filter:validations.name_max_length')\n      }\n    }\n  }\n\n  useEffect(() => {\n    afForm.setValue('name', filterDetail.name)\n    afForm.clearErrors()\n  }, [filterDetail])\n\n  useEffect(() => {\n    if (afFormSelector.error) {\n      afForm.setError('name', { message: afFormSelector.error })\n    }\n  }, [afFormSelector.error])\n\n  useEffect(() => {\n    if (saveAsFormSelector.error) {\n      saveAsForm.setError('save_as_name', { message: saveAsFormSelector.error })\n    }\n  }, [saveAsFormSelector.error])\n\n  useEffect(() => {\n    if (saveAsFormSelector.clearError) {\n      saveAsForm.clearErrors()\n    }\n  }, [saveAsFormSelector.clearError])\n\n  useEffect(() => {\n    if (afFormSelector.clearError) {\n      afForm.clearErrors()\n    }\n  }, [afFormSelector.clearError])\n\n  const onSubmitTreeData = afForm.handleSubmit((data) => {\n    dispatch(\n      advancedFilterActions.setFilterDetail({\n        ...data,\n        where_conditions: treeData,\n        sort_conditions: sortData\n      })\n    )\n    if (isEditMode) {\n      dispatch(advancedFilterActions.update())\n    } else {\n      dispatch(advancedFilterActions.create())\n    }\n    afForm.clearErrors()\n  })\n\n  const onSetDefaultFilter = (_, checked: boolean) => {\n    const nameTextBoxValue = afForm.getValues('name')\n    dispatch(\n      advancedFilterActions.setFilterDetail({\n        name: nameTextBoxValue,\n        is_user_default: checked\n      })\n    )\n  }\n\n  const onCloseAdvanceSearch = () => {\n    dispatch(advancedFilterActions.resetState())\n    dispatch(commonStore.actions.setTableState({ page: 1 }))\n    dispatch(advancedFilterActions.close())\n  }\n\n  const onDeleteFilter = async () => {\n    const title = t('advanced_filter:confirmation.title')\n    const description = t('advanced_filter:confirmation.message_delete')\n    const result = await confirm({ title, description })\n    if (result === confirmConstant.actionTypes.OK) {\n      dispatch(advancedFilterActions.remove())\n    }\n  }\n\n  const onSaveAsSharedFilter = () => {\n    dispatch(\n      advancedFilterActions.setFilterDetail({\n        is_shared: false,\n        where_conditions: treeData,\n        sort_conditions: sortData\n      })\n    )\n    dispatch(advancedFilterActions.setSaveAsForm({ open: true }))\n    const copyName = `Copy of ${filterName}`\n    saveAsForm.setValue('save_as_name', copyName)\n    if (copyName.length > formValidation.name.maxLength.value) {\n      saveAsForm.setError('save_as_name', {\n        type: 'manual',\n        message: formValidation.name.maxLength.message\n      })\n    }\n  }\n\n  const onSubmitToSaveAs = saveAsForm.handleSubmit((data) => {\n    dispatch(advancedFilterActions.saveAs(data.save_as_name))\n  })\n\n  const onCloseSaveAsForm = () => {\n    saveAsForm.clearErrors()\n    saveAsForm.reset()\n    dispatch(advancedFilterActions.setSaveAsForm({ open: false }))\n  }\n\n  const onApplyAdvanceSearch = () => {\n    const where_conditions = _.cloneDeep(treeData)\n    const sort_conditions = _.cloneDeep(sortData)\n    dispatch(\n      advancedFilterActions.setDefaultFilter({\n        where_conditions,\n        sort_conditions\n      })\n    )\n    dispatch(advancedFilterActions.apply())\n  }\n\n  const onUpdateSystemFilter = async () => {\n    const title = t('advanced_filter:confirmation.title_warning')\n    const description = t('advanced_filter:confirmation.description_warning')\n    const result = await confirm({ title, description })\n    if (result === confirmConstant.actionTypes.OK) {\n      dispatch(\n        advancedFilterActions.setFilterDetail({\n          where_conditions: treeData,\n          sort_conditions: sortData\n        })\n      )\n      dispatch(advancedFilterActions.update())\n    }\n  }\n\n  return (\n    <>\n      <Grid container alignItems=\"center\" spacing={2} component=\"form\" id=\"af-form\">\n        <Grid item xs={7}>\n          <FormControllerTextField\n            label={t('advanced_filter:filter_details.name_input')}\n            variant=\"outlined\"\n            name=\"name\"\n            required\n            disabled={isSharedMode}\n            autoFocus={!isSharedMode}\n            control={afForm.control}\n            rules={formValidation.name}\n          />\n        </Grid>\n\n        <Unless condition={filterDetail.is_system_default}>\n          <Grid item xs={5} style={{ padding: 0 }}>\n            <FormControlLabel\n              disabled={false}\n              control={\n                <Checkbox\n                  name=\"setAsDefault\"\n                  color=\"primary\"\n                  checked={isUserDefault}\n                  onChange={onSetDefaultFilter}\n                  className={classes.checkboxSetDefault}\n                />\n              }\n              label={\n                <Typography component=\"span\" variant=\"body2\">\n                  {t('advanced_filter:filter_details.set_as_default')}\n                </Typography>\n              }\n            />\n          </Grid>\n        </Unless>\n      </Grid>\n      <Tabs value={activeTab} onChange={onChangeActiveTab}>\n        <Tab label={t('advanced_filter:filter_details.filter_tab')} />\n        <Tab label={t('advanced_filter:filter_details.sort_tab')} />\n      </Tabs>\n\n      <MalisPanel value={activeTab} index={0} className={classes.tabPanel}>\n        <ConditionTree\n          columnOptions={columnOptions}\n          comparatorOptions={comparatorOptions}\n          conjunctionOptions={conjunctionOptions}\n          data={treeData}\n          maxLevel={2}\n          disabled={false}\n        />\n      </MalisPanel>\n\n      <MalisPanel value={activeTab} index={1} className={classes.tabPanel}>\n        {/* <SortList /> */}\n        <SortConditionList\n          columnOptions={columnOptions}\n          sortOptions={sortOptions}\n          sortData={sortData}\n          disabled={false}\n        />\n      </MalisPanel>\n      <section className={classes.wrapButtonGroup}>\n        <div className={classes.wrapButtonLeft}>\n          <When condition={isSharedMode}>\n            <Button variant=\"contained\" onClick={onSaveAsSharedFilter} startIcon={<FileCopyIcon />}>\n              {t('common:button.save_as')}\n            </Button>\n          </When>\n\n          <When condition={filterDetail.is_system_default && permissions.update_system_default_presets}>\n            <Tooltip title={t('advanced_filter:tooltip.update')}>\n              <Button variant=\"contained\" onClick={onUpdateSystemFilter} style={{ marginLeft: '5px' }}>\n                {t('common:button.update')}\n              </Button>\n            </Tooltip>\n          </When>\n\n          <Unless condition={isSharedMode}>\n            <Tooltip title={isEditMode ? t('advanced_filter:tooltip.update') : t('advanced_filter:tooltip.create')}>\n              <Button\n                variant=\"contained\"\n                type=\"submit\"\n                form=\"af-form\"\n                onClick={onSubmitTreeData}\n                startIcon={isEditMode ? <EditIcon /> : <SaveIcon />}\n              >\n                {isEditMode ? t('common:button.update') : t('common:button.create')}\n              </Button>\n            </Tooltip>\n          </Unless>\n\n          <When condition={!isSharedMode && isEditMode}>\n            <Button\n              variant=\"contained\"\n              color=\"default\"\n              style={{ marginLeft: '5px' }}\n              onClick={onDeleteFilter}\n              startIcon={<DeleteIcon />}\n            >\n              {t('common:button.delete')}\n            </Button>\n          </When>\n        </div>\n        <div className={classes.wrapButtonRight}>\n          <Tooltip title={t('advanced_filter:tooltip.apply')}>\n            <Button variant=\"contained\" onClick={onApplyAdvanceSearch} startIcon={<FilterIcon />}>\n              {t('common:button.apply')}\n            </Button>\n          </Tooltip>\n          <Tooltip title={t('advanced_filter:tooltip.close')}>\n            <Button\n              onClick={onCloseAdvanceSearch}\n              startIcon={<CloseIcon />}\n              variant=\"contained\"\n              style={{ marginLeft: 5 }}\n            >\n              {t('common:button.close')}\n            </Button>\n          </Tooltip>\n        </div>\n      </section>\n\n      <DialogMain\n        open={saveAsFormSelector.open}\n        title={t('advanced_filter:confirmation.save_as_title')}\n        maxWidth=\"sm\"\n        loading={loading.dialog}\n        onOk={onSubmitToSaveAs}\n        okText={t('common:button.save')}\n        onClose={onCloseSaveAsForm}\n        closeText={t('common:button.cancel')}\n      >\n        <TextField\n          style={{ marginTop: 8 }}\n          name=\"save_as_name\"\n          label={t('advanced_filter:filter_details.name_input')}\n          autoFocus\n          required\n          error={Boolean(saveAsForm.errors.save_as_name)}\n          helperText={saveAsForm.errors.save_as_name?.message}\n          inputRef={saveAsForm.register(formValidation.name)}\n        />\n      </DialogMain>\n    </>\n  )\n}\n\nexport default FilterDetails\n"]},"metadata":{},"sourceType":"module"}